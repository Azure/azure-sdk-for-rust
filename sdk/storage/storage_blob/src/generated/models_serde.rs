// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{
    RequestContent, Response, Result,
};
use crate::models::{
    BlobTags, BlockLookupList, FilterBlobSegment, QueryRequest, StorageServiceProperties, StorageServiceStats, UserDelegationKey,
};
use typespec_client_core::xml::to_xml;

impl TryFrom<BlobTags> for RequestContent<BlobTags> {
    type Error = azure_core::Error;
    fn try_from(value: BlobTags) -> Result<Self> {
        RequestContent::try_from(to_xml(&value)?)
    }
}

impl TryFrom<Response<BlobTags>> for BlobTags {
    type Error = azure_core::Error;
    fn try_from(value: Response<BlobTags>) -> Result<Self> {
        let f = || value.into_body().xml::<BlobTags>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<BlockLookupList> for RequestContent<BlockLookupList> {
    type Error = azure_core::Error;
    fn try_from(value: BlockLookupList) -> Result<Self> {
        RequestContent::try_from(to_xml(&value)?)
    }
}

impl TryFrom<Response<BlockLookupList>> for BlockLookupList {
    type Error = azure_core::Error;
    fn try_from(value: Response<BlockLookupList>) -> Result<Self> {
        let f = || value.into_body().xml::<BlockLookupList>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<FilterBlobSegment>> for FilterBlobSegment {
    type Error = azure_core::Error;
    fn try_from(value: Response<FilterBlobSegment>) -> Result<Self> {
        let f = || value.into_body().xml::<FilterBlobSegment>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<QueryRequest> for RequestContent<QueryRequest> {
    type Error = azure_core::Error;
    fn try_from(value: QueryRequest) -> Result<Self> {
        RequestContent::try_from(to_xml(&value)?)
    }
}

impl TryFrom<Response<StorageServiceProperties>> for StorageServiceProperties {
    type Error = azure_core::Error;
    fn try_from(value: Response<StorageServiceProperties>) -> Result<Self> {
        let f = || value.into_body().xml::<StorageServiceProperties>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<StorageServiceStats>> for StorageServiceStats {
    type Error = azure_core::Error;
    fn try_from(value: Response<StorageServiceStats>) -> Result<Self> {
        let f = || value.into_body().xml::<StorageServiceStats>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<UserDelegationKey>> for UserDelegationKey {
    type Error = azure_core::Error;
    fn try_from(value: Response<UserDelegationKey>) -> Result<Self> {
        let f = || value.into_body().xml::<UserDelegationKey>();
        let r = block_on(f())?;
        Ok(r)
    }
}

