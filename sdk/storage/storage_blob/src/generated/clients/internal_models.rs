// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::xml_helpers::CorsCorsRule;
use crate::models::{CorsRule, Logging, Metrics, RetentionPolicy, StaticWebsite};
use azure_core::{RequestContent, Result};
use serde::{Deserialize, Serialize};
use typespec_client_core::xml::to_xml;
use typespec_macros::Model;

#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct GetUserDelegationKeyRequest {
    /// The date-time the key expires.
    #[serde(rename = "Expiry")]
    pub expiry: String,

    /// The date-time the key is active.
    #[serde(rename = "Start")]
    pub start: String,
}

#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct SetPropertiesRequest {
    /// The CORS properties.
    #[serde(
        rename = "Cors",
        deserialize_with = "CorsCorsRule::unwrap",
        serialize_with = "CorsCorsRule::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub cors: Option<Vec<CorsRule>>,

    /// The default service version.
    #[serde(
        rename = "DefaultServiceVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_service_version: Option<String>,

    /// The delete retention policy.
    #[serde(
        rename = "DeleteRetentionPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_retention_policy: Option<RetentionPolicy>,

    /// The hour metrics properties.
    #[serde(rename = "HourMetrics", skip_serializing_if = "Option::is_none")]
    pub hour_metrics: Option<Metrics>,

    /// The logging properties.
    #[serde(rename = "Logging", skip_serializing_if = "Option::is_none")]
    pub logging: Option<Logging>,

    /// The minute metrics properties.
    #[serde(rename = "MinuteMetrics", skip_serializing_if = "Option::is_none")]
    pub minute_metrics: Option<Metrics>,

    /// The static website properties.
    #[serde(rename = "StaticWebsite", skip_serializing_if = "Option::is_none")]
    pub static_website: Option<StaticWebsite>,
}

impl TryFrom<GetUserDelegationKeyRequest> for RequestContent<GetUserDelegationKeyRequest> {
    type Error = azure_core::Error;
    fn try_from(value: GetUserDelegationKeyRequest) -> Result<Self> {
        RequestContent::try_from(to_xml(&value)?)
    }
}

impl TryFrom<SetPropertiesRequest> for RequestContent<SetPropertiesRequest> {
    type Error = azure_core::Error;
    fn try_from(value: SetPropertiesRequest) -> Result<Self> {
        RequestContent::try_from(to_xml(&value)?)
    }
}
