// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::{
    ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent, Response, Result, Url,
};
use crate::models::{
    CorsRule, FilterBlobSegment, FilterBlobsIncludeItem, Logging, Metrics, RetentionPolicy, StaticWebsite, StorageServiceProperties, StorageServiceStats, UserDelegationKey,
};
use super::internal_models::{
    GetUserDelegationKeyRequest, SetPropertiesRequest,
};

pub struct BlobServiceClient {
    pub(crate) container_name: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl BlobServiceClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Filter Blobs operation enables callers to list blobs across all containers whose tags match a given search expression.
    pub async fn filter_blobs(&self, version: String, options: Option<BlobServiceClientFilterBlobsOptions<'_>>) -> Result<Response<FilterBlobSegment>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "blobs");
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair("include", &include.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(","));
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut().append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(where_param) = options.where_param {
            url.query_pairs_mut().append_pair("where", &where_param);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Returns the sku name and account kind.
    pub async fn get_account_info(&self, version: String, options: Option<BlobServiceClientGetAccountInfoOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "properties").append_pair("restype", "account");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Retrieves properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin
/// Resource Sharing) rules.
    pub async fn get_properties(&self, version: String, options: Option<BlobServiceClientGetPropertiesOptions<'_>>) -> Result<Response<StorageServiceProperties>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "properties").append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint
/// when read-access geo-redundant replication is enabled for the storage account.
    pub async fn get_statistics(&self, version: String, options: Option<BlobServiceClientGetStatisticsOptions<'_>>) -> Result<Response<StorageServiceStats>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "stats").append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Retrieves a user delegation key for the Blob service. This is only a valid operation when using bearer token authentication.
    pub async fn get_user_delegation_key(&self, version: String, start: String, expiry: String, options: Option<BlobServiceClientGetUserDelegationKeyOptions<'_>>) -> Result<Response<UserDelegationKey>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "userdelegationkey").append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        let body: RequestContent<GetUserDelegationKeyRequest> = GetUserDelegationKeyRequest {
            start,
            expiry,
        }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin
/// Resource Sharing) rules
    pub async fn set_properties(&self, version: String, options: Option<BlobServiceClientSetPropertiesOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "properties").append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        let body: RequestContent<SetPropertiesRequest> = SetPropertiesRequest {
            logging: options.logging,
            hour_metrics: options.hour_metrics,
            minute_metrics: options.minute_metrics,
            cors: options.cors,
            default_service_version: options.default_service_version,
            delete_retention_policy: options.delete_retention_policy,
            static_website: options.static_website,
        }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Batch operation allows multiple API calls to be embedded into a single HTTP request.
    pub async fn submit_batch(&self, version: String, content_length: i64, body: RequestContent<Vec<u8>>, options: Option<BlobServiceClientSubmitBatchOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.set_path("/");
        url.query_pairs_mut().append_pair("comp", "batch");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "multipart/mixed");
        request.insert_header("content-length", content_length.to_string());
        request.insert_header("content-type", "multipart/mixed");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await

    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientFilterBlobsOptions<'a> {
    pub client_request_id: Option<String>,
    pub include: Option<Vec<FilterBlobsIncludeItem>>,
    pub marker: Option<String>,
    pub maxresults: Option<i32>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
    pub where_param: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientGetAccountInfoOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientGetPropertiesOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientGetStatisticsOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientGetUserDelegationKeyOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientSetPropertiesOptions<'a> {
    pub client_request_id: Option<String>,
    pub cors: Option<Vec<CorsRule>>,
    pub default_service_version: Option<String>,
    pub delete_retention_policy: Option<RetentionPolicy>,
    pub hour_metrics: Option<Metrics>,
    pub logging: Option<Logging>,
    pub method_options: ClientMethodOptions<'a>,
    pub minute_metrics: Option<Metrics>,
    pub static_website: Option<StaticWebsite>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobServiceClientSubmitBatchOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


