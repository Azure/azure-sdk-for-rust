// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::{
    ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent, Response, Result, Url, base64,
};
use crate::models::{
    AccessTier, BlobDeleteType, BlobExpiryOptions, BlobImmutabilityPolicyMode, BlobTags, DeleteSnapshotsOptionType, EncryptionAlgorithmType, QueryRequest, RehydratePriority,
};
use std::collections::HashMap;
use time::OffsetDateTime;

pub struct BlobBlobClient {
    pub(crate) container_name: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl BlobBlobClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with zero length
/// and full metadata.
    pub async fn abort_copy_from_url(&self, version: String, container_name: String, blob: String, copy_id: String, options: Option<BlobBlobClientAbortCopyFromUrlOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "copy").append_key_only("copyid");
        url.query_pairs_mut().append_pair("copyid", &copy_id);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
    pub async fn acquire_lease(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientAcquireLeaseOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_key_only("acquire").append_pair("comp", "lease");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(duration) = options.duration {
            request.insert_header("x-ms-lease-duration", duration.to_string());
        }
        if let Some(proposed_lease_id) = options.proposed_lease_id {
            request.insert_header("x-ms-proposed-lease-id", proposed_lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
    pub async fn break_lease(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientBreakLeaseOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_key_only("break").append_pair("comp", "lease");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(break_period) = options.break_period {
            request.insert_header("x-ms-lease-break-period", break_period.to_string());
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
    pub async fn change_lease(&self, version: String, container_name: String, blob: String, lease_id: String, options: Option<BlobBlobClientChangeLeaseOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_key_only("change").append_pair("comp", "lease");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        request.insert_header("x-ms-lease-id", lease_id);
        if let Some(proposed_lease_id) = options.proposed_lease_id {
            request.insert_header("x-ms-proposed-lease-id", proposed_lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response until the
/// copy is complete.
    pub async fn copy_from_url(&self, version: String, container_name: String, blob: String, copy_source: String, options: Option<BlobBlobClientCopyFromUrlOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "copy").append_key_only("sync");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(tier) = options.tier {
            request.insert_header("x-ms-access-tier", tier.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-copy-source", copy_source);
        if let Some(copy_source_authorization) = options.copy_source_authorization {
            request.insert_header("x-ms-copy-source-authorization", copy_source_authorization);
        }
        if let Some(copy_source_tags) = options.copy_source_tags {
            request.insert_header("x-ms-copy-source-tags", copy_source_tags);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(immutability_policy_mode) = options.immutability_policy_mode {
            request.insert_header("x-ms-immutability-policy-mode", immutability_policy_mode.to_string());
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header("x-ms-immutability-policy-until-date", immutability_policy_expiry);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(legal_hold) = options.legal_hold {
            request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        }
        if let Some(metadata) = options.metadata {
for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        if let Some(source_content_md5) = options.source_content_md5 {
            request.insert_header("x-ms-source-content-md5", source_content_md5);
        }
        if let Some(source_if_match) = options.source_if_match {
            request.insert_header("x-ms-source-if-match", source_if_match);
        }
        if let Some(source_if_modified_since) = options.source_if_modified_since {
            request.insert_header("x-ms-source-if-modified-since", source_if_modified_since);
        }
        if let Some(source_if_none_match) = options.source_if_none_match {
            request.insert_header("x-ms-source-if-none-match", source_if_none_match);
        }
        if let Some(source_if_unmodified_since) = options.source_if_unmodified_since {
            request.insert_header("x-ms-source-if-unmodified-since", source_if_unmodified_since);
        }
        if let Some(blob_tags_string) = options.blob_tags_string {
            request.insert_header("x-ms-tags", blob_tags_string);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Create Snapshot operation creates a read-only snapshot of a blob
    pub async fn create_snapshot(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientCreateSnapshotOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "snapshot");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm.to_string());
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(metadata) = options.metadata {
for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed from
/// the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted, it is marked
/// for deletion and becomes inaccessible immediately. However, the blob service retains the blob or snapshot for the number
/// of days specified by the DeleteRetentionPolicy section of [Storage service properties] (Set-Blob-Service-Properties.md).
/// After the specified number of days has passed, the blob's data is permanently removed from the storage account. Note that
/// you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use the List Blobs API
/// and specify the \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You
/// can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot
/// causes the service to return an HTTP status code of 404 (ResourceNotFound).
    pub async fn delete(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientDeleteOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        if let Some(blob_delete_type) = options.blob_delete_type {
            url.query_pairs_mut().append_pair("deletetype", &blob_delete_type.to_string());
        }
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(delete_snapshots) = options.delete_snapshots {
            request.insert_header("x-ms-delete-snapshots", delete_snapshots.to_string());
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Delete Immutability Policy operation deletes the immutability policy on the blob.
    pub async fn delete_immutability_policy(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientDeleteImmutabilityPolicyOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "immutabilityPolicies");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Download operation reads or downloads a blob from the system, including its metadata and properties. You can also
/// call Download to read a snapshot.
    pub async fn download(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientDownloadOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/octet-stream");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm.to_string());
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(range) = options.range {
            request.insert_header("x-ms-range", range);
        }
        if let Some(range_get_content_crc64) = options.range_get_content_crc64 {
            request.insert_header("x-ms-range-get-content-crc64", range_get_content_crc64.to_string());
        }
        if let Some(range_get_content_md5) = options.range_get_content_md5 {
            request.insert_header("x-ms-range-get-content-md5", range_get_content_md5.to_string());
        }
        if let Some(structured_body_type) = options.structured_body_type {
            request.insert_header("x-ms-structured-body", structured_body_type);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Returns the sku name and account kind
    pub async fn get_account_info(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientGetAccountInfoOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_key_only("blob").append_pair("comp", "properties").append_pair("restype", "account");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties for the
/// blob. It does not return the content of the blob.
    pub async fn get_properties(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientGetPropertiesOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Head);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/octet-stream");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm.to_string());
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Get Blob Tags operation enables users to get tags on a blob.
    pub async fn get_tags(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientGetTagsOptions<'_>>) -> Result<Response<BlobTags>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "tags");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Query operation enables users to select/project on blob data by providing simple query expressions.
    pub async fn query(&self, version: String, container_name: String, blob: String, query_request: RequestContent<QueryRequest>, options: Option<BlobBlobClientQueryOptions<'_>>) -> Result<Response<Vec<u8>>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "query");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm.to_string());
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        request.set_body(query_request);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
    pub async fn release_lease(&self, version: String, container_name: String, blob: String, lease_id: String, options: Option<BlobBlobClientReleaseLeaseOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "lease").append_key_only("release");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        request.insert_header("x-ms-lease-id", lease_id);
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
    pub async fn renew_lease(&self, version: String, container_name: String, blob: String, lease_id: String, options: Option<BlobBlobClientRenewLeaseOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "lease").append_key_only("renew");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        request.insert_header("x-ms-lease-id", lease_id);
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Set the expiration time of a blob
    pub async fn set_expiry(&self, version: String, container_name: String, blob: String, expiry_options: BlobExpiryOptions, options: Option<BlobBlobClientSetExpiryOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "expiry");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-expiry-option", expiry_options.to_string());
        if let Some(expires_on) = options.expires_on {
            request.insert_header("x-ms-expiry-time", expires_on);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Set HTTP Headers operation sets system properties on the blob.
    pub async fn set_http_headers(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientSetHttpHeadersOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_key_only("SetHTTPHeaders").append_pair("comp", "properties");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(blob_cache_control) = options.blob_cache_control {
            request.insert_header("x-ms-blob-cache-control", blob_cache_control);
        }
        if let Some(blob_content_disposition) = options.blob_content_disposition {
            request.insert_header("x-ms-blob-content-disposition", blob_content_disposition);
        }
        if let Some(blob_content_encoding) = options.blob_content_encoding {
            request.insert_header("x-ms-blob-content-encoding", blob_content_encoding);
        }
        if let Some(blob_content_language) = options.blob_content_language {
            request.insert_header("x-ms-blob-content-language", blob_content_language);
        }
        if let Some(blob_content_md5) = options.blob_content_md5 {
            request.insert_header("x-ms-blob-content-md5", base64::encode(blob_content_md5));
        }
        if let Some(blob_content_type) = options.blob_content_type {
            request.insert_header("x-ms-blob-content-type", blob_content_type);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Set the immutability policy of a blob
    pub async fn set_immutability_policy(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientSetImmutabilityPolicyOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "immutabilityPolicies");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(immutability_policy_mode) = options.immutability_policy_mode {
            request.insert_header("x-ms-immutability-policy-mode", immutability_policy_mode.to_string());
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header("x-ms-immutability-policy-until-date", immutability_policy_expiry);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Set Legal Hold operation sets a legal hold on the blob.
    pub async fn set_legal_hold(&self, version: String, container_name: String, blob: String, legal_hold: bool, options: Option<BlobBlobClientSetLegalHoldOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "legalhold");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
    pub async fn set_metadata(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientSetMetadataOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "metadata");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm.to_string());
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(metadata) = options.metadata {
for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Set Tags operation enables users to set tags on a blob.
    pub async fn set_tags(&self, version: String, container_name: String, blob: String, tags: RequestContent<BlobTags>, options: Option<BlobBlobClientSetTagsOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "tags");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(transactional_content_md5) = options.transactional_content_md5 {
            request.insert_header("content-md5", transactional_content_md5);
        }
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(transactional_content_crc64) = options.transactional_content_crc64 {
            request.insert_header("x-ms-content-crc64", transactional_content_crc64);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version);
        request.set_body(tags);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but not on
/// an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
/// ETag.
    pub async fn set_tier(&self, version: String, container_name: String, blob: String, tier: AccessTier, options: Option<BlobBlobClientSetTierOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "tier");
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        if let Some(version_id) = options.version_id {
            url.query_pairs_mut().append_pair("versionid", &version_id);
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        request.insert_header("x-ms-access-tier", tier.to_string());
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(rehydrate_priority) = options.rehydrate_priority {
            request.insert_header("x-ms-rehydrate-priority", rehydrate_priority.to_string());
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// The Start Copy From URL operation copies a blob or an internet resource to a new blob.
    pub async fn start_copy_from_url(&self, version: String, container_name: String, blob: String, copy_source: String, options: Option<BlobBlobClientStartCopyFromUrlOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "copy");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(tier) = options.tier {
            request.insert_header("x-ms-access-tier", tier.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-copy-source", copy_source);
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(immutability_policy_mode) = options.immutability_policy_mode {
            request.insert_header("x-ms-immutability-policy-mode", immutability_policy_mode.to_string());
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header("x-ms-immutability-policy-until-date", immutability_policy_expiry);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(legal_hold) = options.legal_hold {
            request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        }
        if let Some(metadata) = options.metadata {
for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        if let Some(rehydrate_priority) = options.rehydrate_priority {
            request.insert_header("x-ms-rehydrate-priority", rehydrate_priority.to_string());
        }
        if let Some(seal_blob) = options.seal_blob {
            request.insert_header("x-ms-seal-blob", seal_blob.to_string());
        }
        if let Some(source_if_match) = options.source_if_match {
            request.insert_header("x-ms-source-if-match", source_if_match);
        }
        if let Some(source_if_modified_since) = options.source_if_modified_since {
            request.insert_header("x-ms-source-if-modified-since", source_if_modified_since);
        }
        if let Some(source_if_none_match) = options.source_if_none_match {
            request.insert_header("x-ms-source-if-none-match", source_if_none_match);
        }
        if let Some(source_if_tags) = options.source_if_tags {
            request.insert_header("x-ms-source-if-tags", source_if_tags);
        }
        if let Some(source_if_unmodified_since) = options.source_if_unmodified_since {
            request.insert_header("x-ms-source-if-unmodified-since", source_if_unmodified_since);
        }
        if let Some(blob_tags_string) = options.blob_tags_string {
            request.insert_header("x-ms-tags", blob_tags_string);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }

    /// Undelete a blob that was previously soft deleted
    pub async fn undelete(&self, version: String, container_name: String, blob: String, options: Option<BlobBlobClientUndeleteOptions<'_>>) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}");
        path = path.replace("{blob}", &blob);
        path = path.replace("{containerName}", &container_name);
        url.set_path(&path);
        url.query_pairs_mut().append_pair("comp", "undelete");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut().append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", version);
        self.pipeline.send(&mut ctx, &mut request).await

    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientAbortCopyFromUrlOptions<'a> {
    pub client_request_id: Option<String>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientAcquireLeaseOptions<'a> {
    pub client_request_id: Option<String>,
    pub duration: Option<i32>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub method_options: ClientMethodOptions<'a>,
    pub proposed_lease_id: Option<String>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientBreakLeaseOptions<'a> {
    pub break_period: Option<i32>,
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientChangeLeaseOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub method_options: ClientMethodOptions<'a>,
    pub proposed_lease_id: Option<String>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientCopyFromUrlOptions<'a> {
    pub blob_tags_string: Option<String>,
    pub client_request_id: Option<String>,
    pub copy_source_authorization: Option<String>,
    pub copy_source_tags: Option<String>,
    pub encryption_scope: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub immutability_policy_expiry: Option<String>,
    pub immutability_policy_mode: Option<BlobImmutabilityPolicyMode>,
    pub lease_id: Option<String>,
    pub legal_hold: Option<bool>,
    pub metadata: Option<HashMap<String, String>>,
    pub method_options: ClientMethodOptions<'a>,
    pub source_content_md5: Option<String>,
    pub source_if_match: Option<String>,
    pub source_if_modified_since: Option<String>,
    pub source_if_none_match: Option<String>,
    pub source_if_unmodified_since: Option<String>,
    pub tier: Option<AccessTier>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientCreateSnapshotOptions<'a> {
    pub client_request_id: Option<String>,
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,
    pub encryption_key: Option<String>,
    pub encryption_key_sha256: Option<String>,
    pub encryption_scope: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub metadata: Option<HashMap<String, String>>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientDeleteOptions<'a> {
    pub blob_delete_type: Option<BlobDeleteType>,
    pub client_request_id: Option<String>,
    pub delete_snapshots: Option<DeleteSnapshotsOptionType>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientDeleteImmutabilityPolicyOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientDownloadOptions<'a> {
    pub client_request_id: Option<String>,
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,
    pub encryption_key: Option<String>,
    pub encryption_key_sha256: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub range: Option<String>,
    pub range_get_content_crc64: Option<bool>,
    pub range_get_content_md5: Option<bool>,
    pub snapshot: Option<String>,
    pub structured_body_type: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientGetAccountInfoOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientGetPropertiesOptions<'a> {
    pub client_request_id: Option<String>,
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,
    pub encryption_key: Option<String>,
    pub encryption_key_sha256: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientGetTagsOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_tags: Option<String>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientQueryOptions<'a> {
    pub client_request_id: Option<String>,
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,
    pub encryption_key: Option<String>,
    pub encryption_key_sha256: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientReleaseLeaseOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientRenewLeaseOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetExpiryOptions<'a> {
    pub client_request_id: Option<String>,
    pub expires_on: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetHttpHeadersOptions<'a> {
    pub blob_cache_control: Option<String>,
    pub blob_content_disposition: Option<String>,
    pub blob_content_encoding: Option<String>,
    pub blob_content_language: Option<String>,
    pub blob_content_md5: Option<Vec<u8>>,
    pub blob_content_type: Option<String>,
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetImmutabilityPolicyOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_unmodified_since: Option<String>,
    pub immutability_policy_expiry: Option<String>,
    pub immutability_policy_mode: Option<BlobImmutabilityPolicyMode>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetLegalHoldOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetMetadataOptions<'a> {
    pub client_request_id: Option<String>,
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,
    pub encryption_key: Option<String>,
    pub encryption_key_sha256: Option<String>,
    pub encryption_scope: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub lease_id: Option<String>,
    pub metadata: Option<HashMap<String, String>>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetTagsOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_tags: Option<String>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
    pub transactional_content_crc64: Option<String>,
    pub transactional_content_md5: Option<String>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientSetTierOptions<'a> {
    pub client_request_id: Option<String>,
    pub if_tags: Option<String>,
    pub lease_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub rehydrate_priority: Option<RehydratePriority>,
    pub snapshot: Option<String>,
    pub timeout: Option<i32>,
    pub version_id: Option<String>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientStartCopyFromUrlOptions<'a> {
    pub blob_tags_string: Option<String>,
    pub client_request_id: Option<String>,
    pub if_match: Option<String>,
    pub if_modified_since: Option<OffsetDateTime>,
    pub if_none_match: Option<String>,
    pub if_tags: Option<String>,
    pub if_unmodified_since: Option<OffsetDateTime>,
    pub immutability_policy_expiry: Option<String>,
    pub immutability_policy_mode: Option<BlobImmutabilityPolicyMode>,
    pub lease_id: Option<String>,
    pub legal_hold: Option<bool>,
    pub metadata: Option<HashMap<String, String>>,
    pub method_options: ClientMethodOptions<'a>,
    pub rehydrate_priority: Option<RehydratePriority>,
    pub seal_blob: Option<bool>,
    pub source_if_match: Option<String>,
    pub source_if_modified_since: Option<String>,
    pub source_if_none_match: Option<String>,
    pub source_if_tags: Option<String>,
    pub source_if_unmodified_since: Option<String>,
    pub tier: Option<AccessTier>,
    pub timeout: Option<i32>,
}


#[derive(Clone, Debug, Default)]
pub struct BlobBlobClientUndeleteOptions<'a> {
    pub client_request_id: Option<String>,
    pub method_options: ClientMethodOptions<'a>,
    pub timeout: Option<i32>,
}


