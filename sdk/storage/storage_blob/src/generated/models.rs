// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{GeoReplicationStatusType, QueryRequestType, QueryType};
use crate::{
    generated::xml_helpers::Blob_tag_setBlobTag, generated::xml_helpers::BlobsFilterBlobItem,
    generated::xml_helpers::CorsCorsRule, generated::xml_helpers::SchemaArrowField,
};
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use typespec_macros::Model;

/// Represents an access policy.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct AccessPolicy {
    /// The date-time the policy expires.
    #[serde(rename = "Expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<OffsetDateTime>,

    /// The permissions for acl the policy.
    #[serde(rename = "Permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,

    /// The date-time the policy is active.
    #[serde(rename = "Start", skip_serializing_if = "Option::is_none")]
    pub start: Option<OffsetDateTime>,
}

/// Represents the Apache Arrow configuration.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct ArrowConfiguration {
    /// The Apache Arrow schema
    #[serde(
        rename = "Schema",
        deserialize_with = "SchemaArrowField::unwrap",
        serialize_with = "SchemaArrowField::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub schema: Option<Vec<ArrowField>>,
}

/// Represents an Apache Arrow field.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "Field")]
pub struct ArrowField {
    /// The arrow field name.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The arrow field precision.
    #[serde(rename = "Precision", skip_serializing_if = "Option::is_none")]
    pub precision: Option<i32>,

    /// The arrow field scale.
    #[serde(rename = "Scale", skip_serializing_if = "Option::is_none")]
    pub scale: Option<i32>,

    /// The arrow field type.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The blob tags.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "Tag")]
pub struct BlobTag {
    /// The key of the tag.
    #[serde(rename = "Key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,

    /// The value of the tag.
    #[serde(rename = "Value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Represents blob tags.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "Tags")]
pub struct BlobTags {
    /// Represents the blob tags.
    #[serde(
        rename = "TagSet",
        deserialize_with = "Blob_tag_setBlobTag::unwrap",
        serialize_with = "Blob_tag_setBlobTag::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub blob_tag_set: Option<Vec<BlobTag>>,
}

/// The Block lookup list.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "BlockList")]
pub struct BlockLookupList {
    /// The committed blocks
    #[serde(rename = "Committed", skip_serializing_if = "Option::is_none")]
    pub committed: Option<Vec<String>>,

    /// The latest blocks
    #[serde(rename = "Latest", skip_serializing_if = "Option::is_none")]
    pub latest: Option<Vec<String>>,

    /// The uncommitted blocks
    #[serde(rename = "Uncommitted", skip_serializing_if = "Option::is_none")]
    pub uncommitted: Option<Vec<String>>,
}

/// CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain.
/// Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in
/// a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct CorsRule {
    /// The allowed headers.
    #[serde(rename = "AllowedHeaders", skip_serializing_if = "Option::is_none")]
    pub allowed_headers: Option<String>,

    /// The allowed methods.
    #[serde(rename = "AllowedMethods", skip_serializing_if = "Option::is_none")]
    pub allowed_methods: Option<String>,

    /// The allowed origins.
    #[serde(rename = "AllowedOrigins", skip_serializing_if = "Option::is_none")]
    pub allowed_origins: Option<String>,

    /// The exposed headers.
    #[serde(rename = "ExposedHeaders", skip_serializing_if = "Option::is_none")]
    pub exposed_headers: Option<String>,

    /// The maximum age in seconds.
    #[serde(rename = "MaxAgeInSeconds", skip_serializing_if = "Option::is_none")]
    pub max_age_in_seconds: Option<i32>,
}

/// Represents the delimited text configuration.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct DelimitedTextConfiguration {
    /// The string used to separate columns.
    #[serde(rename = "ColumnSeparator", skip_serializing_if = "Option::is_none")]
    pub column_separator: Option<String>,

    /// The string used to escape a quote character in a field.
    #[serde(rename = "EscapeChar", skip_serializing_if = "Option::is_none")]
    pub escape_char: Option<String>,

    /// The string used to quote a specific field.
    #[serde(rename = "FieldQuote", skip_serializing_if = "Option::is_none")]
    pub field_quote: Option<String>,

    /// Represents whether the data has headers.
    #[serde(rename = "HasHeaders", skip_serializing_if = "Option::is_none")]
    pub headers_present: Option<bool>,

    /// The string used to separate records.
    #[serde(rename = "RecordSeparator", skip_serializing_if = "Option::is_none")]
    pub record_separator: Option<String>,
}

/// The filter blob item.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "Blob")]
pub struct FilterBlobItem {
    /// The properties of the blob.
    #[serde(rename = "ContainerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,

    /// Whether it is the current version of the blob
    #[serde(rename = "IsCurrentVersion", skip_serializing_if = "Option::is_none")]
    pub is_current_version: Option<bool>,

    /// The name of the blob.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The metadata of the blob.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<BlobTags>,

    /// The version ID of the blob.
    #[serde(rename = "VersionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
}

/// The result of a Filter Blobs API call
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "EnumerationResults")]
pub struct FilterBlobSegment {
    /// The blob segment.
    #[serde(
        rename = "Blobs",
        deserialize_with = "BlobsFilterBlobItem::unwrap",
        serialize_with = "BlobsFilterBlobItem::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub blobs: Option<Vec<FilterBlobItem>>,

    /// The next marker of the blobs.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The service endpoint.
    #[serde(rename = "@ServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub service_endpoint: Option<String>,

    /// The filter for the blobs.
    #[serde(rename = "Where", skip_serializing_if = "Option::is_none")]
    pub where_prop: Option<String>,
}

/// Geo-Replication information for the Secondary Storage Service
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct GeoReplication {
    /// A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read
    /// operations at the secondary. Primary writes after this point in time may or may not be available for reads.
    #[serde(rename = "LastSyncTime", skip_serializing_if = "Option::is_none")]
    pub last_sync_time: Option<String>,

    /// The status of the secondary location
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<GeoReplicationStatusType>,
}

/// Represents the JSON text configuration.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct JsonTextConfiguration {
    /// The string used to separate records.
    #[serde(rename = "RecordSeparator", skip_serializing_if = "Option::is_none")]
    pub record_separator: Option<String>,
}

/// Azure Analytics Logging settings.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct Logging {
    /// Whether delete operation is logged.
    #[serde(rename = "Delete", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,

    /// Whether read operation is logged.
    #[serde(rename = "Read", skip_serializing_if = "Option::is_none")]
    pub read: Option<bool>,

    /// The retention policy of the logs.
    #[serde(rename = "RetentionPolicy", skip_serializing_if = "Option::is_none")]
    pub retention_policy: Option<RetentionPolicy>,

    /// The version of the logging properties.
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,

    /// Whether write operation is logged.
    #[serde(rename = "Write", skip_serializing_if = "Option::is_none")]
    pub write: Option<bool>,
}

/// The metrics properties.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct Metrics {
    /// Whether it is enabled.
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// Whether to include API in the metrics.
    #[serde(rename = "IncludeAPIs", skip_serializing_if = "Option::is_none")]
    pub include_apis: Option<bool>,

    /// The retention policy of the metrics.
    #[serde(rename = "RetentionPolicy", skip_serializing_if = "Option::is_none")]
    pub retention_policy: Option<RetentionPolicy>,

    /// The version of the metrics properties.
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Represents the Parquet configuration.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct ParquetConfiguration {}

/// The query format settings.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct QueryFormat {
    /// The Apache Arrow configuration.
    #[serde(rename = "ArrowConfiguration", skip_serializing_if = "Option::is_none")]
    pub arrow_configuration: Option<ArrowConfiguration>,

    /// The delimited text configuration.
    #[serde(
        rename = "DelimitedTextConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub delimited_text_configuration: Option<DelimitedTextConfiguration>,

    /// The JSON text configuration.
    #[serde(
        rename = "JsonTextConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub json_text_configuration: Option<JsonTextConfiguration>,

    /// The Parquet configuration.
    #[serde(
        rename = "ParquetConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub parquet_text_configuration: Option<ParquetConfiguration>,

    /// The query type.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<QueryType>,
}

/// Groups the set of query request settings.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct QueryRequest {
    /// The query expression in SQL. The maximum size of the query expression is 256KiB.
    #[serde(rename = "Expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    /// The input serialization settings.
    #[serde(rename = "InputSerialization", skip_serializing_if = "Option::is_none")]
    pub input_serialization: Option<QuerySerialization>,

    /// The output serialization settings.
    #[serde(
        rename = "OutputSerialization",
        skip_serializing_if = "Option::is_none"
    )]
    pub output_serialization: Option<QuerySerialization>,

    /// Required. The type of the provided query expression.
    #[serde(rename = "QueryType", skip_serializing_if = "Option::is_none")]
    pub query_type: Option<QueryRequestType>,
}

/// The query serialization settings.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct QuerySerialization {
    /// The query format.
    #[serde(rename = "Format", skip_serializing_if = "Option::is_none")]
    pub format: Option<QueryFormat>,
}

/// The retention policy.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct RetentionPolicy {
    /// Whether to allow permanent delete.
    #[serde(
        rename = "AllowPermanentDelete",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_permanent_delete: Option<bool>,

    /// The number of days to retain the logs.
    #[serde(rename = "Days", skip_serializing_if = "Option::is_none")]
    pub days: Option<i32>,

    /// Whether to enable the retention policy.
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The signed identifier.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
#[serde(rename = "SignedIdentifier")]
pub struct SignedIdentifier {
    /// The access policy for the signed identifier.
    #[serde(rename = "AccessPolicy", skip_serializing_if = "Option::is_none")]
    pub access_policy: Option<AccessPolicy>,

    /// The unique ID for the signed identifier.
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// The properties that enable an account to host a static website
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct StaticWebsite {
    /// Absolute path of the default index page
    #[serde(
        rename = "DefaultIndexDocumentPath",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_index_document_path: Option<String>,

    /// Indicates whether this account is hosting a static website
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// The error document.
    #[serde(
        rename = "ErrorDocument404Path",
        skip_serializing_if = "Option::is_none"
    )]
    pub error_document404_path: Option<String>,

    /// The index document.
    #[serde(rename = "IndexDocument", skip_serializing_if = "Option::is_none")]
    pub index_document: Option<String>,
}

/// The service properties.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct StorageServiceProperties {
    /// The CORS properties.
    #[serde(
        rename = "Cors",
        deserialize_with = "CorsCorsRule::unwrap",
        serialize_with = "CorsCorsRule::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub cors: Option<Vec<CorsRule>>,

    /// The default service version.
    #[serde(
        rename = "DefaultServiceVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_service_version: Option<String>,

    /// The delete retention policy.
    #[serde(
        rename = "DeleteRetentionPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_retention_policy: Option<RetentionPolicy>,

    /// The hour metrics properties.
    #[serde(rename = "HourMetrics", skip_serializing_if = "Option::is_none")]
    pub hour_metrics: Option<Metrics>,

    /// The logging properties.
    #[serde(rename = "Logging", skip_serializing_if = "Option::is_none")]
    pub logging: Option<Logging>,

    /// The minute metrics properties.
    #[serde(rename = "MinuteMetrics", skip_serializing_if = "Option::is_none")]
    pub minute_metrics: Option<Metrics>,

    /// The static website properties.
    #[serde(rename = "StaticWebsite", skip_serializing_if = "Option::is_none")]
    pub static_website: Option<StaticWebsite>,
}

/// Stats for the storage service.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct StorageServiceStats {
    /// The geo replication stats.
    #[serde(rename = "GeoReplication", skip_serializing_if = "Option::is_none")]
    pub geo_replication: Option<GeoReplication>,
}

/// A user delegation key.
#[derive(Clone, Debug, Default, Deserialize, Serialize, Model)]
#[non_exhaustive]
pub struct UserDelegationKey {
    /// The date-time the key expires.
    #[serde(rename = "SignedExpiry", skip_serializing_if = "Option::is_none")]
    pub signed_expiry: Option<String>,

    /// The Azure Active Directory object ID in GUID format.
    #[serde(rename = "SignedOid", skip_serializing_if = "Option::is_none")]
    pub signed_oid: Option<String>,

    /// Abbreviation of the Azure Storage service that accepts the key.
    #[serde(rename = "SignedService", skip_serializing_if = "Option::is_none")]
    pub signed_service: Option<String>,

    /// The date-time the key is active.
    #[serde(rename = "SignedStart", skip_serializing_if = "Option::is_none")]
    pub signed_start: Option<String>,

    /// The Azure Active Directory tenant ID in GUID format.
    #[serde(rename = "SignedTid", skip_serializing_if = "Option::is_none")]
    pub signed_tid: Option<String>,

    /// The service version that created the key.
    #[serde(rename = "SignedVersion", skip_serializing_if = "Option::is_none")]
    pub signed_version: Option<String>,

    /// The key as a base64 string.
    #[serde(rename = "Value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
