// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AzureQueueStorageServicePropertiesOperationsClientSetPropertiesOptions, QueueApiVersion,
    ServicePropertiesCompType, ServiceRestypeType, StorageServicePropertiesRequest,
};
use azure_core::{
    http::{Context, Method, Pipeline, Request, RequestContent, Response, Url},
    Result,
};

pub struct AzureQueueStorageServicePropertiesOperationsClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

impl AzureQueueStorageServicePropertiesOperationsClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Sets properties for a storage account's Queue service endpoint, including
    /// properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules
    ///
    /// # Arguments
    ///
    /// * `restype` - restype
    /// * `comp` - comp
    /// * `version` - Specifies the version of the operation to use for this request.
    /// * `storage_service_properties` - The StorageService properties.
    /// * `options` - Optional parameters for the request.
    pub async fn set_properties(
        &self,
        restype: ServiceRestypeType,
        comp: ServicePropertiesCompType,
        version: QueueApiVersion,
        storage_service_properties: RequestContent<StorageServicePropertiesRequest>,
        options: Option<AzureQueueStorageServicePropertiesOperationsClientSetPropertiesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        url.query_pairs_mut().append_pair("comp", comp.as_ref());
        url.query_pairs_mut()
            .append_pair("restype", restype.as_ref());
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("version", version.to_string());
        request.set_body(storage_service_properties);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
