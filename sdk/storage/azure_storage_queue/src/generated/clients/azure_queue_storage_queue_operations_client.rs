// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AzureQueueStorageQueueOperationsClientCreateOptions,
    AzureQueueStorageQueueOperationsClientDeleteOptions, QueueApiVersion,
};
use azure_core::{
    http::{Context, Method, Pipeline, Request, Response, Url},
    Result,
};

pub struct AzureQueueStorageQueueOperationsClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

impl AzureQueueStorageQueueOperationsClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// creates a new queue under the given account.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The queue name.
    /// * `version` - Specifies the version of the operation to use for this request.
    /// * `options` - Optional parameters for the request.
    pub async fn create(
        &self,
        queue_name: &str,
        version: QueueApiVersion,
        options: Option<AzureQueueStorageQueueOperationsClientCreateOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(metadata) = options.metadata {
            for (key, value) in metadata {
                let header_name = format!("x-ms-meta-{}", key);
                request.insert_header(header_name, value);
            }
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("version", version.to_string());
        request.insert_header("x-ms-version", version.to_string());

        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// operation permanently deletes the specified queue
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The queue name.
    /// * `version` - Specifies the version of the operation to use for this request.
    /// * `options` - Optional parameters for the request.
    pub async fn delete(
        &self,
        queue_name: &str,
        version: QueueApiVersion,
        options: Option<AzureQueueStorageQueueOperationsClientDeleteOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("version", version.to_string());
        request.insert_header("x-ms-version", version.to_string());

        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
