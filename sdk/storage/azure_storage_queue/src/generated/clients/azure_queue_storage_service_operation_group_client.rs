// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AzureQueueStorageServiceOperationGroupClientGetPropertiesOptions,
    AzureQueueStorageServiceOperationGroupClientGetStatisticsOptions,
    AzureQueueStorageServiceOperationGroupClientListQueuesSegmentOptions,
    AzureQueueStorageServiceOperationGroupClientSetPropertiesOptions, ListQueuesSegmentResponse,
    StorageServiceProperties, StorageServiceStats,
};
use azure_core::{
    http::{
        Context, Method, PageIterator, PagerResult, Pipeline, RawResponse, Request, RequestContent,
        Response, Url, XmlFormat,
    },
    xml, Result,
};

pub struct AzureQueueStorageServiceOperationGroupClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

impl AzureQueueStorageServiceOperationGroupClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// gets the properties of a storage account's Queue service, including properties
    /// for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        options: Option<AzureQueueStorageServiceOperationGroupClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<StorageServiceProperties, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("x-ms-version", self.api_version.to_string());
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// Retrieves statistics related to replication for the Queue service. It is only
    /// available on the secondary location endpoint when read-access geo-redundant
    /// replication is enabled for the storage account.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_statistics(
        &self,
        options: Option<AzureQueueStorageServiceOperationGroupClientGetStatisticsOptions<'_>>,
    ) -> Result<Response<StorageServiceStats, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "stats")
            .append_pair("restype", "service");
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("x-ms-version", self.api_version.to_string());
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The List Queues Segment operation returns a list of the queues under the
    /// specified account
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub fn list_queues_segment(
        &self,
        options: Option<AzureQueueStorageServiceOperationGroupClientListQueuesSegmentOptions<'_>>,
    ) -> Result<PageIterator<Response<ListQueuesSegmentResponse, XmlFormat>>> {
        let options = options.unwrap_or_default().into_owned();
        let pipeline = self.pipeline.clone();
        let mut first_url = self.endpoint.clone();
        first_url.query_pairs_mut().append_pair("comp", "list");
        first_url
            .query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(include) = options.include {
            first_url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            first_url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            first_url
                .query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prefix) = options.prefix {
            first_url.query_pairs_mut().append_pair("prefix", &prefix);
        }
        if let Some(timeout) = options.timeout {
            first_url
                .query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let api_version = self.api_version.to_string().clone();
        Ok(PageIterator::from_callback(
            move |next_marker: Option<Url>| {
                let url = match next_marker {
                    Some(next_marker) => next_marker,
                    None => first_url.clone(),
                };
                let mut request = Request::new(url, Method::Get);
                request.insert_header("accept", "application/xml");
                if let Some(request_id) = &options.request_id {
                    request.insert_header("request-id", request_id);
                }
                request.insert_header("x-ms-version", api_version.to_string());
                let ctx = options.method_options.context.clone();
                let pipeline = pipeline.clone();
                async move {
                    let rsp: Response<ListQueuesSegmentResponse> =
                        pipeline.send(&ctx, &mut request).await?.into();
                    let (status, headers, body) = rsp.deconstruct();
                    let bytes = body.collect().await?;
                    let res: ListQueuesSegmentResponse = xml::read_xml(&bytes)?;
                    let rsp = RawResponse::from_bytes(status, headers, bytes).into();
                    let next_marker = res.next_marker.unwrap_or_default();
                    Ok(if next_marker.is_empty() {
                        PagerResult::Done { response: rsp }
                    } else {
                        PagerResult::More {
                            response: rsp,
                            next: next_marker.parse()?,
                        }
                    })
                }
            },
        ))
    }

    /// Sets properties for a storage account's Queue service endpoint, including
    /// properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules
    ///
    /// # Arguments
    ///
    /// * `storage_service_properties` - The StorageService properties.
    /// * `content_type` - Body parameter's content type. Known values are application/xml
    /// * `options` - Optional parameters for the request.
    pub async fn set_properties(
        &self,
        storage_service_properties: RequestContent<StorageServiceProperties>,
        content_type: String,
        options: Option<AzureQueueStorageServiceOperationGroupClientSetPropertiesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", content_type);
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("x-ms-version", self.api_version.to_string());
        request.set_body(storage_service_properties);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
