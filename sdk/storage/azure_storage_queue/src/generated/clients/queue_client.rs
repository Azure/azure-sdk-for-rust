// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    ListOfPeekedMessage, ListOfReceivedMessage, ListOfSentMessage, ListOfSignedIdentifier,
    QueueClientClearOptions, QueueClientCreateOptions, QueueClientDeleteMessageOptions,
    QueueClientDeleteOptions, QueueClientGetAccessPolicyOptions, QueueClientGetMetadataOptions,
    QueueClientGetMetadataResult, QueueClientPeekMessagesOptions,
    QueueClientReceiveMessagesOptions, QueueClientSendMessageOptions,
    QueueClientSetAccessPolicyOptions, QueueClientSetAccessPolicyResult,
    QueueClientSetMetadataOptions, QueueClientUpdateOptions, QueueMessage,
};
use azure_core::{
    credentials::TokenCredential,
    error::CheckSuccessOptions,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Method, NoFormat, Pipeline, PipelineSendOptions, Request, RequestContent,
        Response, Url, XmlFormat,
    },
    tracing, Result,
};
use std::{collections::HashMap, sync::Arc};

#[tracing::client]
pub struct QueueClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) queue_name: String,
    pub(crate) version: String,
}

/// Options used when creating a `QueueClient`
#[derive(Clone, SafeDebug)]
pub struct QueueClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
    /// Specifies the version of the operation to use for this request.
    pub version: String,
}

impl QueueClient {
    /// Creates a new QueueClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional configuration for the client.
    #[tracing::new("Storage.Queues.Queue")]
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        queue_name: String,
        options: Option<QueueClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::with_message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            endpoint,
            queue_name,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
                None,
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Clear operation deletes all messages from the specified queue.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.clear")]
    pub async fn clear(
        &self,
        options: Option<QueueClientClearOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Delete);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[204],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// Creates a new queue under the specified account. If the queue with the same name already exists, the operation fails.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.create")]
    pub async fn create(
        &self,
        options: Option<QueueClientCreateOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url = url.join(&self.queue_name)?;
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{k}"), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[201],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// operation permanently deletes the specified queue
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.delete")]
    pub async fn delete(
        &self,
        options: Option<QueueClientDeleteOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url = url.join(&self.queue_name)?;
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Delete);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{k}"), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[202],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// The Delete operation deletes the specified message.
    ///
    /// # Arguments
    ///
    /// * `message_id` - The id of the queue message.
    /// * `pop_receipt` - Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or
    ///   Update Message operation.
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.deleteMessage")]
    pub async fn delete_message(
        &self,
        message_id: &str,
        pop_receipt: &str,
        options: Option<QueueClientDeleteMessageOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        if message_id.is_empty() {
            return Err(azure_core::Error::with_message(
                azure_core::error::ErrorKind::Other,
                "parameter message_id cannot be empty",
            ));
        }
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages/{messageId}");
        path = path.replace("{messageId}", message_id);
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("popReceipt", pop_receipt);
        let mut request = Request::new(url, Method::Delete);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[204],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// gets the permissions for the specified queue. The permissions indicate whether queue data may be accessed publicly.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`ListOfSignedIdentifierHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, XmlFormat}};
    /// use azure_storage_queue::models::{ListOfSignedIdentifier, ListOfSignedIdentifierHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<ListOfSignedIdentifier, XmlFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(date) = response.date()? {
    ///         println!("Date: {:?}", date);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`date`()](crate::generated::models::ListOfSignedIdentifierHeaders::date) - Date
    ///
    /// [`ListOfSignedIdentifierHeaders`]: crate::generated::models::ListOfSignedIdentifierHeaders
    #[tracing::function("Storage.Queues.Queue.getAccessPolicy")]
    pub async fn get_access_policy(
        &self,
        options: Option<QueueClientGetAccessPolicyOptions<'_>>,
    ) -> Result<Response<ListOfSignedIdentifier, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("comp", "acl");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// returns all user-defined metadata and system properties for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`QueueClientGetMetadataResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use azure_storage_queue::models::{QueueClientGetMetadataResult, QueueClientGetMetadataResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<QueueClientGetMetadataResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(metadata) = response.metadata()? {
    ///         println!("x-ms-meta: {:?}", metadata);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`metadata`()](crate::generated::models::QueueClientGetMetadataResultHeaders::metadata) - x-ms-meta
    ///
    /// [`QueueClientGetMetadataResultHeaders`]: crate::generated::models::QueueClientGetMetadataResultHeaders
    #[tracing::function("Storage.Queues.Queue.getMetadata")]
    pub async fn get_metadata(
        &self,
        options: Option<QueueClientGetMetadataOptions<'_>>,
    ) -> Result<Response<QueueClientGetMetadataResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("comp", "metadata");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// The Peek operation retrieves one or more messages from the front of the queue,
    /// but does not alter the visibility of the message.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.peekMessages")]
    pub async fn peek_messages(
        &self,
        options: Option<QueueClientPeekMessagesOptions<'_>>,
    ) -> Result<Response<ListOfPeekedMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("peekonly", "true");
        if let Some(number_of_messages) = options.number_of_messages {
            url.query_pairs_mut()
                .append_pair("numofmessages", &number_of_messages.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// The Dequeue operation retrieves one or more messages from the front of the
    /// queue.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.receiveMessages")]
    pub async fn receive_messages(
        &self,
        options: Option<QueueClientReceiveMessagesOptions<'_>>,
    ) -> Result<Response<ListOfReceivedMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        if let Some(number_of_messages) = options.number_of_messages {
            url.query_pairs_mut()
                .append_pair("numofmessages", &number_of_messages.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        if let Some(visibility_timeout) = options.visibility_timeout {
            url.query_pairs_mut()
                .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// The Enqueue operation adds a new message to the back of the message queue. A
    /// visibility timeout can also be specified to make the message invisible until
    /// the visibility timeout expires. A message must be in a format that can be
    /// included in an XML request with UTF-8 encoding. The encoded message can be up
    /// to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size for
    /// previous versions.
    ///
    /// # Arguments
    ///
    /// * `queue_message` - A Message object which can be stored in a Queue
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.sendMessage")]
    pub async fn send_message(
        &self,
        queue_message: RequestContent<QueueMessage, XmlFormat>,
        options: Option<QueueClientSendMessageOptions<'_>>,
    ) -> Result<Response<ListOfSentMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        if let Some(message_time_to_live) = options.message_time_to_live {
            url.query_pairs_mut()
                .append_pair("messageTtl", &message_time_to_live.to_string());
        }
        if let Some(visibility_timeout) = options.visibility_timeout {
            url.query_pairs_mut()
                .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(queue_message);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// sets the permissions for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `queue_acl` - The access control list for the queue.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`QueueClientSetAccessPolicyResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use azure_storage_queue::models::{QueueClientSetAccessPolicyResult, QueueClientSetAccessPolicyResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<QueueClientSetAccessPolicyResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(date) = response.date()? {
    ///         println!("Date: {:?}", date);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`date`()](crate::generated::models::QueueClientSetAccessPolicyResultHeaders::date) - Date
    ///
    /// [`QueueClientSetAccessPolicyResultHeaders`]: crate::generated::models::QueueClientSetAccessPolicyResultHeaders
    #[tracing::function("Storage.Queues.Queue.setAccessPolicy")]
    pub async fn set_access_policy(
        &self,
        queue_acl: RequestContent<ListOfSignedIdentifier, XmlFormat>,
        options: Option<QueueClientSetAccessPolicyOptions<'_>>,
    ) -> Result<Response<QueueClientSetAccessPolicyResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("comp", "acl");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(queue_acl);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// operation sets one or more user-defined name-value pairs for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `metadata` - The metadata headers.
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.setMetadata")]
    pub async fn set_metadata(
        &self,
        metadata: HashMap<String, String>,
        options: Option<QueueClientSetMetadataOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/");
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("comp", "metadata");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        for (k, v) in &metadata {
            request.insert_header(format!("x-ms-meta-{k}"), v);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[204],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }

    /// The Update operation was introduced with version 2011-08-18 of the Queue
    /// service API. The Update Message operation updates the visibility timeout of a
    /// message. You can also use this operation to update the contents of a message. A
    /// message must be in a format that can be included in an XML request with UTF-8
    /// encoding, and the encoded message can be up to 64KB in size.
    ///
    /// # Arguments
    ///
    /// * `message_id` - The id of the queue message.
    /// * `pop_receipt` - Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or
    ///   Update Message operation.
    /// * `visibility_timeout` - Specifies the new visibility timeout value, in seconds, relative to server time. The default
    ///   value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or
    ///   larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be
    ///   set to a value later than the expiry time.
    /// * `options` - Optional parameters for the request.
    #[tracing::function("Storage.Queues.Queue.update")]
    pub async fn update(
        &self,
        message_id: &str,
        pop_receipt: &str,
        visibility_timeout: i32,
        options: Option<QueueClientUpdateOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        if message_id.is_empty() {
            return Err(azure_core::Error::with_message(
                azure_core::error::ErrorKind::Other,
                "parameter message_id cannot be empty",
            ));
        }
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages/{messageId}");
        path = path.replace("{messageId}", message_id);
        path = path.replace("{queueName}", &self.queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("popReceipt", pop_receipt);
        url.query_pairs_mut()
            .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        if let Some(queue_message) = options.queue_message {
            request.set_body(queue_message);
        }
        let rsp = self
            .pipeline
            .send(
                &ctx,
                &mut request,
                Some(PipelineSendOptions {
                    check_success: CheckSuccessOptions {
                        success_codes: &[200],
                    },
                    ..Default::default()
                }),
            )
            .await?;
        Ok(rsp.into())
    }
}

impl Default for QueueClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2018-03-28"),
        }
    }
}
