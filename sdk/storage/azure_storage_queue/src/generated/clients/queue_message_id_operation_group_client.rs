// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    QueueMessageIdOperationGroupClientDeleteOptions,
    QueueMessageIdOperationGroupClientUpdateOptions,
};
use azure_core::{
    http::{Context, Method, NoFormat, Pipeline, Request, Response, Url},
    Result,
};

pub struct QueueMessageIdOperationGroupClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl QueueMessageIdOperationGroupClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Delete operation deletes the specified message.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `message_id` - The id of the queue message.
    /// * `pop_receipt` - Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or
    ///   Update Message operation.
    /// * `options` - Optional parameters for the request.
    pub async fn delete(
        &self,
        queue_name: &str,
        message_id: &str,
        pop_receipt: &str,
        options: Option<QueueMessageIdOperationGroupClientDeleteOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages/{messageId}");
        path = path.replace("{messageId}", message_id);
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("popReceipt", pop_receipt);
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The Update operation was introduced with version 2011-08-18 of the Queue
    /// service API. The Update Message operation updates the visibility timeout of a
    /// message. You can also use this operation to update the contents of a message. A
    /// message must be in a format that can be included in an XML request with UTF-8
    /// encoding, and the encoded message can be up to 64KB in size.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `message_id` - The id of the queue message.
    /// * `pop_receipt` - Required. Specifies the valid pop receipt value returned from an earlier call to the Get Messages or
    ///   Update Message operation.
    /// * `visibility_timeout` - Specifies the new visibility timeout value, in seconds, relative to server time. The default
    ///   value is 30 seconds. A specified value must be larger than or equal to 1 second, and cannot be larger than 7 days, or
    ///   larger than 2 hours on REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be
    ///   set to a value later than the expiry time.
    /// * `options` - Optional parameters for the request.
    pub async fn update(
        &self,
        queue_name: &str,
        message_id: &str,
        pop_receipt: &str,
        visibility_timeout: i32,
        options: Option<QueueMessageIdOperationGroupClientUpdateOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages/{messageId}");
        path = path.replace("{messageId}", message_id);
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("popReceipt", pop_receipt);
        url.query_pairs_mut()
            .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        if let Some(queue_message) = options.queue_message {
            request.set_body(queue_message);
        }
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
