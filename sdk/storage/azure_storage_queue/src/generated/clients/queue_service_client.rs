// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::{
    clients::QueueClient,
    models::{
        ListQueuesSegmentResponse, QueueServiceClientGetPropertiesOptions,
        QueueServiceClientGetStatisticsOptions, QueueServiceClientListQueuesSegmentOptions,
        QueueServiceClientSetPropertiesOptions, StorageServiceProperties, StorageServiceStats,
    },
};
use azure_core::{
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Context, Method, NoFormat, PageIterator, PagerResult, Pipeline, RawResponse,
        Request, RequestContent, Response, Url, XmlFormat,
    },
    xml, Result,
};
use std::sync::Arc;

pub struct QueueServiceClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

/// Options used when creating a `QueueServiceClient`
#[derive(Clone, SafeDebug)]
pub struct QueueServiceClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
    /// Specifies the version of the operation to use for this request.
    pub version: String,
}

impl QueueServiceClient {
    /// Creates a new QueueServiceClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        options: Option<QueueServiceClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Retrieves properties of a storage account's Queue service, including properties for Storage Analytics and CORS (Cross-Origin
    /// Resource Sharing) rules.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        options: Option<QueueServiceClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<StorageServiceProperties, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// Returns a new instance of QueueClient.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    pub fn get_queue_client(&self, queue_name: String) -> QueueClient {
        QueueClient {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            queue_name,
            version: self.version.clone(),
        }
    }

    /// Retrieves statistics related to replication for the Queue service. It is only available on the secondary location endpoint
    /// when read-access geo-redundant replication is enabled for the storage account.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_statistics(
        &self,
        options: Option<QueueServiceClientGetStatisticsOptions<'_>>,
    ) -> Result<Response<StorageServiceStats, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "stats")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The List Queues Segment operation returns a list of the queues under the specified account
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub fn list_queues_segment(
        &self,
        options: Option<QueueServiceClientListQueuesSegmentOptions<'_>>,
    ) -> Result<PageIterator<Response<ListQueuesSegmentResponse, XmlFormat>>> {
        let options = options.unwrap_or_default().into_owned();
        let pipeline = self.pipeline.clone();
        let mut first_url = self.endpoint.clone();
        first_url.query_pairs_mut().append_pair("comp", "list");
        if let Some(include) = options.include {
            first_url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            first_url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            first_url
                .query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prefix) = options.prefix {
            first_url.query_pairs_mut().append_pair("prefix", &prefix);
        }
        if let Some(timeout) = options.timeout {
            first_url
                .query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let version = self.version.clone();
        Ok(PageIterator::from_callback(
            move |marker: Option<String>| {
                let mut url = first_url.clone();
                if let Some(marker) = marker {
                    if url.query_pairs().any(|(name, _)| name.eq("marker")) {
                        let mut new_url = url.clone();
                        new_url
                            .query_pairs_mut()
                            .clear()
                            .extend_pairs(url.query_pairs().filter(|(name, _)| name.ne("marker")));
                        url = new_url;
                    }
                    url.query_pairs_mut().append_pair("marker", &marker);
                }
                let mut request = Request::new(url, Method::Get);
                request.insert_header("accept", "application/xml");
                request.insert_header("content-type", "application/xml");
                if let Some(client_request_id) = &options.client_request_id {
                    request.insert_header("x-ms-client-request-id", client_request_id);
                }
                request.insert_header("x-ms-version", &version);
                let ctx = options.method_options.context.clone();
                let pipeline = pipeline.clone();
                async move {
                    let rsp: RawResponse = pipeline.send(&ctx, &mut request).await?;
                    let (status, headers, body) = rsp.deconstruct();
                    let bytes = body.collect().await?;
                    let res: ListQueuesSegmentResponse = xml::read_xml(&bytes)?;
                    let rsp = RawResponse::from_bytes(status, headers, bytes).into();
                    Ok(match res.next_marker {
                        Some(next_marker) if !next_marker.is_empty() => PagerResult::More {
                            response: rsp,
                            next: next_marker,
                        },
                        _ => PagerResult::Done { response: rsp },
                    })
                }
            },
        ))
    }

    /// Sets properties for a storage account's Queue service endpoint, including properties for Storage Analytics and CORS (Cross-Origin
    /// Resource Sharing) rules
    ///
    /// # Arguments
    ///
    /// * `storage_service_properties` - The storage service properties to set.
    /// * `options` - Optional parameters for the request.
    pub async fn set_properties(
        &self,
        storage_service_properties: RequestContent<StorageServiceProperties>,
        options: Option<QueueServiceClientSetPropertiesOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(storage_service_properties);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}

impl Default for QueueServiceClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2018-03-28"),
        }
    }
}
