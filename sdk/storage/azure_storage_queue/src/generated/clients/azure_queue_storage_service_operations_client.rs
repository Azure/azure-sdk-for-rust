// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AzureQueueStorageServiceOperationsClientGetPropertiesOptions, ServicePropertiesCompType,
    ServiceRestypeType, StorageServicePropertiesResponse,
};
use azure_core::{
    http::{Context, Method, Pipeline, Request, Response, Url, XmlFormat},
    Result,
};

pub struct AzureQueueStorageServiceOperationsClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

impl AzureQueueStorageServiceOperationsClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// gets the properties of a storage account's Queue service, including properties
    /// for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
    ///
    /// # Arguments
    ///
    /// * `restype` - restype
    /// * `comp` - comp
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        restype: ServiceRestypeType,
        comp: ServicePropertiesCompType,
        options: Option<AzureQueueStorageServiceOperationsClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<StorageServicePropertiesResponse, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        url.query_pairs_mut().append_pair("comp", comp.as_ref());
        url.query_pairs_mut()
            .append_pair("restype", restype.as_ref());
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        if let Some(request_id) = options.request_id {
            request.insert_header("request-id", request_id);
        }
        request.insert_header("x-ms-version", self.api_version.to_string());
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
