// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::clients::{
    AzureQueueStorageMessageIdOperationGroupClient, AzureQueueStorageMessagesOperationGroupClient,
    AzureQueueStorageQueueOperationGroupClient, AzureQueueStorageServiceOperationGroupClient,
};
use azure_core::{
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Pipeline, Url,
    },
    Result,
};
use std::sync::Arc;

pub struct AzureQueueStorageClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

/// Options used when creating a [`AzureQueueStorageClient`](AzureQueueStorageClient)
#[derive(Clone, SafeDebug)]
pub struct AzureQueueStorageClientOptions {
    /// The API version to use for this operation.
    pub api_version: String,
    /// Allows customization of the client.
    pub client_options: ClientOptions,
}

impl AzureQueueStorageClient {
    /// Creates a new AzureQueueStorageClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        options: Option<AzureQueueStorageClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            endpoint,
            api_version: options.api_version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Returns a new instance of AzureQueueStorageMessageIdOperationGroupClient.
    pub fn get_azure_queue_storage_message_id_operation_group_client(
        &self,
    ) -> AzureQueueStorageMessageIdOperationGroupClient {
        AzureQueueStorageMessageIdOperationGroupClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageMessagesOperationGroupClient.
    pub fn get_azure_queue_storage_messages_operation_group_client(
        &self,
    ) -> AzureQueueStorageMessagesOperationGroupClient {
        AzureQueueStorageMessagesOperationGroupClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageQueueOperationGroupClient.
    pub fn get_azure_queue_storage_queue_operation_group_client(
        &self,
    ) -> AzureQueueStorageQueueOperationGroupClient {
        AzureQueueStorageQueueOperationGroupClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageServiceOperationGroupClient.
    pub fn get_azure_queue_storage_service_operation_group_client(
        &self,
    ) -> AzureQueueStorageServiceOperationGroupClient {
        AzureQueueStorageServiceOperationGroupClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }
}

impl Default for AzureQueueStorageClientOptions {
    fn default() -> Self {
        Self {
            api_version: String::from("2018-03-28"),
            client_options: ClientOptions::default(),
        }
    }
}
