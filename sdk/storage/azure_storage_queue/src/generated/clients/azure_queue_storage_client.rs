// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::clients::{
    AzureQueueStorageMessageIdOperationsClient, AzureQueueStorageMessagesOperationsClient,
    AzureQueueStorageQueueOperationsClient, AzureQueueStorageServiceOperationsClient,
    AzureQueueStorageServicePropertiesOperationsClient,
};
use azure_core::{
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Pipeline, Url,
    },
    Result,
};
use std::sync::Arc;

/// // FIXME: (missing-service-description) Add service description
pub struct AzureQueueStorageClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

/// Options used when creating a [`AzureQueueStorageClient`](AzureQueueStorageClient)
#[derive(Clone, Default, SafeDebug)]
pub struct AzureQueueStorageClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
}

impl AzureQueueStorageClient {
    /// Creates a new AzureQueueStorageClient requiring no authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `api_version` - The API version to use for this operation.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        api_version: String,
        options: Option<AzureQueueStorageClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let bearerToken = BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        );
        let auth_policy: Arc<dyn Policy> = Arc::new(bearerToken);

        Ok(Self {
            api_version: api_version,
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                vec![auth_policy.clone()],
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Returns a new instance of AzureQueueStorageMessageIdOperationsClient.
    pub fn get_azure_queue_storage_message_id_operations_client(
        &self,
    ) -> AzureQueueStorageMessageIdOperationsClient {
        AzureQueueStorageMessageIdOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageMessagesOperationsClient.
    pub fn get_azure_queue_storage_messages_operations_client(
        &self,
    ) -> AzureQueueStorageMessagesOperationsClient {
        AzureQueueStorageMessagesOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageQueueOperationsClient.
    pub fn get_azure_queue_storage_queue_operations_client(
        &self,
    ) -> AzureQueueStorageQueueOperationsClient {
        AzureQueueStorageQueueOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageServiceOperationsClient.
    pub fn get_azure_queue_storage_service_operations_client(
        &self,
    ) -> AzureQueueStorageServiceOperationsClient {
        AzureQueueStorageServiceOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    /// Returns a new instance of AzureQueueStorageServicePropertiesOperationsClient.
    pub fn get_azure_queue_storage_service_properties_operations_client(
        &self,
    ) -> AzureQueueStorageServicePropertiesOperationsClient {
        AzureQueueStorageServicePropertiesOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }
}
