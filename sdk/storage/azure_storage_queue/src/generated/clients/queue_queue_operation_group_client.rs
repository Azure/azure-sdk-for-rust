// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    ListOfSignedIdentifier, QueueQueueOperationGroupClientCreateOptions,
    QueueQueueOperationGroupClientDeleteOptions,
    QueueQueueOperationGroupClientGetAccessPolicyOptions,
    QueueQueueOperationGroupClientGetPropertiesOptions,
    QueueQueueOperationGroupClientGetPropertiesResult,
    QueueQueueOperationGroupClientSetAccessPolicyOptions,
    QueueQueueOperationGroupClientSetAccessPolicyResult,
    QueueQueueOperationGroupClientSetMetadataOptions,
};
use azure_core::{
    http::{
        Context, Method, NoFormat, Pipeline, Request, RequestContent, Response, Url, XmlFormat,
    },
    Result,
};

pub struct QueueQueueOperationGroupClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl QueueQueueOperationGroupClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Creates a new queue under the specified account. If the queue with the same name already exists, the operation fails.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn create(
        &self,
        queue_name: &str,
        options: Option<QueueQueueOperationGroupClientCreateOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// operation permanently deletes the specified queue
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn delete(
        &self,
        queue_name: &str,
        options: Option<QueueQueueOperationGroupClientDeleteOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// gets the permissions for the specified queue. The permissions indicate whether queue data may be accessed publicly.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn get_access_policy(
        &self,
        queue_name: &str,
        options: Option<QueueQueueOperationGroupClientGetAccessPolicyOptions<'_>>,
    ) -> Result<Response<ListOfSignedIdentifier, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut().append_pair("comp", "acl");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// returns all user-defined metadata and system properties for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        queue_name: &str,
        options: Option<QueueQueueOperationGroupClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<QueueQueueOperationGroupClientGetPropertiesResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut().append_pair("comp", "metadata");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// sets the permissions for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `queue_acl` - The access control list for the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn set_access_policy(
        &self,
        queue_name: &str,
        queue_acl: RequestContent<ListOfSignedIdentifier>,
        options: Option<QueueQueueOperationGroupClientSetAccessPolicyOptions<'_>>,
    ) -> Result<Response<QueueQueueOperationGroupClientSetAccessPolicyResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut().append_pair("comp", "acl");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(queue_acl);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// operation sets one or more user-defined name-value pairs for the specified queue.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn set_metadata(
        &self,
        queue_name: &str,
        options: Option<QueueQueueOperationGroupClientSetMetadataOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(queue_name)?;
        url.query_pairs_mut().append_pair("comp", "metadata");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
