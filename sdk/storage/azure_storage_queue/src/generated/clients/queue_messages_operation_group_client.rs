// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    ListOfDequeuedMessage, ListOfEnqueuedMessage, ListOfPeekedMessage, QueueMessage,
    QueueMessagesOperationGroupClientClearOptions, QueueMessagesOperationGroupClientDequeueOptions,
    QueueMessagesOperationGroupClientEnqueueOptions, QueueMessagesOperationGroupClientPeekOptions,
};
use azure_core::{
    http::{
        Context, Method, NoFormat, Pipeline, Request, RequestContent, Response, Url, XmlFormat,
    },
    Result,
};

pub struct QueueMessagesOperationGroupClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl QueueMessagesOperationGroupClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Clear operation deletes all messages from the specified queue.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn clear(
        &self,
        queue_name: &str,
        options: Option<QueueMessagesOperationGroupClientClearOptions<'_>>,
    ) -> Result<Response<(), NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The Dequeue operation retrieves one or more messages from the front of the
    /// queue.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn dequeue(
        &self,
        queue_name: &str,
        options: Option<QueueMessagesOperationGroupClientDequeueOptions<'_>>,
    ) -> Result<Response<ListOfDequeuedMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        if let Some(number_of_messages) = options.number_of_messages {
            url.query_pairs_mut()
                .append_pair("numofmessages", &number_of_messages.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        if let Some(visibility_timeout) = options.visibility_timeout {
            url.query_pairs_mut()
                .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The Enqueue operation adds a new message to the back of the message queue. A
    /// visibility timeout can also be specified to make the message invisible until
    /// the visibility timeout expires. A message must be in a format that can be
    /// included in an XML request with UTF-8 encoding. The encoded message can be up
    /// to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size for
    /// previous versions.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `queue_message` - A Message object which can be stored in a Queue
    /// * `options` - Optional parameters for the request.
    pub async fn enqueue(
        &self,
        queue_name: &str,
        queue_message: RequestContent<QueueMessage>,
        options: Option<QueueMessagesOperationGroupClientEnqueueOptions<'_>>,
    ) -> Result<Response<ListOfEnqueuedMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        if let Some(message_time_to_live) = options.message_time_to_live {
            url.query_pairs_mut()
                .append_pair("messageTtl", &message_time_to_live.to_string());
        }
        if let Some(visibility_timeout) = options.visibility_timeout {
            url.query_pairs_mut()
                .append_pair("visibilityTimeout", &visibility_timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(queue_message);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }

    /// The Peek operation retrieves one or more messages from the front of the queue,
    /// but does not alter the visibility of the message.
    ///
    /// # Arguments
    ///
    /// * `queue_name` - The name of the queue.
    /// * `options` - Optional parameters for the request.
    pub async fn peek(
        &self,
        queue_name: &str,
        options: Option<QueueMessagesOperationGroupClientPeekOptions<'_>>,
    ) -> Result<Response<ListOfPeekedMessage, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("{queueName}/messages");
        path = path.replace("{queueName}", queue_name);
        url = url.join(&path)?;
        url.query_pairs_mut().append_pair("peekonly", "true");
        if let Some(number_of_messages) = options.number_of_messages {
            url.query_pairs_mut()
                .append_pair("numofmessages", &number_of_messages.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await.map(Into::into)
    }
}
