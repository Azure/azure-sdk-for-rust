// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use super::{CorsRule, QueueItem};
use serde::{Deserialize, Deserializer, Serialize, Serializer};

#[derive(Deserialize, Serialize)]
#[serde(rename = "Cors")]
pub(crate) struct CorsCorsRule {
    #[serde(default)]
    CorsRule: Option<Vec<CorsRule>>,
}

impl CorsCorsRule {
    pub fn unwrap<'de, D>(deserializer: D) -> Result<Option<Vec<CorsRule>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(CorsCorsRule::deserialize(deserializer)?.CorsRule)
    }

    pub fn wrap<S>(to_serialize: &Option<Vec<CorsRule>>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        CorsCorsRule {
            CorsRule: to_serialize.to_owned(),
        }
        .serialize(serializer)
    }
}

#[derive(Deserialize, Serialize)]
#[serde(rename = "Queues")]
pub(crate) struct Queue_itemsQueue {
    #[serde(default)]
    Queue: Vec<QueueItem>,
}

impl Queue_itemsQueue {
    pub fn unwrap<'de, D>(deserializer: D) -> Result<Vec<QueueItem>, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(Queue_itemsQueue::deserialize(deserializer)?.Queue)
    }

    pub fn wrap<S>(to_serialize: &Vec<QueueItem>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        Queue_itemsQueue {
            Queue: to_serialize.to_owned(),
        }
        .serialize(serializer)
    }
}
