// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    ListOfSignedIdentifier, QueueQueueOperationGroupClientGetPropertiesResult,
    QueueQueueOperationGroupClientSetAccessPolicyResult, StorageServiceStats,
};
use azure_core::{
    http::{
        headers::{HeaderName, Headers},
        NoFormat, Response, XmlFormat,
    },
    time::{parse_rfc7231, OffsetDateTime},
    Result,
};
use std::collections::HashMap;

const DATE: HeaderName = HeaderName::from_static("date");
const META: &str = "x-ms-meta-";

/// Provides access to typed response headers for `QueueQueueOperationGroupClient::get_access_policy()`
pub trait ListOfSignedIdentifierHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
}

impl ListOfSignedIdentifierHeaders for Response<ListOfSignedIdentifier, XmlFormat> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| parse_rfc7231(h.as_str()))
    }
}

/// Provides access to typed response headers for `QueueQueueOperationGroupClient::get_properties()`
pub trait QueueQueueOperationGroupClientGetPropertiesResultHeaders: private::Sealed {
    fn metadata(&self) -> Result<HashMap<String, String>>;
}

impl QueueQueueOperationGroupClientGetPropertiesResultHeaders
    for Response<QueueQueueOperationGroupClientGetPropertiesResult, NoFormat>
{
    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }
}

/// Provides access to typed response headers for `QueueQueueOperationGroupClient::set_access_policy()`
pub trait QueueQueueOperationGroupClientSetAccessPolicyResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
}

impl QueueQueueOperationGroupClientSetAccessPolicyResultHeaders
    for Response<QueueQueueOperationGroupClientSetAccessPolicyResult, NoFormat>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| parse_rfc7231(h.as_str()))
    }
}

/// Provides access to typed response headers for `QueueServiceOperationGroupClient::get_statistics()`
pub trait StorageServiceStatsHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
}

impl StorageServiceStatsHeaders for Response<StorageServiceStats, XmlFormat> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| parse_rfc7231(h.as_str()))
    }
}

mod private {
    use super::{
        ListOfSignedIdentifier, QueueQueueOperationGroupClientGetPropertiesResult,
        QueueQueueOperationGroupClientSetAccessPolicyResult, StorageServiceStats,
    };
    use azure_core::http::{NoFormat, Response, XmlFormat};

    pub trait Sealed {}

    impl Sealed for Response<ListOfSignedIdentifier, XmlFormat> {}
    impl Sealed for Response<QueueQueueOperationGroupClientGetPropertiesResult, NoFormat> {}
    impl Sealed for Response<QueueQueueOperationGroupClientSetAccessPolicyResult, NoFormat> {}
    impl Sealed for Response<StorageServiceStats, XmlFormat> {}
}
