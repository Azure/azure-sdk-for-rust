// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    ListOfDequeuedMessageItem, ListOfEnqueuedMessage, ListOfPeekedMessageItem,
    ListOfSignedIdentifier, ListQueuesSegmentResponse,
    QueueMessageIdOperationGroupClientDeleteResult, QueueMessageIdOperationGroupClientUpdateResult,
    QueueMessagesOperationGroupClientClearResult, QueueQueueOperationGroupClientCreateResult,
    QueueQueueOperationGroupClientDeleteResult, QueueQueueOperationGroupClientGetPropertiesResult,
    QueueQueueOperationGroupClientSetAccessPolicyResult,
    QueueQueueOperationGroupClientSetMetadataResult,
    QueueServiceOperationGroupClientSetPropertiesResult, StorageServiceProperties,
    StorageServiceStats,
};
use azure_core::{
    date,
    http::{
        headers::{HeaderName, Headers},
        Response, XmlFormat,
    },
    Result,
};
use std::collections::HashMap;
use time::OffsetDateTime;

const CLIENT_REQUEST_ID: HeaderName = HeaderName::from_static("x-ms-client-request-id");
const DATE: HeaderName = HeaderName::from_static("date");
const META: &str = "x-ms-meta-";
const REQUEST_ID: HeaderName = HeaderName::from_static("x-ms-request-id");
const VERSION: HeaderName = HeaderName::from_static("x-ms-version");

/// Provides access to typed response headers for [`QueueMessagesOperationGroupClient::dequeue()`](crate::generated::clients::QueueMessagesOperationGroupClient::dequeue())
pub trait ListOfDequeuedMessageItemHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl ListOfDequeuedMessageItemHeaders for Response<ListOfDequeuedMessageItem, XmlFormat> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueMessagesOperationGroupClient::enqueue()`](crate::generated::clients::QueueMessagesOperationGroupClient::enqueue())
pub trait ListOfEnqueuedMessageHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl ListOfEnqueuedMessageHeaders for Response<ListOfEnqueuedMessage, XmlFormat> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueMessagesOperationGroupClient::peek()`](crate::generated::clients::QueueMessagesOperationGroupClient::peek())
pub trait ListOfPeekedMessageItemHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl ListOfPeekedMessageItemHeaders for Response<ListOfPeekedMessageItem, XmlFormat> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::get_access_policy()`](crate::generated::clients::QueueQueueOperationGroupClient::get_access_policy())
pub trait ListOfSignedIdentifierHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl ListOfSignedIdentifierHeaders for Response<ListOfSignedIdentifier, XmlFormat> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueServiceOperationGroupClient::list_queues_segment()`](crate::generated::clients::QueueServiceOperationGroupClient::list_queues_segment())
pub trait ListQueuesSegmentResponseHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl ListQueuesSegmentResponseHeaders for Response<ListQueuesSegmentResponse, XmlFormat> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueMessageIdOperationGroupClient::delete()`](crate::generated::clients::QueueMessageIdOperationGroupClient::delete())
pub trait QueueMessageIdOperationGroupClientDeleteResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueMessageIdOperationGroupClientDeleteResultHeaders
    for Response<QueueMessageIdOperationGroupClientDeleteResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueMessageIdOperationGroupClient::update()`](crate::generated::clients::QueueMessageIdOperationGroupClient::update())
pub trait QueueMessageIdOperationGroupClientUpdateResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueMessageIdOperationGroupClientUpdateResultHeaders
    for Response<QueueMessageIdOperationGroupClientUpdateResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueMessagesOperationGroupClient::clear()`](crate::generated::clients::QueueMessagesOperationGroupClient::clear())
pub trait QueueMessagesOperationGroupClientClearResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueMessagesOperationGroupClientClearResultHeaders
    for Response<QueueMessagesOperationGroupClientClearResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::create()`](crate::generated::clients::QueueQueueOperationGroupClient::create())
pub trait QueueQueueOperationGroupClientCreateResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueQueueOperationGroupClientCreateResultHeaders
    for Response<QueueQueueOperationGroupClientCreateResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::delete()`](crate::generated::clients::QueueQueueOperationGroupClient::delete())
pub trait QueueQueueOperationGroupClientDeleteResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueQueueOperationGroupClientDeleteResultHeaders
    for Response<QueueQueueOperationGroupClientDeleteResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::get_properties()`](crate::generated::clients::QueueQueueOperationGroupClient::get_properties())
pub trait QueueQueueOperationGroupClientGetPropertiesResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn metadata(&self) -> Result<HashMap<String, String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueQueueOperationGroupClientGetPropertiesResultHeaders
    for Response<QueueQueueOperationGroupClientGetPropertiesResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::set_access_policy()`](crate::generated::clients::QueueQueueOperationGroupClient::set_access_policy())
pub trait QueueQueueOperationGroupClientSetAccessPolicyResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueQueueOperationGroupClientSetAccessPolicyResultHeaders
    for Response<QueueQueueOperationGroupClientSetAccessPolicyResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueQueueOperationGroupClient::set_metadata()`](crate::generated::clients::QueueQueueOperationGroupClient::set_metadata())
pub trait QueueQueueOperationGroupClientSetMetadataResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueQueueOperationGroupClientSetMetadataResultHeaders
    for Response<QueueQueueOperationGroupClientSetMetadataResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueServiceOperationGroupClient::set_properties()`](crate::generated::clients::QueueServiceOperationGroupClient::set_properties())
pub trait QueueServiceOperationGroupClientSetPropertiesResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl QueueServiceOperationGroupClientSetPropertiesResultHeaders
    for Response<QueueServiceOperationGroupClientSetPropertiesResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueServiceOperationGroupClient::get_properties()`](crate::generated::clients::QueueServiceOperationGroupClient::get_properties())
pub trait StorageServicePropertiesHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl StorageServicePropertiesHeaders for Response<StorageServiceProperties, XmlFormat> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

/// Provides access to typed response headers for [`QueueServiceOperationGroupClient::get_statistics()`](crate::generated::clients::QueueServiceOperationGroupClient::get_statistics())
pub trait StorageServiceStatsHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version(&self) -> Result<Option<String>>;
}

impl StorageServiceStatsHeaders for Response<StorageServiceStats, XmlFormat> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Specifies the version of the operation to use for this request.
    fn version(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION)
    }
}

mod private {
    use super::{
        ListOfDequeuedMessageItem, ListOfEnqueuedMessage, ListOfPeekedMessageItem,
        ListOfSignedIdentifier, ListQueuesSegmentResponse,
        QueueMessageIdOperationGroupClientDeleteResult,
        QueueMessageIdOperationGroupClientUpdateResult,
        QueueMessagesOperationGroupClientClearResult, QueueQueueOperationGroupClientCreateResult,
        QueueQueueOperationGroupClientDeleteResult,
        QueueQueueOperationGroupClientGetPropertiesResult,
        QueueQueueOperationGroupClientSetAccessPolicyResult,
        QueueQueueOperationGroupClientSetMetadataResult,
        QueueServiceOperationGroupClientSetPropertiesResult, StorageServiceProperties,
        StorageServiceStats,
    };
    use azure_core::http::{Response, XmlFormat};

    pub trait Sealed {}

    impl Sealed for Response<ListOfDequeuedMessageItem, XmlFormat> {}
    impl Sealed for Response<ListOfEnqueuedMessage, XmlFormat> {}
    impl Sealed for Response<ListOfPeekedMessageItem, XmlFormat> {}
    impl Sealed for Response<ListOfSignedIdentifier, XmlFormat> {}
    impl Sealed for Response<ListQueuesSegmentResponse, XmlFormat> {}
    impl Sealed for Response<QueueMessageIdOperationGroupClientDeleteResult> {}
    impl Sealed for Response<QueueMessageIdOperationGroupClientUpdateResult> {}
    impl Sealed for Response<QueueMessagesOperationGroupClientClearResult> {}
    impl Sealed for Response<QueueQueueOperationGroupClientCreateResult> {}
    impl Sealed for Response<QueueQueueOperationGroupClientDeleteResult> {}
    impl Sealed for Response<QueueQueueOperationGroupClientGetPropertiesResult> {}
    impl Sealed for Response<QueueQueueOperationGroupClientSetAccessPolicyResult> {}
    impl Sealed for Response<QueueQueueOperationGroupClientSetMetadataResult> {}
    impl Sealed for Response<QueueServiceOperationGroupClientSetPropertiesResult> {}
    impl Sealed for Response<StorageServiceProperties, XmlFormat> {}
    impl Sealed for Response<StorageServiceStats, XmlFormat> {}
}
