// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{GeoReplicationStatusType, ListQueuesIncludeType};
use azure_core::error::{Error, ErrorKind};
use std::{
    convert::{AsRef, From, Infallible},
    fmt::{Display, Formatter},
    str::FromStr,
};

impl<'a> From<&'a GeoReplicationStatusType> for &'a str {
    fn from(e: &'a GeoReplicationStatusType) -> Self {
        match e {
            GeoReplicationStatusType::Bootstrap => "bootstrap",
            GeoReplicationStatusType::Live => "live",
            GeoReplicationStatusType::Unavailable => "unavailable",
            GeoReplicationStatusType::UnknownValue(s) => s.as_ref(),
        }
    }
}

impl FromStr for GeoReplicationStatusType {
    type Err = Infallible;
    fn from_str(s: &str) -> ::core::result::Result<Self, <Self as FromStr>::Err> {
        Ok(match s {
            "bootstrap" => GeoReplicationStatusType::Bootstrap,
            "live" => GeoReplicationStatusType::Live,
            "unavailable" => GeoReplicationStatusType::Unavailable,
            _ => GeoReplicationStatusType::UnknownValue(s.to_string()),
        })
    }
}

impl AsRef<str> for GeoReplicationStatusType {
    fn as_ref(&self) -> &str {
        match self {
            GeoReplicationStatusType::Bootstrap => "bootstrap",
            GeoReplicationStatusType::Live => "live",
            GeoReplicationStatusType::Unavailable => "unavailable",
            GeoReplicationStatusType::UnknownValue(s) => s.as_str(),
        }
    }
}

impl Display for GeoReplicationStatusType {
    fn fmt(&self, f: &mut Formatter<'_>) -> ::std::fmt::Result {
        match self {
            GeoReplicationStatusType::Bootstrap => f.write_str("bootstrap"),
            GeoReplicationStatusType::Live => f.write_str("live"),
            GeoReplicationStatusType::Unavailable => f.write_str("unavailable"),
            GeoReplicationStatusType::UnknownValue(s) => f.write_str(s.as_str()),
        }
    }
}

impl FromStr for ListQueuesIncludeType {
    type Err = Error;
    fn from_str(s: &str) -> ::core::result::Result<Self, <Self as FromStr>::Err> {
        Ok(match s {
            "metadata" => ListQueuesIncludeType::Metadata,
            _ => {
                return Err(Error::with_message_fn(ErrorKind::DataConversion, || {
                    format!("unknown variant of ListQueuesIncludeType found: \"{s}\"")
                }))
            }
        })
    }
}

impl AsRef<str> for ListQueuesIncludeType {
    fn as_ref(&self) -> &str {
        match self {
            ListQueuesIncludeType::Metadata => "metadata",
        }
    }
}

impl Display for ListQueuesIncludeType {
    fn fmt(&self, f: &mut Formatter<'_>) -> ::std::fmt::Result {
        match self {
            ListQueuesIncludeType::Metadata => Display::fmt("metadata", f),
        }
    }
}
