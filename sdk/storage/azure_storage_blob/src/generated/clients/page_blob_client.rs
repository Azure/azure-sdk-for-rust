// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    PageBlobClientClearPagesOptions, PageBlobClientClearPagesResult,
    PageBlobClientCopyIncrementalOptions, PageBlobClientCopyIncrementalResult,
    PageBlobClientCreateOptions, PageBlobClientCreateResult,
    PageBlobClientGetPageRangesDiffOptions, PageBlobClientGetPageRangesOptions,
    PageBlobClientResizeOptions, PageBlobClientResizeResult,
    PageBlobClientSetSequenceNumberOptions, PageBlobClientSetSequenceNumberResult,
    PageBlobClientUploadPagesFromUrlOptions, PageBlobClientUploadPagesFromUrlResult,
    PageBlobClientUploadPagesOptions, PageBlobClientUploadPagesResult, PageList,
    SequenceNumberActionType,
};
use azure_core::{
    base64::encode,
    credentials::TokenCredential,
    error::{ErrorKind, HttpError},
    fmt::SafeDebug,
    http::{
        headers::ERROR_CODE,
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Method, NoFormat, Pipeline, Request, RequestContent, Response, Url,
        XmlFormat,
    },
    time::to_rfc7231,
    tracing, Bytes, Error, Result,
};
use std::sync::Arc;

#[tracing::client]
pub struct PageBlobClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

/// Options used when creating a `PageBlobClient`
#[derive(Clone, SafeDebug)]
pub struct PageBlobClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
    /// Specifies the version of the operation to use for this request.
    pub version: String,
}

impl PageBlobClient {
    /// Creates a new PageBlobClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `options` - Optional configuration for the client.
    #[tracing::new("Storage.Blob.PageBlob")]
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        options: Option<PageBlobClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
                None,
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Clear Pages operation clears a range of pages from a page blob
    ///
    /// # Arguments
    ///
    /// * `range` - Bytes of data in the specified range.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientClearPagesResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientClearPagesResult, PageBlobClientClearPagesResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientClearPagesResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(content_md5) = response.content_md5()? {
    ///         println!("Content-MD5: {:?}", content_md5);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`content_md5`()](crate::generated::models::PageBlobClientClearPagesResultHeaders::content_md5) - Content-MD5
    /// * [`last_modified`()](crate::generated::models::PageBlobClientClearPagesResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientClearPagesResultHeaders::etag) - etag
    /// * [`blob_sequence_number`()](crate::generated::models::PageBlobClientClearPagesResultHeaders::blob_sequence_number) - x-ms-blob-sequence-number
    /// * [`content_crc64`()](crate::generated::models::PageBlobClientClearPagesResultHeaders::content_crc64) - x-ms-content-crc64
    ///
    /// [`PageBlobClientClearPagesResultHeaders`]: crate::generated::models::PageBlobClientClearPagesResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.clearPages")]
    pub async fn clear_pages(
        &self,
        range: String,
        options: Option<PageBlobClientClearPagesOptions<'_>>,
    ) -> Result<Response<PageBlobClientClearPagesResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_key_only("clear")
            .append_pair("comp", "page");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-length", "0");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        request.insert_header("range", range);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header(
                "x-ms-encryption-algorithm",
                encryption_algorithm.to_string(),
            );
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-page-write", "clear");
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob. The snapshot is copied
    /// such that only the differential changes between the previously copied snapshot are transferred to the destination. The
    /// copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. This API is supported
    /// since REST version 2016-05-31.
    ///
    /// # Arguments
    ///
    /// * `copy_source` - Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in length that
    ///   specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI. The source blob must
    ///   either be public or must be authenticated via a shared access signature.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientCopyIncrementalResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientCopyIncrementalResult, PageBlobClientCopyIncrementalResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientCopyIncrementalResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(date) = response.date()? {
    ///         println!("Date: {:?}", date);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`date`()](crate::generated::models::PageBlobClientCopyIncrementalResultHeaders::date) - Date
    /// * [`last_modified`()](crate::generated::models::PageBlobClientCopyIncrementalResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientCopyIncrementalResultHeaders::etag) - etag
    /// * [`copy_id`()](crate::generated::models::PageBlobClientCopyIncrementalResultHeaders::copy_id) - x-ms-copy-id
    /// * [`copy_status`()](crate::generated::models::PageBlobClientCopyIncrementalResultHeaders::copy_status) - x-ms-copy-status
    ///
    /// [`PageBlobClientCopyIncrementalResultHeaders`]: crate::generated::models::PageBlobClientCopyIncrementalResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.copyIncremental")]
    pub async fn copy_incremental(
        &self,
        copy_source: String,
        options: Option<PageBlobClientCopyIncrementalOptions<'_>>,
    ) -> Result<Response<PageBlobClientCopyIncrementalResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut().append_pair("comp", "incrementalcopy");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-copy-source", copy_source);
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Create operation creates a new page blob.
    ///
    /// # Arguments
    ///
    /// * `blob_content_length` - This header specifies the maximum size for the page blob, up to 1 TB. The page blob size must
    ///   be aligned to a 512-byte boundary.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientCreateResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientCreateResult, PageBlobClientCreateResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientCreateResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(content_md5) = response.content_md5()? {
    ///         println!("Content-MD5: {:?}", content_md5);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`content_md5`()](crate::generated::models::PageBlobClientCreateResultHeaders::content_md5) - Content-MD5
    /// * [`last_modified`()](crate::generated::models::PageBlobClientCreateResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientCreateResultHeaders::etag) - etag
    /// * [`encryption_key_sha256`()](crate::generated::models::PageBlobClientCreateResultHeaders::encryption_key_sha256) - x-ms-encryption-key-sha256
    /// * [`encryption_scope`()](crate::generated::models::PageBlobClientCreateResultHeaders::encryption_scope) - x-ms-encryption-scope
    /// * [`is_server_encrypted`()](crate::generated::models::PageBlobClientCreateResultHeaders::is_server_encrypted) - x-ms-request-server-encrypted
    /// * [`version_id`()](crate::generated::models::PageBlobClientCreateResultHeaders::version_id) - x-ms-version-id
    ///
    /// [`PageBlobClientCreateResultHeaders`]: crate::generated::models::PageBlobClientCreateResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.create")]
    pub async fn create(
        &self,
        blob_content_length: u64,
        options: Option<PageBlobClientCreateOptions<'_>>,
    ) -> Result<Response<PageBlobClientCreateResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-length", "0");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(tier) = options.tier {
            request.insert_header("x-ms-access-tier", tier.to_string());
        }
        if let Some(blob_cache_control) = options.blob_cache_control {
            request.insert_header("x-ms-blob-cache-control", blob_cache_control);
        }
        if let Some(blob_content_disposition) = options.blob_content_disposition {
            request.insert_header("x-ms-blob-content-disposition", blob_content_disposition);
        }
        if let Some(blob_content_encoding) = options.blob_content_encoding {
            request.insert_header("x-ms-blob-content-encoding", blob_content_encoding);
        }
        if let Some(blob_content_language) = options.blob_content_language {
            request.insert_header("x-ms-blob-content-language", blob_content_language);
        }
        request.insert_header("x-ms-blob-content-length", blob_content_length.to_string());
        if let Some(blob_content_md5) = options.blob_content_md5 {
            request.insert_header("x-ms-blob-content-md5", encode(blob_content_md5));
        }
        if let Some(blob_content_type) = options.blob_content_type {
            request.insert_header("x-ms-blob-content-type", blob_content_type);
        }
        if let Some(blob_sequence_number) = options.blob_sequence_number {
            request.insert_header(
                "x-ms-blob-sequence-number",
                blob_sequence_number.to_string(),
            );
        }
        request.insert_header("x-ms-blob-type", "PageBlob");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header(
                "x-ms-encryption-algorithm",
                encryption_algorithm.to_string(),
            );
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(immutability_policy_mode) = options.immutability_policy_mode {
            request.insert_header(
                "x-ms-immutability-policy-mode",
                immutability_policy_mode.to_string(),
            );
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header(
                "x-ms-immutability-policy-until-date",
                to_rfc7231(&immutability_policy_expiry),
            );
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(legal_hold) = options.legal_hold {
            request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{k}"), v);
            }
        }
        if let Some(blob_tags_string) = options.blob_tags_string {
            request.insert_header("x-ms-tags", blob_tags_string);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a page blob.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageListHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, XmlFormat}};
    /// use blob_storage::models::{PageList, PageListHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageList, XmlFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(date) = response.date()? {
    ///         println!("Date: {:?}", date);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`date`()](crate::generated::models::PageListHeaders::date) - Date
    /// * [`last_modified`()](crate::generated::models::PageListHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageListHeaders::etag) - etag
    /// * [`blob_content_length`()](crate::generated::models::PageListHeaders::blob_content_length) - x-ms-blob-content-length
    ///
    /// [`PageListHeaders`]: crate::generated::models::PageListHeaders
    #[tracing::function("Storage.Blob.PageBlob.getPageRanges")]
    pub async fn get_page_ranges(
        &self,
        options: Option<PageBlobClientGetPageRangesOptions<'_>>,
    ) -> Result<Response<PageList, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut().append_pair("comp", "pagelist");
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(range) = options.range {
            request.insert_header("range", range);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob or snapshot of a page blob.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageListHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, XmlFormat}};
    /// use blob_storage::models::{PageList, PageListHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageList, XmlFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(date) = response.date()? {
    ///         println!("Date: {:?}", date);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`date`()](crate::generated::models::PageListHeaders::date) - Date
    /// * [`last_modified`()](crate::generated::models::PageListHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageListHeaders::etag) - etag
    /// * [`blob_content_length`()](crate::generated::models::PageListHeaders::blob_content_length) - x-ms-blob-content-length
    ///
    /// [`PageListHeaders`]: crate::generated::models::PageListHeaders
    #[tracing::function("Storage.Blob.PageBlob.getPageRangesDiff")]
    pub async fn get_page_ranges_diff(
        &self,
        options: Option<PageBlobClientGetPageRangesDiffOptions<'_>>,
    ) -> Result<Response<PageList, XmlFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "pagelist")
            .append_key_only("diff");
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prevsnapshot) = options.prevsnapshot {
            url.query_pairs_mut()
                .append_pair("prevsnapshot", &prevsnapshot);
        }
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(range) = options.range {
            request.insert_header("range", range);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(prev_snapshot_url) = options.prev_snapshot_url {
            request.insert_header("x-ms-previous-snapshot-url", prev_snapshot_url);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Resize operation increases the size of the page blob to the specified size.
    ///
    /// # Arguments
    ///
    /// * `blob_content_length` - This header specifies the maximum size for the page blob, up to 1 TB. The page blob size must
    ///   be aligned to a 512-byte boundary.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientResizeResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientResizeResult, PageBlobClientResizeResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientResizeResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     if let Some(blob_sequence_number) = response.blob_sequence_number()? {
    ///         println!("x-ms-blob-sequence-number: {:?}", blob_sequence_number);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`last_modified`()](crate::generated::models::PageBlobClientResizeResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientResizeResultHeaders::etag) - etag
    /// * [`blob_sequence_number`()](crate::generated::models::PageBlobClientResizeResultHeaders::blob_sequence_number) - x-ms-blob-sequence-number
    ///
    /// [`PageBlobClientResizeResultHeaders`]: crate::generated::models::PageBlobClientResizeResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.resize")]
    pub async fn resize(
        &self,
        blob_content_length: u64,
        options: Option<PageBlobClientResizeOptions<'_>>,
    ) -> Result<Response<PageBlobClientResizeResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_key_only("Resize")
            .append_pair("comp", "properties");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        request.insert_header("x-ms-blob-content-length", blob_content_length.to_string());
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header(
                "x-ms-encryption-algorithm",
                encryption_algorithm.to_string(),
            );
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Update Sequence Number operation sets the blob's sequence number. The operation will fail if the specified sequence
    /// number is less than the current sequence number of the blob.
    ///
    /// # Arguments
    ///
    /// * `sequence_number_action` - Required if the x-ms-blob-sequence-number header is set for the request. This property applies
    ///   to page blobs only. This property indicates how the service should modify the blob's sequence number
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientSetSequenceNumberResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientSetSequenceNumberResult, PageBlobClientSetSequenceNumberResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientSetSequenceNumberResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     if let Some(blob_sequence_number) = response.blob_sequence_number()? {
    ///         println!("x-ms-blob-sequence-number: {:?}", blob_sequence_number);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`last_modified`()](crate::generated::models::PageBlobClientSetSequenceNumberResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientSetSequenceNumberResultHeaders::etag) - etag
    /// * [`blob_sequence_number`()](crate::generated::models::PageBlobClientSetSequenceNumberResultHeaders::blob_sequence_number) - x-ms-blob-sequence-number
    ///
    /// [`PageBlobClientSetSequenceNumberResultHeaders`]: crate::generated::models::PageBlobClientSetSequenceNumberResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.setSequenceNumber")]
    pub async fn set_sequence_number(
        &self,
        sequence_number_action: SequenceNumberActionType,
        options: Option<PageBlobClientSetSequenceNumberOptions<'_>>,
    ) -> Result<Response<PageBlobClientSetSequenceNumberResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_key_only("UpdateSequenceNumber")
            .append_pair("comp", "properties");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/xml");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(blob_sequence_number) = options.blob_sequence_number {
            request.insert_header(
                "x-ms-blob-sequence-number",
                blob_sequence_number.to_string(),
            );
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header(
            "x-ms-sequence-number-action",
            sequence_number_action.to_string(),
        );
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Upload Pages operation writes a range of pages to a page blob
    ///
    /// # Arguments
    ///
    /// * `body` - The body of the request.
    /// * `content_length` - The length of the request.
    /// * `range` - Bytes of data in the specified range.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientUploadPagesResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientUploadPagesResult, PageBlobClientUploadPagesResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientUploadPagesResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(content_md5) = response.content_md5()? {
    ///         println!("Content-MD5: {:?}", content_md5);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`content_md5`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::content_md5) - Content-MD5
    /// * [`last_modified`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::etag) - etag
    /// * [`blob_sequence_number`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::blob_sequence_number) - x-ms-blob-sequence-number
    /// * [`content_crc64`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::content_crc64) - x-ms-content-crc64
    /// * [`encryption_key_sha256`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::encryption_key_sha256) - x-ms-encryption-key-sha256
    /// * [`encryption_scope`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::encryption_scope) - x-ms-encryption-scope
    /// * [`is_server_encrypted`()](crate::generated::models::PageBlobClientUploadPagesResultHeaders::is_server_encrypted) - x-ms-request-server-encrypted
    ///
    /// [`PageBlobClientUploadPagesResultHeaders`]: crate::generated::models::PageBlobClientUploadPagesResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.uploadPages")]
    pub async fn upload_pages(
        &self,
        body: RequestContent<Bytes, NoFormat>,
        content_length: u64,
        range: String,
        options: Option<PageBlobClientUploadPagesOptions<'_>>,
    ) -> Result<Response<PageBlobClientUploadPagesResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "page")
            .append_key_only("update");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-length", content_length.to_string());
        if let Some(transactional_content_md5) = options.transactional_content_md5 {
            request.insert_header("content-md5", encode(transactional_content_md5));
        }
        request.insert_header("content-type", "application/octet-stream");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        request.insert_header("range", range);
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(transactional_content_crc64) = options.transactional_content_crc64 {
            request.insert_header("x-ms-content-crc64", encode(transactional_content_crc64));
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header(
                "x-ms-encryption-algorithm",
                encryption_algorithm.to_string(),
            );
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-page-write", "update");
        if let Some(structured_body_type) = options.structured_body_type {
            request.insert_header("x-ms-structured-body", structured_body_type);
        }
        if let Some(structured_content_length) = options.structured_content_length {
            request.insert_header(
                "x-ms-structured-content-length",
                structured_content_length.to_string(),
            );
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(body);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }

    /// The Upload Pages operation writes a range of pages to a page blob where the contents are read from a URL.
    ///
    /// # Arguments
    ///
    /// * `source_url` - Specify a URL to the copy source.
    /// * `source_range` - Bytes of source data in the specified range. The length of this range should match the ContentLength
    ///   header and x-ms-range/Range destination range header.
    /// * `content_length` - The length of the request.
    /// * `range` - Bytes of source data in the specified range. The length of this range should match the ContentLength header
    ///   and x-ms-range/Range destination range header.
    /// * `options` - Optional parameters for the request.
    ///
    /// ## Response Headers
    ///
    /// The returned [`Response`](azure_core::http::Response) implements the [`PageBlobClientUploadPagesFromUrlResultHeaders`] trait, which provides
    /// access to response headers. For example:
    ///
    /// ```no_run
    /// use azure_core::{Result, http::{Response, NoFormat}};
    /// use blob_storage::models::{PageBlobClientUploadPagesFromUrlResult, PageBlobClientUploadPagesFromUrlResultHeaders};
    /// async fn example() -> Result<()> {
    ///     let response: Response<PageBlobClientUploadPagesFromUrlResult, NoFormat> = unimplemented!();
    ///     // Access response headers
    ///     if let Some(content_md5) = response.content_md5()? {
    ///         println!("Content-MD5: {:?}", content_md5);
    ///     }
    ///     if let Some(last_modified) = response.last_modified()? {
    ///         println!("Last-Modified: {:?}", last_modified);
    ///     }
    ///     if let Some(etag) = response.etag()? {
    ///         println!("etag: {:?}", etag);
    ///     }
    ///     Ok(())
    /// }
    /// ```
    ///
    /// ### Available headers
    /// * [`content_md5`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::content_md5) - Content-MD5
    /// * [`last_modified`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::last_modified) - Last-Modified
    /// * [`etag`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::etag) - etag
    /// * [`blob_sequence_number`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::blob_sequence_number) - x-ms-blob-sequence-number
    /// * [`content_crc64`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::content_crc64) - x-ms-content-crc64
    /// * [`encryption_key_sha256`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::encryption_key_sha256) - x-ms-encryption-key-sha256
    /// * [`encryption_scope`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::encryption_scope) - x-ms-encryption-scope
    /// * [`is_server_encrypted`()](crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders::is_server_encrypted) - x-ms-request-server-encrypted
    ///
    /// [`PageBlobClientUploadPagesFromUrlResultHeaders`]: crate::generated::models::PageBlobClientUploadPagesFromUrlResultHeaders
    #[tracing::function("Storage.Blob.PageBlob.uploadPagesFromUrl")]
    pub async fn upload_pages_from_url(
        &self,
        source_url: String,
        source_range: String,
        content_length: u64,
        range: String,
        options: Option<PageBlobClientUploadPagesFromUrlOptions<'_>>,
    ) -> Result<Response<PageBlobClientUploadPagesFromUrlResult, NoFormat>> {
        let options = options.unwrap_or_default();
        let ctx = options.method_options.context.to_borrowed();
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "page")
            .append_key_only("fromUrl")
            .append_key_only("update");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", to_rfc7231(&if_modified_since));
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", to_rfc7231(&if_unmodified_since));
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-copy-source", source_url);
        if let Some(copy_source_authorization) = options.copy_source_authorization {
            request.insert_header("x-ms-copy-source-authorization", copy_source_authorization);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header(
                "x-ms-encryption-algorithm",
                encryption_algorithm.to_string(),
            );
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(file_request_intent) = options.file_request_intent {
            request.insert_header("x-ms-file-request-intent", file_request_intent.to_string());
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-page-write", "update");
        request.insert_header("x-ms-range", range);
        if let Some(source_content_crc64) = options.source_content_crc64 {
            request.insert_header("x-ms-source-content-crc64", encode(source_content_crc64));
        }
        if let Some(source_content_md5) = options.source_content_md5 {
            request.insert_header("x-ms-source-content-md5", encode(source_content_md5));
        }
        if let Some(source_if_match) = options.source_if_match {
            request.insert_header("x-ms-source-if-match", source_if_match);
        }
        if let Some(source_if_modified_since) = options.source_if_modified_since {
            request.insert_header(
                "x-ms-source-if-modified-since",
                to_rfc7231(&source_if_modified_since),
            );
        }
        if let Some(source_if_none_match) = options.source_if_none_match {
            request.insert_header("x-ms-source-if-none-match", source_if_none_match);
        }
        if let Some(source_if_unmodified_since) = options.source_if_unmodified_since {
            request.insert_header(
                "x-ms-source-if-unmodified-since",
                to_rfc7231(&source_if_unmodified_since),
            );
        }
        request.insert_header("x-ms-source-range", source_range);
        request.insert_header("x-ms-version", &self.version);
        let rsp = self.pipeline.send(&ctx, &mut request).await?;
        if !rsp.status().is_success() {
            let status = rsp.status();
            let http_error = HttpError::new(rsp, Some(ERROR_CODE)).await;
            let error_kind = ErrorKind::http_response(
                status,
                http_error.error_code().map(std::borrow::ToOwned::to_owned),
            );
            return Err(Error::new(error_kind, http_error));
        }
        Ok(rsp.into())
    }
}

impl Default for PageBlobClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2025-11-05"),
        }
    }
}
