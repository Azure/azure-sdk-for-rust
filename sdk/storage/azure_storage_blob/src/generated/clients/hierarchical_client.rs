// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AppendBlobClientAppendBlockFromUrlOptions, AppendBlobClientAppendBlockFromUrlResult,
    AppendBlobClientAppendBlockOptions, AppendBlobClientAppendBlockResult,
    AppendBlobClientCreateOptions, AppendBlobClientCreateResult, AppendBlobClientSealOptions,
    AppendBlobClientSealResult,
};
use azure_core::{
    base64::encode,
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientMethodOptions, ClientOptions, Context, Method, NoFormat, Pipeline, RawResponse,
        Request, RequestContent, Response, Url,
    },
    time::to_rfc7231,
    Bytes, Result,
};
use std::sync::Arc;

pub struct HierarchicalClient {
    pub(crate) blob_name: String,
    pub(crate) container_name: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

/// Options used when creating a `AppendBlobClient`
#[derive(Clone, SafeDebug)]
pub struct HierarchicalClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
    /// Specifies the version of the operation to use for this request.
    pub version: String,
}

impl HierarchicalClient {
    /// Creates a new HierarchicalClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `container_name` - The name of the container.
    /// * `blob_name` - The name of the blob.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        container_name: String,
        blob_name: String,
        options: Option<HierarchicalClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            blob_name,
            container_name,
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    pub async fn create(
        &self,
        resource_type: String,
        options: Option<HierarchicalClientCreateOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?resource={resource}");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        path = path.replace("{resource}", &resource_type);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Put);
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }
}

/// Options to be passed to `PageBlobClient::create()`
#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientCreateOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Set for page blobs only. The sequence number is a user-controlled value that you can use to track requests. The value
    /// of the sequence number must be between 0 and 2^63 - 1.
    pub blob_sequence_number: Option<i64>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

impl Default for HierarchicalClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2025-11-05"),
        }
    }
}
