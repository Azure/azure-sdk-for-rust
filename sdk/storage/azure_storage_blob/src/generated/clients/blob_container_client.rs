// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::clients::method_options::*;
use crate::models::{FilterBlobSegment, SignedIdentifier};
use azure_core::{
    Bytes, Context, Method, Pipeline, Request, RequestContent, Response, Result, Url,
};

pub struct BlobContainerClient {
    pub(crate) container_name: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

impl BlobContainerClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn acquire_lease(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientAcquireLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_key_only("acquire")
            .append_pair("comp", "lease")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(duration) = options.duration {
            request.insert_header("x-ms-lease-duration", duration.to_string());
        }
        if let Some(proposed_lease_id) = options.proposed_lease_id {
            request.insert_header("x-ms-proposed-lease-id", proposed_lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn break_lease(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientBreakLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_key_only("break")
            .append_pair("comp", "lease")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(break_period) = options.break_period {
            request.insert_header("x-ms-lease-break-period", break_period.to_string());
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `lease_id` - Required. A lease ID for the source path. If specified, the source path must have an active lease and the
    ///   lease ID must match.
    /// * `proposed_lease_id` - Required. The proposed lease ID for the container.
    /// * `options` - Optional parameters for the request.
    pub async fn change_lease(
        &self,
        container_name: &str,
        lease_id: &str,
        proposed_lease_id: &str,
        options: Option<BlobContainerClientChangeLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_key_only("change")
            .append_pair("comp", "lease")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.to_owned());
        request.insert_header("x-ms-proposed-lease-id", proposed_lease_id.to_owned());
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Creates a new container under the specified account. If the container with the same name already exists, the operation
    /// fails.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn create(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientCreateOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut().append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(access) = options.access {
            request.insert_header("x-ms-blob-public-access", access.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(default_encryption_scope) = options.default_encryption_scope {
            request.insert_header("x-ms-default-encryption-scope", default_encryption_scope);
        }
        if let Some(prevent_encryption_scope_override) = options.prevent_encryption_scope_override {
            request.insert_header(
                "x-ms-deny-encryption-scope-override",
                prevent_encryption_scope_override.to_string(),
            );
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);

        // Handedit (do not release)
        request.insert_header("content-length", "0");

        self.pipeline.send(&ctx, &mut request).await
    }

    /// operation marks the specified container for deletion. The container and any blobs contained within it are later deleted
    /// during garbage collection
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn delete(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientDeleteOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut().append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search expression. Filter
    /// blobs searches within the given container.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn filter_blobs(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientFilterBlobsOptions<'_>>,
    ) -> Result<Response<FilterBlobSegment>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "blobs")
            .append_pair("restype", "container");
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        if let Some(where_param) = options.where_param {
            url.query_pairs_mut().append_pair("where", &where_param);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// gets the permissions for the specified container. The permissions indicate whether container data may be accessed publicly.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn get_access_policy(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientGetAccessPolicyOptions<'_>>,
    ) -> Result<Response<Vec<SignedIdentifier>>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "acl")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Returns the sku name and account kind
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn get_account_info(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientGetAccountInfoOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "account");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// returns all user-defined metadata and system properties for the specified container. The data returned does not include
    /// the container's list of blobs
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut().append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `lease_id` - Required. A lease ID for the source path. If specified, the source path must have an active lease and the
    ///   lease ID must match.
    /// * `options` - Optional parameters for the request.
    pub async fn release_lease(
        &self,
        container_name: &str,
        lease_id: &str,
        options: Option<BlobContainerClientReleaseLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "lease")
            .append_key_only("release")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.to_owned());
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Renames an existing container.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `source_container_name` - Required. Specifies the name of the container to rename.
    /// * `options` - Optional parameters for the request.
    pub async fn rename(
        &self,
        container_name: &str,
        source_container_name: &str,
        options: Option<BlobContainerClientRenameOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "rename")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header(
            "x-ms-source-container-name",
            source_container_name.to_owned(),
        );
        if let Some(source_lease_id) = options.source_lease_id {
            request.insert_header("x-ms-source-lease-id", source_lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `lease_id` - Required. A lease ID for the source path. If specified, the source path must have an active lease and the
    ///   lease ID must match.
    /// * `options` - Optional parameters for the request.
    pub async fn renew_lease(
        &self,
        container_name: &str,
        lease_id: &str,
        options: Option<BlobContainerClientRenewLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "lease")
            .append_key_only("renew")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.to_owned());
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Restores a previously-deleted container.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn restore(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientRestoreOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "undelete")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(deleted_container_name) = options.deleted_container_name {
            request.insert_header("x-ms-deleted-container-name", deleted_container_name);
        }
        if let Some(deleted_container_version) = options.deleted_container_version {
            request.insert_header("x-ms-deleted-container-version", deleted_container_version);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// sets the permissions for the specified container. The permissions indicate whether blobs in a container may be accessed
    /// publicly.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `container_acl` - The access control list for the container.
    /// * `options` - Optional parameters for the request.
    pub async fn set_access_policy(
        &self,
        container_name: &str,
        container_acl: RequestContent<Vec<SignedIdentifier>>,
        options: Option<BlobContainerClientSetAccessPolicyOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "acl")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since);
        }
        if let Some(access) = options.access {
            request.insert_header("x-ms-blob-public-access", access.to_string());
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(container_acl);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// operation sets one or more user-defined name-value pairs for the specified container.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `options` - Optional parameters for the request.
    pub async fn set_metadata(
        &self,
        container_name: &str,
        options: Option<BlobContainerClientSetMetadataOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "metadata")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since);
        }
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(metadata) = options.metadata {
            for (k, v) in &metadata {
                request.insert_header(format!("x-ms-meta-{}", k), v);
            }
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// The Batch operation allows multiple API calls to be embedded into a single HTTP request.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    /// * `body` - The body of the request.
    /// * `content_length` - The length of the request.
    /// * `options` - Optional parameters for the request.
    pub async fn submit_batch(
        &self,
        container_name: &str,
        body: RequestContent<Bytes>,
        content_length: i64,
        options: Option<BlobContainerClientSubmitBatchOptions<'_>>,
    ) -> Result<Response> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url = url.join(container_name)?;
        url.query_pairs_mut()
            .append_pair("comp", "batch")
            .append_pair("restype", "container");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "multipart/mixed");
        request.insert_header("content-length", content_length.to_string());
        request.insert_header("content-type", "multipart/mixed");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }
}
