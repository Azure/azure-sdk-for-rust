// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::blob_append_blob_client::BlobAppendBlobClient;
use crate::blob_blob_client::BlobBlobClient;
use crate::blob_block_blob_client::BlobBlockBlobClient;
use crate::blob_container_client::BlobContainerClient;
use crate::blob_page_blob_client::BlobPageBlobClient;
use crate::blob_service_client::BlobServiceClient;
use azure_core::credentials::TokenCredential;
use azure_core::{BearerTokenCredentialPolicy, ClientOptions, Pipeline, Policy, Result, Url};
use std::sync::Arc;

pub struct BlobClient {
    container_name: String,
    endpoint: Url,
    pipeline: Pipeline,
    version: String,
}

#[derive(Clone, Debug)]
pub struct BlobClientOptions {
    pub client_options: ClientOptions,
    pub version: String,
}

impl BlobClient {
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        container_name: String,
        options: Option<BlobClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            container_name,
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Returns a new instance of BlobAppendBlobClient.
    pub fn get_blob_append_blob_client(&self) -> BlobAppendBlobClient {
        BlobAppendBlobClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Returns a new instance of BlobBlobClient.
    pub fn get_blob_blob_client(&self) -> BlobBlobClient {
        BlobBlobClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Returns a new instance of BlobBlockBlobClient.
    pub fn get_blob_block_blob_client(&self) -> BlobBlockBlobClient {
        BlobBlockBlobClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Returns a new instance of BlobContainerClient.
    pub fn get_blob_container_client(&self) -> BlobContainerClient {
        BlobContainerClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Returns a new instance of BlobPageBlobClient.
    pub fn get_blob_page_blob_client(&self) -> BlobPageBlobClient {
        BlobPageBlobClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Returns a new instance of BlobServiceClient.
    pub fn get_blob_service_client(&self) -> BlobServiceClient {
        BlobServiceClient {
            container_name: self.container_name.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }
}

impl Default for BlobClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2025-01-05"),
        }
    }
}
