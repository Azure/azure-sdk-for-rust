// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::clients::BlobContainerClient;
use crate::generated::models::crate_models::{GetUserDelegationKeyRequest, SetPropertiesRequest};
use crate::generated::models::{
    BlobServiceClientFilterBlobsOptions, BlobServiceClientGetAccountInfoOptions,
    BlobServiceClientGetAccountInfoResult, BlobServiceClientGetPropertiesOptions,
    BlobServiceClientGetStatisticsOptions, BlobServiceClientGetUserDelegationKeyOptions,
    BlobServiceClientListContainersSegmentOptions, BlobServiceClientSetPropertiesOptions,
    BlobServiceClientSetPropertiesResult, BlobServiceClientSubmitBatchOptions,
    BlobServiceClientSubmitBatchResult, FilterBlobSegment, ListContainersSegmentResponse,
    StorageServiceProperties, StorageServiceStats, UserDelegationKey,
};
use azure_core::credentials::TokenCredential;
use azure_core::{
    BearerTokenCredentialPolicy, Bytes, ClientOptions, Context, Method, Pipeline, Policy, Request,
    RequestContent, Response, Result, Url,
};
use std::sync::Arc;
use typespec_client_core::fmt::SafeDebug;

pub struct BlobServiceClient {
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

/// Options used when creating a [`BlobServiceClient`](crate::BlobServiceClient)
#[derive(Clone, SafeDebug)]
pub struct BlobServiceClientOptions {
    pub client_options: ClientOptions,
    pub version: String,
}

impl BlobServiceClient {
    /// Creates a new BlobServiceClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        options: Option<BlobServiceClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// The Filter Blobs operation enables callers to list blobs across all containers whose tags match a given search expression.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn filter_blobs(
        &self,
        options: Option<BlobServiceClientFilterBlobsOptions<'_>>,
    ) -> Result<Response<FilterBlobSegment>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut().append_pair("comp", "blobs");
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        if let Some(where_param) = options.where_param {
            url.query_pairs_mut().append_pair("where", &where_param);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Returns the sku name and account kind.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_account_info(
        &self,
        options: Option<BlobServiceClientGetAccountInfoOptions<'_>>,
    ) -> Result<Response<BlobServiceClientGetAccountInfoResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "account");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Returns a new instance of BlobContainerClient.
    ///
    /// # Arguments
    ///
    /// * `container_name` - The name of the container.
    pub fn get_blob_container_client(&self, container_name: String) -> BlobContainerClient {
        BlobContainerClient {
            container_name,
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            version: self.version.clone(),
        }
    }

    /// Retrieves properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin
    /// Resource Sharing) rules.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_properties(
        &self,
        options: Option<BlobServiceClientGetPropertiesOptions<'_>>,
    ) -> Result<Response<StorageServiceProperties>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint
    /// when read-access geo-redundant replication is enabled for the storage account.
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn get_statistics(
        &self,
        options: Option<BlobServiceClientGetStatisticsOptions<'_>>,
    ) -> Result<Response<StorageServiceStats>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "stats")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Retrieves a user delegation key for the Blob service. This is only a valid operation when using bearer token authentication.
    ///
    /// # Arguments
    ///
    /// * `start` - The date-time the key is active.
    /// * `expiry` - The date-time the key expires.
    /// * `options` - Optional parameters for the request.
    pub async fn get_user_delegation_key(
        &self,
        start: &str,
        expiry: &str,
        options: Option<BlobServiceClientGetUserDelegationKeyOptions<'_>>,
    ) -> Result<Response<UserDelegationKey>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "userdelegationkey")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let body: RequestContent<GetUserDelegationKeyRequest> = GetUserDelegationKeyRequest {
            start: start.to_owned(),
            expiry: expiry.to_owned(),
        }
        .try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// The List Containers Segment operation returns a list of the containers under the specified account
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn list_containers_segment(
        &self,
        options: Option<BlobServiceClientListContainersSegmentOptions<'_>>,
    ) -> Result<Response<ListContainersSegmentResponse>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut().append_pair("comp", "list");
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prefix) = options.prefix {
            url.query_pairs_mut().append_pair("prefix", &prefix);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/xml");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin
    /// Resource Sharing) rules
    ///
    /// # Arguments
    ///
    /// * `options` - Optional parameters for the request.
    pub async fn set_properties(
        &self,
        options: Option<BlobServiceClientSetPropertiesOptions<'_>>,
    ) -> Result<Response<BlobServiceClientSetPropertiesResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut()
            .append_pair("comp", "properties")
            .append_pair("restype", "service");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/xml");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        let body: RequestContent<SetPropertiesRequest> = SetPropertiesRequest {
            logging: options.logging,
            hour_metrics: options.hour_metrics,
            minute_metrics: options.minute_metrics,
            cors: options.cors,
            default_service_version: options.default_service_version,
            delete_retention_policy: options.delete_retention_policy,
            static_website: options.static_website,
        }
        .try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// The Batch operation allows multiple API calls to be embedded into a single HTTP request.
    ///
    /// # Arguments
    ///
    /// * `content_length` - The length of the request.
    /// * `body` - The body of the request.
    /// * `options` - Optional parameters for the request.
    pub async fn submit_batch(
        &self,
        content_length: u64,
        body: RequestContent<Bytes>,
        options: Option<BlobServiceClientSubmitBatchOptions<'_>>,
    ) -> Result<Response<BlobServiceClientSubmitBatchResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        url.query_pairs_mut().append_pair("comp", "batch");
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "multipart/mixed");
        request.insert_header("content-length", content_length.to_string());
        request.insert_header("content-type", "multipart/mixed");
        if let Some(client_request_id) = options.client_request_id {
            request.insert_header("x-ms-client-request-id", client_request_id);
        }
        request.insert_header("x-ms-version", &self.version);
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }
}

impl Default for BlobServiceClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2025-01-05"),
        }
    }
}
