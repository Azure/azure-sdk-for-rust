// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    models_serde,
    xml_helpers::{
        Blob_tag_setTag, BlobsBlob, Committed_blocksBlock, Container_itemsContainer, CorsCorsRule,
        SchemaField, Uncommitted_blocksBlock,
    },
    AccessTier, ArchiveStatus, BlobImmutabilityPolicyMode, BlobType, CopyStatus,
    GeoReplicationStatusType, LeaseDuration, LeaseState, LeaseStatus, PublicAccessType,
    QueryRequestType, QueryType, RehydratePriority,
};
use azure_core::{
    base64::{deserialize, serialize},
    fmt::SafeDebug,
    time::OffsetDateTime,
};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Represents an access policy.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct AccessPolicy {
    /// The date-time the policy expires.
    #[serde(
        default,
        rename = "Expiry",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub expiry: Option<OffsetDateTime>,

    /// The permissions for acl the policy.
    #[serde(rename = "Permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,

    /// The date-time the policy is active.
    #[serde(
        default,
        rename = "Start",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub start: Option<OffsetDateTime>,
}

/// Contains results for `AppendBlobClient::append_block_from_url()`
#[derive(SafeDebug)]
pub struct AppendBlobClientAppendBlockFromUrlResult;

/// Contains results for `AppendBlobClient::append_block()`
#[derive(SafeDebug)]
pub struct AppendBlobClientAppendBlockResult;

/// Contains results for `AppendBlobClient::create()`
#[derive(SafeDebug)]
pub struct AppendBlobClientCreateResult;

/// Contains results for `AppendBlobClient::seal()`
#[derive(SafeDebug)]
pub struct AppendBlobClientSealResult;

/// Represents the Apache Arrow configuration.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct ArrowConfiguration {
    /// The Apache Arrow schema
    #[serde(
        default,
        deserialize_with = "SchemaField::unwrap",
        rename = "Schema",
        serialize_with = "SchemaField::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub schema: Option<Vec<ArrowField>>,
}

/// Represents an Apache Arrow field.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "Field")]
pub struct ArrowField {
    /// The arrow field name.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The arrow field precision.
    #[serde(rename = "Precision", skip_serializing_if = "Option::is_none")]
    pub precision: Option<i32>,

    /// The arrow field scale.
    #[serde(rename = "Scale", skip_serializing_if = "Option::is_none")]
    pub scale: Option<i32>,

    /// The arrow field type.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Contains results for `BlobClient::abort_copy_from_url()`
#[derive(SafeDebug)]
pub struct BlobClientAbortCopyFromUrlResult;

/// Contains results for `BlobClient::acquire_lease()`
#[derive(SafeDebug)]
pub struct BlobClientAcquireLeaseResult;

/// Contains results for `BlobClient::break_lease()`
#[derive(SafeDebug)]
pub struct BlobClientBreakLeaseResult;

/// Contains results for `BlobClient::change_lease()`
#[derive(SafeDebug)]
pub struct BlobClientChangeLeaseResult;

/// Contains results for `BlobClient::copy_from_url()`
#[derive(SafeDebug)]
pub struct BlobClientCopyFromUrlResult;

/// Contains results for `BlobClient::create_snapshot()`
#[derive(SafeDebug)]
pub struct BlobClientCreateSnapshotResult;

/// Contains results for `BlobClient::delete_immutability_policy()`
#[derive(SafeDebug)]
pub struct BlobClientDeleteImmutabilityPolicyResult;

/// Contains results for `BlobClient::download()`
#[derive(SafeDebug)]
pub struct BlobClientDownloadResult;

/// Contains results for `BlobClient::get_account_info()`
#[derive(SafeDebug)]
pub struct BlobClientGetAccountInfoResult;

/// Contains results for `BlobClient::get_properties()`
#[derive(SafeDebug)]
pub struct BlobClientGetPropertiesResult;

/// Contains results for `BlobClient::release_lease()`
#[derive(SafeDebug)]
pub struct BlobClientReleaseLeaseResult;

/// Contains results for `BlobClient::renew_lease()`
#[derive(SafeDebug)]
pub struct BlobClientRenewLeaseResult;

/// Contains results for `BlobClient::set_expiry()`
#[derive(SafeDebug)]
pub struct BlobClientSetExpiryResult;

/// Contains results for `BlobClient::set_immutability_policy()`
#[derive(SafeDebug)]
pub struct BlobClientSetImmutabilityPolicyResult;

/// Contains results for `BlobClient::set_legal_hold()`
#[derive(SafeDebug)]
pub struct BlobClientSetLegalHoldResult;

/// Contains results for `BlobClient::start_copy_from_url()`
#[derive(SafeDebug)]
pub struct BlobClientStartCopyFromUrlResult;

/// Contains results for `BlobClient::undelete()`
#[derive(SafeDebug)]
pub struct BlobClientUndeleteResult;

/// Contains results for `BlobContainerClient::acquire_lease()`
#[derive(SafeDebug)]
pub struct BlobContainerClientAcquireLeaseResult;

/// Contains results for `BlobContainerClient::break_lease()`
#[derive(SafeDebug)]
pub struct BlobContainerClientBreakLeaseResult;

/// Contains results for `BlobContainerClient::change_lease()`
#[derive(SafeDebug)]
pub struct BlobContainerClientChangeLeaseResult;

/// Contains results for `BlobContainerClient::get_account_info()`
#[derive(SafeDebug)]
pub struct BlobContainerClientGetAccountInfoResult;

/// Contains results for `BlobContainerClient::get_properties()`
#[derive(SafeDebug)]
pub struct BlobContainerClientGetPropertiesResult;

/// Contains results for `BlobContainerClient::release_lease()`
#[derive(SafeDebug)]
pub struct BlobContainerClientReleaseLeaseResult;

/// Contains results for `BlobContainerClient::rename()`
#[derive(SafeDebug)]
pub struct BlobContainerClientRenameResult;

/// Contains results for `BlobContainerClient::renew_lease()`
#[derive(SafeDebug)]
pub struct BlobContainerClientRenewLeaseResult;

/// Contains results for `BlobContainerClient::restore()`
#[derive(SafeDebug)]
pub struct BlobContainerClientRestoreResult;

/// Contains results for `BlobContainerClient::set_access_policy()`
#[derive(SafeDebug)]
pub struct BlobContainerClientSetAccessPolicyResult;

/// The blob flat list segment.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlobFlatListSegment {
    /// The blob items.
    #[serde(default, rename = "Blob")]
    pub blob_items: Vec<BlobItemInternal>,
}

/// Represents an array of blobs.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlobHierarchyListSegment {
    /// The blob items
    #[serde(default, rename = "Blob")]
    pub blob_items: Vec<BlobItemInternal>,

    /// The blob prefixes.
    #[serde(rename = "BlobPrefix", skip_serializing_if = "Option::is_none")]
    pub blob_prefixes: Option<Vec<BlobPrefix>>,
}

/// An Azure Storage Blob
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "Blob")]
pub struct BlobItemInternal {
    /// The tags of the blob.
    #[serde(rename = "BlobTags", skip_serializing_if = "Option::is_none")]
    pub blob_tags: Option<BlobTags>,

    /// Whether the blob is deleted.
    #[serde(rename = "Deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,

    /// Whether the blog has versions only.
    #[serde(rename = "HasVersionsOnly", skip_serializing_if = "Option::is_none")]
    pub has_versions_only: Option<bool>,

    /// Whether the blob is the current version.
    #[serde(rename = "IsCurrentVersion", skip_serializing_if = "Option::is_none")]
    pub is_current_version: Option<bool>,

    /// The metadata of the blob.
    #[serde(rename = "Metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BlobMetadata>,

    /// The name of the blob.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<BlobName>,

    /// The object replication metadata of the blob.
    #[serde(rename = "OrMetadata", skip_serializing_if = "Option::is_none")]
    pub object_replication_metadata: Option<ObjectReplicationMetadata>,

    /// The properties of the blob.
    #[serde(rename = "Properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<BlobPropertiesInternal>,

    /// The snapshot of the blob.
    #[serde(rename = "Snapshot", skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<String>,

    /// The version id of the blob.
    #[serde(rename = "VersionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
}

/// The blob metadata.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlobMetadata {
    /// Whether the blob metadata is encrypted.
    #[serde(rename = "@Encrypted", skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<String>,
}

/// Represents a blob name.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlobName {
    /// The blob name.
    #[serde(rename = "$text", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,

    /// Whether the blob name is encoded.
    #[serde(rename = "@Encoded", skip_serializing_if = "Option::is_none")]
    pub encoded: Option<bool>,
}

/// Represents a blob prefix.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlobPrefix {
    /// The blob name.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<BlobName>,
}

/// The properties of a blob.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "Properties")]
pub struct BlobPropertiesInternal {
    /// The access tier of the blob.
    #[serde(rename = "AccessTier", skip_serializing_if = "Option::is_none")]
    pub access_tier: Option<AccessTier>,

    /// The access tier change time of the blob.
    #[serde(
        default,
        rename = "AccessTierChangeTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub access_tier_change_time: Option<OffsetDateTime>,

    /// Whether the access tier is inferred.
    #[serde(rename = "AccessTierInferred", skip_serializing_if = "Option::is_none")]
    pub access_tier_inferred: Option<bool>,

    /// The archive status of the blob.
    #[serde(rename = "ArchiveStatus", skip_serializing_if = "Option::is_none")]
    pub archive_status: Option<ArchiveStatus>,

    /// The sequence number of the blob.
    #[serde(
        rename = "x-ms-blob-sequence-number",
        skip_serializing_if = "Option::is_none"
    )]
    pub blob_sequence_number: Option<i64>,

    /// The blob type.
    #[serde(rename = "BlobType", skip_serializing_if = "Option::is_none")]
    pub blob_type: Option<BlobType>,

    /// The cache control of the blob.
    #[serde(rename = "Cache-Control", skip_serializing_if = "Option::is_none")]
    pub cache_control: Option<String>,

    /// The content disposition of the blob.
    #[serde(
        rename = "Content-Disposition",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_disposition: Option<String>,

    /// The content encoding of the blob.
    #[serde(rename = "Content-Encoding", skip_serializing_if = "Option::is_none")]
    pub content_encoding: Option<String>,

    /// The content language of the blob.
    #[serde(rename = "Content-Language", skip_serializing_if = "Option::is_none")]
    pub content_language: Option<String>,

    /// The content length of the blob.
    #[serde(rename = "Content-Length", skip_serializing_if = "Option::is_none")]
    pub content_length: Option<u64>,

    /// The content MD5 of the blob.
    #[serde(
        default,
        deserialize_with = "deserialize",
        rename = "Content-MD5",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_md5: Option<Vec<u8>>,

    /// The content type of the blob.
    #[serde(rename = "Content-Type", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The copy completion time of the blob.
    #[serde(
        default,
        rename = "CopyCompletionTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub copy_completion_time: Option<OffsetDateTime>,

    /// The copy ID of the blob.
    #[serde(rename = "CopyId", skip_serializing_if = "Option::is_none")]
    pub copy_id: Option<String>,

    /// The copy progress of the blob.
    #[serde(rename = "CopyProgress", skip_serializing_if = "Option::is_none")]
    pub copy_progress: Option<String>,

    /// The copy source of the blob.
    #[serde(rename = "CopySource", skip_serializing_if = "Option::is_none")]
    pub copy_source: Option<String>,

    /// The copy status of the blob.
    #[serde(rename = "CopyStatus", skip_serializing_if = "Option::is_none")]
    pub copy_status: Option<CopyStatus>,

    /// The copy status description of the blob.
    #[serde(
        rename = "CopyStatusDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_status_description: Option<String>,

    /// The date-time the blob was created in RFC1123 format.
    #[serde(
        default,
        rename = "Creation-Time",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub creation_time: Option<OffsetDateTime>,

    /// Customer provided key sha256
    #[serde(
        rename = "CustomerProvidedKeySha256",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_provided_key_sha256: Option<String>,

    /// The time the blob was deleted.
    #[serde(
        default,
        rename = "DeletedTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub deleted_time: Option<OffsetDateTime>,

    /// The name of the destination snapshot.
    #[serde(
        rename = "DestinationSnapshot",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_snapshot: Option<String>,

    /// The encryption scope of the blob.
    #[serde(rename = "EncryptionScope", skip_serializing_if = "Option::is_none")]
    pub encryption_scope: Option<String>,

    /// The blog ETag.
    #[serde(rename = "Etag", skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,

    /// The expire time of the blob.
    #[serde(
        default,
        rename = "Expiry-Time",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub expires_on: Option<OffsetDateTime>,

    /// The immutability policy until time of the blob.
    #[serde(
        default,
        rename = "ImmutabilityPolicyUntilDate",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub immutability_policy_expires_on: Option<OffsetDateTime>,

    /// The immutability policy mode of the blob.
    #[serde(
        rename = "ImmutabilityPolicyMode",
        skip_serializing_if = "Option::is_none"
    )]
    pub immutability_policy_mode: Option<BlobImmutabilityPolicyMode>,

    /// Whether the blog is incremental copy.
    #[serde(rename = "IncrementalCopy", skip_serializing_if = "Option::is_none")]
    pub incremental_copy: Option<bool>,

    /// Whether the blob is sealed.
    #[serde(rename = "Sealed", skip_serializing_if = "Option::is_none")]
    pub is_sealed: Option<bool>,

    /// The last access time of the blob.
    #[serde(
        default,
        rename = "LastAccessTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub last_accessed_on: Option<OffsetDateTime>,

    /// The date-time the blob was last modified in RFC1123 format.
    #[serde(
        default,
        rename = "Last-Modified",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub last_modified: Option<OffsetDateTime>,

    /// The lease duration of the blob.
    #[serde(rename = "LeaseDuration", skip_serializing_if = "Option::is_none")]
    pub lease_duration: Option<LeaseDuration>,

    /// The lease state of the blob.
    #[serde(rename = "LeaseState", skip_serializing_if = "Option::is_none")]
    pub lease_state: Option<LeaseState>,

    /// The lease status of the blob.
    #[serde(rename = "LeaseStatus", skip_serializing_if = "Option::is_none")]
    pub lease_status: Option<LeaseStatus>,

    /// Whether the blob is under legal hold.
    #[serde(rename = "LegalHold", skip_serializing_if = "Option::is_none")]
    pub legal_hold: Option<bool>,

    /// The rehydrate priority of the blob.
    #[serde(rename = "RehydratePriority", skip_serializing_if = "Option::is_none")]
    pub rehydrate_priority: Option<RehydratePriority>,

    /// The remaining retention days of the blob.
    #[serde(
        rename = "RemainingRetentionDays",
        skip_serializing_if = "Option::is_none"
    )]
    pub remaining_retention_days: Option<i32>,

    /// Whether the blog is encrypted on the server.
    #[serde(rename = "ServerEncrypted", skip_serializing_if = "Option::is_none")]
    pub server_encrypted: Option<bool>,

    /// The number of tags for the blob.
    #[serde(rename = "TagCount", skip_serializing_if = "Option::is_none")]
    pub tag_count: Option<i32>,
}

/// Contains results for `BlobServiceClient::get_account_info()`
#[derive(SafeDebug)]
pub struct BlobServiceClientGetAccountInfoResult;

/// The service properties.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "StorageServiceProperties")]
pub struct BlobServiceProperties {
    /// The CORS properties.
    #[serde(
        default,
        deserialize_with = "CorsCorsRule::unwrap",
        rename = "Cors",
        serialize_with = "CorsCorsRule::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub cors: Option<Vec<CorsRule>>,

    /// The default service version.
    #[serde(
        rename = "DefaultServiceVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_service_version: Option<String>,

    /// The delete retention policy.
    #[serde(
        rename = "DeleteRetentionPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_retention_policy: Option<RetentionPolicy>,

    /// The hour metrics properties.
    #[serde(rename = "HourMetrics", skip_serializing_if = "Option::is_none")]
    pub hour_metrics: Option<Metrics>,

    /// The logging properties.
    #[serde(rename = "Logging", skip_serializing_if = "Option::is_none")]
    pub logging: Option<Logging>,

    /// The minute metrics properties.
    #[serde(rename = "MinuteMetrics", skip_serializing_if = "Option::is_none")]
    pub minute_metrics: Option<Metrics>,

    /// The static website properties.
    #[serde(rename = "StaticWebsite", skip_serializing_if = "Option::is_none")]
    pub static_website: Option<StaticWebsite>,
}

/// The blob tags.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "Tag")]
pub struct BlobTag {
    /// The key of the tag.
    #[serde(rename = "Key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,

    /// The value of the tag.
    #[serde(rename = "Value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Represents blob tags.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "Tags")]
pub struct BlobTags {
    /// Represents the blob tags.
    #[serde(
        default,
        deserialize_with = "Blob_tag_setTag::unwrap",
        rename = "TagSet",
        serialize_with = "Blob_tag_setTag::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub blob_tag_set: Option<Vec<BlobTag>>,
}

/// Represents a single block in a block blob. It describes the block's ID and size.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct Block {
    /// The base64 encoded block ID.
    #[serde(
        default,
        deserialize_with = "deserialize",
        rename = "Name",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Vec<u8>>,

    /// The block size in bytes.
    #[serde(rename = "Size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
}

/// Contains results for `BlockBlobClient::commit_block_list()`
#[derive(SafeDebug)]
pub struct BlockBlobClientCommitBlockListResult;

/// Contains results for `BlockBlobClient::query()`
#[derive(SafeDebug)]
pub struct BlockBlobClientQueryResult;

/// Contains results for `BlockBlobClient::stage_block_from_url()`
#[derive(SafeDebug)]
pub struct BlockBlobClientStageBlockFromUrlResult;

/// Contains results for `BlockBlobClient::stage_block()`
#[derive(SafeDebug)]
pub struct BlockBlobClientStageBlockResult;

/// Contains results for `BlockBlobClient::upload_blob_from_url()`
#[derive(SafeDebug)]
pub struct BlockBlobClientUploadBlobFromUrlResult;

/// Contains results for `BlockBlobClient::upload()`
#[derive(SafeDebug)]
pub struct BlockBlobClientUploadResult;

/// Contains the committed and uncommitted blocks in a block blob.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BlockList {
    /// The list of committed blocks.
    #[serde(
        default,
        deserialize_with = "Committed_blocksBlock::unwrap",
        rename = "CommittedBlocks",
        serialize_with = "Committed_blocksBlock::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub committed_blocks: Option<Vec<Block>>,

    /// The list of uncommitted blocks.
    #[serde(
        default,
        deserialize_with = "Uncommitted_blocksBlock::unwrap",
        rename = "UncommittedBlocks",
        serialize_with = "Uncommitted_blocksBlock::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub uncommitted_blocks: Option<Vec<Block>>,
}

/// The Block lookup list.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "BlockList")]
pub struct BlockLookupList {
    /// The committed blocks
    #[serde(
        default,
        rename = "Committed",
        skip_serializing_if = "Option::is_none",
        with = "models_serde::option_vec_encoded_bytes_std"
    )]
    pub committed: Option<Vec<Vec<u8>>>,

    /// The latest blocks
    #[serde(
        default,
        rename = "Latest",
        skip_serializing_if = "Option::is_none",
        with = "models_serde::option_vec_encoded_bytes_std"
    )]
    pub latest: Option<Vec<Vec<u8>>>,

    /// The uncommitted blocks
    #[serde(
        default,
        rename = "Uncommitted",
        skip_serializing_if = "Option::is_none",
        with = "models_serde::option_vec_encoded_bytes_std"
    )]
    pub uncommitted: Option<Vec<Vec<u8>>>,
}

/// The clear range.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct ClearRange {
    /// The end of the byte range.
    #[serde(rename = "End", skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,

    /// The start of the byte range.
    #[serde(rename = "Start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

/// An Azure Storage container.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "Container")]
pub struct ContainerItem {
    /// Whether the container is deleted.
    #[serde(rename = "Deleted", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,

    /// The metadata of the container.
    #[serde(rename = "Metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,

    /// The name of the container.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The properties of the container.
    #[serde(rename = "Properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<ContainerProperties>,

    /// The version of the container.
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// The properties of a container.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct ContainerProperties {
    /// The default encryption scope of the container.
    #[serde(
        rename = "DefaultEncryptionScope",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_encryption_scope: Option<String>,

    /// The deleted time of the container.
    #[serde(
        default,
        rename = "DeletedTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub deleted_time: Option<OffsetDateTime>,

    /// The ETag of the container.
    #[serde(rename = "ETag", skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,

    /// Whether it has an immutability policy.
    #[serde(
        rename = "HasImmutabilityPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub has_immutability_policy: Option<bool>,

    /// The has legal hold status of the container.
    #[serde(rename = "HasLegalHold", skip_serializing_if = "Option::is_none")]
    pub has_legal_hold: Option<bool>,

    /// Whether immutable storage with versioning is enabled.
    #[serde(
        rename = "ImmutableStorageWithVersioningEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_immutable_storage_with_versioning_enabled: Option<bool>,

    /// The date-time the container was last modified in RFC1123 format.
    #[serde(
        default,
        rename = "Last-Modified",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub last_modified: Option<OffsetDateTime>,

    /// The lease duration of the container.
    #[serde(rename = "LeaseDuration", skip_serializing_if = "Option::is_none")]
    pub lease_duration: Option<LeaseDuration>,

    /// The lease state of the container.
    #[serde(rename = "LeaseState", skip_serializing_if = "Option::is_none")]
    pub lease_state: Option<LeaseState>,

    /// The lease status of the container.
    #[serde(rename = "LeaseStatus", skip_serializing_if = "Option::is_none")]
    pub lease_status: Option<LeaseStatus>,

    /// Whether to prevent encryption scope override.
    #[serde(
        rename = "DenyEncryptionScopeOverride",
        skip_serializing_if = "Option::is_none"
    )]
    pub prevent_encryption_scope_override: Option<bool>,

    /// The public access type of the container.
    #[serde(rename = "PublicAccess", skip_serializing_if = "Option::is_none")]
    pub public_access: Option<PublicAccessType>,

    /// The remaining retention days of the container.
    #[serde(
        rename = "RemainingRetentionDays",
        skip_serializing_if = "Option::is_none"
    )]
    pub remaining_retention_days: Option<i32>,
}

/// CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain.
/// Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in
/// a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct CorsRule {
    /// The allowed headers.
    #[serde(rename = "AllowedHeaders", skip_serializing_if = "Option::is_none")]
    pub allowed_headers: Option<String>,

    /// The allowed methods.
    #[serde(rename = "AllowedMethods", skip_serializing_if = "Option::is_none")]
    pub allowed_methods: Option<String>,

    /// The allowed origins.
    #[serde(rename = "AllowedOrigins", skip_serializing_if = "Option::is_none")]
    pub allowed_origins: Option<String>,

    /// The exposed headers.
    #[serde(rename = "ExposedHeaders", skip_serializing_if = "Option::is_none")]
    pub exposed_headers: Option<String>,

    /// The maximum age in seconds.
    #[serde(rename = "MaxAgeInSeconds", skip_serializing_if = "Option::is_none")]
    pub max_age_in_seconds: Option<i32>,
}

/// Represents the delimited text configuration.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct DelimitedTextConfiguration {
    /// The string used to separate columns.
    #[serde(rename = "ColumnSeparator", skip_serializing_if = "Option::is_none")]
    pub column_separator: Option<String>,

    /// The string used to escape a quote character in a field.
    #[serde(rename = "EscapeChar", skip_serializing_if = "Option::is_none")]
    pub escape_char: Option<String>,

    /// The string used to quote a specific field.
    #[serde(rename = "FieldQuote", skip_serializing_if = "Option::is_none")]
    pub field_quote: Option<String>,

    /// Represents whether the data has headers.
    #[serde(rename = "HasHeaders", skip_serializing_if = "Option::is_none")]
    pub headers_present: Option<bool>,

    /// The string used to separate records.
    #[serde(rename = "RecordSeparator", skip_serializing_if = "Option::is_none")]
    pub record_separator: Option<String>,
}

/// The filter blob item.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "Blob")]
pub struct FilterBlobItem {
    /// The properties of the blob.
    #[serde(rename = "ContainerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,

    /// Whether it is the current version of the blob
    #[serde(rename = "IsCurrentVersion", skip_serializing_if = "Option::is_none")]
    pub is_current_version: Option<bool>,

    /// The name of the blob.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The metadata of the blob.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<BlobTags>,

    /// The version ID of the blob.
    #[serde(rename = "VersionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
}

/// The result of a Filter Blobs API call
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "EnumerationResults")]
pub struct FilterBlobSegment {
    /// The blob segment.
    #[serde(
        default,
        deserialize_with = "BlobsBlob::unwrap",
        rename = "Blobs",
        serialize_with = "BlobsBlob::wrap",
        skip_serializing_if = "Option::is_none"
    )]
    pub blobs: Option<Vec<FilterBlobItem>>,

    /// The next marker of the blobs.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The service endpoint.
    #[serde(rename = "@ServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub service_endpoint: Option<String>,

    /// The filter for the blobs.
    #[serde(rename = "Where", skip_serializing_if = "Option::is_none")]
    pub where_prop: Option<String>,
}

/// Geo-Replication information for the Secondary Storage Service
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct GeoReplication {
    /// A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read
    /// operations at the secondary. Primary writes after this point in time may or may not be available for reads.
    #[serde(
        default,
        rename = "LastSyncTime",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::rfc7231::option"
    )]
    pub last_sync_time: Option<OffsetDateTime>,

    /// The status of the secondary location
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<GeoReplicationStatusType>,
}

/// Represents the JSON text configuration.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct JsonTextConfiguration {
    /// The string used to separate records.
    #[serde(rename = "RecordSeparator", skip_serializing_if = "Option::is_none")]
    pub record_separator: Option<String>,
}

/// Key information
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct KeyInfo {
    /// The date-time the key expires.
    #[serde(rename = "Expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,

    /// The date-time the key is active.
    #[serde(rename = "Start", skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
}

/// An enumeration of blobs.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "EnumerationResults")]
pub struct ListBlobsFlatSegmentResponse {
    /// The container name.
    #[serde(rename = "@ContainerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,

    /// The marker of the blobs.
    #[serde(rename = "Marker", skip_serializing_if = "Option::is_none")]
    pub marker: Option<String>,

    /// The max results of the blobs.
    #[serde(rename = "MaxResults", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,

    /// The next marker of the blobs.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The prefix of the blobs.
    #[serde(rename = "Prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    /// The blob segment.
    #[serde(default, rename = "Blobs")]
    pub segment: BlobFlatListSegment,

    /// The service endpoint.
    #[serde(rename = "@ServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub service_endpoint: Option<String>,
}

/// An enumeration of blobs
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "EnumerationResults")]
pub struct ListBlobsHierarchySegmentResponse {
    /// The container name.
    #[serde(rename = "@ContainerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,

    /// The delimiter of the blobs.
    #[serde(rename = "Delimiter", skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,

    /// The marker of the blobs.
    #[serde(rename = "Marker", skip_serializing_if = "Option::is_none")]
    pub marker: Option<String>,

    /// The max results of the blobs.
    #[serde(rename = "MaxResults", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,

    /// The next marker of the blobs.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The prefix of the blobs.
    #[serde(rename = "Prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    /// The blob segment.
    #[serde(default, rename = "Blobs")]
    pub segment: BlobHierarchyListSegment,

    /// The service endpoint.
    #[serde(rename = "@ServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub service_endpoint: Option<String>,
}

/// The list container segment response
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "EnumerationResults")]
pub struct ListContainersSegmentResponse {
    /// The container segment.
    #[serde(
        default,
        deserialize_with = "Container_itemsContainer::unwrap",
        rename = "Containers",
        serialize_with = "Container_itemsContainer::wrap"
    )]
    pub container_items: Vec<ContainerItem>,

    /// The marker of the containers.
    #[serde(rename = "Marker", skip_serializing_if = "Option::is_none")]
    pub marker: Option<String>,

    /// The max results of the containers.
    #[serde(rename = "MaxResults", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,

    /// The next marker of the containers.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The prefix of the containers.
    #[serde(rename = "Prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    /// The service endpoint.
    #[serde(rename = "@ServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub service_endpoint: Option<String>,
}

/// Azure Analytics Logging settings.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct Logging {
    /// Whether delete operation is logged.
    #[serde(rename = "Delete", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,

    /// Whether read operation is logged.
    #[serde(rename = "Read", skip_serializing_if = "Option::is_none")]
    pub read: Option<bool>,

    /// The retention policy of the logs.
    #[serde(rename = "RetentionPolicy", skip_serializing_if = "Option::is_none")]
    pub retention_policy: Option<RetentionPolicy>,

    /// The version of the logging properties.
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,

    /// Whether write operation is logged.
    #[serde(rename = "Write", skip_serializing_if = "Option::is_none")]
    pub write: Option<bool>,
}

/// The metrics properties.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct Metrics {
    /// Whether it is enabled.
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// Whether to include API in the metrics.
    #[serde(rename = "IncludeAPIs", skip_serializing_if = "Option::is_none")]
    pub include_apis: Option<bool>,

    /// The retention policy of the metrics.
    #[serde(rename = "RetentionPolicy", skip_serializing_if = "Option::is_none")]
    pub retention_policy: Option<RetentionPolicy>,

    /// The version of the metrics properties.
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// The object replication metadata.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
#[serde(rename = "OrMetadata")]
pub struct ObjectReplicationMetadata {}

/// Contains results for `PageBlobClient::clear_pages()`
#[derive(SafeDebug)]
pub struct PageBlobClientClearPagesResult;

/// Contains results for `PageBlobClient::copy_incremental()`
#[derive(SafeDebug)]
pub struct PageBlobClientCopyIncrementalResult;

/// Contains results for `PageBlobClient::create()`
#[derive(SafeDebug)]
pub struct PageBlobClientCreateResult;

/// Contains results for `PageBlobClient::resize()`
#[derive(SafeDebug)]
pub struct PageBlobClientResizeResult;

/// Contains results for `PageBlobClient::set_sequence_number()`
#[derive(SafeDebug)]
pub struct PageBlobClientSetSequenceNumberResult;

/// Contains results for `PageBlobClient::upload_pages_from_url()`
#[derive(SafeDebug)]
pub struct PageBlobClientUploadPagesFromUrlResult;

/// Contains results for `PageBlobClient::upload_pages()`
#[derive(SafeDebug)]
pub struct PageBlobClientUploadPagesResult;

/// Represents a page list.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct PageList {
    /// The clear ranges.
    #[serde(rename = "ClearRange", skip_serializing_if = "Option::is_none")]
    pub clear_range: Option<Vec<ClearRange>>,

    /// The next marker.
    #[serde(rename = "NextMarker", skip_serializing_if = "Option::is_none")]
    pub next_marker: Option<String>,

    /// The page ranges.
    #[serde(rename = "PageRange", skip_serializing_if = "Option::is_none")]
    pub page_range: Option<Vec<PageRange>>,
}

/// The page range.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct PageRange {
    /// The end of the byte range.
    #[serde(rename = "End", skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,

    /// The start of the byte range.
    #[serde(rename = "Start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

/// Represents the Parquet configuration.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct ParquetConfiguration {}

/// The query format settings.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct QueryFormat {
    /// The Apache Arrow configuration.
    #[serde(rename = "ArrowConfiguration", skip_serializing_if = "Option::is_none")]
    pub arrow_configuration: Option<ArrowConfiguration>,

    /// The delimited text configuration.
    #[serde(
        rename = "DelimitedTextConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub delimited_text_configuration: Option<DelimitedTextConfiguration>,

    /// The JSON text configuration.
    #[serde(
        rename = "JsonTextConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub json_text_configuration: Option<JsonTextConfiguration>,

    /// The Parquet configuration.
    #[serde(
        rename = "ParquetConfiguration",
        skip_serializing_if = "Option::is_none"
    )]
    pub parquet_text_configuration: Option<ParquetConfiguration>,

    /// The query type.
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<QueryType>,
}

/// Groups the set of query request settings.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct QueryRequest {
    /// The query expression in SQL. The maximum size of the query expression is 256KiB.
    #[serde(rename = "Expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    /// The input serialization settings.
    #[serde(rename = "InputSerialization", skip_serializing_if = "Option::is_none")]
    pub input_serialization: Option<QuerySerialization>,

    /// The output serialization settings.
    #[serde(
        rename = "OutputSerialization",
        skip_serializing_if = "Option::is_none"
    )]
    pub output_serialization: Option<QuerySerialization>,

    /// Required. The type of the provided query expression.
    #[serde(rename = "QueryType", skip_serializing_if = "Option::is_none")]
    pub query_type: Option<QueryRequestType>,
}

/// The query serialization settings.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct QuerySerialization {
    /// The query format.
    #[serde(rename = "Format", skip_serializing_if = "Option::is_none")]
    pub format: Option<QueryFormat>,
}

/// The retention policy.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct RetentionPolicy {
    /// Whether to allow permanent delete.
    #[serde(
        rename = "AllowPermanentDelete",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_permanent_delete: Option<bool>,

    /// The number of days to retain the logs.
    #[serde(rename = "Days", skip_serializing_if = "Option::is_none")]
    pub days: Option<i32>,

    /// Whether to enable the retention policy.
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The signed identifier.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[serde(rename = "SignedIdentifier")]
pub struct SignedIdentifier {
    /// The access policy for the signed identifier.
    #[serde(rename = "AccessPolicy", skip_serializing_if = "Option::is_none")]
    pub access_policy: Option<AccessPolicy>,

    /// The unique ID for the signed identifier.
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// The properties that enable an account to host a static website
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct StaticWebsite {
    /// Absolute path of the default index page
    #[serde(
        rename = "DefaultIndexDocumentPath",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_index_document_path: Option<String>,

    /// Indicates whether this account is hosting a static website
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// The error document.
    #[serde(
        rename = "ErrorDocument404Path",
        skip_serializing_if = "Option::is_none"
    )]
    pub error_document404_path: Option<String>,

    /// The index document.
    #[serde(rename = "IndexDocument", skip_serializing_if = "Option::is_none")]
    pub index_document: Option<String>,
}

/// Stats for the storage service.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct StorageServiceStats {
    /// The geo replication stats.
    #[serde(rename = "GeoReplication", skip_serializing_if = "Option::is_none")]
    pub geo_replication: Option<GeoReplication>,
}

/// A user delegation key.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct UserDelegationKey {
    /// The date-time the key expires.
    #[serde(rename = "SignedExpiry", skip_serializing_if = "Option::is_none")]
    pub signed_expiry: Option<String>,

    /// The Azure Active Directory object ID in GUID format.
    #[serde(rename = "SignedOid", skip_serializing_if = "Option::is_none")]
    pub signed_oid: Option<String>,

    /// Abbreviation of the Azure Storage service that accepts the key.
    #[serde(rename = "SignedService", skip_serializing_if = "Option::is_none")]
    pub signed_service: Option<String>,

    /// The date-time the key is active.
    #[serde(rename = "SignedStart", skip_serializing_if = "Option::is_none")]
    pub signed_start: Option<String>,

    /// The Azure Active Directory tenant ID in GUID format.
    #[serde(rename = "SignedTid", skip_serializing_if = "Option::is_none")]
    pub signed_tid: Option<String>,

    /// The service version that created the key.
    #[serde(rename = "SignedVersion", skip_serializing_if = "Option::is_none")]
    pub signed_version: Option<String>,

    /// The key as a base64 string.
    #[serde(
        default,
        deserialize_with = "deserialize",
        rename = "Value",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub value: Option<Vec<u8>>,
}
