// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    AccessTier, AccountKind, AppendBlobClientAppendBlockFromUrlResult,
    AppendBlobClientAppendBlockResult, AppendBlobClientCreateResult, AppendBlobClientSealResult,
    ArchiveStatus, BlobClientAbortCopyFromUrlResult, BlobClientAcquireLeaseResult,
    BlobClientBreakLeaseResult, BlobClientChangeLeaseResult, BlobClientCopyFromUrlResult,
    BlobClientCreateSnapshotResult, BlobClientDeleteImmutabilityPolicyResult,
    BlobClientDeleteResult, BlobClientDownloadResult, BlobClientGetAccountInfoResult,
    BlobClientGetPropertiesResult, BlobClientReleaseLeaseResult, BlobClientRenewLeaseResult,
    BlobClientSetExpiryResult, BlobClientSetImmutabilityPolicyResult, BlobClientSetLegalHoldResult,
    BlobClientSetMetadataResult, BlobClientSetPropertiesResult, BlobClientSetTagsResult,
    BlobClientSetTierResult, BlobClientStartCopyFromUrlResult, BlobClientUndeleteResult,
    BlobContainerClientAcquireLeaseResult, BlobContainerClientBreakLeaseResult,
    BlobContainerClientChangeLeaseResult, BlobContainerClientCreateResult,
    BlobContainerClientDeleteResult, BlobContainerClientGetAccountInfoResult,
    BlobContainerClientGetPropertiesResult, BlobContainerClientReleaseLeaseResult,
    BlobContainerClientRenameResult, BlobContainerClientRenewLeaseResult,
    BlobContainerClientRestoreResult, BlobContainerClientSetAccessPolicyResult,
    BlobContainerClientSetMetadataResult, BlobImmutabilityPolicyMode,
    BlobServiceClientGetAccountInfoResult, BlobServiceClientSetPropertiesResult, BlobTags,
    BlobType, BlockBlobClientCommitBlockListResult, BlockBlobClientPutBlobFromUrlResult,
    BlockBlobClientQueryResult, BlockBlobClientStageBlockFromUrlResult,
    BlockBlobClientStageBlockResult, BlockBlobClientUploadResult, BlockList, CopyStatus,
    FilterBlobSegment, LeaseDuration, LeaseState, LeaseStatus, ListBlobsFlatSegmentResponse,
    ListBlobsHierarchySegmentResponse, ListContainersSegmentResponse,
    PageBlobClientClearPagesResult, PageBlobClientCopyIncrementalResult,
    PageBlobClientCreateResult, PageBlobClientResizeResult,
    PageBlobClientUpdateSequenceNumberResult, PageBlobClientUploadPagesFromUrlResult,
    PageBlobClientUploadPagesResult, PageList, PublicAccessType, RehydratePriority,
    SignedIdentifier, SkuName, StorageServiceProperties, StorageServiceStats, UserDelegationKey,
};
use azure_core::{
    base64, date,
    http::{
        headers::{HeaderName, Headers},
        Response,
    },
    Result,
};
use std::collections::HashMap;
use time::OffsetDateTime;

const ACCEPT_RANGES: HeaderName = HeaderName::from_static("accept-ranges");
const ACCESS_TIER: HeaderName = HeaderName::from_static("x-ms-access-tier");
const ACCESS_TIER_CHANGE_TIME: HeaderName = HeaderName::from_static("x-ms-access-tier-change-time");
const ACCESS_TIER_INFERRED: HeaderName = HeaderName::from_static("x-ms-access-tier-inferred");
const ACCOUNT_KIND: HeaderName = HeaderName::from_static("x-ms-account-kind");
const ARCHIVE_STATUS: HeaderName = HeaderName::from_static("x-ms-archive-status");
const BLOB_APPEND_OFFSET: HeaderName = HeaderName::from_static("x-ms-blob-append-offset");
const BLOB_COMMITTED_BLOCK_COUNT: HeaderName =
    HeaderName::from_static("x-ms-blob-committed-block-count");
const BLOB_CONTENT_LENGTH: HeaderName = HeaderName::from_static("x-ms-blob-content-length");
const BLOB_CONTENT_MD5: HeaderName = HeaderName::from_static("x-ms-blob-content-md5");
const BLOB_PUBLIC_ACCESS: HeaderName = HeaderName::from_static("x-ms-blob-public-access");
const BLOB_SEALED: HeaderName = HeaderName::from_static("x-ms-blob-sealed");
const BLOB_SEQUENCE_NUMBER: HeaderName = HeaderName::from_static("x-ms-blob-sequence-number");
const BLOB_TYPE: HeaderName = HeaderName::from_static("x-ms-blob-type");
const CACHE_CONTROL: HeaderName = HeaderName::from_static("cache-control");
const CLIENT_REQUEST_ID: HeaderName = HeaderName::from_static("x-ms-client-request-id");
const CONTENT_CRC64: HeaderName = HeaderName::from_static("x-ms-content-crc64");
const CONTENT_DISPOSITION: HeaderName = HeaderName::from_static("content-disposition");
const CONTENT_ENCODING: HeaderName = HeaderName::from_static("content-encoding");
const CONTENT_LANGUAGE: HeaderName = HeaderName::from_static("content-language");
const CONTENT_LENGTH: HeaderName = HeaderName::from_static("content-length");
const CONTENT_MD5: HeaderName = HeaderName::from_static("content-md5");
const CONTENT_RANGE: HeaderName = HeaderName::from_static("content-range");
const COPY_COMPLETION_TIME: HeaderName = HeaderName::from_static("x-ms-copy-completion-time");
const COPY_DESTINATION_SNAPSHOT: HeaderName =
    HeaderName::from_static("x-ms-copy-destination-snapshot");
const COPY_ID: HeaderName = HeaderName::from_static("x-ms-copy-id");
const COPY_PROGRESS: HeaderName = HeaderName::from_static("x-ms-copy-progress");
const COPY_SOURCE: HeaderName = HeaderName::from_static("x-ms-copy-source");
const COPY_SOURCE_ERROR_CODE: HeaderName = HeaderName::from_static("x-ms-copy-source-error-code");
const COPY_SOURCE_STATUS_CODE: HeaderName = HeaderName::from_static("x-ms-copy-source-status-code");
const COPY_STATUS: HeaderName = HeaderName::from_static("x-ms-copy-status");
const COPY_STATUS_DESCRIPTION: HeaderName = HeaderName::from_static("x-ms-copy-status-description");
const CREATION_TIME: HeaderName = HeaderName::from_static("x-ms-creation-time");
const DATE: HeaderName = HeaderName::from_static("date");
const DEFAULT_ENCRYPTION_SCOPE: HeaderName =
    HeaderName::from_static("x-ms-default-encryption-scope");
const DENY_ENCRYPTION_SCOPE_OVERRIDE: HeaderName =
    HeaderName::from_static("x-ms-deny-encryption-scope-override");
const ENCRYPTION_KEY_SHA256: HeaderName = HeaderName::from_static("x-ms-encryption-key-sha256");
const ENCRYPTION_SCOPE: HeaderName = HeaderName::from_static("x-ms-encryption-scope");
const ETAG: HeaderName = HeaderName::from_static("etag");
const EXPIRY_TIME: HeaderName = HeaderName::from_static("x-ms-expiry-time");
const HAS_IMMUTABILITY_POLICY: HeaderName = HeaderName::from_static("x-ms-has-immutability-policy");
const HAS_LEGAL_HOLD: HeaderName = HeaderName::from_static("x-ms-has-legal-hold");
const IMMUTABILITY_POLICY_MODE: HeaderName =
    HeaderName::from_static("x-ms-immutability-policy-mode");
const IMMUTABILITY_POLICY_UNTIL_DATE: HeaderName =
    HeaderName::from_static("x-ms-immutability-policy-until-date");
const IMMUTABLE_STORAGE_WITH_VERSIONING_ENABLED: HeaderName =
    HeaderName::from_static("x-ms-immutable-storage-with-versioning-enabled");
const INCREMENTAL_COPY: HeaderName = HeaderName::from_static("x-ms-incremental-copy");
const IS_CURRENT_VERSION: HeaderName = HeaderName::from_static("x-ms-is-current-version");
const IS_HNS_ENABLED: HeaderName = HeaderName::from_static("x-ms-is-hns-enabled");
const LAST_ACCESS_TIME: HeaderName = HeaderName::from_static("x-ms-last-access-time");
const LAST_MODIFIED: HeaderName = HeaderName::from_static("last-modified");
const LEASE_DURATION: HeaderName = HeaderName::from_static("x-ms-lease-duration");
const LEASE_ID: HeaderName = HeaderName::from_static("x-ms-lease-id");
const LEASE_STATE: HeaderName = HeaderName::from_static("x-ms-lease-state");
const LEASE_STATUS: HeaderName = HeaderName::from_static("x-ms-lease-status");
const LEASE_TIME: HeaderName = HeaderName::from_static("x-ms-lease-time");
const LEGAL_HOLD: HeaderName = HeaderName::from_static("x-ms-legal-hold");
const META: &str = "x-ms-meta-";
const OR: &str = "x-ms-or-";
const OR_POLICY_ID: HeaderName = HeaderName::from_static("x-ms-or-policy-id");
const REHYDRATE_PRIORITY: HeaderName = HeaderName::from_static("x-ms-rehydrate-priority");
const REQUEST_ID: HeaderName = HeaderName::from_static("x-ms-request-id");
const REQUEST_SERVER_ENCRYPTED: HeaderName =
    HeaderName::from_static("x-ms-request-server-encrypted");
const SERVER_ENCRYPTED: HeaderName = HeaderName::from_static("x-ms-server-encrypted");
const SKU_NAME: HeaderName = HeaderName::from_static("x-ms-sku-name");
const SNAPSHOT: HeaderName = HeaderName::from_static("x-ms-snapshot");
const STRUCTURED_BODY: HeaderName = HeaderName::from_static("x-ms-structured-body");
const STRUCTURED_CONTENT_LENGTH: HeaderName =
    HeaderName::from_static("x-ms-structured-content-length");
const TAG_COUNT: HeaderName = HeaderName::from_static("x-ms-tag-count");
const VERSION_ID: HeaderName = HeaderName::from_static("x-ms-version-id");

/// Provides access to typed response headers for `AppendBlobClient::append_block_from_url()`
pub trait AppendBlobClientAppendBlockFromUrlResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_append_offset(&self) -> Result<Option<String>>;
    fn blob_committed_block_count(&self) -> Result<Option<i32>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
}

impl AppendBlobClientAppendBlockFromUrlResultHeaders
    for Response<AppendBlobClientAppendBlockFromUrlResult>
{
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// This response header is returned only for append operations. It returns the offset at which the block was committed, in
    /// bytes.
    fn blob_append_offset(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &BLOB_APPEND_OFFSET)
    }

    /// The number of committed blocks present in the blob. This header is returned only for append blobs.
    fn blob_committed_block_count(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &BLOB_COMMITTED_BLOCK_COUNT)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }
}

/// Provides access to typed response headers for `AppendBlobClient::append_block()`
pub trait AppendBlobClientAppendBlockResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_append_offset(&self) -> Result<Option<String>>;
    fn blob_committed_block_count(&self) -> Result<Option<i32>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn structured_body_type(&self) -> Result<Option<String>>;
}

impl AppendBlobClientAppendBlockResultHeaders for Response<AppendBlobClientAppendBlockResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// This response header is returned only for append operations. It returns the offset at which the block was committed, in
    /// bytes.
    fn blob_append_offset(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &BLOB_APPEND_OFFSET)
    }

    /// The number of committed blocks present in the blob. This header is returned only for append blobs.
    fn blob_committed_block_count(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &BLOB_COMMITTED_BLOCK_COUNT)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// Indicates the response body contains a structured message and specifies the message schema version and properties.
    fn structured_body_type(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_BODY)
    }
}

/// Provides access to typed response headers for `AppendBlobClient::create()`
pub trait AppendBlobClientCreateResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl AppendBlobClientCreateResultHeaders for Response<AppendBlobClientCreateResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `AppendBlobClient::seal()`
pub trait AppendBlobClientSealResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn is_sealed(&self) -> Result<Option<bool>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl AppendBlobClientSealResultHeaders for Response<AppendBlobClientSealResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// If this blob has been sealed
    fn is_sealed(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEALED)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::abort_copy_from_url()`
pub trait BlobClientAbortCopyFromUrlResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientAbortCopyFromUrlResultHeaders for Response<BlobClientAbortCopyFromUrlResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::acquire_lease()`
pub trait BlobClientAcquireLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientAcquireLeaseResultHeaders for Response<BlobClientAcquireLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::break_lease()`
pub trait BlobClientBreakLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_time(&self) -> Result<Option<i32>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientBreakLeaseResultHeaders for Response<BlobClientBreakLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Approximate time remaining in the lease period, in seconds.
    fn lease_time(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &LEASE_TIME)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::change_lease()`
pub trait BlobClientChangeLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientChangeLeaseResultHeaders for Response<BlobClientChangeLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::copy_from_url()`
pub trait BlobClientCopyFromUrlResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientCopyFromUrlResultHeaders for Response<BlobClientCopyFromUrlResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::create_snapshot()`
pub trait BlobClientCreateSnapshotResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn snapshot(&self) -> Result<Option<String>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientCreateSnapshotResultHeaders for Response<BlobClientCreateSnapshotResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// Uniquely identifies the snapshot and indicates the snapshot version. It may be used in subsequent requests to access the
    /// snapshot.
    fn snapshot(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &SNAPSHOT)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::delete_immutability_policy()`
pub trait BlobClientDeleteImmutabilityPolicyResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientDeleteImmutabilityPolicyResultHeaders
    for Response<BlobClientDeleteImmutabilityPolicyResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::delete()`
pub trait BlobClientDeleteResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientDeleteResultHeaders for Response<BlobClientDeleteResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::download()`
pub trait BlobClientDownloadResultHeaders: private::Sealed {
    fn accept_ranges(&self) -> Result<Option<String>>;
    fn cache_control(&self) -> Result<Option<String>>;
    fn content_disposition(&self) -> Result<Option<String>>;
    fn content_encoding(&self) -> Result<Option<String>>;
    fn content_language(&self) -> Result<Option<String>>;
    fn content_length(&self) -> Result<Option<u64>>;
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn content_range(&self) -> Result<Option<String>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_committed_block_count(&self) -> Result<Option<i32>>;
    fn blob_content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn is_sealed(&self) -> Result<Option<bool>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn blob_type(&self) -> Result<Option<BlobType>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_progress(&self) -> Result<Option<String>>;
    fn copy_source(&self) -> Result<Option<String>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn copy_status_description(&self) -> Result<Option<String>>;
    fn creation_time(&self) -> Result<Option<OffsetDateTime>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>>;
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>>;
    fn is_current_version(&self) -> Result<Option<bool>>;
    fn last_accessed(&self) -> Result<Option<OffsetDateTime>>;
    fn duration(&self) -> Result<Option<LeaseDuration>>;
    fn lease_state(&self) -> Result<Option<LeaseState>>;
    fn lease_status(&self) -> Result<Option<LeaseStatus>>;
    fn legal_hold(&self) -> Result<Option<bool>>;
    fn metadata(&self) -> Result<HashMap<String, String>>;
    fn object_replication_rules(&self) -> Result<HashMap<String, String>>;
    fn object_replication_policy_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn structured_body_type(&self) -> Result<Option<String>>;
    fn structured_content_length(&self) -> Result<Option<u64>>;
    fn tag_count(&self) -> Result<Option<i64>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientDownloadResultHeaders for Response<BlobClientDownloadResult> {
    /// Indicates that the service supports requests for partial blob content.
    fn accept_ranges(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ACCEPT_RANGES)
    }

    /// This header is returned if it was previously specified for the blob.
    fn cache_control(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CACHE_CONTROL)
    }

    /// This header returns the value that was specified for the 'x-ms-blob-content-disposition' header. The Content-Disposition
    /// response header field conveys additional information about how to process the response payload, and also can be used to
    /// attach additional metadata. For example, if set to attachment, it indicates that the user-agent should not display the
    /// response, but instead show a Save As dialog with a filename other than the blob name specified.
    fn content_disposition(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_DISPOSITION)
    }

    /// This header returns the value that was specified for the Content-Encoding request header
    fn content_encoding(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_ENCODING)
    }

    /// This header returns the value that was specified for the Content-Language request header.
    fn content_language(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LANGUAGE)
    }

    /// The number of bytes present in the response body.
    fn content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LENGTH)
    }

    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// Indicates the range of bytes returned in the event that the client requested a subset of the blob by setting the 'Range'
    /// request header.
    fn content_range(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_RANGE)
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The number of committed blocks present in the blob. This header is returned only for append blobs.
    fn blob_committed_block_count(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &BLOB_COMMITTED_BLOCK_COUNT)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn blob_content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &BLOB_CONTENT_MD5, |h| {
            base64::decode(h.as_str())
        })
    }

    /// If this blob has been sealed
    fn is_sealed(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEALED)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// The type of the blob.
    fn blob_type(&self) -> Result<Option<BlobType>> {
        Headers::get_optional_as(self.headers(), &BLOB_TYPE)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// Conclusion time of the last attempted Copy Blob operation where this blob was the destination blob. This value can specify
    /// the time of a completed, aborted, or failed copy attempt. This header does not appear if a copy is pending, if this blob
    /// has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded Copy Blob
    /// operation using Set Blob Properties, Put Blob, or Put Block List.
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &COPY_COMPLETION_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// Contains the number of bytes copied and the total bytes in the source in the last attempted Copy Blob operation where
    /// this blob was the destination blob. Can show between 0 and Content-Length bytes copied. This header does not appear if
    /// this blob has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded
    /// Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_progress(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_PROGRESS)
    }

    /// URL up to 2 KB in length that specifies the source blob or file used in the last attempted Copy Blob operation where this
    /// blob was the destination blob. This header does not appear if this blob has never been the destination in a Copy Blob
    /// operation, or if this blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob,
    /// or Put Block List.
    fn copy_source(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// Only appears when x-ms-copy-status is failed or pending. Describes the cause of the last fatal or non-fatal copy operation
    /// failure. This header does not appear if this blob has never been the destination in a Copy Blob operation, or if this
    /// blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_status_description(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS_DESCRIPTION)
    }

    /// Returns the date and time the blob was created.
    fn creation_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &CREATION_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// Indicates the immutability policy mode of the blob.
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>> {
        Headers::get_optional_as(self.headers(), &IMMUTABILITY_POLICY_MODE)
    }

    /// UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &IMMUTABILITY_POLICY_UNTIL_DATE, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The value of this header indicates whether version of this blob is a current version, see also x-ms-version-id header.
    fn is_current_version(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IS_CURRENT_VERSION)
    }

    /// UTC date/time value generated by the service that indicates the time at which the blob was last read or written to
    fn last_accessed(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_ACCESS_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
    /// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
    fn duration(&self) -> Result<Option<LeaseDuration>> {
        Headers::get_optional_as(self.headers(), &LEASE_DURATION)
    }

    /// Lease state of the blob.
    fn lease_state(&self) -> Result<Option<LeaseState>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATE)
    }

    /// The lease status of the blob.
    fn lease_status(&self) -> Result<Option<LeaseStatus>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATUS)
    }

    /// Specifies the legal hold status to set on the blob.
    fn legal_hold(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &LEGAL_HOLD)
    }

    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// Optional. Only valid when Object Replication is enabled for the storage container and on the source blob of the replication.
    /// When retrieving this header, it will return the header with the policy id and rule id (e.g. x-ms-or-policyid_ruleid),
    /// and the value will be the status of the replication (e.g. complete, failed).
    fn object_replication_rules(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > OR.len() && name.starts_with(OR) {
                values.insert(name[OR.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// Optional. Only valid when Object Replication is enabled for the storage container and on the destination blob of the replication.
    fn object_replication_policy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &OR_POLICY_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &SERVER_ENCRYPTED)
    }

    /// Indicates the response body contains a structured message and specifies the message schema version and properties.
    fn structured_body_type(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_BODY)
    }

    /// The length of the blob/file content inside the message body when the response body is returned as a structured message.
    /// Will always be smaller than Content-Length.
    fn structured_content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_CONTENT_LENGTH)
    }

    /// The number of tags associated with the blob
    fn tag_count(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &TAG_COUNT)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::get_account_info()`
pub trait BlobClientGetAccountInfoResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn account_kind(&self) -> Result<Option<AccountKind>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn sku_name(&self) -> Result<Option<SkuName>>;
}

impl BlobClientGetAccountInfoResultHeaders for Response<BlobClientGetAccountInfoResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// Identifies the account kind
    fn account_kind(&self) -> Result<Option<AccountKind>> {
        Headers::get_optional_as(self.headers(), &ACCOUNT_KIND)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Version 2019-07-07 and newer. Indicates if the account has a hierarchical namespace enabled.
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IS_HNS_ENABLED)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Identifies the sku name of the account
    fn sku_name(&self) -> Result<Option<SkuName>> {
        Headers::get_optional_as(self.headers(), &SKU_NAME)
    }
}

/// Provides access to typed response headers for `BlobClient::get_properties()`
pub trait BlobClientGetPropertiesResultHeaders: private::Sealed {
    fn accept_ranges(&self) -> Result<Option<String>>;
    fn cache_control(&self) -> Result<Option<String>>;
    fn content_disposition(&self) -> Result<Option<String>>;
    fn content_encoding(&self) -> Result<Option<String>>;
    fn content_language(&self) -> Result<Option<String>>;
    fn content_length(&self) -> Result<Option<u64>>;
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn tier(&self) -> Result<Option<AccessTier>>;
    fn access_tier_change_time(&self) -> Result<Option<OffsetDateTime>>;
    fn access_tier_inferred(&self) -> Result<Option<bool>>;
    fn archive_status(&self) -> Result<Option<ArchiveStatus>>;
    fn blob_committed_block_count(&self) -> Result<Option<i32>>;
    fn is_sealed(&self) -> Result<Option<bool>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn blob_type(&self) -> Result<Option<BlobType>>;
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>>;
    fn destination_snapshot(&self) -> Result<Option<String>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_progress(&self) -> Result<Option<String>>;
    fn copy_source(&self) -> Result<Option<String>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn copy_status_description(&self) -> Result<Option<String>>;
    fn creation_time(&self) -> Result<Option<OffsetDateTime>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn expires_on(&self) -> Result<Option<OffsetDateTime>>;
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>>;
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>>;
    fn is_incremental_copy(&self) -> Result<Option<bool>>;
    fn is_current_version(&self) -> Result<Option<bool>>;
    fn last_accessed(&self) -> Result<Option<OffsetDateTime>>;
    fn duration(&self) -> Result<Option<LeaseDuration>>;
    fn lease_state(&self) -> Result<Option<LeaseState>>;
    fn lease_status(&self) -> Result<Option<LeaseStatus>>;
    fn legal_hold(&self) -> Result<Option<bool>>;
    fn metadata(&self) -> Result<HashMap<String, String>>;
    fn object_replication_rules(&self) -> Result<HashMap<String, String>>;
    fn object_replication_policy_id(&self) -> Result<Option<String>>;
    fn rehydrate_priority(&self) -> Result<Option<RehydratePriority>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn tag_count(&self) -> Result<Option<i64>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientGetPropertiesResultHeaders for Response<BlobClientGetPropertiesResult> {
    /// Indicates that the service supports requests for partial blob content.
    fn accept_ranges(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ACCEPT_RANGES)
    }

    /// This header is returned if it was previously specified for the blob.
    fn cache_control(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CACHE_CONTROL)
    }

    /// This header returns the value that was specified for the 'x-ms-blob-content-disposition' header. The Content-Disposition
    /// response header field conveys additional information about how to process the response payload, and also can be used to
    /// attach additional metadata. For example, if set to attachment, it indicates that the user-agent should not display the
    /// response, but instead show a Save As dialog with a filename other than the blob name specified.
    fn content_disposition(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_DISPOSITION)
    }

    /// This header returns the value that was specified for the Content-Encoding request header
    fn content_encoding(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_ENCODING)
    }

    /// This header returns the value that was specified for the Content-Language request header.
    fn content_language(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LANGUAGE)
    }

    /// The number of bytes present in the response body.
    fn content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LENGTH)
    }

    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The tier to be set on the blob.
    fn tier(&self) -> Result<Option<AccessTier>> {
        Headers::get_optional_as(self.headers(), &ACCESS_TIER)
    }

    /// The time the tier was changed on the object. This is only returned if the tier on the block blob was ever set.
    fn access_tier_change_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &ACCESS_TIER_CHANGE_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// For page blobs on a premium storage account only. If the access tier is not explicitly set on the blob, the tier is inferred
    /// based on its content length and this header will be returned with true value.
    fn access_tier_inferred(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &ACCESS_TIER_INFERRED)
    }

    /// For blob storage LRS accounts, valid values are rehydrate-pending-to-hot/rehydrate-pending-to-cool. If the blob is being
    /// rehydrated and is not complete then this header is returned indicating that rehydrate is pending and also tells the destination
    /// tier.
    fn archive_status(&self) -> Result<Option<ArchiveStatus>> {
        Headers::get_optional_as(self.headers(), &ARCHIVE_STATUS)
    }

    /// The number of committed blocks present in the blob. This header is returned only for append blobs.
    fn blob_committed_block_count(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &BLOB_COMMITTED_BLOCK_COUNT)
    }

    /// If this blob has been sealed
    fn is_sealed(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEALED)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// The type of the blob.
    fn blob_type(&self) -> Result<Option<BlobType>> {
        Headers::get_optional_as(self.headers(), &BLOB_TYPE)
    }

    /// Conclusion time of the last attempted Copy Blob operation where this blob was the destination blob. This value can specify
    /// the time of a completed, aborted, or failed copy attempt. This header does not appear if a copy is pending, if this blob
    /// has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded Copy Blob
    /// operation using Set Blob Properties, Put Blob, or Put Block List.
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &COPY_COMPLETION_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// Included if the blob is incremental copy blob or incremental copy snapshot, if x-ms-copy-status is success. Snapshot time
    /// of the last successful incremental copy snapshot for this blob.
    fn destination_snapshot(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_DESTINATION_SNAPSHOT)
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// Contains the number of bytes copied and the total bytes in the source in the last attempted Copy Blob operation where
    /// this blob was the destination blob. Can show between 0 and Content-Length bytes copied. This header does not appear if
    /// this blob has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded
    /// Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_progress(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_PROGRESS)
    }

    /// URL up to 2 KB in length that specifies the source blob or file used in the last attempted Copy Blob operation where this
    /// blob was the destination blob. This header does not appear if this blob has never been the destination in a Copy Blob
    /// operation, or if this blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob,
    /// or Put Block List.
    fn copy_source(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// Only appears when x-ms-copy-status is failed or pending. Describes the cause of the last fatal or non-fatal copy operation
    /// failure. This header does not appear if this blob has never been the destination in a Copy Blob operation, or if this
    /// blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_status_description(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS_DESCRIPTION)
    }

    /// Returns the date and time the blob was created.
    fn creation_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &CREATION_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// The time this blob will expire.
    fn expires_on(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &EXPIRY_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// Indicates the immutability policy mode of the blob.
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>> {
        Headers::get_optional_as(self.headers(), &IMMUTABILITY_POLICY_MODE)
    }

    /// UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &IMMUTABILITY_POLICY_UNTIL_DATE, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// Included if the blob is incremental copy blob.
    fn is_incremental_copy(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &INCREMENTAL_COPY)
    }

    /// The value of this header indicates whether version of this blob is a current version, see also x-ms-version-id header.
    fn is_current_version(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IS_CURRENT_VERSION)
    }

    /// UTC date/time value generated by the service that indicates the time at which the blob was last read or written to
    fn last_accessed(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_ACCESS_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
    /// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
    fn duration(&self) -> Result<Option<LeaseDuration>> {
        Headers::get_optional_as(self.headers(), &LEASE_DURATION)
    }

    /// Lease state of the blob.
    fn lease_state(&self) -> Result<Option<LeaseState>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATE)
    }

    /// The lease status of the blob.
    fn lease_status(&self) -> Result<Option<LeaseStatus>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATUS)
    }

    /// Specifies the legal hold status to set on the blob.
    fn legal_hold(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &LEGAL_HOLD)
    }

    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// Optional. Only valid when Object Replication is enabled for the storage container and on the source blob of the replication.
    /// When retrieving this header, it will return the header with the policy id and rule id (e.g. x-ms-or-policyid_ruleid),
    /// and the value will be the status of the replication (e.g. complete, failed).
    fn object_replication_rules(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > OR.len() && name.starts_with(OR) {
                values.insert(name[OR.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// Optional. Only valid when Object Replication is enabled for the storage container and on the destination blob of the replication.
    fn object_replication_policy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &OR_POLICY_ID)
    }

    /// If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High
    /// and Standard.
    fn rehydrate_priority(&self) -> Result<Option<RehydratePriority>> {
        Headers::get_optional_as(self.headers(), &REHYDRATE_PRIORITY)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &SERVER_ENCRYPTED)
    }

    /// The number of tags associated with the blob
    fn tag_count(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &TAG_COUNT)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::release_lease()`
pub trait BlobClientReleaseLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientReleaseLeaseResultHeaders for Response<BlobClientReleaseLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::renew_lease()`
pub trait BlobClientRenewLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientRenewLeaseResultHeaders for Response<BlobClientRenewLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_expiry()`
pub trait BlobClientSetExpiryResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetExpiryResultHeaders for Response<BlobClientSetExpiryResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_immutability_policy()`
pub trait BlobClientSetImmutabilityPolicyResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>>;
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetImmutabilityPolicyResultHeaders
    for Response<BlobClientSetImmutabilityPolicyResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Indicates the immutability policy mode of the blob.
    fn immutability_policy_mode(&self) -> Result<Option<BlobImmutabilityPolicyMode>> {
        Headers::get_optional_as(self.headers(), &IMMUTABILITY_POLICY_MODE)
    }

    /// UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.
    fn immutability_policy_expires_on(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &IMMUTABILITY_POLICY_UNTIL_DATE, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_legal_hold()`
pub trait BlobClientSetLegalHoldResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn legal_hold(&self) -> Result<Option<bool>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetLegalHoldResultHeaders for Response<BlobClientSetLegalHoldResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Specifies the legal hold status to set on the blob.
    fn legal_hold(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &LEGAL_HOLD)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_metadata()`
pub trait BlobClientSetMetadataResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetMetadataResultHeaders for Response<BlobClientSetMetadataResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_properties()`
pub trait BlobClientSetPropertiesResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetPropertiesResultHeaders for Response<BlobClientSetPropertiesResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_tags()`
pub trait BlobClientSetTagsResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetTagsResultHeaders for Response<BlobClientSetTagsResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::set_tier()`
pub trait BlobClientSetTierResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientSetTierResultHeaders for Response<BlobClientSetTierResult> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::start_copy_from_url()`
pub trait BlobClientStartCopyFromUrlResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlobClientStartCopyFromUrlResultHeaders for Response<BlobClientStartCopyFromUrlResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::undelete()`
pub trait BlobClientUndeleteResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobClientUndeleteResultHeaders for Response<BlobClientUndeleteResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::acquire_lease()`
pub trait BlobContainerClientAcquireLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientAcquireLeaseResultHeaders
    for Response<BlobContainerClientAcquireLeaseResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::break_lease()`
pub trait BlobContainerClientBreakLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn lease_time(&self) -> Result<Option<i32>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientBreakLeaseResultHeaders for Response<BlobContainerClientBreakLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// Approximate time remaining in the lease period, in seconds.
    fn lease_time(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &LEASE_TIME)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::change_lease()`
pub trait BlobContainerClientChangeLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientChangeLeaseResultHeaders
    for Response<BlobContainerClientChangeLeaseResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::create()`
pub trait BlobContainerClientCreateResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientCreateResultHeaders for Response<BlobContainerClientCreateResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::delete()`
pub trait BlobContainerClientDeleteResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientDeleteResultHeaders for Response<BlobContainerClientDeleteResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::get_account_info()`
pub trait BlobContainerClientGetAccountInfoResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn account_kind(&self) -> Result<Option<AccountKind>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn sku_name(&self) -> Result<Option<SkuName>>;
}

impl BlobContainerClientGetAccountInfoResultHeaders
    for Response<BlobContainerClientGetAccountInfoResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// Identifies the account kind
    fn account_kind(&self) -> Result<Option<AccountKind>> {
        Headers::get_optional_as(self.headers(), &ACCOUNT_KIND)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Version 2019-07-07 and newer. Indicates if the account has a hierarchical namespace enabled.
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IS_HNS_ENABLED)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Identifies the sku name of the account
    fn sku_name(&self) -> Result<Option<SkuName>> {
        Headers::get_optional_as(self.headers(), &SKU_NAME)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::get_properties()`
pub trait BlobContainerClientGetPropertiesResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn access(&self) -> Result<Option<PublicAccessType>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn default_encryption_scope(&self) -> Result<Option<String>>;
    fn prevent_encryption_scope_override(&self) -> Result<Option<bool>>;
    fn has_immutability_policy(&self) -> Result<Option<bool>>;
    fn has_legal_hold(&self) -> Result<Option<bool>>;
    fn is_immutable_storage_with_versioning_enabled(&self) -> Result<Option<bool>>;
    fn duration(&self) -> Result<Option<LeaseDuration>>;
    fn lease_state(&self) -> Result<Option<LeaseState>>;
    fn lease_status(&self) -> Result<Option<LeaseStatus>>;
    fn metadata(&self) -> Result<HashMap<String, String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientGetPropertiesResultHeaders
    for Response<BlobContainerClientGetPropertiesResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The public access setting for the container.
    fn access(&self) -> Result<Option<PublicAccessType>> {
        Headers::get_optional_as(self.headers(), &BLOB_PUBLIC_ACCESS)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// The default encryption scope for the container.
    fn default_encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &DEFAULT_ENCRYPTION_SCOPE)
    }

    /// If a blob has a lease and the lease is of infinite duration then the value of this header is set to true, otherwise it
    /// is set to false.
    fn prevent_encryption_scope_override(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &DENY_ENCRYPTION_SCOPE_OVERRIDE)
    }

    /// Indicates whether the container has an immutability policy set on it.
    fn has_immutability_policy(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &HAS_IMMUTABILITY_POLICY)
    }

    /// Indicates whether the container has a legal hold.
    fn has_legal_hold(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &HAS_LEGAL_HOLD)
    }

    /// Indicates whether version level worm is enabled on a container
    fn is_immutable_storage_with_versioning_enabled(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IMMUTABLE_STORAGE_WITH_VERSIONING_ENABLED)
    }

    /// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
    /// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
    fn duration(&self) -> Result<Option<LeaseDuration>> {
        Headers::get_optional_as(self.headers(), &LEASE_DURATION)
    }

    /// Lease state of the blob.
    fn lease_state(&self) -> Result<Option<LeaseState>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATE)
    }

    /// The lease status of the blob.
    fn lease_status(&self) -> Result<Option<LeaseStatus>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATUS)
    }

    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::release_lease()`
pub trait BlobContainerClientReleaseLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientReleaseLeaseResultHeaders
    for Response<BlobContainerClientReleaseLeaseResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::rename()`
pub trait BlobContainerClientRenameResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientRenameResultHeaders for Response<BlobContainerClientRenameResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::renew_lease()`
pub trait BlobContainerClientRenewLeaseResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn lease_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientRenewLeaseResultHeaders for Response<BlobContainerClientRenewLeaseResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Uniquely identifies a blobs' lease
    fn lease_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &LEASE_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::restore()`
pub trait BlobContainerClientRestoreResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientRestoreResultHeaders for Response<BlobContainerClientRestoreResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::set_access_policy()`
pub trait BlobContainerClientSetAccessPolicyResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientSetAccessPolicyResultHeaders
    for Response<BlobContainerClientSetAccessPolicyResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::set_metadata()`
pub trait BlobContainerClientSetMetadataResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobContainerClientSetMetadataResultHeaders
    for Response<BlobContainerClientSetMetadataResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::get_account_info()`
pub trait BlobServiceClientGetAccountInfoResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn account_kind(&self) -> Result<Option<AccountKind>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn sku_name(&self) -> Result<Option<SkuName>>;
}

impl BlobServiceClientGetAccountInfoResultHeaders
    for Response<BlobServiceClientGetAccountInfoResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// Identifies the account kind
    fn account_kind(&self) -> Result<Option<AccountKind>> {
        Headers::get_optional_as(self.headers(), &ACCOUNT_KIND)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// Version 2019-07-07 and newer. Indicates if the account has a hierarchical namespace enabled.
    fn is_hierarchical_namespace_enabled(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &IS_HNS_ENABLED)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// Identifies the sku name of the account
    fn sku_name(&self) -> Result<Option<SkuName>> {
        Headers::get_optional_as(self.headers(), &SKU_NAME)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::set_properties()`
pub trait BlobServiceClientSetPropertiesResultHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobServiceClientSetPropertiesResultHeaders
    for Response<BlobServiceClientSetPropertiesResult>
{
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobClient::get_tags()`
pub trait BlobTagsHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlobTagsHeaders for Response<BlobTags> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::commit_block_list()`
pub trait BlockBlobClientCommitBlockListResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlockBlobClientCommitBlockListResultHeaders
    for Response<BlockBlobClientCommitBlockListResult>
{
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::put_blob_from_url()`
pub trait BlockBlobClientPutBlobFromUrlResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlockBlobClientPutBlobFromUrlResultHeaders for Response<BlockBlobClientPutBlobFromUrlResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::query()`
pub trait BlockBlobClientQueryResultHeaders: private::Sealed {
    fn accept_ranges(&self) -> Result<Option<String>>;
    fn cache_control(&self) -> Result<Option<String>>;
    fn content_disposition(&self) -> Result<Option<String>>;
    fn content_encoding(&self) -> Result<Option<String>>;
    fn content_language(&self) -> Result<Option<String>>;
    fn content_length(&self) -> Result<Option<u64>>;
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn content_range(&self) -> Result<Option<String>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_committed_block_count(&self) -> Result<Option<i32>>;
    fn blob_content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn blob_type(&self) -> Result<Option<BlobType>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_progress(&self) -> Result<Option<String>>;
    fn copy_source(&self) -> Result<Option<String>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn copy_status_description(&self) -> Result<Option<String>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn duration(&self) -> Result<Option<LeaseDuration>>;
    fn lease_state(&self) -> Result<Option<LeaseState>>;
    fn lease_status(&self) -> Result<Option<LeaseStatus>>;
    fn metadata(&self) -> Result<HashMap<String, String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
}

impl BlockBlobClientQueryResultHeaders for Response<BlockBlobClientQueryResult> {
    /// Indicates that the service supports requests for partial blob content.
    fn accept_ranges(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ACCEPT_RANGES)
    }

    /// This header is returned if it was previously specified for the blob.
    fn cache_control(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CACHE_CONTROL)
    }

    /// This header returns the value that was specified for the 'x-ms-blob-content-disposition' header. The Content-Disposition
    /// response header field conveys additional information about how to process the response payload, and also can be used to
    /// attach additional metadata. For example, if set to attachment, it indicates that the user-agent should not display the
    /// response, but instead show a Save As dialog with a filename other than the blob name specified.
    fn content_disposition(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_DISPOSITION)
    }

    /// This header returns the value that was specified for the Content-Encoding request header
    fn content_encoding(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_ENCODING)
    }

    /// This header returns the value that was specified for the Content-Language request header.
    fn content_language(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LANGUAGE)
    }

    /// The number of bytes present in the response body.
    fn content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &CONTENT_LENGTH)
    }

    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// Indicates the range of bytes returned in the event that the client requested a subset of the blob by setting the 'Range'
    /// request header.
    fn content_range(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CONTENT_RANGE)
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The number of committed blocks present in the blob. This header is returned only for append blobs.
    fn blob_committed_block_count(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &BLOB_COMMITTED_BLOCK_COUNT)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn blob_content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &BLOB_CONTENT_MD5, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// The type of the blob.
    fn blob_type(&self) -> Result<Option<BlobType>> {
        Headers::get_optional_as(self.headers(), &BLOB_TYPE)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// Conclusion time of the last attempted Copy Blob operation where this blob was the destination blob. This value can specify
    /// the time of a completed, aborted, or failed copy attempt. This header does not appear if a copy is pending, if this blob
    /// has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded Copy Blob
    /// operation using Set Blob Properties, Put Blob, or Put Block List.
    fn copy_completion_time(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &COPY_COMPLETION_TIME, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// Contains the number of bytes copied and the total bytes in the source in the last attempted Copy Blob operation where
    /// this blob was the destination blob. Can show between 0 and Content-Length bytes copied. This header does not appear if
    /// this blob has never been the destination in a Copy Blob operation, or if this blob has been modified after a concluded
    /// Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_progress(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_PROGRESS)
    }

    /// URL up to 2 KB in length that specifies the source blob or file used in the last attempted Copy Blob operation where this
    /// blob was the destination blob. This header does not appear if this blob has never been the destination in a Copy Blob
    /// operation, or if this blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob,
    /// or Put Block List.
    fn copy_source(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// Only appears when x-ms-copy-status is failed or pending. Describes the cause of the last fatal or non-fatal copy operation
    /// failure. This header does not appear if this blob has never been the destination in a Copy Blob operation, or if this
    /// blob has been modified after a concluded Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
    fn copy_status_description(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS_DESCRIPTION)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
    /// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
    fn duration(&self) -> Result<Option<LeaseDuration>> {
        Headers::get_optional_as(self.headers(), &LEASE_DURATION)
    }

    /// Lease state of the blob.
    fn lease_state(&self) -> Result<Option<LeaseState>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATE)
    }

    /// The lease status of the blob.
    fn lease_status(&self) -> Result<Option<LeaseStatus>> {
        Headers::get_optional_as(self.headers(), &LEASE_STATUS)
    }

    /// The metadata headers.
    fn metadata(&self) -> Result<HashMap<String, String>> {
        let mut values = HashMap::new();
        for h in self.headers().iter() {
            let name = h.0.as_str();
            if name.len() > META.len() && name.starts_with(META) {
                values.insert(name[META.len()..].to_owned(), h.1.as_str().to_owned());
            }
        }
        Ok(values)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &SERVER_ENCRYPTED)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::stage_block_from_url()`
pub trait BlockBlobClientStageBlockFromUrlResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
}

impl BlockBlobClientStageBlockFromUrlResultHeaders
    for Response<BlockBlobClientStageBlockFromUrlResult>
{
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::stage_block()`
pub trait BlockBlobClientStageBlockResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn structured_body_type(&self) -> Result<Option<String>>;
}

impl BlockBlobClientStageBlockResultHeaders for Response<BlockBlobClientStageBlockResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// Indicates the response body contains a structured message and specifies the message schema version and properties.
    fn structured_body_type(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_BODY)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::upload()`
pub trait BlockBlobClientUploadResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn structured_body_type(&self) -> Result<Option<String>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl BlockBlobClientUploadResultHeaders for Response<BlockBlobClientUploadResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// Indicates the response body contains a structured message and specifies the message schema version and properties.
    fn structured_body_type(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_BODY)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `BlockBlobClient::get_block_list()`
pub trait BlockListHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_content_length(&self) -> Result<Option<u64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl BlockListHeaders for Response<BlockList> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// This header specifies the maximum size for the page blob, up to 1 TB. The page blob size must be aligned to a 512-byte
    /// boundary.
    fn blob_content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &BLOB_CONTENT_LENGTH)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for the following methods:
/// * `BlobContainerClient::filter_blobs()`
/// * `BlobServiceClient::filter_blobs()`
pub trait FilterBlobSegmentHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl FilterBlobSegmentHeaders for Response<FilterBlobSegment> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::list_blob_flat_segment()`
pub trait ListBlobsFlatSegmentResponseHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl ListBlobsFlatSegmentResponseHeaders for Response<ListBlobsFlatSegmentResponse> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::list_blob_hierarchy_segment()`
pub trait ListBlobsHierarchySegmentResponseHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl ListBlobsHierarchySegmentResponseHeaders for Response<ListBlobsHierarchySegmentResponse> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::list_containers_segment()`
pub trait ListContainersSegmentResponseHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl ListContainersSegmentResponseHeaders for Response<ListContainersSegmentResponse> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `PageBlobClient::clear_pages()`
pub trait PageBlobClientClearPagesResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
}

impl PageBlobClientClearPagesResultHeaders for Response<PageBlobClientClearPagesResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }
}

/// Provides access to typed response headers for `PageBlobClient::copy_incremental()`
pub trait PageBlobClientCopyIncrementalResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn copy_id(&self) -> Result<Option<String>>;
    fn copy_status(&self) -> Result<Option<CopyStatus>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl PageBlobClientCopyIncrementalResultHeaders for Response<PageBlobClientCopyIncrementalResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// String identifier for this copy operation. Use with Get Blob Properties to check the status of this copy operation, or
    /// pass to Abort Copy Blob to abort a pending copy.
    fn copy_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_ID)
    }

    /// State of the copy operation identified by x-ms-copy-id.
    fn copy_status(&self) -> Result<Option<CopyStatus>> {
        Headers::get_optional_as(self.headers(), &COPY_STATUS)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `PageBlobClient::create()`
pub trait PageBlobClientCreateResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn version_id(&self) -> Result<Option<String>>;
}

impl PageBlobClientCreateResultHeaders for Response<PageBlobClientCreateResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// A DateTime value returned by the service that uniquely identifies the blob. The value of this header indicates the blob
    /// version, and may be used in subsequent requests to access this version of the blob.
    fn version_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &VERSION_ID)
    }
}

/// Provides access to typed response headers for `PageBlobClient::resize()`
pub trait PageBlobClientResizeResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl PageBlobClientResizeResultHeaders for Response<PageBlobClientResizeResult> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `PageBlobClient::update_sequence_number()`
pub trait PageBlobClientUpdateSequenceNumberResultHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl PageBlobClientUpdateSequenceNumberResultHeaders
    for Response<PageBlobClientUpdateSequenceNumberResult>
{
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `PageBlobClient::upload_pages_from_url()`
pub trait PageBlobClientUploadPagesFromUrlResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn copy_source_error_code(&self) -> Result<Option<String>>;
    fn copy_source_status_code(&self) -> Result<Option<i32>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
}

impl PageBlobClientUploadPagesFromUrlResultHeaders
    for Response<PageBlobClientUploadPagesFromUrlResult>
{
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The error code for the copy source.
    fn copy_source_error_code(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_ERROR_CODE)
    }

    /// The status code for the copy source.
    fn copy_source_status_code(&self) -> Result<Option<i32>> {
        Headers::get_optional_as(self.headers(), &COPY_SOURCE_STATUS_CODE)
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }
}

/// Provides access to typed response headers for `PageBlobClient::upload_pages()`
pub trait PageBlobClientUploadPagesResultHeaders: private::Sealed {
    fn content_md5(&self) -> Result<Option<Vec<u8>>>;
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_sequence_number(&self) -> Result<Option<i64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn content_crc64(&self) -> Result<Option<Vec<u8>>>;
    fn encryption_key_sha256(&self) -> Result<Option<String>>;
    fn encryption_scope(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
    fn is_server_encrypted(&self) -> Result<Option<bool>>;
    fn structured_body_type(&self) -> Result<Option<String>>;
}

impl PageBlobClientUploadPagesResultHeaders for Response<PageBlobClientUploadPagesResult> {
    /// If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the
    /// client can check for message content integrity.
    fn content_md5(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_MD5, |h| base64::decode(h.as_str()))
    }

    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The current sequence number for a page blob. This header is not returned for block blobs or append blobs.
    fn blob_sequence_number(&self) -> Result<Option<i64>> {
        Headers::get_optional_as(self.headers(), &BLOB_SEQUENCE_NUMBER)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// This response header is returned so that the client can check for the integrity of the copied content.
    fn content_crc64(&self) -> Result<Option<Vec<u8>>> {
        Headers::get_optional_with(self.headers(), &CONTENT_CRC64, |h| {
            base64::decode(h.as_str())
        })
    }

    /// The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted
    /// with a customer-provided key.
    fn encryption_key_sha256(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_KEY_SHA256)
    }

    /// If the blob has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned
    /// with the value of the whole blob's MD5 value. This value may or may not be equal to the value returned in Content-MD5
    /// header, with the latter calculated from the requested range
    fn encryption_scope(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ENCRYPTION_SCOPE)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }

    /// The value of this header is set to true if the contents of the request are successfully encrypted using the specified
    /// algorithm, and false otherwise.
    fn is_server_encrypted(&self) -> Result<Option<bool>> {
        Headers::get_optional_as(self.headers(), &REQUEST_SERVER_ENCRYPTED)
    }

    /// Indicates the response body contains a structured message and specifies the message schema version and properties.
    fn structured_body_type(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &STRUCTURED_BODY)
    }
}

/// Provides access to typed response headers for the following methods:
/// * `PageBlobClient::get_page_ranges()`
/// * `PageBlobClient::get_page_ranges_diff()`
pub trait PageListHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn blob_content_length(&self) -> Result<Option<u64>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl PageListHeaders for Response<PageList> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// This header specifies the maximum size for the page blob, up to 1 TB. The page blob size must be aligned to a 512-byte
    /// boundary.
    fn blob_content_length(&self) -> Result<Option<u64>> {
        Headers::get_optional_as(self.headers(), &BLOB_CONTENT_LENGTH)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::get_properties()`
pub trait StorageServicePropertiesHeaders: private::Sealed {
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl StorageServicePropertiesHeaders for Response<StorageServiceProperties> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::get_statistics()`
pub trait StorageServiceStatsHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl StorageServiceStatsHeaders for Response<StorageServiceStats> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobServiceClient::get_user_delegation_key()`
pub trait UserDelegationKeyHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl UserDelegationKeyHeaders for Response<UserDelegationKey> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

/// Provides access to typed response headers for `BlobContainerClient::get_access_policy()`
pub trait VecSignedIdentifierHeaders: private::Sealed {
    fn date(&self) -> Result<Option<OffsetDateTime>>;
    fn last_modified(&self) -> Result<Option<OffsetDateTime>>;
    fn etag(&self) -> Result<Option<String>>;
    fn access(&self) -> Result<Option<PublicAccessType>>;
    fn client_request_id(&self) -> Result<Option<String>>;
    fn request_id(&self) -> Result<Option<String>>;
}

impl VecSignedIdentifierHeaders for Response<Vec<SignedIdentifier>> {
    /// UTC date/time value generated by the service that indicates the time at which the response was initiated
    fn date(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &DATE, |h| date::parse_rfc7231(h.as_str()))
    }

    /// The date/time that the container was last modified.
    fn last_modified(&self) -> Result<Option<OffsetDateTime>> {
        Headers::get_optional_with(self.headers(), &LAST_MODIFIED, |h| {
            date::parse_rfc7231(h.as_str())
        })
    }

    /// The ETag contains a value that you can use to perform operations conditionally.
    fn etag(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &ETAG)
    }

    /// The public access setting for the container.
    fn access(&self) -> Result<Option<PublicAccessType>> {
        Headers::get_optional_as(self.headers(), &BLOB_PUBLIC_ACCESS)
    }

    /// An opaque, globally-unique, client-generated string identifier for the request.
    fn client_request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &CLIENT_REQUEST_ID)
    }

    /// An opaque, globally-unique, server-generated string identifier for the request.
    fn request_id(&self) -> Result<Option<String>> {
        Headers::get_optional_as(self.headers(), &REQUEST_ID)
    }
}

mod private {
    use super::{
        AppendBlobClientAppendBlockFromUrlResult, AppendBlobClientAppendBlockResult,
        AppendBlobClientCreateResult, AppendBlobClientSealResult, BlobClientAbortCopyFromUrlResult,
        BlobClientAcquireLeaseResult, BlobClientBreakLeaseResult, BlobClientChangeLeaseResult,
        BlobClientCopyFromUrlResult, BlobClientCreateSnapshotResult,
        BlobClientDeleteImmutabilityPolicyResult, BlobClientDeleteResult, BlobClientDownloadResult,
        BlobClientGetAccountInfoResult, BlobClientGetPropertiesResult,
        BlobClientReleaseLeaseResult, BlobClientRenewLeaseResult, BlobClientSetExpiryResult,
        BlobClientSetImmutabilityPolicyResult, BlobClientSetLegalHoldResult,
        BlobClientSetMetadataResult, BlobClientSetPropertiesResult, BlobClientSetTagsResult,
        BlobClientSetTierResult, BlobClientStartCopyFromUrlResult, BlobClientUndeleteResult,
        BlobContainerClientAcquireLeaseResult, BlobContainerClientBreakLeaseResult,
        BlobContainerClientChangeLeaseResult, BlobContainerClientCreateResult,
        BlobContainerClientDeleteResult, BlobContainerClientGetAccountInfoResult,
        BlobContainerClientGetPropertiesResult, BlobContainerClientReleaseLeaseResult,
        BlobContainerClientRenameResult, BlobContainerClientRenewLeaseResult,
        BlobContainerClientRestoreResult, BlobContainerClientSetAccessPolicyResult,
        BlobContainerClientSetMetadataResult, BlobServiceClientGetAccountInfoResult,
        BlobServiceClientSetPropertiesResult, BlobTags, BlockBlobClientCommitBlockListResult,
        BlockBlobClientPutBlobFromUrlResult, BlockBlobClientQueryResult,
        BlockBlobClientStageBlockFromUrlResult, BlockBlobClientStageBlockResult,
        BlockBlobClientUploadResult, BlockList, FilterBlobSegment, ListBlobsFlatSegmentResponse,
        ListBlobsHierarchySegmentResponse, ListContainersSegmentResponse,
        PageBlobClientClearPagesResult, PageBlobClientCopyIncrementalResult,
        PageBlobClientCreateResult, PageBlobClientResizeResult,
        PageBlobClientUpdateSequenceNumberResult, PageBlobClientUploadPagesFromUrlResult,
        PageBlobClientUploadPagesResult, PageList, SignedIdentifier, StorageServiceProperties,
        StorageServiceStats, UserDelegationKey,
    };
    use azure_core::http::Response;

    pub trait Sealed {}

    impl Sealed for Response<AppendBlobClientAppendBlockFromUrlResult> {}
    impl Sealed for Response<AppendBlobClientAppendBlockResult> {}
    impl Sealed for Response<AppendBlobClientCreateResult> {}
    impl Sealed for Response<AppendBlobClientSealResult> {}
    impl Sealed for Response<BlobClientAbortCopyFromUrlResult> {}
    impl Sealed for Response<BlobClientAcquireLeaseResult> {}
    impl Sealed for Response<BlobClientBreakLeaseResult> {}
    impl Sealed for Response<BlobClientChangeLeaseResult> {}
    impl Sealed for Response<BlobClientCopyFromUrlResult> {}
    impl Sealed for Response<BlobClientCreateSnapshotResult> {}
    impl Sealed for Response<BlobClientDeleteImmutabilityPolicyResult> {}
    impl Sealed for Response<BlobClientDeleteResult> {}
    impl Sealed for Response<BlobClientDownloadResult> {}
    impl Sealed for Response<BlobClientGetAccountInfoResult> {}
    impl Sealed for Response<BlobClientGetPropertiesResult> {}
    impl Sealed for Response<BlobClientReleaseLeaseResult> {}
    impl Sealed for Response<BlobClientRenewLeaseResult> {}
    impl Sealed for Response<BlobClientSetExpiryResult> {}
    impl Sealed for Response<BlobClientSetImmutabilityPolicyResult> {}
    impl Sealed for Response<BlobClientSetLegalHoldResult> {}
    impl Sealed for Response<BlobClientSetMetadataResult> {}
    impl Sealed for Response<BlobClientSetPropertiesResult> {}
    impl Sealed for Response<BlobClientSetTagsResult> {}
    impl Sealed for Response<BlobClientSetTierResult> {}
    impl Sealed for Response<BlobClientStartCopyFromUrlResult> {}
    impl Sealed for Response<BlobClientUndeleteResult> {}
    impl Sealed for Response<BlobContainerClientAcquireLeaseResult> {}
    impl Sealed for Response<BlobContainerClientBreakLeaseResult> {}
    impl Sealed for Response<BlobContainerClientChangeLeaseResult> {}
    impl Sealed for Response<BlobContainerClientCreateResult> {}
    impl Sealed for Response<BlobContainerClientDeleteResult> {}
    impl Sealed for Response<BlobContainerClientGetAccountInfoResult> {}
    impl Sealed for Response<BlobContainerClientGetPropertiesResult> {}
    impl Sealed for Response<BlobContainerClientReleaseLeaseResult> {}
    impl Sealed for Response<BlobContainerClientRenameResult> {}
    impl Sealed for Response<BlobContainerClientRenewLeaseResult> {}
    impl Sealed for Response<BlobContainerClientRestoreResult> {}
    impl Sealed for Response<BlobContainerClientSetAccessPolicyResult> {}
    impl Sealed for Response<BlobContainerClientSetMetadataResult> {}
    impl Sealed for Response<BlobServiceClientGetAccountInfoResult> {}
    impl Sealed for Response<BlobServiceClientSetPropertiesResult> {}
    impl Sealed for Response<BlobTags> {}
    impl Sealed for Response<BlockBlobClientCommitBlockListResult> {}
    impl Sealed for Response<BlockBlobClientPutBlobFromUrlResult> {}
    impl Sealed for Response<BlockBlobClientQueryResult> {}
    impl Sealed for Response<BlockBlobClientStageBlockFromUrlResult> {}
    impl Sealed for Response<BlockBlobClientStageBlockResult> {}
    impl Sealed for Response<BlockBlobClientUploadResult> {}
    impl Sealed for Response<BlockList> {}
    impl Sealed for Response<FilterBlobSegment> {}
    impl Sealed for Response<ListBlobsFlatSegmentResponse> {}
    impl Sealed for Response<ListBlobsHierarchySegmentResponse> {}
    impl Sealed for Response<ListContainersSegmentResponse> {}
    impl Sealed for Response<PageBlobClientClearPagesResult> {}
    impl Sealed for Response<PageBlobClientCopyIncrementalResult> {}
    impl Sealed for Response<PageBlobClientCreateResult> {}
    impl Sealed for Response<PageBlobClientResizeResult> {}
    impl Sealed for Response<PageBlobClientUpdateSequenceNumberResult> {}
    impl Sealed for Response<PageBlobClientUploadPagesFromUrlResult> {}
    impl Sealed for Response<PageBlobClientUploadPagesResult> {}
    impl Sealed for Response<PageList> {}
    impl Sealed for Response<StorageServiceProperties> {}
    impl Sealed for Response<StorageServiceStats> {}
    impl Sealed for Response<UserDelegationKey> {}
    impl Sealed for Response<Vec<SignedIdentifier>> {}
}
