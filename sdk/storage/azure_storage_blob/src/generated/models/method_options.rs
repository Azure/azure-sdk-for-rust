// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    AccessTier, BlobCopySourceTags, BlobDeleteType, DeleteSnapshotsOptionType,
    EncryptionAlgorithmType, FileShareTokenIntent, FilterBlobsIncludeItem, ImmutabilityPolicyMode,
    ListBlobsIncludeItem, ListContainersIncludeType, PremiumPageBlobAccessTier, PublicAccessType,
    RehydratePriority,
};
use azure_core::{fmt::SafeDebug, http::ClientMethodOptions, time::OffsetDateTime};
use std::collections::HashMap;

/// Options to be passed to `AppendBlobClient::append_block()`
#[derive(Clone, Default, SafeDebug)]
pub struct AppendBlobClientAppendBlockOptions<'a> {
    /// Optional conditional header, used only for the Append Block operation. A number indicating the byte offset to compare.
    /// Append Block will succeed only if the append position is equal to this number. If it is not, the request will fail with
    /// the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    pub append_position: Option<i64>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Optional conditional header. The max length in bytes permitted for the append blob. If the Append Block operation would
    /// cause the blob to exceed that limit or if the blob size is already greater than the value specified in this header, the
    /// request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
    pub max_size: Option<i64>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Required if the request body is a structured message. Specifies the message schema version and properties.
    pub structured_body_type: Option<String>,

    /// Required if the request body is a structured message. Specifies the length of the blob/file content inside the message
    /// body. Will always be smaller than Content-Length.
    pub structured_content_length: Option<u64>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `AppendBlobClient::append_block_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct AppendBlobClientAppendBlockFromUrlOptions<'a> {
    /// Optional conditional header, used only for the Append Block operation. A number indicating the byte offset to compare.
    /// Append Block will succeed only if the append position is equal to this number. If it is not, the request will fail with
    /// the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    pub append_position: Option<i64>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
    pub copy_source_authorization: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// Valid value is backup
    pub file_request_intent: Option<FileShareTokenIntent>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Optional conditional header. The max length in bytes permitted for the append blob. If the Append Block operation would
    /// cause the blob to exceed that limit or if the blob size is already greater than the value specified in this header, the
    /// request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
    pub max_size: Option<i64>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
    pub source_content_crc64: Option<Vec<u8>>,

    /// Specify the md5 calculated for the range of bytes that must be read from the copy source.
    pub source_content_md5: Option<Vec<u8>>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// Bytes of source data in the specified range.
    pub source_range: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `AppendBlobClient::create()`
#[derive(Clone, Default, SafeDebug)]
pub struct AppendBlobClientCreateOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `AppendBlobClient::seal()`
#[derive(Clone, Default, SafeDebug)]
pub struct AppendBlobClientSealOptions<'a> {
    /// Optional conditional header, used only for the Append Block operation. A number indicating the byte offset to compare.
    /// Append Block will succeed only if the append position is equal to this number. If it is not, the request will fail with
    /// the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
    pub append_position: Option<i64>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::abort_copy_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientAbortCopyFromUrlOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::acquire_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientAcquireLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Optional. The proposed lease ID for the container.
    pub proposed_lease_id: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::break_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientBreakLeaseOptions<'a> {
    /// For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
    /// This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on
    /// the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for
    /// longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after
    /// the remaining lease period elapses, and an infinite lease breaks immediately.
    pub break_period: Option<i32>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::change_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientChangeLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::copy_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientCopyFromUrlOptions<'a> {
    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
    pub copy_source_authorization: Option<String>,

    /// Optional, default 'replace'. Indicates if source tags should be copied or replaced with the tags specified by x-ms-tags.
    pub copy_source_tags: Option<BlobCopySourceTags>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// Valid value is backup
    pub file_request_intent: Option<FileShareTokenIntent>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Specify the md5 calculated for the range of bytes that must be read from the copy source.
    pub source_content_md5: Option<Vec<u8>>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// The tier to be set on the blob.
    pub tier: Option<AccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::create_snapshot()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientCreateSnapshotOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::delete()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientDeleteOptions<'a> {
    /// Optional. Only possible value is 'permanent', which specifies to permanently delete a blob if blob soft delete is enabled.
    pub blob_delete_type: Option<BlobDeleteType>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Required if the blob has associated snapshots. Specify one of the following two options: include: Delete the base blob
    /// and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself
    pub delete_snapshots: Option<DeleteSnapshotsOptionType>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::delete_immutability_policy()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientDeleteImmutabilityPolicyOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::download()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientDownloadOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// The request should only proceed if an entity matches this string.
    pub if_match: Option<String>,

    /// The request should only proceed if the entity was modified after this time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// The request should only proceed if no entity matches this string.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// The request should only proceed if the entity was not modified after this time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Return only the bytes of the blob in the specified range.
    pub range: Option<String>,

    /// Optional. When this header is set to true and specified together with the Range header, the service returns the CRC64
    /// hash for the range, as long as the range is less than or equal to 4 MB in size.
    pub range_get_content_crc64: Option<bool>,

    /// When set to true and specified together with the Range, the service returns the MD5 hash for the range, as long as the
    /// range is less than or equal to 4 MB in size.
    pub range_get_content_md5: Option<bool>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// Specifies the response content should be returned as a structured message and specifies the message schema version and
    /// properties.
    pub structured_body_type: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::get_account_info()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientGetAccountInfoOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::get_properties()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientGetPropertiesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::get_tags()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientGetTagsOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::release_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientReleaseLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::renew_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientRenewLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::set_expiry()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetExpiryOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// The time this blob will expire.
    pub expires_on: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::set_immutability_policy()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetImmutabilityPolicyOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::set_legal_hold()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetLegalHoldOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::set_metadata()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetMetadataOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::set_properties()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetPropertiesOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::set_tags()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetTagsOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::set_tier()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientSetTierOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High
    /// and Standard.
    pub rehydrate_priority: Option<RehydratePriority>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// The version id parameter is an opaque DateTime value that, when present, specifies the version of the blob to operate
    /// on. It's for service version 2019-10-10 and newer.
    pub version_id: Option<String>,
}

/// Options to be passed to `BlobClient::start_copy_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientStartCopyFromUrlOptions<'a> {
    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High
    /// and Standard.
    pub rehydrate_priority: Option<RehydratePriority>,

    /// Overrides the sealed state of the destination blob. Service version 2019-12-12 and newer.
    pub seal_blob: Option<bool>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub source_if_tags: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// The tier to be set on the blob.
    pub tier: Option<AccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobClient::undelete()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobClientUndeleteOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::acquire_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientAcquireLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Optional. The proposed lease ID for the container.
    pub proposed_lease_id: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::break_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientBreakLeaseOptions<'a> {
    /// For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
    /// This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on
    /// the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for
    /// longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after
    /// the remaining lease period elapses, and an infinite lease breaks immediately.
    pub break_period: Option<i32>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::change_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientChangeLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::create()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientCreateOptions<'a> {
    /// The public access setting for the container.
    pub access: Option<PublicAccessType>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the default encryption scope to set on the container and use for all
    /// future writes.
    pub default_encryption_scope: Option<String>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// If a blob has a lease and the lease is of infinite duration then the value of this header is set to true, otherwise it
    /// is set to false.
    pub prevent_encryption_scope_override: Option<bool>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::delete()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientDeleteOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::filter_blobs()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientFilterBlobsOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Include this parameter to specify one or more datasets to include in the response.
    pub include: Option<Vec<FilterBlobsIncludeItem>>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Filters the results to return only to return only blobs whose tags match the specified expression.
    pub where_param: Option<String>,
}

/// Options to be passed to `BlobContainerClient::get_access_policy()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientGetAccessPolicyOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::get_account_info()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientGetAccountInfoOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::get_properties()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientGetPropertiesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::list_blob_flat_segment()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientListBlobFlatSegmentOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Include this parameter to specify one or more datasets to include in the response.
    pub include: Option<Vec<ListBlobsIncludeItem>>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Filters the results to return only containers whose name begins with the specified prefix.
    pub prefix: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

impl BlobContainerClientListBlobFlatSegmentOptions<'_> {
    pub fn into_owned(self) -> BlobContainerClientListBlobFlatSegmentOptions<'static> {
        BlobContainerClientListBlobFlatSegmentOptions {
            client_request_id: self.client_request_id,
            include: self.include,
            marker: self.marker,
            maxresults: self.maxresults,
            method_options: ClientMethodOptions {
                context: self.method_options.context.into_owned(),
            },
            prefix: self.prefix,
            timeout: self.timeout,
        }
    }
}

/// Options to be passed to `BlobContainerClient::list_blob_hierarchy_segment()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientListBlobHierarchySegmentOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Include this parameter to specify one or more datasets to include in the response.
    pub include: Option<Vec<ListBlobsIncludeItem>>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Filters the results to return only containers whose name begins with the specified prefix.
    pub prefix: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

impl BlobContainerClientListBlobHierarchySegmentOptions<'_> {
    pub fn into_owned(self) -> BlobContainerClientListBlobHierarchySegmentOptions<'static> {
        BlobContainerClientListBlobHierarchySegmentOptions {
            client_request_id: self.client_request_id,
            include: self.include,
            marker: self.marker,
            maxresults: self.maxresults,
            method_options: ClientMethodOptions {
                context: self.method_options.context.into_owned(),
            },
            prefix: self.prefix,
            timeout: self.timeout,
        }
    }
}

/// Options to be passed to `BlobContainerClient::release_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientReleaseLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::rename()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientRenameOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// A lease ID for the source path. If specified, the source path must have an active lease and the lease ID must match.
    pub source_lease_id: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::renew_lease()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientRenewLeaseOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::restore()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientRestoreOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-12-12 and later. Specifies the name of the deleted container to restore.
    pub deleted_container_name: Option<String>,

    /// Optional. Version 2019-12-12 and later. Specifies the version of the deleted container to restore.
    pub deleted_container_version: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::set_access_policy()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientSetAccessPolicyOptions<'a> {
    /// The public access setting for the container.
    pub access: Option<PublicAccessType>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobContainerClient::set_metadata()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobContainerClientSetMetadataOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobServiceClient::filter_blobs()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientFilterBlobsOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Include this parameter to specify one or more datasets to include in the response.
    pub include: Option<Vec<FilterBlobsIncludeItem>>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Filters the results to return only to return only blobs whose tags match the specified expression.
    pub where_param: Option<String>,
}

/// Options to be passed to `BlobServiceClient::get_account_info()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientGetAccountInfoOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobServiceClient::get_properties()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientGetPropertiesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobServiceClient::get_statistics()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientGetStatisticsOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobServiceClient::get_user_delegation_key()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientGetUserDelegationKeyOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlobServiceClient::list_containers_segment()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientListContainersSegmentOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Include this parameter to specify that the container's metadata be returned as part of the response body.
    pub include: Option<Vec<ListContainersIncludeType>>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Filters the results to return only containers whose name begins with the specified prefix.
    pub prefix: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

impl BlobServiceClientListContainersSegmentOptions<'_> {
    pub fn into_owned(self) -> BlobServiceClientListContainersSegmentOptions<'static> {
        BlobServiceClientListContainersSegmentOptions {
            client_request_id: self.client_request_id,
            include: self.include,
            marker: self.marker,
            maxresults: self.maxresults,
            method_options: ClientMethodOptions {
                context: self.method_options.context.into_owned(),
            },
            prefix: self.prefix,
            timeout: self.timeout,
        }
    }
}

/// Options to be passed to `BlobServiceClient::set_properties()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlobServiceClientSetPropertiesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlockBlobClient::commit_block_list()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientCommitBlockListOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The tier to be set on the blob.
    pub tier: Option<AccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `BlockBlobClient::get_block_list()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientGetBlockListOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlockBlobClient::query()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientQueryOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlockBlobClient::stage_block()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientStageBlockOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Required if the request body is a structured message. Specifies the message schema version and properties.
    pub structured_body_type: Option<String>,

    /// Required if the request body is a structured message. Specifies the length of the blob/file content inside the message
    /// body. Will always be smaller than Content-Length.
    pub structured_content_length: Option<u64>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `BlockBlobClient::stage_block_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientStageBlockFromUrlOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
    pub copy_source_authorization: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// Valid value is backup
    pub file_request_intent: Option<FileShareTokenIntent>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
    pub source_content_crc64: Option<Vec<u8>>,

    /// Specify the md5 calculated for the range of bytes that must be read from the copy source.
    pub source_content_md5: Option<Vec<u8>>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// Bytes of source data in the specified range.
    pub source_range: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `BlockBlobClient::upload()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientUploadOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Required if the request body is a structured message. Specifies the message schema version and properties.
    pub structured_body_type: Option<String>,

    /// Required if the request body is a structured message. Specifies the length of the blob/file content inside the message
    /// body. Will always be smaller than Content-Length.
    pub structured_content_length: Option<u64>,

    /// The tier to be set on the blob.
    pub tier: Option<AccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `BlockBlobClient::upload_blob_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct BlockBlobClientUploadBlobFromUrlOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
    pub copy_source_authorization: Option<String>,

    /// Optional, default is true. Indicates if properties from the source blob should be copied.
    pub copy_source_blob_properties: Option<bool>,

    /// Optional, default 'replace'. Indicates if source tags should be copied or replaced with the tags specified by x-ms-tags.
    pub copy_source_tags: Option<BlobCopySourceTags>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// Valid value is backup
    pub file_request_intent: Option<FileShareTokenIntent>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Specify the md5 calculated for the range of bytes that must be read from the copy source.
    pub source_content_md5: Option<Vec<u8>>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub source_if_tags: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// The tier to be set on the blob.
    pub tier: Option<AccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `PageBlobClient::clear_pages()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientClearPagesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has the specified sequence number.
    pub if_sequence_number_equal_to: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
    pub if_sequence_number_less_than: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
    pub if_sequence_number_less_than_or_equal_to: Option<i64>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::copy_incremental()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientCopyIncrementalOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::create()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientCreateOptions<'a> {
    /// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_cache_control: Option<String>,

    /// Optional. Sets the blob's content disposition. If specified, this property is stored with the blob and returned with a
    /// read request.
    pub blob_content_disposition: Option<String>,

    /// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_encoding: Option<String>,

    /// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
    /// request.
    pub blob_content_language: Option<String>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub blob_content_md5: Option<Vec<u8>>,

    /// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
    pub blob_content_type: Option<String>,

    /// Set for page blobs only. The sequence number is a user-controlled value that you can use to track requests. The value
    /// of the sequence number must be between 0 and 2^63 - 1.
    pub blob_sequence_number: Option<i64>,

    /// Optional. Used to set blob tags in various blob operations.
    pub blob_tags_string: Option<String>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// Specifies the date time when the blobs immutability policy is set to expire.
    pub immutability_policy_expiry: Option<OffsetDateTime>,

    /// Specifies the immutability policy mode to set on the blob.
    pub immutability_policy_mode: Option<ImmutabilityPolicyMode>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Specified if a legal hold should be set on the blob.
    pub legal_hold: Option<bool>,

    /// The metadata headers.
    pub metadata: Option<HashMap<String, String>>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Optional. Indicates the tier to be set on the page blob.
    pub tier: Option<PremiumPageBlobAccessTier>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::get_page_ranges()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientGetPageRangesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Return only the bytes of the blob in the specified range.
    pub range: Option<String>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::get_page_ranges_diff()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientGetPageRangesDiffOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
    /// operation returns the NextMarker value within the response body if the listing operation did not return all containers
    /// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
    /// a subsequent call to request the next page of list items. The marker value is opaque to the client.
    pub marker: Option<String>,

    /// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
    /// greater than 5000, the server will return up to 5000 items.
    pub maxresults: Option<i32>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Optional. This header is only supported in service versions 2019-04-19 and after and specifies the URL of a previous snapshot
    /// of the target blob. The response will only contain pages that were changed between the target blob and its previous snapshot.
    pub prev_snapshot_url: Option<String>,

    /// Optional in version 2015-07-08 and newer. The prevsnapshot parameter is a DateTime value that specifies that the response
    /// will contain only pages that were changed between target blob and previous snapshot. Changed pages include both updated
    /// and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by prevsnapshot is the older of
    /// the two. Note that incremental snapshots are currently supported only for blobs created on or after January 1, 2016.
    pub prevsnapshot: Option<String>,

    /// Return only the bytes of the blob in the specified range.
    pub range: Option<String>,

    /// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
    /// information on working with blob snapshots, see [Creating a Snapshot of a Blob.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob)
    pub snapshot: Option<String>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::resize()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientResizeOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::set_sequence_number()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientSetSequenceNumberOptions<'a> {
    /// Set for page blobs only. The sequence number is a user-controlled value that you can use to track requests. The value
    /// of the sequence number must be between 0 and 2^63 - 1.
    pub blob_sequence_number: Option<i64>,

    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}

/// Options to be passed to `PageBlobClient::upload_pages()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientUploadPagesOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has the specified sequence number.
    pub if_sequence_number_equal_to: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
    pub if_sequence_number_less_than: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
    pub if_sequence_number_less_than_or_equal_to: Option<i64>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Required if the request body is a structured message. Specifies the message schema version and properties.
    pub structured_body_type: Option<String>,

    /// Required if the request body is a structured message. Specifies the length of the blob/file content inside the message
    /// body. Will always be smaller than Content-Length.
    pub structured_content_length: Option<u64>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,

    /// Specify the transactional crc64 for the body, to be validated by the service.
    pub transactional_content_crc64: Option<Vec<u8>>,

    /// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
    /// were validated when each was uploaded.
    pub transactional_content_md5: Option<Vec<u8>>,
}

/// Options to be passed to `PageBlobClient::upload_pages_from_url()`
#[derive(Clone, Default, SafeDebug)]
pub struct PageBlobClientUploadPagesFromUrlOptions<'a> {
    /// An opaque, globally-unique, client-generated string identifier for the request.
    pub client_request_id: Option<String>,

    /// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
    pub copy_source_authorization: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption. If not specified, the default is
    /// AES256.
    pub encryption_algorithm: Option<EncryptionAlgorithmType>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_key: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption key used to encrypt the data provided
    /// in the request. This header is only used for encryption with a customer-provided key. If the request is authenticated
    /// with a client token, this header should be specified using the SHA256 hash of the encryption key.
    pub encryption_key_sha256: Option<String>,

    /// Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt the data provided in the request.
    /// If not specified, the request will be encrypted with the root account key.
    pub encryption_scope: Option<String>,

    /// Valid value is backup
    pub file_request_intent: Option<FileShareTokenIntent>,

    /// A condition that must be met in order for the request to be processed.
    pub if_match: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has been modified since the specified date-time.
    pub if_modified_since: Option<OffsetDateTime>,

    /// A condition that must be met in order for the request to be processed.
    pub if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has the specified sequence number.
    pub if_sequence_number_equal_to: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
    pub if_sequence_number_less_than: Option<i64>,

    /// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
    pub if_sequence_number_less_than_or_equal_to: Option<i64>,

    /// Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
    pub if_tags: Option<String>,

    /// A date-time value. A request is made under the condition that the resource has not been modified since the specified date-time.
    pub if_unmodified_since: Option<OffsetDateTime>,

    /// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
    pub lease_id: Option<String>,

    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
    pub source_content_crc64: Option<Vec<u8>>,

    /// Specify the md5 calculated for the range of bytes that must be read from the copy source.
    pub source_content_md5: Option<Vec<u8>>,

    /// Specify an ETag value to operate only on blobs with a matching value.
    pub source_if_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_modified_since: Option<OffsetDateTime>,

    /// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
    pub source_if_none_match: Option<String>,

    /// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
    pub source_if_unmodified_since: Option<OffsetDateTime>,

    /// The timeout parameter is expressed in seconds. For more information, see [Setting Timeouts for Blob Service Operations.](https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations)
    pub timeout: Option<i32>,
}
