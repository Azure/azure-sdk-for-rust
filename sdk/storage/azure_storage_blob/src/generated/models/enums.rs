// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

/// The access tiers.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum AccessTier {
    /// The archive access tier.
    Archive,

    /// The Cold access tier.
    Cold,

    /// The cool access tier.
    Cool,

    /// The hot access tier.
    Hot,

    /// The hot P10 tier.
    P10,

    /// The hot P15 tier.
    P15,

    /// The hot P20 tier.
    P20,

    /// The hot P30 tier.
    P30,

    /// The hot P4 tier.
    P4,

    /// The hot P40 tier.
    P40,

    /// The hot P50 tier.
    P50,

    /// The hot P6 tier.
    P6,

    /// The hot P60 tier.
    P60,

    /// The hot P70 tier.
    P70,

    /// The hot P80 tier.
    P80,

    /// The Premium access tier.
    Premium,

    /// Any other value not defined in `AccessTier`.
    UnknownValue(String),
}

/// The account kind.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum AccountKind {
    /// The storage account is a blob storage account.
    BlobStorage,

    /// The storage account is a block blob storage account.
    BlockBlobStorage,

    /// The storage account is a file storage account.
    FileStorage,

    /// The storage account is a general-purpose account.
    Storage,

    /// The storage account is a storage V2 account.
    StorageV2,
}

/// The archive status.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum ArchiveStatus {
    /// The archive status is rehydrating pending to archive.
    RehydratePendingToCold,

    /// The archive status is rehydrating pending to cool.
    RehydratePendingToCool,

    /// The archive status is rehydrating pending to hot.
    RehydratePendingToHot,

    /// Any other value not defined in `ArchiveStatus`.
    UnknownValue(String),
}

/// The blob copy source tags types.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum BlobCopySourceTags {
    /// The copy blob source tags option.
    Copy,

    /// The replace blob source tags option.
    Replace,
}

/// The type of blob deletions.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum BlobDeleteType {
    /// Permanently delete the blob.
    Permanent,
}

/// The blob expiration options.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum BlobExpiryOptions {
    /// Absolute time.
    Absolute,

    /// Never expire.
    NeverExpire,

    /// Relative to creation time.
    RelativeToCreation,

    /// Relative to now.
    RelativeToNow,

    /// Any other value not defined in `BlobExpiryOptions`.
    UnknownValue(String),
}

/// The immutability policy mode.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum BlobImmutabilityPolicyMode {
    /// The immutability policy is locked.
    Locked,

    /// The immutability policy is mutable.
    Mutable,

    /// The immutability policy is unlocked.
    Unlocked,
}

/// The blob type.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum BlobType {
    /// The blob is an append blob.
    AppendBlob,

    /// The blob is a block blob.
    BlockBlob,

    /// The blob is a page blob.
    PageBlob,
}

/// The block list types.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum BlockListType {
    /// Both lists together.
    All,

    /// The list of committed blocks.
    Committed,

    /// The list of uncommitted blocks.
    Uncommitted,
}

/// The copy status.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum CopyStatus {
    /// The copy operation is aborted.
    Aborted,

    /// The copy operation failed.
    Failed,

    /// The copy operation is pending.
    Pending,

    /// The copy operation succeeded.
    Success,
}

/// The delete snapshots option type.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum DeleteSnapshotsOptionType {
    /// The delete snapshots include option is include.
    Include,

    /// The delete snapshots include option is only.
    Only,
}

/// The algorithm used to produce the encryption key hash. Currently, the only accepted value is \"AES256\". Must be provided
/// if the x-ms-encryption-key header is provided.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum EncryptionAlgorithmType {
    /// The AES256 encryption algorithm.
    Aes256,
}

/// The file share token intent types.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum FileShareTokenIntent {
    /// The file share token intent is backup.
    Backup,

    /// Any other value not defined in `FileShareTokenIntent`.
    UnknownValue(String),
}

/// The filter blobs includes.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum FilterBlobsIncludeItem {
    /// The filter includes no versions.
    None,

    /// The filter includes n versions.
    Versions,
}

/// The geo replication status.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum GeoReplicationStatusType {
    /// The geo replication is bootstrap.
    Bootstrap,

    /// The geo replication is live.
    Live,

    /// The geo replication is unavailable.
    Unavailable,

    /// Any other value not defined in `GeoReplicationStatusType`.
    UnknownValue(String),
}

/// The immutability policy mode used in requests.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum ImmutabilityPolicyMode {
    /// The immutability policy is locked.
    Locked,

    /// The immutability policy is unlocked.
    Unlocked,
}

/// The lease duration.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum LeaseDuration {
    /// The lease is of fixed duration.
    Fixed,

    /// The lease is of infinite duration.
    Infinite,
}

/// The lease state.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum LeaseState {
    /// The lease is available.
    Available,

    /// The lease is breaking.
    Breaking,

    /// The lease is broken.
    Broken,

    /// The lease is expired.
    Expired,

    /// The lease is currently leased.
    Leased,
}

/// The lease status.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum LeaseStatus {
    /// The lease is locked.
    Locked,

    /// The lease is unlocked.
    Unlocked,
}

/// The list blob includes parameter values.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum ListBlobsIncludeItem {
    /// The include copies.
    Copy,

    /// The include deleted blobs.
    Deleted,

    /// The include deleted with versions.
    DeletedWithVersions,

    /// The include immutable policy.
    ImmutabilityPolicy,

    /// The include legal hold.
    LegalHold,

    /// The include metadata.
    Metadata,

    /// The include snapshots.
    Snapshots,

    /// The include tags.
    Tags,

    /// The include uncommitted blobs.
    UncommittedBlobs,

    /// The include versions.
    Versions,
}

/// Include this parameter to specify that the container's metadata be returned as part of the response body.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum ListContainersIncludeType {
    /// Include deleted
    Deleted,

    /// Include metadata
    Metadata,

    /// Include system
    System,
}

/// The premium page blob access tier types.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum PremiumPageBlobAccessTier {
    /// The premium page blob access tier is P10.
    P10,

    /// The premium page blob access tier is P15.
    P15,

    /// The premium page blob access tier is P20.
    P20,

    /// The premium page blob access tier is P30.
    P30,

    /// The premium page blob access tier is P4.
    P4,

    /// The premium page blob access tier is P40.
    P40,

    /// The premium page blob access tier is P50.
    P50,

    /// The premium page blob access tier is P6.
    P6,

    /// The premium page blob access tier is P60.
    P60,

    /// The premium page blob access tier is P70.
    P70,

    /// The premium page blob access tier is P80.
    P80,

    /// Any other value not defined in `PremiumPageBlobAccessTier`.
    UnknownValue(String),
}

/// The public access types.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum PublicAccessType {
    /// Blob access.
    Blob,

    /// Container access.
    Container,

    /// Any other value not defined in `PublicAccessType`.
    UnknownValue(String),
}

/// The query request, note only SQL supported
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum QueryRequestType {
    /// The SQL request query type.
    Sql,
}

/// The query format type.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum QueryType {
    /// The query format type is Apache Arrow.
    Arrow,

    /// The query format type is delimited.
    Delimited,

    /// The query format type is JSON.
    Json,

    /// The query format type is Parquet.
    Parquet,
}

/// If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High
/// and Standard.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum RehydratePriority {
    /// The rehydrate priority is high.
    High,

    /// The rehydrate priority is standard.
    Standard,

    /// Any other value not defined in `RehydratePriority`.
    UnknownValue(String),
}

/// The sequence number actions.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum SequenceNumberActionType {
    /// Increment the sequence number.
    Increment,

    /// Set the maximum for the sequence number.
    Max,

    /// Update the sequence number.
    Update,
}

/// The SKU types
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum SkuName {
    /// The premium LRS SKU.
    PremiumLrs,

    /// The standard GRS SKU.
    StandardGrs,

    /// The standard LRS SKU.
    StandardLrs,

    /// The standard RAGRS SKU.
    StandardRagrs,

    /// The standard ZRS SKU.
    StandardZrs,
}

/// Error codes returned by the Azure Blob Storage service.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum StorageErrorCode {
    /// Account already exists.
    AccountAlreadyExists,

    /// Account is being created.
    AccountBeingCreated,

    /// Account is disabled.
    AccountIsDisabled,

    /// Append position condition not met.
    AppendPositionConditionNotMet,

    /// Authentication failed.
    AuthenticationFailed,

    /// Authorization failure.
    AuthorizationFailure,

    /// Authorization permission mismatch.
    AuthorizationPermissionMismatch,

    /// Authorization protocol mismatch.
    AuthorizationProtocolMismatch,

    /// Authorization resource type mismatch.
    AuthorizationResourceTypeMismatch,

    /// Authorization service mismatch.
    AuthorizationServiceMismatch,

    /// Authorization source IP mismatch.
    AuthorizationSourceIPMismatch,

    /// Blob access tier not supported for account type.
    BlobAccessTierNotSupportedForAccountType,

    /// Blob already exists.
    BlobAlreadyExists,

    /// Blob archived.
    BlobArchived,

    /// Blob being rehydrated.
    BlobBeingRehydrated,

    /// Blob is immutable due to policy.
    BlobImmutableDueToPolicy,

    /// Blob not archived.
    BlobNotArchived,

    /// Blob not found.
    BlobNotFound,

    /// Blob overwritten.
    BlobOverwritten,

    /// Blob tier inadequate for content length.
    BlobTierInadequateForContentLength,

    /// Blob uses customer specified encryption.
    BlobUsesCustomerSpecifiedEncryption,

    /// Block count exceeds limit.
    BlockCountExceedsLimit,

    /// Block list too long.
    BlockListTooLong,

    /// Cannot change to lower tier.
    CannotChangeToLowerTier,

    /// Cannot verify copy source.
    CannotVerifyCopySource,

    /// Condition headers not supported.
    ConditionHeadersNotSupported,

    /// Condition not met.
    ConditionNotMet,

    /// Container already exists.
    ContainerAlreadyExists,

    /// Container being deleted.
    ContainerBeingDeleted,

    /// Container disabled.
    ContainerDisabled,

    /// Container not found.
    ContainerNotFound,

    /// Content length larger than tier limit.
    ContentLengthLargerThanTierLimit,

    /// Copy across accounts not supported.
    CopyAcrossAccountsNotSupported,

    /// Copy ID mismatch.
    CopyIdMismatch,

    /// Empty metadata key.
    EmptyMetadataKey,

    /// Feature version mismatch.
    FeatureVersionMismatch,

    /// Incremental copy blob mismatch.
    IncrementalCopyBlobMismatch,

    /// Incremental copy of earlier version snapshot not allowed.
    IncrementalCopyOfEarlierVersionSnapshotNotAllowed,

    /// Incremental copy source must be snapshot.
    IncrementalCopySourceMustBeSnapshot,

    /// Infinite lease duration required.
    InfiniteLeaseDurationRequired,

    /// Insufficient account permissions.
    InsufficientAccountPermissions,

    /// Internal error.
    InternalError,

    /// Invalid authentication information.
    InvalidAuthenticationInfo,

    /// Invalid blob or block.
    InvalidBlobOrBlock,

    /// Invalid blob tier.
    InvalidBlobTier,

    /// Invalid blob type.
    InvalidBlobType,

    /// Invalid block ID.
    InvalidBlockId,

    /// Invalid block list.
    InvalidBlockList,

    /// Invalid header value.
    InvalidHeaderValue,

    /// Invalid HTTP verb.
    InvalidHttpVerb,

    /// Invalid input.
    InvalidInput,

    /// Invalid MD5.
    InvalidMd5,

    /// Invalid metadata.
    InvalidMetadata,

    /// Invalid operation.
    InvalidOperation,

    /// Invalid page range.
    InvalidPageRange,

    /// Invalid query parameter value.
    InvalidQueryParameterValue,

    /// Invalid range.
    InvalidRange,

    /// Invalid request URL.
    InvalidRequestUrl,

    /// Invalid source blob type.
    InvalidSourceBlobType,

    /// Invalid source blob URL.
    InvalidSourceBlobUrl,

    /// Invalid URI.
    InvalidUri,

    /// Invalid version for page blob operation.
    InvalidVersionForPageBlobOperation,

    /// Invalid XML document.
    InvalidXmlDocument,

    /// Invalid XML node value.
    InvalidXmlNodeValue,

    /// Lease already broken.
    LeaseAlreadyBroken,

    /// Lease already present.
    LeaseAlreadyPresent,

    /// Lease ID mismatch with blob operation.
    LeaseIdMismatchWithBlobOperation,

    /// Lease ID mismatch with container operation.
    LeaseIdMismatchWithContainerOperation,

    /// Lease ID mismatch with lease operation.
    LeaseIdMismatchWithLeaseOperation,

    /// Lease ID missing.
    LeaseIdMissing,

    /// Lease is breaking and cannot be acquired.
    LeaseIsBreakingAndCannotBeAcquired,

    /// Lease is breaking and cannot be changed.
    LeaseIsBreakingAndCannotBeChanged,

    /// Lease is broken and cannot be renewed.
    LeaseIsBrokenAndCannotBeRenewed,

    /// Lease lost.
    LeaseLost,

    /// Lease not present with blob operation.
    LeaseNotPresentWithBlobOperation,

    /// Lease not present with container operation.
    LeaseNotPresentWithContainerOperation,

    /// Lease not present with lease operation.
    LeaseNotPresentWithLeaseOperation,

    /// Maximum blob size condition not met.
    MaxBlobSizeConditionNotMet,

    /// MD5 mismatch.
    Md5Mismatch,

    /// Metadata too large.
    MetadataTooLarge,

    /// Missing content length header.
    MissingContentLengthHeader,

    /// Missing required header.
    MissingRequiredHeader,

    /// Missing required query parameter.
    MissingRequiredQueryParameter,

    /// Missing required XML node.
    MissingRequiredXmlNode,

    /// Multiple condition headers not supported.
    MultipleConditionHeadersNotSupported,

    /// No pending copy operation.
    NoPendingCopyOperation,

    /// Operation not allowed on incremental copy blob.
    OperationNotAllowedOnIncrementalCopyBlob,

    /// Operation timed out.
    OperationTimedOut,

    /// Out of range input.
    OutOfRangeInput,

    /// Out of range query parameter value.
    OutOfRangeQueryParameterValue,

    /// Pending copy operation.
    PendingCopyOperation,

    /// Previous snapshot cannot be newer.
    PreviousSnapshotCannotBeNewer,

    /// Previous snapshot not found.
    PreviousSnapshotNotFound,

    /// Previous snapshot operation not supported.
    PreviousSnapshotOperationNotSupported,

    /// Request body too large.
    RequestBodyTooLarge,

    /// Request URL failed to parse.
    RequestUrlFailedToParse,

    /// Resource already exists.
    ResourceAlreadyExists,

    /// Resource not found.
    ResourceNotFound,

    /// Resource type mismatch.
    ResourceTypeMismatch,

    /// Sequence number condition not met.
    SequenceNumberConditionNotMet,

    /// Sequence number increment too large.
    SequenceNumberIncrementTooLarge,

    /// Server busy.
    ServerBusy,

    /// Snapshot count exceeded.
    SnapshotCountExceeded,

    /// Snapshot operation rate exceeded.
    SnapshotOperationRateExceeded,

    /// Snapshots present.
    SnapshotsPresent,

    /// Source condition not met.
    SourceConditionNotMet,

    /// System in use.
    SystemInUse,

    /// Target condition not met.
    TargetConditionNotMet,

    /// Unauthorized blob overwrite.
    UnauthorizedBlobOverwrite,

    /// Unsupported header.
    UnsupportedHeader,

    /// Unsupported HTTP verb.
    UnsupportedHttpVerb,

    /// Unsupported query parameter.
    UnsupportedQueryParameter,

    /// Unsupported XML node.
    UnsupportedXmlNode,

    /// Any other value not defined in `StorageErrorCode`.
    UnknownValue(String),
}
