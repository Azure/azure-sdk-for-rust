// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::{create_enum, create_extensible_enum};

create_extensible_enum!(
    #[doc = r#"The access tiers."#]
    AccessTier,
    #[doc = r#"The archive access tier."#]
    (Archive, "Archive"),
    #[doc = r#"The Cold access tier."#]
    (Cold, "Cold"),
    #[doc = r#"The cool access tier."#]
    (Cool, "Cool"),
    #[doc = r#"The hot access tier."#]
    (Hot, "Hot"),
    #[doc = r#"The hot P10 tier."#]
    (P10, "P10"),
    #[doc = r#"The hot P15 tier."#]
    (P15, "P15"),
    #[doc = r#"The hot P20 tier."#]
    (P20, "P20"),
    #[doc = r#"The hot P30 tier."#]
    (P30, "P30"),
    #[doc = r#"The hot P4 tier."#]
    (P4, "P4"),
    #[doc = r#"The hot P40 tier."#]
    (P40, "P40"),
    #[doc = r#"The hot P50 tier."#]
    (P50, "P50"),
    #[doc = r#"The hot P6 tier."#]
    (P6, "P6"),
    #[doc = r#"The hot P60 tier."#]
    (P60, "P60"),
    #[doc = r#"The hot P70 tier."#]
    (P70, "P70"),
    #[doc = r#"The hot P80 tier."#]
    (P80, "P80"),
    #[doc = r#"The Premium access tier."#]
    (Premium, "Premium")
);

create_enum!(
    #[doc = r#"The account kind."#]
    AccountKind,
    #[doc = r#"The storage account is a blob storage account."#]
    (BlobStorage, "BlobStorage"),
    #[doc = r#"The storage account is a block blob storage account."#]
    (BlockBlobStorage, "BlockBlobStorage"),
    #[doc = r#"The storage account is a file storage account."#]
    (FileStorage, "FileStorage"),
    #[doc = r#"The storage account is a general-purpose account."#]
    (Storage, "Storage"),
    #[doc = r#"The storage account is a storage V2 account."#]
    (StorageV2, "StorageV2")
);

create_extensible_enum!(
    #[doc = r#"The archive status."#]
    ArchiveStatus,
    #[doc = r#"The archive status is rehydrating pending to archive."#]
    (RehydratePendingToCold, "rehydrate-pending-to-cold"),
    #[doc = r#"The archive status is rehydrating pending to cool."#]
    (RehydratePendingToCool, "rehydrate-pending-to-cool"),
    #[doc = r#"The archive status is rehydrating pending to hot."#]
    (RehydratePendingToHot, "rehydrate-pending-to-hot")
);

create_enum!(
    #[doc = r#"The blob copy source tags types."#]
    BlobCopySourceTags,
    #[doc = r#"The copy blob source tags option."#]
    (Copy, "COPY"),
    #[doc = r#"The replace blob source tags option."#]
    (Replace, "REPLACE")
);

create_enum!(
    #[doc = r#"The type of blob deletions."#]
    BlobDeleteType,
    #[doc = r#"Permanently delete the blob."#]
    (Permanent, "Permanent")
);

create_extensible_enum!(
    #[doc = r#"The blob expiration options."#]
    BlobExpiryOptions,
    #[doc = r#"Absolute time."#]
    (Absolute, "Absolute"),
    #[doc = r#"Never expire."#]
    (NeverExpire, "NeverExpire"),
    #[doc = r#"Relative to creation time."#]
    (RelativeToCreation, "RelativeToCreation"),
    #[doc = r#"Relative to now."#]
    (RelativeToNow, "RelativeToNow")
);

create_enum!(
    #[doc = r#"The immutability policy mode."#]
    BlobImmutabilityPolicyMode,
    #[doc = r#"The immutability policy is locked."#]
    (Locked, "Locked"),
    #[doc = r#"The immutability policy is mutable."#]
    (Mutable, "Mutable"),
    #[doc = r#"The immutability policy is unlocked."#]
    (Unlocked, "Unlocked")
);

create_enum!(
    #[doc = r#"The blob type."#]
    BlobType,
    #[doc = r#"The blob is an append blob."#]
    (AppendBlob, "AppendBlob"),
    #[doc = r#"The blob is a block blob."#]
    (BlockBlob, "BlockBlob"),
    #[doc = r#"The blob is a page blob."#]
    (PageBlob, "PageBlob")
);

create_enum!(
    #[doc = r#"The block list types."#]
    BlockListType,
    #[doc = r#"Both lists together."#]
    (All, "all"),
    #[doc = r#"The list of committed blocks."#]
    (Committed, "committed"),
    #[doc = r#"The list of uncommitted blocks."#]
    (Uncommitted, "uncommitted")
);

create_enum!(
    #[doc = r#"The copy status."#]
    CopyStatus,
    #[doc = r#"The copy operation is aborted."#]
    (Aborted, "aborted"),
    #[doc = r#"The copy operation failed."#]
    (Failed, "failed"),
    #[doc = r#"The copy operation is pending."#]
    (Pending, "pending"),
    #[doc = r#"The copy operation succeeded."#]
    (Success, "success")
);

create_enum!(
    #[doc = r#"The delete snapshots option type."#]
    DeleteSnapshotsOptionType,
    #[doc = r#"The delete snapshots include option is include."#]
    (Include, "include"),
    #[doc = r#"The delete snapshots include option is only."#]
    (Only, "only")
);

create_enum!(
    #[doc = r#"The algorithm used to produce the encryption key hash. Currently, the only accepted value is \"AES256\". Must be provided
if the x-ms-encryption-key header is provided."#]
    EncryptionAlgorithmType,
    #[doc = r#"The AES256 encryption algorithm."#]
    (Aes256, "AES256")
);

create_extensible_enum!(
    #[doc = r#"The file share token intent types."#]
    FileShareTokenIntent,
    #[doc = r#"The file share token intent is backup."#]
    (Backup, "backup")
);

create_enum!(
    #[doc = r#"The filter blobs includes."#]
    FilterBlobsIncludeItem,
    #[doc = r#"The filter includes no versions."#]
    (None, "none"),
    #[doc = r#"The filter includes n versions."#]
    (Versions, "versions")
);

create_extensible_enum!(
    #[doc = r#"The geo replication status."#]
    GeoReplicationStatusType,
    #[doc = r#"The geo replication is bootstrap."#]
    (Bootstrap, "bootstrap"),
    #[doc = r#"The geo replication is live."#]
    (Live, "live"),
    #[doc = r#"The geo replication is unavailable."#]
    (Unavailable, "unavailable")
);

create_enum!(
    #[doc = r#"The immutability policy mode used in requests."#]
    ImmutabilityPolicyMode,
    #[doc = r#"The immutability policy is locked."#]
    (Locked, "Locked"),
    #[doc = r#"The immutability policy is unlocked."#]
    (Unlocked, "Unlocked")
);

create_enum!(
    #[doc = r#"The lease duration."#]
    LeaseDuration,
    #[doc = r#"The lease is of fixed duration."#]
    (Fixed, "fixed"),
    #[doc = r#"The lease is of infinite duration."#]
    (Infinite, "infinite")
);

create_enum!(
    #[doc = r#"The lease state."#]
    LeaseState,
    #[doc = r#"The lease is available."#]
    (Available, "available"),
    #[doc = r#"The lease is breaking."#]
    (Breaking, "breaking"),
    #[doc = r#"The lease is broken."#]
    (Broken, "broken"),
    #[doc = r#"The lease is expired."#]
    (Expired, "expired"),
    #[doc = r#"The lease is currently leased."#]
    (Leased, "leased")
);

create_enum!(
    #[doc = r#"The lease status."#]
    LeaseStatus,
    #[doc = r#"The lease is locked."#]
    (Locked, "locked"),
    #[doc = r#"The lease is unlocked."#]
    (Unlocked, "unlocked")
);

create_enum!(
    #[doc = r#"The list blob includes parameter values."#]
    ListBlobsIncludeItem,
    #[doc = r#"The include copies."#]
    (Copy, "copy"),
    #[doc = r#"The include deleted blobs."#]
    (Deleted, "deleted"),
    #[doc = r#"The include deleted with versions."#]
    (DeletedWithVersions, "deletedwithversions"),
    #[doc = r#"The include immutable policy."#]
    (ImmutabilityPolicy, "immutabilitypolicy"),
    #[doc = r#"The include legal hold."#]
    (LegalHold, "legalhold"),
    #[doc = r#"The include metadata."#]
    (Metadata, "metadata"),
    #[doc = r#"The include snapshots."#]
    (Snapshots, "snapshots"),
    #[doc = r#"The include tags."#]
    (Tags, "tags"),
    #[doc = r#"The include uncommitted blobs."#]
    (UncommittedBlobs, "uncommittedblobs"),
    #[doc = r#"The include versions."#]
    (Versions, "versions")
);

create_enum!(
    #[doc = r#"Include this parameter to specify that the container's metadata be returned as part of the response body."#]
    ListContainersIncludeType,
    #[doc = r#"Include deleted"#]
    (Deleted, "deleted"),
    #[doc = r#"Include metadata"#]
    (Metadata, "metadata"),
    #[doc = r#"Include system"#]
    (System, "system")
);

create_extensible_enum!(
    #[doc = r#"The premium page blob access tier types."#]
    PremiumPageBlobAccessTier,
    #[doc = r#"The premium page blob access tier is P10."#]
    (P10, "P10"),
    #[doc = r#"The premium page blob access tier is P15."#]
    (P15, "P15"),
    #[doc = r#"The premium page blob access tier is P20."#]
    (P20, "P20"),
    #[doc = r#"The premium page blob access tier is P30."#]
    (P30, "P30"),
    #[doc = r#"The premium page blob access tier is P4."#]
    (P4, "P4"),
    #[doc = r#"The premium page blob access tier is P40."#]
    (P40, "P40"),
    #[doc = r#"The premium page blob access tier is P50."#]
    (P50, "P50"),
    #[doc = r#"The premium page blob access tier is P6."#]
    (P6, "P6"),
    #[doc = r#"The premium page blob access tier is P60."#]
    (P60, "P60"),
    #[doc = r#"The premium page blob access tier is P70."#]
    (P70, "P70"),
    #[doc = r#"The premium page blob access tier is P80."#]
    (P80, "P80")
);

create_extensible_enum!(
    #[doc = r#"The public access types."#]
    PublicAccessType,
    #[doc = r#"Blob access."#]
    (Blob, "blob"),
    #[doc = r#"Container access."#]
    (Container, "container")
);

create_enum!(
    #[doc = r#"The query request, note only SQL supported"#]
    QueryRequestType,
    #[doc = r#"The SQL request query type."#]
    (Sql, "SQL")
);

create_enum!(
    #[doc = r#"The query format type."#]
    QueryType,
    #[doc = r#"The query format type is Apache Arrow."#]
    (Arrow, "arrow"),
    #[doc = r#"The query format type is delimited."#]
    (Delimited, "delimited"),
    #[doc = r#"The query format type is JSON."#]
    (Json, "json"),
    #[doc = r#"The query format type is Parquet."#]
    (Parquet, "parquet")
);

create_extensible_enum!(
    #[doc = r#"If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High
and Standard."#]
    RehydratePriority,
    #[doc = r#"The rehydrate priority is high."#]
    (High, "High"),
    #[doc = r#"The rehydrate priority is standard."#]
    (Standard, "Standard")
);

create_enum!(
    #[doc = r#"The sequence number actions."#]
    SequenceNumberActionType,
    #[doc = r#"Increment the sequence number."#]
    (Increment, "increment"),
    #[doc = r#"Set the maximum for the sequence number."#]
    (Max, "max"),
    #[doc = r#"Update the sequence number."#]
    (Update, "update")
);

create_enum!(
    #[doc = r#"The SKU types"#]
    SkuName,
    #[doc = r#"The premium LRS SKU."#]
    (PremiumLrs, "Premium_LRS"),
    #[doc = r#"The standard GRS SKU."#]
    (StandardGrs, "Standard_GRS"),
    #[doc = r#"The standard LRS SKU."#]
    (StandardLrs, "Standard_LRS"),
    #[doc = r#"The standard RAGRS SKU."#]
    (StandardRagrs, "Standard_RAGRS"),
    #[doc = r#"The standard ZRS SKU."#]
    (StandardZrs, "Standard_ZRS")
);

create_extensible_enum!(
    #[doc = r#"Error codes returned by the Azure Blob Storage service."#]
    StorageErrorCode,
    #[doc = r#"Account already exists."#]
    (AccountAlreadyExists, "AccountAlreadyExists"),
    #[doc = r#"Account is being created."#]
    (AccountBeingCreated, "AccountBeingCreated"),
    #[doc = r#"Account is disabled."#]
    (AccountIsDisabled, "AccountIsDisabled"),
    #[doc = r#"Append position condition not met."#]
    (
        AppendPositionConditionNotMet,
        "AppendPositionConditionNotMet"
    ),
    #[doc = r#"Authentication failed."#]
    (AuthenticationFailed, "AuthenticationFailed"),
    #[doc = r#"Authorization failure."#]
    (AuthorizationFailure, "AuthorizationFailure"),
    #[doc = r#"Authorization permission mismatch."#]
    (
        AuthorizationPermissionMismatch,
        "AuthorizationPermissionMismatch"
    ),
    #[doc = r#"Authorization protocol mismatch."#]
    (
        AuthorizationProtocolMismatch,
        "AuthorizationProtocolMismatch"
    ),
    #[doc = r#"Authorization resource type mismatch."#]
    (
        AuthorizationResourceTypeMismatch,
        "AuthorizationResourceTypeMismatch"
    ),
    #[doc = r#"Authorization service mismatch."#]
    (AuthorizationServiceMismatch, "AuthorizationServiceMismatch"),
    #[doc = r#"Authorization source IP mismatch."#]
    (
        AuthorizationSourceIPMismatch,
        "AuthorizationSourceIPMismatch"
    ),
    #[doc = r#"Blob access tier not supported for account type."#]
    (
        BlobAccessTierNotSupportedForAccountType,
        "BlobAccessTierNotSupportedForAccountType"
    ),
    #[doc = r#"Blob already exists."#]
    (BlobAlreadyExists, "BlobAlreadyExists"),
    #[doc = r#"Blob archived."#]
    (BlobArchived, "BlobArchived"),
    #[doc = r#"Blob being rehydrated."#]
    (BlobBeingRehydrated, "BlobBeingRehydrated"),
    #[doc = r#"Blob is immutable due to policy."#]
    (BlobImmutableDueToPolicy, "BlobImmutableDueToPolicy"),
    #[doc = r#"Blob not archived."#]
    (BlobNotArchived, "BlobNotArchived"),
    #[doc = r#"Blob not found."#]
    (BlobNotFound, "BlobNotFound"),
    #[doc = r#"Blob overwritten."#]
    (BlobOverwritten, "BlobOverwritten"),
    #[doc = r#"Blob tier inadequate for content length."#]
    (
        BlobTierInadequateForContentLength,
        "BlobTierInadequateForContentLength"
    ),
    #[doc = r#"Blob uses customer specified encryption."#]
    (
        BlobUsesCustomerSpecifiedEncryption,
        "BlobUsesCustomerSpecifiedEncryption"
    ),
    #[doc = r#"Block count exceeds limit."#]
    (BlockCountExceedsLimit, "BlockCountExceedsLimit"),
    #[doc = r#"Block list too long."#]
    (BlockListTooLong, "BlockListTooLong"),
    #[doc = r#"Cannot change to lower tier."#]
    (CannotChangeToLowerTier, "CannotChangeToLowerTier"),
    #[doc = r#"Cannot verify copy source."#]
    (CannotVerifyCopySource, "CannotVerifyCopySource"),
    #[doc = r#"Condition headers not supported."#]
    (ConditionHeadersNotSupported, "ConditionHeadersNotSupported"),
    #[doc = r#"Condition not met."#]
    (ConditionNotMet, "ConditionNotMet"),
    #[doc = r#"Container already exists."#]
    (ContainerAlreadyExists, "ContainerAlreadyExists"),
    #[doc = r#"Container being deleted."#]
    (ContainerBeingDeleted, "ContainerBeingDeleted"),
    #[doc = r#"Container disabled."#]
    (ContainerDisabled, "ContainerDisabled"),
    #[doc = r#"Container not found."#]
    (ContainerNotFound, "ContainerNotFound"),
    #[doc = r#"Content length larger than tier limit."#]
    (
        ContentLengthLargerThanTierLimit,
        "ContentLengthLargerThanTierLimit"
    ),
    #[doc = r#"Copy across accounts not supported."#]
    (
        CopyAcrossAccountsNotSupported,
        "CopyAcrossAccountsNotSupported"
    ),
    #[doc = r#"Copy ID mismatch."#]
    (CopyIdMismatch, "CopyIdMismatch"),
    #[doc = r#"Empty metadata key."#]
    (EmptyMetadataKey, "EmptyMetadataKey"),
    #[doc = r#"Feature version mismatch."#]
    (FeatureVersionMismatch, "FeatureVersionMismatch"),
    #[doc = r#"Incremental copy blob mismatch."#]
    (IncrementalCopyBlobMismatch, "IncrementalCopyBlobMismatch"),
    #[doc = r#"Incremental copy of earlier version snapshot not allowed."#]
    (
        IncrementalCopyOfEarlierVersionSnapshotNotAllowed,
        "IncrementalCopyOfEarlierVersionSnapshotNotAllowed"
    ),
    #[doc = r#"Incremental copy source must be snapshot."#]
    (
        IncrementalCopySourceMustBeSnapshot,
        "IncrementalCopySourceMustBeSnapshot"
    ),
    #[doc = r#"Infinite lease duration required."#]
    (
        InfiniteLeaseDurationRequired,
        "InfiniteLeaseDurationRequired"
    ),
    #[doc = r#"Insufficient account permissions."#]
    (
        InsufficientAccountPermissions,
        "InsufficientAccountPermissions"
    ),
    #[doc = r#"Internal error."#]
    (InternalError, "InternalError"),
    #[doc = r#"Invalid authentication information."#]
    (InvalidAuthenticationInfo, "InvalidAuthenticationInfo"),
    #[doc = r#"Invalid blob or block."#]
    (InvalidBlobOrBlock, "InvalidBlobOrBlock"),
    #[doc = r#"Invalid blob tier."#]
    (InvalidBlobTier, "InvalidBlobTier"),
    #[doc = r#"Invalid blob type."#]
    (InvalidBlobType, "InvalidBlobType"),
    #[doc = r#"Invalid block ID."#]
    (InvalidBlockId, "InvalidBlockId"),
    #[doc = r#"Invalid block list."#]
    (InvalidBlockList, "InvalidBlockList"),
    #[doc = r#"Invalid header value."#]
    (InvalidHeaderValue, "InvalidHeaderValue"),
    #[doc = r#"Invalid HTTP verb."#]
    (InvalidHttpVerb, "InvalidHttpVerb"),
    #[doc = r#"Invalid input."#]
    (InvalidInput, "InvalidInput"),
    #[doc = r#"Invalid MD5."#]
    (InvalidMd5, "InvalidMd5"),
    #[doc = r#"Invalid metadata."#]
    (InvalidMetadata, "InvalidMetadata"),
    #[doc = r#"Invalid operation."#]
    (InvalidOperation, "InvalidOperation"),
    #[doc = r#"Invalid page range."#]
    (InvalidPageRange, "InvalidPageRange"),
    #[doc = r#"Invalid query parameter value."#]
    (InvalidQueryParameterValue, "InvalidQueryParameterValue"),
    #[doc = r#"Invalid range."#]
    (InvalidRange, "InvalidRange"),
    #[doc = r#"Invalid request URL."#]
    (InvalidRequestUrl, "InvalidRequestUrl"),
    #[doc = r#"Invalid source blob type."#]
    (InvalidSourceBlobType, "InvalidSourceBlobType"),
    #[doc = r#"Invalid source blob URL."#]
    (InvalidSourceBlobUrl, "InvalidSourceBlobUrl"),
    #[doc = r#"Invalid URI."#]
    (InvalidUri, "InvalidUri"),
    #[doc = r#"Invalid version for page blob operation."#]
    (
        InvalidVersionForPageBlobOperation,
        "InvalidVersionForPageBlobOperation"
    ),
    #[doc = r#"Invalid XML document."#]
    (InvalidXmlDocument, "InvalidXmlDocument"),
    #[doc = r#"Invalid XML node value."#]
    (InvalidXmlNodeValue, "InvalidXmlNodeValue"),
    #[doc = r#"Lease already broken."#]
    (LeaseAlreadyBroken, "LeaseAlreadyBroken"),
    #[doc = r#"Lease already present."#]
    (LeaseAlreadyPresent, "LeaseAlreadyPresent"),
    #[doc = r#"Lease ID mismatch with blob operation."#]
    (
        LeaseIdMismatchWithBlobOperation,
        "LeaseIdMismatchWithBlobOperation"
    ),
    #[doc = r#"Lease ID mismatch with container operation."#]
    (
        LeaseIdMismatchWithContainerOperation,
        "LeaseIdMismatchWithContainerOperation"
    ),
    #[doc = r#"Lease ID mismatch with lease operation."#]
    (
        LeaseIdMismatchWithLeaseOperation,
        "LeaseIdMismatchWithLeaseOperation"
    ),
    #[doc = r#"Lease ID missing."#]
    (LeaseIdMissing, "LeaseIdMissing"),
    #[doc = r#"Lease is breaking and cannot be acquired."#]
    (
        LeaseIsBreakingAndCannotBeAcquired,
        "LeaseIsBreakingAndCannotBeAcquired"
    ),
    #[doc = r#"Lease is breaking and cannot be changed."#]
    (
        LeaseIsBreakingAndCannotBeChanged,
        "LeaseIsBreakingAndCannotBeChanged"
    ),
    #[doc = r#"Lease is broken and cannot be renewed."#]
    (
        LeaseIsBrokenAndCannotBeRenewed,
        "LeaseIsBrokenAndCannotBeRenewed"
    ),
    #[doc = r#"Lease lost."#]
    (LeaseLost, "LeaseLost"),
    #[doc = r#"Lease not present with blob operation."#]
    (
        LeaseNotPresentWithBlobOperation,
        "LeaseNotPresentWithBlobOperation"
    ),
    #[doc = r#"Lease not present with container operation."#]
    (
        LeaseNotPresentWithContainerOperation,
        "LeaseNotPresentWithContainerOperation"
    ),
    #[doc = r#"Lease not present with lease operation."#]
    (
        LeaseNotPresentWithLeaseOperation,
        "LeaseNotPresentWithLeaseOperation"
    ),
    #[doc = r#"Maximum blob size condition not met."#]
    (MaxBlobSizeConditionNotMet, "MaxBlobSizeConditionNotMet"),
    #[doc = r#"MD5 mismatch."#]
    (Md5Mismatch, "Md5Mismatch"),
    #[doc = r#"Metadata too large."#]
    (MetadataTooLarge, "MetadataTooLarge"),
    #[doc = r#"Missing content length header."#]
    (MissingContentLengthHeader, "MissingContentLengthHeader"),
    #[doc = r#"Missing required header."#]
    (MissingRequiredHeader, "MissingRequiredHeader"),
    #[doc = r#"Missing required query parameter."#]
    (
        MissingRequiredQueryParameter,
        "MissingRequiredQueryParameter"
    ),
    #[doc = r#"Missing required XML node."#]
    (MissingRequiredXmlNode, "MissingRequiredXmlNode"),
    #[doc = r#"Multiple condition headers not supported."#]
    (
        MultipleConditionHeadersNotSupported,
        "MultipleConditionHeadersNotSupported"
    ),
    #[doc = r#"No pending copy operation."#]
    (NoPendingCopyOperation, "NoPendingCopyOperation"),
    #[doc = r#"Operation not allowed on incremental copy blob."#]
    (
        OperationNotAllowedOnIncrementalCopyBlob,
        "OperationNotAllowedOnIncrementalCopyBlob"
    ),
    #[doc = r#"Operation timed out."#]
    (OperationTimedOut, "OperationTimedOut"),
    #[doc = r#"Out of range input."#]
    (OutOfRangeInput, "OutOfRangeInput"),
    #[doc = r#"Out of range query parameter value."#]
    (
        OutOfRangeQueryParameterValue,
        "OutOfRangeQueryParameterValue"
    ),
    #[doc = r#"Pending copy operation."#]
    (PendingCopyOperation, "PendingCopyOperation"),
    #[doc = r#"Previous snapshot cannot be newer."#]
    (
        PreviousSnapshotCannotBeNewer,
        "PreviousSnapshotCannotBeNewer"
    ),
    #[doc = r#"Previous snapshot not found."#]
    (PreviousSnapshotNotFound, "PreviousSnapshotNotFound"),
    #[doc = r#"Previous snapshot operation not supported."#]
    (
        PreviousSnapshotOperationNotSupported,
        "PreviousSnapshotOperationNotSupported"
    ),
    #[doc = r#"Request body too large."#]
    (RequestBodyTooLarge, "RequestBodyTooLarge"),
    #[doc = r#"Request URL failed to parse."#]
    (RequestUrlFailedToParse, "RequestUrlFailedToParse"),
    #[doc = r#"Resource already exists."#]
    (ResourceAlreadyExists, "ResourceAlreadyExists"),
    #[doc = r#"Resource not found."#]
    (ResourceNotFound, "ResourceNotFound"),
    #[doc = r#"Resource type mismatch."#]
    (ResourceTypeMismatch, "ResourceTypeMismatch"),
    #[doc = r#"Sequence number condition not met."#]
    (
        SequenceNumberConditionNotMet,
        "SequenceNumberConditionNotMet"
    ),
    #[doc = r#"Sequence number increment too large."#]
    (
        SequenceNumberIncrementTooLarge,
        "SequenceNumberIncrementTooLarge"
    ),
    #[doc = r#"Server busy."#]
    (ServerBusy, "ServerBusy"),
    #[doc = r#"Snapshot count exceeded."#]
    (SnapshotCountExceeded, "SnapshotCountExceeded"),
    #[doc = r#"Snapshot operation rate exceeded."#]
    (
        SnapshotOperationRateExceeded,
        "SnapshotOperationRateExceeded"
    ),
    #[doc = r#"Snapshots present."#]
    (SnapshotsPresent, "SnapshotsPresent"),
    #[doc = r#"Source condition not met."#]
    (SourceConditionNotMet, "SourceConditionNotMet"),
    #[doc = r#"System in use."#]
    (SystemInUse, "SystemInUse"),
    #[doc = r#"Target condition not met."#]
    (TargetConditionNotMet, "TargetConditionNotMet"),
    #[doc = r#"Unauthorized blob overwrite."#]
    (UnauthorizedBlobOverwrite, "UnauthorizedBlobOverwrite"),
    #[doc = r#"Unsupported header."#]
    (UnsupportedHeader, "UnsupportedHeader"),
    #[doc = r#"Unsupported HTTP verb."#]
    (UnsupportedHttpVerb, "UnsupportedHttpVerb"),
    #[doc = r#"Unsupported query parameter."#]
    (UnsupportedQueryParameter, "UnsupportedQueryParameter"),
    #[doc = r#"Unsupported XML node."#]
    (UnsupportedXmlNode, "UnsupportedXmlNode")
);
