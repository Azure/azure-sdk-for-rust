{
  "root": 378,
  "crate_version": "0.1.0",
  "index": {
    "372": {
      "id": 372,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 309,
          "is_glob": false,
          "name": "Size",
          "source": "numeric::Size"
        }
      }
    },
    "132": {
      "id": 132,
      "crate_id": 0,
      "name": "name",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "resolved_path": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 104,
            "name": "String"
          }
        }
      }
    },
    "295": {
      "id": 295,
      "crate_id": 0,
      "name": "Mat3f",
      "visibility": "public",
      "docs": "Type alias example for floating-point 3x3 matrix",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "type_alias": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "primitive": "f32"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 272,
              "name": "Matrix3"
            }
          }
        }
      }
    },
    "210": {
      "id": 210,
      "crate_id": 0,
      "name": "PRECISION",
      "visibility": "default",
      "docs": "Number of decimal places for precision",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "u8"
          },
          "value": null
        }
      }
    },
    "4": {
      "id": 4,
      "crate_id": 0,
      "name": "new",
      "visibility": "public",
      "docs": "Creates a new Configuration with the specified timeout\n\n# Arguments\n* `timeout` - The timeout value in seconds",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "timeout",
                {
                  "primitive": "u64"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "91": {
      "id": 91,
      "crate_id": 0,
      "name": "eq",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "other",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [],
                            "constraints": []
                          }
                        },
                        "id": 69,
                        "name": "Status"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "bool"
            }
          }
        }
      }
    },
    "322": {
      "id": 322,
      "crate_id": 0,
      "name": "get_as_float",
      "visibility": "public",
      "docs": "Safely gets the value as a float",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "f32"
            }
          }
        }
      }
    },
    "69": {
      "id": 69,
      "crate_id": 0,
      "name": "Status",
      "visibility": "public",
      "docs": "Status of a processing operation\n\nRepresents the different states that a processing operation can be in.\nUsed for tracking the lifecycle of long-running operations.\n\n# Examples\n```\n# use azure_template::data::Status;\nlet status = Status::Active;\nassert!(matches!(status, Status::Active));\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "enum": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_stripped_variants": false,
          "impls": [
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            86,
            88,
            89,
            92,
            96
          ],
          "variants": [
            66,
            67,
            68
          ]
        }
      }
    },
    "302": {
      "id": 302,
      "crate_id": 0,
      "name": "to_bytes",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "primitive": "u8"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 298,
                "name": "Vec"
              }
            }
          }
        }
      }
    },
    "376": {
      "id": 376,
      "crate_id": 0,
      "name": "create_configuration",
      "visibility": "public",
      "docs": "Macro for creating a new Configuration instance\n\n# Examples\n```\n# use azure_template::create_configuration;\nlet config = create_configuration!(60);\nassert_eq!(config.timeout, 60);\n```",
      "links": {},
      "attrs": [
        "#[macro_export]"
      ],
      "deprecation": null,
      "inner": {
        "macro": "macro_rules! create_configuration {\n    ($timeout:expr) => { ... };\n}"
      }
    },
    "59": {
      "id": 59,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 3,
              "name": "Configuration"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            56
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "124": {
      "id": 124,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 95,
              "name": "StatusVariant"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            123
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "68": {
      "id": 68,
      "crate_id": 0,
      "name": "Pending",
      "visibility": "default",
      "docs": "Operation is scheduled but not yet executing",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": "plain"
        }
      }
    },
    "97": {
      "id": 97,
      "crate_id": 0,
      "name": "percent",
      "visibility": "default",
      "docs": "Percentage of completion (0-100)",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "u8"
        }
      }
    },
    "313": {
      "id": 313,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "primitive": "f32"
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 310,
            "name": "NumericOps"
          }
        }
      }
    },
    "245": {
      "id": 245,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "220": {
      "id": 220,
      "crate_id": 0,
      "name": "add",
      "visibility": "default",
      "docs": "Adds an item to the container",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "item",
                {
                  "qualified_path": {
                    "args": {
                      "angle_bracketed": {
                        "args": [],
                        "constraints": []
                      }
                    },
                    "name": "Item",
                    "self_type": {
                      "generic": "Self"
                    },
                    "trait": {
                      "args": null,
                      "id": 221,
                      "name": ""
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "184": {
      "id": 184,
      "crate_id": 0,
      "name": "Template",
      "visibility": "public",
      "docs": "A generic template type that can hold any displayable value\n\nThis struct demonstrates generic type parameters and trait bounds.\nThe type parameter T must implement Display to ensure the value\ncan be converted to a string representation.\n\n# Type Parameters\n\n* `T` - The type of value stored in the template, must implement Display\n\n# Examples\n\n```\nuse azure_template::module_example::Template;\n\nlet string_template = Template {\n    name: String::from(\"text\"),\n    value: String::from(\"Hello\")\n};\n\nlet number_template = Template {\n    name: String::from(\"count\"),\n    value: 42\n};\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 183,
                            "name": "std::fmt::Display"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "impls": [
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            203,
            205,
            182
          ],
          "kind": {
            "plain": {
              "fields": [
                185,
                186
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "306": {
      "id": 306,
      "crate_id": 0,
      "name": "to_hex",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 104,
                "name": "String"
              }
            }
          }
        }
      }
    },
    "88": {
      "id": 88,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 69,
              "name": "Status"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            87
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "270": {
      "id": 270,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]",
        "#[allow(dead_code)]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 216,
              "name": "Vector3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 29,
                            "name": "$crate::clone::Clone"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            269
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "208": {
      "id": 208,
      "crate_id": 0,
      "name": "MAX_VALUE",
      "visibility": "default",
      "docs": "Maximum allowed value",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "f64"
          },
          "value": null
        }
      }
    },
    "374": {
      "id": 374,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": "Common data structures used throughout the crate",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 373,
          "is_glob": false,
          "name": "HashMap",
          "source": "std::collections::HashMap"
        }
      }
    },
    "121": {
      "id": 121,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "315": {
      "id": 315,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 310,
            "name": "NumericOps"
          }
        }
      }
    },
    "127": {
      "id": 127,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 95,
              "name": "StatusVariant"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            126
          ],
          "provided_trait_methods": [
            "ne"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 93,
            "name": "PartialEq"
          }
        }
      }
    },
    "350": {
      "id": 350,
      "crate_id": 0,
      "name": "sub",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "generic": "Self"
                }
              ],
              [
                "other",
                {
                  "generic": "Self"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "216": {
      "id": 216,
      "crate_id": 0,
      "name": "Vector3",
      "visibility": "public",
      "docs": "Basic vector type for 3D coordinates",
      "links": {},
      "attrs": [
        "#[allow(dead_code)]"
      ],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "impls": [
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            215,
            268,
            270
          ],
          "kind": {
            "plain": {
              "fields": [],
              "has_stripped_fields": true
            }
          }
        }
      }
    },
    "27": {
      "id": 27,
      "crate_id": 2,
      "name": "clone_to_uninit",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": true
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "dst",
                {
                  "raw_pointer": {
                    "is_mutable": true,
                    "type": {
                      "primitive": "u8"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "211": {
      "id": 211,
      "crate_id": 0,
      "name": "NumericConstants",
      "visibility": "public",
      "docs": "Example trait demonstrating associated constants\n\nShows how to define constants that implementing types must specify.\n\n# Examples\n```\nuse azure_template::numeric::NumericConstants;\n\nstruct CustomFloat(f64);\n\nimpl NumericConstants for CustomFloat {\n    const MAX_VALUE: f64 = 1000.0;\n    const MIN_VALUE: f64 = -1000.0;\n    const PRECISION: u8 = 2;\n}\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [
            215
          ],
          "is_auto": false,
          "is_dyn_compatible": false,
          "is_unsafe": false,
          "items": [
            208,
            209,
            210
          ]
        }
      }
    },
    "2": {
      "id": 2,
      "crate_id": 0,
      "name": "timeout",
      "visibility": "public",
      "docs": "Timeout duration in seconds for operations",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "u64"
        }
      }
    },
    "370": {
      "id": 370,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 316,
          "is_glob": false,
          "name": "IntOrFloat",
          "source": "numeric::IntOrFloat"
        }
      }
    },
    "307": {
      "id": 307,
      "crate_id": 0,
      "name": "HexFormat",
      "visibility": "public",
      "docs": "Trait for types that can be formatted as hex",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": [
            306
          ]
        }
      }
    },
    "130": {
      "id": 130,
      "crate_id": 0,
      "name": "0",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "i32"
        }
      }
    },
    "225": {
      "id": 225,
      "crate_id": 0,
      "name": "value",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "borrowed_ref": {
                "is_mutable": false,
                "lifetime": null,
                "type": {
                  "generic": "T"
                }
              }
            }
          }
        }
      }
    },
    "321": {
      "id": 321,
      "crate_id": 0,
      "name": "is_int",
      "visibility": "public",
      "docs": "Returns true if the value was stored as an integer",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "bool"
            }
          }
        }
      }
    },
    "94": {
      "id": 94,
      "crate_id": 0,
      "name": "from",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "variant",
                {
                  "resolved_path": {
                    "args": {
                      "angle_bracketed": {
                        "args": [],
                        "constraints": []
                      }
                    },
                    "id": 95,
                    "name": "StatusVariant"
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "346": {
      "id": 346,
      "crate_id": 0,
      "name": "Output",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          }
        }
      }
    },
    "213": {
      "id": 213,
      "crate_id": 0,
      "name": "MIN_VALUE",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "f64"
          },
          "value": "T::MIN_VALUE"
        }
      }
    },
    "131": {
      "id": 131,
      "crate_id": 0,
      "name": "Number",
      "visibility": "default",
      "docs": "A number variant holding an i32",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "tuple": [
              130
            ]
          }
        }
      }
    },
    "53": {
      "id": 53,
      "crate_id": 5,
      "name": "clone_into",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "target",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "generic": "T"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "351": {
      "id": 351,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            349,
            350
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 312,
            "name": "Sub"
          }
        }
      }
    },
    "354": {
      "id": 354,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "std::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "std::fmt::Result"
              }
            }
          }
        }
      }
    },
    "177": {
      "id": 177,
      "crate_id": 0,
      "name": "use_sample_struct2",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "98": {
      "id": 98,
      "crate_id": 0,
      "name": "InProgress",
      "visibility": "default",
      "docs": "Operation is running with progress information",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "struct": {
              "fields": [
                97
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "355": {
      "id": 355,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            354
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 183,
            "name": "Display"
          }
        }
      }
    },
    "100": {
      "id": 100,
      "crate_id": 0,
      "name": "Waiting",
      "visibility": "default",
      "docs": "Operation is waiting for resources",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "struct": {
              "fields": [
                99
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "274": {
      "id": 274,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 272,
              "name": "Matrix3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            273
          ],
          "provided_trait_methods": [],
          "trait": null
        }
      }
    },
    "269": {
      "id": 269,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 216,
                "name": "Vector3"
              }
            }
          }
        }
      }
    },
    "272": {
      "id": 272,
      "crate_id": 0,
      "name": "Matrix3",
      "visibility": "public",
      "docs": "Basic matrix type for 3x3 transformations",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "impls": [
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            291,
            293
          ],
          "kind": {
            "plain": {
              "fields": [],
              "has_stripped_fields": true
            }
          }
        }
      }
    },
    "162": {
      "id": 162,
      "crate_id": 0,
      "name": "SampleStruct2",
      "visibility": "public",
      "docs": "This is a sample struct",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "impls": [
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175
          ],
          "kind": {
            "plain": {
              "fields": [
                160,
                161
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "160": {
      "id": 160,
      "crate_id": 0,
      "name": "field1",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "resolved_path": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 104,
            "name": "String"
          }
        }
      }
    },
    "368": {
      "id": 368,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 184,
          "is_glob": false,
          "name": "Template",
          "source": "module_example::Template"
        }
      }
    },
    "308": {
      "id": 308,
      "crate_id": 0,
      "name": "NumericFormat",
      "visibility": "public",
      "docs": "Trait alias combining numeric-related traits\n\nThis demonstrates how to create a trait alias that combines multiple\ntrait bounds into a single convenient name.\n\n# Examples\n```\nuse azure_template::numeric::{ToBytes, Validate, HexFormat, NumericFormat};\n\nstruct Number(i32);\n\nimpl ToBytes for Number {\n    fn to_bytes(&self) -> Vec<u8> {\n        self.0.to_le_bytes().to_vec()\n    }\n}\n\nimpl Validate for Number {\n    fn is_valid(&self) -> bool {\n        self.0 >= 0\n    }\n}\n\nimpl HexFormat for Number {\n    fn to_hex(&self) -> String {\n        format!(\"{:X}\", self.0)\n    }\n}\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": []
                    }
                  },
                  "id": 299,
                  "name": "ToBytes"
                }
              }
            },
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": []
                    }
                  },
                  "id": 305,
                  "name": "Validate"
                }
              }
            },
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": []
                    }
                  },
                  "id": 307,
                  "name": "HexFormat"
                }
              }
            }
          ],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": []
        }
      }
    },
    "39": {
      "id": 39,
      "crate_id": 2,
      "name": "try_into",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "generic": "Self"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "U"
                        }
                      },
                      {
                        "type": {
                          "qualified_path": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "name": "Error",
                            "self_type": {
                              "generic": "U"
                            },
                            "trait": {
                              "args": {
                                "angle_bracketed": {
                                  "args": [
                                    {
                                      "type": {
                                        "generic": "T"
                                      }
                                    }
                                  ],
                                  "constraints": []
                                }
                              },
                              "id": 38,
                              "name": "TryFrom"
                            }
                          }
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 40,
                "name": "Result"
              }
            }
          }
        }
      }
    },
    "226": {
      "id": 226,
      "crate_id": 0,
      "name": "precision",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "u8"
            }
          }
        }
      }
    },
    "353": {
      "id": 353,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            352
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "371": {
      "id": 371,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 310,
          "is_glob": false,
          "name": "NumericOps",
          "source": "numeric::NumericOps"
        }
      }
    },
    "3": {
      "id": 3,
      "crate_id": 0,
      "name": "Configuration",
      "visibility": "public",
      "docs": "Configuration settings container for the template SDK\n\nHolds various configuration options that control the behavior\nof template operations.\n\n# Examples\n```\n# use azure_template::configuration::Configuration;\nlet config = Configuration::new(30);\nassert_eq!(config.timeout, 30);\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "impls": [
            7,
            8,
            10,
            12,
            14,
            16,
            18,
            21,
            25,
            28,
            33,
            36,
            41,
            46,
            49,
            54,
            59,
            62
          ],
          "kind": {
            "plain": {
              "fields": [
                2
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "212": {
      "id": 212,
      "crate_id": 0,
      "name": "MAX_VALUE",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "f64"
          },
          "value": "T::MAX_VALUE"
        }
      }
    },
    "345": {
      "id": 345,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            344
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "52": {
      "id": 52,
      "crate_id": 5,
      "name": "to_owned",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "T"
            }
          }
        }
      }
    },
    "294": {
      "id": 294,
      "crate_id": 0,
      "name": "Vec3f",
      "visibility": "public",
      "docs": "Type alias example for floating-point 3D vector\n\nDemonstrates how to create a type alias for a specific instantiation\nof a generic type.\n\n# Examples\n```\nuse azure_template::numeric::Vec3f;\nlet position = Vec3f { x: 1.0, y: 2.0, z: 3.0 };\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "type_alias": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "primitive": "f32"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 216,
              "name": "Vector3"
            }
          }
        }
      }
    },
    "291": {
      "id": 291,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 272,
              "name": "Matrix3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 60,
                            "name": "$crate::fmt::Debug"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            290
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "180": {
      "id": 180,
      "crate_id": 0,
      "name": "TemplateOperation",
      "visibility": "public",
      "docs": "A trait defining operations that can be performed on templates\n\nThis trait demonstrates proper trait design patterns including\ndocumentation and method signatures.\n\n# Examples\n\n```\nuse azure_template::module_example::{Template, TemplateOperation};\n\nlet template = Template {\n    name: String::from(\"example\"),\n    value: 42\n};\nassert!(template.process().contains(\"example\"));\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [
            182
          ],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": [
            179
          ]
        }
      }
    },
    "204": {
      "id": 204,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 184,
                "name": "Template"
              }
            }
          }
        }
      }
    },
    "64": {
      "id": 64,
      "crate_id": 0,
      "name": "MAX_RETRIES",
      "visibility": "public",
      "docs": "Maximum number of retry attempts for operations\n\nUsed to limit the number of retries for fallible operations",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "constant": {
          "const": {
            "expr": "3",
            "is_literal": true,
            "value": "3u32"
          },
          "type": {
            "primitive": "u32"
          }
        }
      }
    },
    "292": {
      "id": 292,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 272,
                "name": "Matrix3"
              }
            }
          }
        }
      }
    },
    "5": {
      "id": 5,
      "crate_id": 0,
      "name": "timeout_duration",
      "visibility": "public",
      "docs": "Convert the timeout to a std::time::Duration\n\nUseful when integrating with async operations or standard library timing functions",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 6,
                "name": "Duration"
              }
            }
          }
        }
      }
    },
    "342": {
      "id": 342,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 343,
            "name": "Copy"
          }
        }
      }
    },
    "273": {
      "id": 273,
      "crate_id": 0,
      "name": "data",
      "visibility": "public",
      "docs": "Returns a reference to the data of the matrix",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "borrowed_ref": {
                "is_mutable": false,
                "lifetime": null,
                "type": {
                  "array": {
                    "len": "3",
                    "type": {
                      "array": {
                        "len": "3",
                        "type": {
                          "generic": "T"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "299": {
      "id": 299,
      "crate_id": 0,
      "name": "ToBytes",
      "visibility": "public",
      "docs": "Trait for types that can be serialized to bytes",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [
            301,
            303
          ],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": [
            297
          ]
        }
      }
    },
    "202": {
      "id": 202,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "1": {
      "id": 1,
      "crate_id": 0,
      "name": "Configurable",
      "visibility": "public",
      "docs": "A trait for types that can be configured at runtime\n\nImplement this trait for types that need to be configured after initialization\nbut before use.\n\n# Examples\n```\n# use azure_template::configuration::*;\nstruct Service {\n    config: Configuration\n}\n\nimpl Configurable for Service {\n    fn configure(&mut self) {\n        // Configure the service\n    }\n}\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": [
            0
          ]
        }
      }
    },
    "182": {
      "id": 182,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 184,
              "name": "Template"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 183,
                            "name": "std::fmt::Display"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            181
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 180,
            "name": "TemplateOperation"
          }
        }
      }
    },
    "344": {
      "id": 344,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 316,
                "name": "IntOrFloat"
              }
            }
          }
        }
      }
    },
    "123": {
      "id": 123,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 95,
                "name": "StatusVariant"
              }
            }
          }
        }
      }
    },
    "359": {
      "id": 359,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 358,
          "is_glob": false,
          "name": "numeric_operation",
          "source": "azure_template_macros::numeric_operation"
        }
      }
    },
    "95": {
      "id": 95,
      "crate_id": 0,
      "name": "StatusVariant",
      "visibility": "public",
      "docs": "Detailed variant of processing status with additional context\n\nProvides more granular status information including progress details\nand error conditions.\n\n# Examples\n```\n# use azure_template::data::StatusVariant;\nlet status = StatusVariant::InProgress { percent: 50 };\nassert!(matches!(status, StatusVariant::InProgress { percent: 50 }));\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "enum": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_stripped_variants": false,
          "impls": [
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            122,
            124,
            125,
            127,
            96
          ],
          "variants": [
            98,
            100,
            102,
            105
          ]
        }
      }
    },
    "357": {
      "id": 357,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 229,
          "is_glob": false,
          "name": "NumericCore",
          "source": "azure_template_core::NumericCore"
        }
      }
    },
    "7": {
      "id": 7,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 3,
              "name": "Configuration"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            4,
            5
          ],
          "provided_trait_methods": [],
          "trait": null
        }
      }
    },
    "314": {
      "id": 314,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "primitive": "f64"
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 310,
            "name": "NumericOps"
          }
        }
      }
    },
    "159": {
      "id": 159,
      "crate_id": 0,
      "name": "sample_function2",
      "visibility": "public",
      "docs": "This is a sample function",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "347": {
      "id": 347,
      "crate_id": 0,
      "name": "add",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "generic": "Self"
                }
              ],
              [
                "other",
                {
                  "generic": "Self"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "352": {
      "id": 352,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "std::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "std::fmt::Result"
              }
            }
          }
        }
      }
    },
    "305": {
      "id": 305,
      "crate_id": 0,
      "name": "Validate",
      "visibility": "public",
      "docs": "Trait for types that support numeric validation",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": true,
          "is_unsafe": false,
          "items": [
            304
          ]
        }
      }
    },
    "203": {
      "id": 203,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 184,
              "name": "Template"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 60,
                            "name": "$crate::fmt::Debug"
                          }
                        }
                      },
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 183,
                            "name": "std::fmt::Display"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            202
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "153": {
      "id": 153,
      "crate_id": 0,
      "name": "Output",
      "visibility": "default",
      "docs": "The type of data produced by the processor",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": null
        }
      }
    },
    "150": {
      "id": 150,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "65": {
      "id": 65,
      "crate_id": 0,
      "name": "configuration",
      "visibility": "public",
      "docs": "Configuration management and settings\nConfiguration management module\n\nThis module provides types and traits for managing configuration settings\nin the Azure Template SDK. It demonstrates proper configuration management\npatterns and timeout handling.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            1,
            3,
            63,
            64
          ]
        }
      }
    },
    "62": {
      "id": 62,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 3,
              "name": "Configuration"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            61
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "92": {
      "id": 92,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 69,
              "name": "Status"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            91
          ],
          "provided_trait_methods": [
            "ne"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 93,
            "name": "PartialEq"
          }
        }
      }
    },
    "85": {
      "id": 85,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "157": {
      "id": 157,
      "crate_id": 0,
      "name": "abs",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": {
              "C": {
                "unwind": false
              }
            },
            "is_async": false,
            "is_const": false,
            "is_unsafe": true
          },
          "sig": {
            "inputs": [
              [
                "input",
                {
                  "primitive": "i32"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "i32"
            }
          }
        }
      }
    },
    "161": {
      "id": 161,
      "crate_id": 0,
      "name": "field2",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "i32"
        }
      }
    },
    "219": {
      "id": 219,
      "crate_id": 0,
      "name": "new",
      "visibility": "default",
      "docs": "Creates a new empty container",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "37": {
      "id": 37,
      "crate_id": 2,
      "name": "Error",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "qualified_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "name": "Error",
              "self_type": {
                "generic": "U"
              },
              "trait": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 38,
                "name": "TryFrom"
              }
            }
          }
        }
      }
    },
    "363": {
      "id": 363,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 64,
          "is_glob": false,
          "name": "MAX_RETRIES",
          "source": "configuration::MAX_RETRIES"
        }
      }
    },
    "316": {
      "id": 316,
      "crate_id": 0,
      "name": "IntOrFloat",
      "visibility": "public",
      "docs": "A C-compatible union for storing either an integer or float value\n\nThis type demonstrates proper FFI type declarations and memory layout control.\nThe `repr(C)` attribute ensures a consistent memory layout compatible with C.\n\n# Safety\n\nAccessing union fields is inherently unsafe as the compiler cannot guarantee\ntype safety. The caller must ensure they read the correct field based on the\nactual stored value.\n\n# Examples\n\n```\n# use azure_template::numeric::IntOrFloat;\nlet mut value = IntOrFloat { int: 42 };\nassert_eq!(unsafe { value.int }, 42);\n\nvalue = IntOrFloat { float: 3.14 };\nassert!((unsafe { value.float } - 3.14).abs() < f32::EPSILON);\n```",
      "links": {},
      "attrs": [
        "#[repr(C)]"
      ],
      "deprecation": null,
      "inner": {
        "union": {
          "fields": [
            317,
            318
          ],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_stripped_fields": false,
          "impls": [
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            340,
            342,
            345,
            348,
            351,
            315,
            353,
            355
          ]
        }
      }
    },
    "51": {
      "id": 51,
      "crate_id": 5,
      "name": "Owned",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "generic": "T"
          }
        }
      }
    },
    "35": {
      "id": 35,
      "crate_id": 2,
      "name": "from",
      "visibility": "default",
      "docs": "Returns the argument unchanged.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "t",
                {
                  "generic": "T"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "T"
            }
          }
        }
      }
    },
    "303": {
      "id": 303,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "primitive": "f64"
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            302
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 299,
            "name": "ToBytes"
          }
        }
      }
    },
    "293": {
      "id": 293,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 272,
              "name": "Matrix3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 29,
                            "name": "$crate::clone::Clone"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            292
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "224": {
      "id": 224,
      "crate_id": 0,
      "name": "NumericWrapper",
      "visibility": "public",
      "docs": "Example of using a procedural macro attribute\n\nNote: The actual proc macro definition would be in a separate crate\nmarked with `proc-macro = true` in Cargo.toml",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "impls": [
            228,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            246,
            248
          ],
          "kind": {
            "plain": {
              "fields": [],
              "has_stripped_fields": true
            }
          }
        }
      }
    },
    "377": {
      "id": 377,
      "crate_id": 0,
      "name": "implement_numeric",
      "visibility": "public",
      "docs": "Example of a declarative macro that creates numeric operations\n\nThis macro demonstrates how to create operations that work with\ndifferent numeric types.\n\n# Examples\n```\nuse azure_template::numeric::implement_numeric;\nimplement_numeric!(f64);\n```",
      "links": {},
      "attrs": [
        "#[macro_export]"
      ],
      "deprecation": null,
      "inner": {
        "macro": "macro_rules! implement_numeric {\n    ($t:ty) => { ... };\n}"
      }
    },
    "339": {
      "id": 339,
      "crate_id": 5,
      "name": "to_string",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 104,
                "name": "String"
              }
            }
          }
        }
      }
    },
    "66": {
      "id": 66,
      "crate_id": 0,
      "name": "Active",
      "visibility": "default",
      "docs": "Operation is currently executing",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": "plain"
        }
      }
    },
    "103": {
      "id": 103,
      "crate_id": 0,
      "name": "reason",
      "visibility": "default",
      "docs": "Error message describing the failure",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "resolved_path": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 104,
            "name": "String"
          }
        }
      }
    },
    "179": {
      "id": 179,
      "crate_id": 0,
      "name": "process",
      "visibility": "default",
      "docs": "Process the template and return a formatted string representation",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 104,
                "name": "String"
              }
            }
          }
        }
      }
    },
    "369": {
      "id": 369,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 180,
          "is_glob": false,
          "name": "TemplateOperation",
          "source": "module_example::TemplateOperation"
        }
      }
    },
    "206": {
      "id": 206,
      "crate_id": 0,
      "name": "process_template",
      "visibility": "public",
      "docs": "Process a template and return its string representation\n\nThis function demonstrates error handling patterns using Result\nand generic type constraints.\n\n# Arguments\n\n* `template` - The template to process\n\n# Returns\n\n* `Ok(String)` - The processed template string\n* `Err(&str)` - An error message if processing fails\n\n# Examples\n\n```\nuse azure_template::module_example::{Template, process_template};\n\nlet template = Template {\n    name: String::from(\"example\"),\n    value: 42\n};\nlet result = process_template(&template).unwrap();\nassert!(result.contains(\"example\"));\nassert!(result.contains(\"42\"));\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 183,
                            "name": "std::fmt::Display"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "template",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "type": {
                                  "generic": "T"
                                }
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 184,
                        "name": "Template"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "resolved_path": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 104,
                            "name": "String"
                          }
                        }
                      },
                      {
                        "type": {
                          "borrowed_ref": {
                            "is_mutable": false,
                            "lifetime": "'static",
                            "type": {
                              "primitive": "str"
                            }
                          }
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 40,
                "name": "Result"
              }
            }
          }
        }
      }
    },
    "67": {
      "id": 67,
      "crate_id": 0,
      "name": "Inactive",
      "visibility": "default",
      "docs": "Operation is not currently running or scheduled",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": "plain"
        }
      }
    },
    "45": {
      "id": 45,
      "crate_id": 2,
      "name": "try_from",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "value",
                {
                  "generic": "U"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      },
                      {
                        "type": {
                          "qualified_path": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "name": "Error",
                            "self_type": {
                              "generic": "T"
                            },
                            "trait": {
                              "args": {
                                "angle_bracketed": {
                                  "args": [
                                    {
                                      "type": {
                                        "generic": "U"
                                      }
                                    }
                                  ],
                                  "constraints": []
                                }
                              },
                              "id": 38,
                              "name": "TryFrom"
                            }
                          }
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 40,
                "name": "Result"
              }
            }
          }
        }
      }
    },
    "246": {
      "id": 246,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 224,
              "name": "NumericWrapper"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 60,
                            "name": "$crate::fmt::Debug"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            245
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "96": {
      "id": 96,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 69,
              "name": "Status"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            94
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [
                  {
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [],
                            "constraints": []
                          }
                        },
                        "id": 95,
                        "name": "StatusVariant"
                      }
                    }
                  }
                ],
                "constraints": []
              }
            },
            "id": 31,
            "name": "From"
          }
        }
      }
    },
    "128": {
      "id": 128,
      "crate_id": 0,
      "name": "0",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "resolved_path": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 104,
            "name": "String"
          }
        }
      }
    },
    "133": {
      "id": 133,
      "crate_id": 0,
      "name": "id",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "u64"
        }
      }
    },
    "186": {
      "id": 186,
      "crate_id": 0,
      "name": "value",
      "visibility": "public",
      "docs": "Value stored in the template",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "generic": "T"
        }
      }
    },
    "151": {
      "id": 151,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 136,
              "name": "Message"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            150
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "61": {
      "id": 61,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 3,
                "name": "Configuration"
              }
            }
          }
        }
      }
    },
    "248": {
      "id": 248,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 224,
              "name": "NumericWrapper"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 29,
                            "name": "$crate::clone::Clone"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            247
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "310": {
      "id": 310,
      "crate_id": 0,
      "name": "NumericOps",
      "visibility": "public",
      "docs": "Trait for types supporting basic arithmetic operations\n\nThis trait combines the Add and Sub traits to define a type that supports\nboth addition and subtraction operations. Implementing types must ensure\nthat these operations are consistent with each other.\n\n# Type Parameters\n\nThe trait is bound by `Sized` to ensure the type can be used in generic contexts\nwhere size information is needed at compile time.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": [
                        {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "constraints": []
                            }
                          },
                          "binding": {
                            "equality": {
                              "type": {
                                "generic": "Self"
                              }
                            }
                          },
                          "name": "Output"
                        }
                      ]
                    }
                  },
                  "id": 311,
                  "name": "Add"
                }
              }
            },
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": [
                        {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "constraints": []
                            }
                          },
                          "binding": {
                            "equality": {
                              "type": {
                                "generic": "Self"
                              }
                            }
                          },
                          "name": "Output"
                        }
                      ]
                    }
                  },
                  "id": 312,
                  "name": "Sub"
                }
              }
            },
            {
              "trait_bound": {
                "generic_params": [],
                "modifier": "none",
                "trait": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "constraints": []
                    }
                  },
                  "id": 22,
                  "name": "Sized"
                }
              }
            }
          ],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [
            313,
            314,
            315
          ],
          "is_auto": false,
          "is_dyn_compatible": false,
          "is_unsafe": false,
          "items": []
        }
      }
    },
    "24": {
      "id": 24,
      "crate_id": 2,
      "name": "borrow_mut",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "borrowed_ref": {
                "is_mutable": true,
                "lifetime": null,
                "type": {
                  "generic": "T"
                }
              }
            }
          }
        }
      }
    },
    "105": {
      "id": 105,
      "crate_id": 0,
      "name": "Failed",
      "visibility": "default",
      "docs": "Operation failed with error details",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "struct": {
              "fields": [
                103
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "152": {
      "id": 152,
      "crate_id": 0,
      "name": "CHUNK_SIZE",
      "visibility": "default",
      "docs": "Size of data chunks to process at once in bytes",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "usize"
          },
          "value": "1024"
        }
      }
    },
    "87": {
      "id": 87,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 69,
                "name": "Status"
              }
            }
          }
        }
      }
    },
    "154": {
      "id": 154,
      "crate_id": 0,
      "name": "process",
      "visibility": "default",
      "docs": "Process the data and return the output\n\nThis method should contain the main processing logic for\ntransforming data into the specified Output type.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "qualified_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "name": "Output",
                "self_type": {
                  "generic": "Self"
                },
                "trait": {
                  "args": null,
                  "id": 155,
                  "name": ""
                }
              }
            }
          }
        }
      }
    },
    "268": {
      "id": 268,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]",
        "#[allow(dead_code)]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 216,
              "name": "Vector3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 60,
                            "name": "$crate::fmt::Debug"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            267
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "126": {
      "id": 126,
      "crate_id": 0,
      "name": "eq",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "other",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [],
                            "constraints": []
                          }
                        },
                        "id": 95,
                        "name": "StatusVariant"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "bool"
            }
          }
        }
      }
    },
    "135": {
      "id": 135,
      "crate_id": 0,
      "name": "Empty",
      "visibility": "default",
      "docs": "A unit variant with no data",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": "plain"
        }
      }
    },
    "89": {
      "id": 89,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 69,
              "name": "Status"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 90,
            "name": "StructuralPartialEq"
          }
        }
      }
    },
    "267": {
      "id": 267,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "101": {
      "id": 101,
      "crate_id": 0,
      "name": "duration_ms",
      "visibility": "default",
      "docs": "Time taken to complete in milliseconds",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "u64"
        }
      }
    },
    "356": {
      "id": 356,
      "crate_id": 0,
      "name": "numeric",
      "visibility": "public",
      "docs": "Numeric operations and type definitions\nNumeric operations and types module\n\nThis module provides numeric type definitions and traits for mathematical operations.\nIt demonstrates FFI-compatible types and generic numeric traits.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            211,
            221,
            224,
            216,
            272,
            294,
            295,
            296,
            299,
            305,
            307,
            308,
            309,
            310,
            316
          ]
        }
      }
    },
    "181": {
      "id": 181,
      "crate_id": 0,
      "name": "process",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 104,
                "name": "String"
              }
            }
          }
        }
      }
    },
    "86": {
      "id": 86,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 69,
              "name": "Status"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            85
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "99": {
      "id": 99,
      "crate_id": 0,
      "name": "eta",
      "visibility": "default",
      "docs": "Estimated wait time in seconds",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "u32"
        }
      }
    },
    "378": {
      "id": 378,
      "crate_id": 0,
      "name": "azure_template",
      "visibility": "public",
      "docs": "Azure Template crate\n\nThis crate serves as an example for various Rust constructs and patterns commonly used\nin the Azure SDK for Rust. It demonstrates proper module organization, documentation,\nand implementation patterns.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": true,
          "is_stripped": false,
          "items": [
            65,
            156,
            158,
            207,
            356,
            357,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            374,
            375,
            376,
            377
          ]
        }
      }
    },
    "296": {
      "id": 296,
      "crate_id": 0,
      "name": "Transform3D",
      "visibility": "public",
      "docs": "Complex type alias combining multiple generic parameters\n\nShows how type aliases can be used to simplify complex type signatures\nand provide more meaningful names.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "type_alias": {
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "type": {
            "tuple": [
              {
                "resolved_path": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "generic": "T"
                          }
                        }
                      ],
                      "constraints": []
                    }
                  },
                  "id": 216,
                  "name": "Vector3"
                }
              },
              {
                "resolved_path": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "generic": "T"
                          }
                        }
                      ],
                      "constraints": []
                    }
                  },
                  "id": 272,
                  "name": "Matrix3"
                }
              }
            ]
          }
        }
      }
    },
    "158": {
      "id": 158,
      "crate_id": 0,
      "name": "ffi",
      "visibility": "public",
      "docs": "Foreign Function Interface (FFI) declarations and utilities\nForeign Function Interface (FFI) module\n\nThis module provides FFI declarations and utilities for interacting with\nC-compatible code. It demonstrates proper FFI integration patterns and\nsafety handling in Rust.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            157
          ]
        }
      }
    },
    "217": {
      "id": 217,
      "crate_id": 0,
      "name": "Item",
      "visibility": "default",
      "docs": "The type of items stored in the container",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": null
        }
      }
    },
    "227": {
      "id": 227,
      "crate_id": 0,
      "name": "new",
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "value",
                {
                  "generic": "T"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "205": {
      "id": 205,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 184,
              "name": "Template"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 29,
                            "name": "$crate::clone::Clone"
                          }
                        }
                      },
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 183,
                            "name": "std::fmt::Display"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            204
          ],
          "provided_trait_methods": [
            "clone_from"
          ],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 29,
            "name": "Clone"
          }
        }
      }
    },
    "320": {
      "id": 320,
      "crate_id": 0,
      "name": "from_float",
      "visibility": "public",
      "docs": "Creates a new `IntOrFloat` from a float value",
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "value",
                {
                  "primitive": "f32"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "323": {
      "id": 323,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            319,
            320,
            321,
            322
          ],
          "provided_trait_methods": [],
          "trait": null
        }
      }
    },
    "63": {
      "id": 63,
      "crate_id": 0,
      "name": "DEFAULT_TIMEOUT",
      "visibility": "public",
      "docs": "Default timeout value in seconds for operations\n\nThis value is used when no explicit timeout is specified",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "static": {
          "expr": "30",
          "is_mutable": false,
          "is_unsafe": false,
          "type": {
            "primitive": "u64"
          }
        }
      }
    },
    "43": {
      "id": 43,
      "crate_id": 2,
      "name": "Error",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 44,
              "name": "Infallible"
            }
          }
        }
      }
    },
    "20": {
      "id": 20,
      "crate_id": 2,
      "name": "borrow",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[rustc_diagnostic_item = \"noop_method_borrow\"]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "borrowed_ref": {
                "is_mutable": false,
                "lifetime": null,
                "type": {
                  "generic": "T"
                }
              }
            }
          }
        }
      }
    },
    "136": {
      "id": 136,
      "crate_id": 0,
      "name": "Message",
      "visibility": "public",
      "docs": "Example of variants in Rust enums\n\nIn Rust, variants are the different possible values that an enum can hold.\nEach variant can optionally contain data of different types.\n\n# Examples\n```\n# use azure_template::data::Message;\nlet msg = Message::Text(\"Hello\".to_string());\nlet num = Message::Number(42);\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "enum": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_stripped_variants": false,
          "impls": [
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            151
          ],
          "variants": [
            129,
            131,
            134,
            135
          ]
        }
      }
    },
    "102": {
      "id": 102,
      "crate_id": 0,
      "name": "Complete",
      "visibility": "default",
      "docs": "Operation completed successfully",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "struct": {
              "fields": [
                101
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "129": {
      "id": 129,
      "crate_id": 0,
      "name": "Text",
      "visibility": "default",
      "docs": "A text variant holding a String",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "tuple": [
              128
            ]
          }
        }
      }
    },
    "134": {
      "id": 134,
      "crate_id": 0,
      "name": "User",
      "visibility": "default",
      "docs": "A variant with multiple fields using a struct-like syntax",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "variant": {
          "discriminant": null,
          "kind": {
            "struct": {
              "fields": [
                132,
                133
              ],
              "has_stripped_fields": false
            }
          }
        }
      }
    },
    "304": {
      "id": 304,
      "crate_id": 0,
      "name": "is_valid",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "bool"
            }
          }
        }
      }
    },
    "207": {
      "id": 207,
      "crate_id": 0,
      "name": "module_example",
      "visibility": "public",
      "docs": "Example module demonstrating template patterns\nExample module demonstrating common Rust patterns\n\nThis module serves as a reference implementation showing various Rust features\nand patterns commonly used in the Azure SDK. It includes examples of traits,\ngeneric types, and error handling.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            178,
            180,
            184,
            206
          ]
        }
      }
    },
    "360": {
      "id": 360,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 1,
          "is_glob": false,
          "name": "Configurable",
          "source": "configuration::Configurable"
        }
      }
    },
    "365": {
      "id": 365,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 69,
          "is_glob": false,
          "name": "Status",
          "source": "data::Status"
        }
      }
    },
    "215": {
      "id": 215,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 216,
              "name": "Vector3"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 211,
                            "name": "NumericConstants"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            212,
            213,
            214
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 211,
            "name": "NumericConstants"
          }
        }
      }
    },
    "317": {
      "id": 317,
      "crate_id": 0,
      "name": "int",
      "visibility": "public",
      "docs": "Integer representation of the value",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "i32"
        }
      }
    },
    "247": {
      "id": 247,
      "crate_id": 0,
      "name": "clone",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "generic": "T"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 224,
                "name": "NumericWrapper"
              }
            }
          }
        }
      }
    },
    "56": {
      "id": 56,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "0": {
      "id": 0,
      "crate_id": 0,
      "name": "configure",
      "visibility": "default",
      "docs": "Configure the implementing type with runtime settings",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": null
          }
        }
      }
    },
    "348": {
      "id": 348,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            346,
            347
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 311,
            "name": "Add"
          }
        }
      }
    },
    "218": {
      "id": 218,
      "crate_id": 0,
      "name": "Container",
      "visibility": "default",
      "docs": "The type used to store the items",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": null
        }
      }
    },
    "319": {
      "id": 319,
      "crate_id": 0,
      "name": "from_int",
      "visibility": "public",
      "docs": "Creates a new `IntOrFloat` from an integer value",
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "value",
                {
                  "primitive": "i32"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "Self"
            }
          }
        }
      }
    },
    "367": {
      "id": 367,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 206,
          "is_glob": false,
          "name": "process_template",
          "source": "module_example::process_template"
        }
      }
    },
    "214": {
      "id": 214,
      "crate_id": 0,
      "name": "PRECISION",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "u8"
          },
          "value": "T::PRECISION"
        }
      }
    },
    "156": {
      "id": 156,
      "crate_id": 0,
      "name": "data",
      "visibility": "public",
      "docs": "Data processing and status tracking utilities\nData processing and status tracking module\n\nThis module provides types and traits for handling data processing operations\nand tracking their status. It demonstrates proper patterns for processing data\nand state management.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            69,
            95,
            136,
            155
          ]
        }
      }
    },
    "125": {
      "id": 125,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 95,
              "name": "StatusVariant"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 90,
            "name": "StructuralPartialEq"
          }
        }
      }
    },
    "176": {
      "id": 176,
      "crate_id": 0,
      "name": "sample_module2",
      "visibility": "public",
      "docs": "This is a sample module",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            159,
            162
          ]
        }
      }
    },
    "375": {
      "id": 375,
      "crate_id": 0,
      "name": "add",
      "visibility": "public",
      "docs": "Utility function for basic integer addition\n\n# Examples\n```\nuse azure_template::add;\nassert_eq!(add(2, 2), 4);\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "left",
                {
                  "primitive": "u64"
                }
              ],
              [
                "right",
                {
                  "primitive": "u64"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "primitive": "u64"
            }
          }
        }
      }
    },
    "297": {
      "id": 297,
      "crate_id": 0,
      "name": "to_bytes",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": false,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "primitive": "u8"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 298,
                "name": "Vec"
              }
            }
          }
        }
      }
    },
    "122": {
      "id": 122,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[automatically_derived]"
      ],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 95,
              "name": "StatusVariant"
            }
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            121
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 60,
            "name": "Debug"
          }
        }
      }
    },
    "300": {
      "id": 300,
      "crate_id": 0,
      "name": "to_bytes",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [
                      {
                        "type": {
                          "primitive": "u8"
                        }
                      }
                    ],
                    "constraints": []
                  }
                },
                "id": 298,
                "name": "Vec"
              }
            }
          }
        }
      }
    },
    "221": {
      "id": 221,
      "crate_id": 0,
      "name": "NumericContainer",
      "visibility": "public",
      "docs": "Example trait demonstrating associated types\n\nShows how to define type associations that implementors must specify.\n\n# Examples\n```\nuse azure_template::numeric::NumericContainer;\n\nstruct FloatContainer {\n    data: Vec<f64>\n}\n\nimpl NumericContainer for FloatContainer {\n    type Item = f64;\n    type Container = Vec<f64>;\n\n    fn new() -> Self {\n        FloatContainer { data: Vec::new() }\n    }\n\n    fn add(&mut self, item: Self::Item) {\n        self.data.push(item);\n    }\n}\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": false,
          "is_unsafe": false,
          "items": [
            217,
            218,
            219,
            220
          ]
        }
      }
    },
    "318": {
      "id": 318,
      "crate_id": 0,
      "name": "float",
      "visibility": "public",
      "docs": "Floating-point representation of the value",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "primitive": "f32"
        }
      }
    },
    "361": {
      "id": 361,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 3,
          "is_glob": false,
          "name": "Configuration",
          "source": "configuration::Configuration"
        }
      }
    },
    "47": {
      "id": 47,
      "crate_id": 2,
      "name": "type_id",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 48,
                "name": "TypeId"
              }
            }
          }
        }
      }
    },
    "32": {
      "id": 32,
      "crate_id": 2,
      "name": "into",
      "visibility": "default",
      "docs": "Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.",
      "links": {
        "From": 31
      },
      "attrs": [
        "#[track_caller]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "generic": "Self"
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "generic": "U"
            }
          }
        }
      }
    },
    "309": {
      "id": 309,
      "crate_id": 0,
      "name": "Size",
      "visibility": "public",
      "docs": "Type alias for representing sizes in the SDK\n\nUses an unsigned 64-bit integer to ensure sufficient capacity for large sizes.\nThis type is commonly used for buffer sizes, lengths, and capacity values.",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "type_alias": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "primitive": "u64"
          }
        }
      }
    },
    "364": {
      "id": 364,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 155,
          "is_glob": false,
          "name": "DataProcessor",
          "source": "data::DataProcessor"
        }
      }
    },
    "366": {
      "id": 366,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 157,
          "is_glob": false,
          "name": "abs",
          "source": "ffi::abs"
        }
      }
    },
    "209": {
      "id": 209,
      "crate_id": 0,
      "name": "MIN_VALUE",
      "visibility": "default",
      "docs": "Minimum allowed value",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_const": {
          "type": {
            "primitive": "f64"
          },
          "value": null
        }
      }
    },
    "301": {
      "id": 301,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "primitive": "f32"
          },
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            300
          ],
          "provided_trait_methods": [],
          "trait": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 299,
            "name": "ToBytes"
          }
        }
      }
    },
    "178": {
      "id": 178,
      "crate_id": 0,
      "name": "lease",
      "visibility": "public",
      "docs": "Module containing lease-related functionality",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "module": {
          "is_crate": false,
          "is_stripped": false,
          "items": [
            176,
            177
          ]
        }
      }
    },
    "155": {
      "id": 155,
      "crate_id": 0,
      "name": "DataProcessor",
      "visibility": "public",
      "docs": "Trait for types that can process data\n\nImplement this trait for types that transform input data into\nsome output type. The trait provides a standard interface for\ndata processing operations.\n\n# Examples\n```\n# use azure_template::data::DataProcessor;\nstruct StringProcessor;\n\nimpl DataProcessor for StringProcessor {\n    type Output = String;\n\n    fn process(&self) -> Self::Output {\n        \"processed\".to_string()\n    }\n}\n```",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "trait": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "implementations": [],
          "is_auto": false,
          "is_dyn_compatible": false,
          "is_unsafe": false,
          "items": [
            152,
            153,
            154
          ]
        }
      }
    },
    "228": {
      "id": 228,
      "crate_id": 0,
      "name": null,
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "impl": {
          "blanket_impl": null,
          "for": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "generic": "T"
                      }
                    }
                  ],
                  "constraints": []
                }
              },
              "id": 224,
              "name": "NumericWrapper"
            }
          },
          "generics": {
            "params": [
              {
                "kind": {
                  "type": {
                    "bounds": [
                      {
                        "trait_bound": {
                          "generic_params": [],
                          "modifier": "none",
                          "trait": {
                            "args": {
                              "angle_bracketed": {
                                "args": [],
                                "constraints": []
                              }
                            },
                            "id": 229,
                            "name": "NumericCore"
                          }
                        }
                      }
                    ],
                    "default": null,
                    "is_synthetic": false
                  }
                },
                "name": "T"
              }
            ],
            "where_predicates": []
          },
          "is_negative": false,
          "is_synthetic": false,
          "is_unsafe": false,
          "items": [
            225,
            226,
            227
          ],
          "provided_trait_methods": [],
          "trait": null
        }
      }
    },
    "290": {
      "id": 290,
      "crate_id": 0,
      "name": "fmt",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [
        "#[inline]"
      ],
      "deprecation": null,
      "inner": {
        "function": {
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "has_body": true,
          "header": {
            "abi": "Rust",
            "is_async": false,
            "is_const": false,
            "is_unsafe": false
          },
          "sig": {
            "inputs": [
              [
                "self",
                {
                  "borrowed_ref": {
                    "is_mutable": false,
                    "lifetime": null,
                    "type": {
                      "generic": "Self"
                    }
                  }
                }
              ],
              [
                "f",
                {
                  "borrowed_ref": {
                    "is_mutable": true,
                    "lifetime": null,
                    "type": {
                      "resolved_path": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'_"
                              }
                            ],
                            "constraints": []
                          }
                        },
                        "id": 57,
                        "name": "$crate::fmt::Formatter"
                      }
                    }
                  }
                }
              ]
            ],
            "is_c_variadic": false,
            "output": {
              "resolved_path": {
                "args": {
                  "angle_bracketed": {
                    "args": [],
                    "constraints": []
                  }
                },
                "id": 58,
                "name": "$crate::fmt::Result"
              }
            }
          }
        }
      }
    },
    "362": {
      "id": 362,
      "crate_id": 0,
      "name": null,
      "visibility": "public",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "use": {
          "id": 63,
          "is_glob": false,
          "name": "DEFAULT_TIMEOUT",
          "source": "configuration::DEFAULT_TIMEOUT"
        }
      }
    },
    "349": {
      "id": 349,
      "crate_id": 0,
      "name": "Output",
      "visibility": "default",
      "docs": null,
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "assoc_type": {
          "bounds": [],
          "generics": {
            "params": [],
            "where_predicates": []
          },
          "type": {
            "resolved_path": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "constraints": []
                }
              },
              "id": 316,
              "name": "IntOrFloat"
            }
          }
        }
      }
    },
    "185": {
      "id": 185,
      "crate_id": 0,
      "name": "name",
      "visibility": "public",
      "docs": "Name of the template",
      "links": {},
      "attrs": [],
      "deprecation": null,
      "inner": {
        "struct_field": {
          "resolved_path": {
            "args": {
              "angle_bracketed": {
                "args": [],
                "constraints": []
              }
            },
            "id": 104,
            "name": "String"
          }
        }
      }
    }
  },
  "format_version": 37
}