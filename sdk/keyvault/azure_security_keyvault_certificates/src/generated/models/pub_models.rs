// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    models_serde, CertificatePolicyAction, CurveName, DeletionRecoveryLevel, KeyType, KeyUsageType,
};
use azure_core::{
    base64::{deserialize, deserialize_url_safe, serialize, serialize_url_safe},
    fmt::SafeDebug,
    time::OffsetDateTime,
};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Details of the organization administrator of the certificate issuer.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct AdministratorContact {
    /// Email address.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,

    /// First name.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,

    /// Last name.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,

    /// Phone number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
}

/// The backup certificate result, containing the backup blob.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct BackupCertificateResult {
    /// The backup blob containing the backed up certificate.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub value: Option<Vec<u8>>,
}

/// A certificate bundle consists of a certificate (X509) plus its attributes.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct Certificate {
    /// The certificate attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<CertificateAttributes>,

    /// CER contents of x509 certificate.
    #[serde(
        default,
        deserialize_with = "deserialize",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub cer: Option<Vec<u8>>,

    /// The content type of the secret. eg. 'application/x-pem-file' or 'application/x-pkcs12',
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The certificate id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The key id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kid: Option<String>,

    /// The management policy.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<CertificatePolicy>,

    /// Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf
    /// certificate at index 0.
    #[serde(rename = "preserveCertOrder", skip_serializing_if = "Option::is_none")]
    pub preserve_cert_order: Option<bool>,

    /// The secret id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,

    /// Application specific metadata in the form of key-value pairs
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// Thumbprint of the certificate.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        rename = "x5t",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub x509_thumbprint: Option<Vec<u8>>,
}

/// The certificate management attributes.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct CertificateAttributes {
    /// Creation time in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub created: Option<OffsetDateTime>,

    /// Determines whether the object is enabled.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// Expiry date in UTC.
    #[serde(
        default,
        rename = "exp",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub expires: Option<OffsetDateTime>,

    /// Not before date in UTC.
    #[serde(
        default,
        rename = "nbf",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub not_before: Option<OffsetDateTime>,

    /// softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
    #[serde(rename = "recoverableDays", skip_serializing_if = "Option::is_none")]
    pub recoverable_days: Option<i32>,

    /// Reflects the deletion recovery level currently in effect for certificates in the current vault. If it contains 'Purgeable',
    /// the certificate can be permanently deleted by a privileged user; otherwise, only the system can purge the certificate,
    /// at the end of the retention interval.
    #[serde(rename = "recoveryLevel", skip_serializing_if = "Option::is_none")]
    pub recovery_level: Option<DeletionRecoveryLevel>,

    /// Last updated time in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub updated: Option<OffsetDateTime>,
}

/// A certificate operation is returned in case of asynchronous requests.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct CertificateOperation {
    /// Indicates if cancellation was requested on the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cancellation_requested: Option<bool>,

    /// The certificate signing request (CSR) that is being used in the certificate operation.
    #[serde(
        default,
        deserialize_with = "deserialize",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub csr: Option<Vec<u8>>,

    /// Error encountered, if any, during the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<KeyVaultErrorError>,

    /// The certificate id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Parameters for the issuer of the X509 component of a certificate.
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer_parameters: Option<IssuerParameters>,

    /// Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf
    /// certificate at index 0.
    #[serde(rename = "preserveCertOrder", skip_serializing_if = "Option::is_none")]
    pub preserve_cert_order: Option<bool>,

    /// Identifier for the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,

    /// Status of the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,

    /// The status details of the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status_details: Option<String>,

    /// Location which contains the result of the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

/// Management policy for a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct CertificatePolicy {
    /// The certificate attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<CertificateAttributes>,

    /// The certificate id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Parameters for the issuer of the X509 component of a certificate.
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer_parameters: Option<IssuerParameters>,

    /// Properties of the key backing a certificate.
    #[serde(rename = "key_props", skip_serializing_if = "Option::is_none")]
    pub key_properties: Option<KeyProperties>,

    /// Actions that will be performed by Key Vault over the lifetime of a certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lifetime_actions: Option<Vec<LifetimeAction>>,

    /// Properties of the secret backing a certificate.
    #[serde(rename = "secret_props", skip_serializing_if = "Option::is_none")]
    pub secret_properties: Option<SecretProperties>,

    /// Properties of the X509 component of a certificate.
    #[serde(rename = "x509_props", skip_serializing_if = "Option::is_none")]
    pub x509_certificate_properties: Option<X509CertificateProperties>,
}

/// The certificate item containing certificate metadata.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct CertificateProperties {
    /// The certificate management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<CertificateAttributes>,

    /// Certificate identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// Thumbprint of the certificate.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        rename = "x5t",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub x509_thumbprint: Option<Vec<u8>>,
}

/// The contact information for the vault certificates.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct Contact {
    /// Email address.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,

    /// Name.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// Phone number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
}

/// The contacts for the vault certificates.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct Contacts {
    /// The contact list for the vault certificates.
    #[serde(rename = "contacts", skip_serializing_if = "Option::is_none")]
    pub contact_list: Option<Vec<Contact>>,

    /// Identifier for the contacts collection.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// The certificate create parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct CreateCertificateParameters {
    /// The attributes of the certificate (optional).
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub certificate_attributes: Option<CertificateAttributes>,

    /// The management policy for the certificate.
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub certificate_policy: Option<CertificatePolicy>,

    /// Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf
    /// certificate at index 0.
    #[serde(rename = "preserveCertOrder", skip_serializing_if = "Option::is_none")]
    pub preserve_cert_order: Option<bool>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will be
/// purged.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct DeletedCertificate {
    /// The certificate attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<CertificateAttributes>,

    /// CER contents of x509 certificate.
    #[serde(
        default,
        deserialize_with = "deserialize",
        serialize_with = "serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub cer: Option<Vec<u8>>,

    /// The content type of the secret. eg. 'application/x-pem-file' or 'application/x-pkcs12',
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The time when the certificate was deleted, in UTC
    #[serde(
        default,
        rename = "deletedDate",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub deleted_date: Option<OffsetDateTime>,

    /// The certificate id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The key id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kid: Option<String>,

    /// The management policy.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<CertificatePolicy>,

    /// Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf
    /// certificate at index 0.
    #[serde(rename = "preserveCertOrder", skip_serializing_if = "Option::is_none")]
    pub preserve_cert_order: Option<bool>,

    /// The url of the recovery object, used to identify and recover the deleted certificate.
    #[serde(rename = "recoveryId", skip_serializing_if = "Option::is_none")]
    pub recovery_id: Option<String>,

    /// The time when the certificate is scheduled to be purged, in UTC
    #[serde(
        default,
        rename = "scheduledPurgeDate",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub scheduled_purge_date: Option<OffsetDateTime>,

    /// The secret id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,

    /// Application specific metadata in the form of key-value pairs
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// Thumbprint of the certificate.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        rename = "x5t",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub x509_thumbprint: Option<Vec<u8>>,
}

/// The deleted certificate item containing metadata about the deleted certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct DeletedCertificateProperties {
    /// The certificate management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<CertificateAttributes>,

    /// The time when the certificate was deleted, in UTC
    #[serde(
        default,
        rename = "deletedDate",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub deleted_date: Option<OffsetDateTime>,

    /// Certificate identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The url of the recovery object, used to identify and recover the deleted certificate.
    #[serde(rename = "recoveryId", skip_serializing_if = "Option::is_none")]
    pub recovery_id: Option<String>,

    /// The time when the certificate is scheduled to be purged, in UTC
    #[serde(
        default,
        rename = "scheduledPurgeDate",
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub scheduled_purge_date: Option<OffsetDateTime>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// Thumbprint of the certificate.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        rename = "x5t",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub x509_thumbprint: Option<Vec<u8>>,
}

/// The certificate import parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct ImportCertificateParameters {
    /// Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub base64_encoded_certificate: Option<String>,

    /// The attributes of the certificate (optional).
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub certificate_attributes: Option<CertificateAttributes>,

    /// The management policy for the certificate.
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub certificate_policy: Option<CertificatePolicy>,

    /// If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
    #[serde(rename = "pwd", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,

    /// Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf
    /// certificate at index 0.
    #[serde(rename = "preserveCertOrder", skip_serializing_if = "Option::is_none")]
    pub preserve_cert_order: Option<bool>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The issuer for Key Vault certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct Issuer {
    /// Attributes of the issuer object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<IssuerAttributes>,

    /// The credentials to be used for the issuer.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub credentials: Option<IssuerCredentials>,

    /// Identifier for the issuer object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Details of the organization as provided to the issuer.
    #[serde(rename = "org_details", skip_serializing_if = "Option::is_none")]
    pub organization_details: Option<OrganizationDetails>,

    /// The issuer provider.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// The attributes of an issuer managed by the Key Vault service.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct IssuerAttributes {
    /// Creation time in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub created: Option<OffsetDateTime>,

    /// Determines whether the issuer is enabled.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// Last updated time in UTC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        with = "azure_core::time::unix_time::option"
    )]
    pub updated: Option<OffsetDateTime>,
}

/// The credentials to be used for the certificate issuer.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct IssuerCredentials {
    /// The user name/account name/account id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,

    /// The password/secret/account key.
    #[serde(rename = "pwd", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

/// Parameters for the issuer of the X509 component of a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct IssuerParameters {
    /// Indicates if the certificates generated under this policy should be published to certificate transparency logs.
    #[serde(rename = "cert_transparency", skip_serializing_if = "Option::is_none")]
    pub certificate_transparency: Option<bool>,

    /// Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL'
    #[serde(rename = "cty", skip_serializing_if = "Option::is_none")]
    pub certificate_type: Option<String>,

    /// Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The certificate issuer item containing certificate issuer metadata.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct IssuerProperties {
    /// Certificate Identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The issuer provider.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// Properties of the key pair backing a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct KeyProperties {
    /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
    #[serde(rename = "crv", skip_serializing_if = "Option::is_none")]
    pub curve: Option<CurveName>,

    /// Indicates if the private key can be exported. Release policy must be provided when creating the first version of an exportable
    /// key.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exportable: Option<bool>,

    /// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key_size: Option<i32>,

    /// The type of key pair to be used for the certificate.
    #[serde(rename = "kty", skip_serializing_if = "Option::is_none")]
    pub key_type: Option<KeyType>,

    /// Indicates if the same key pair will be used on certificate renewal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reuse_key: Option<bool>,
}

#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct KeyVaultErrorError {
    /// The error code.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,

    /// The key vault server error.
    #[serde(rename = "innererror", skip_serializing_if = "Option::is_none")]
    pub inner_error: Option<Box<KeyVaultErrorError>>,

    /// The error message.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct LifetimeAction {
    /// The action that will be executed.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<LifetimeActionType>,

    /// The condition that will execute the action.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub trigger: Option<LifetimeActionTrigger>,
}

/// A condition to be satisfied for an action to be executed.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct LifetimeActionTrigger {
    /// Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months
    /// is 36, then value should be between 1 and 972 (36 * 27).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub days_before_expiry: Option<i32>,

    /// Percentage of lifetime at which to trigger. Value should be between 1 and 99.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lifetime_percentage: Option<i32>,
}

/// The action that will be executed.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct LifetimeActionType {
    /// The type of the action.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action_type: Option<CertificatePolicyAction>,
}

/// The certificate list result.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct ListCertificatePropertiesResult {
    /// The URL to get the next set of certificates.
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// A response message containing a list of certificates in the key vault along with a link to the next page of certificates.
    #[serde(default)]
    pub value: Vec<CertificateProperties>,
}

/// A list of certificates that have been deleted in this vault.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct ListDeletedCertificatePropertiesResult {
    /// The URL to get the next set of deleted certificates.
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted
    /// certificates.
    #[serde(default)]
    pub value: Vec<DeletedCertificateProperties>,
}

/// The certificate issuer list result.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
#[non_exhaustive]
pub struct ListIssuerPropertiesResult {
    /// The URL to get the next set of certificate issuers.
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate
    /// issuers.
    #[serde(default)]
    pub value: Vec<IssuerProperties>,
}

/// The certificate merge parameters
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct MergeCertificateParameters {
    /// The attributes of the certificate (optional).
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub certificate_attributes: Option<CertificateAttributes>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// The certificate or the certificate chain to merge.
    #[serde(
        default,
        rename = "x5c",
        skip_serializing_if = "Option::is_none",
        with = "models_serde::option_vec_encoded_bytes_std"
    )]
    pub x509_certificates: Option<Vec<Vec<u8>>>,
}

/// Details of the organization of the certificate issuer.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct OrganizationDetails {
    /// Details of the organization administrator.
    #[serde(rename = "admin_details", skip_serializing_if = "Option::is_none")]
    pub admin_contacts: Option<Vec<AdministratorContact>>,

    /// Id of the organization.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// The certificate restore parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct RestoreCertificateParameters {
    /// The backup blob associated with a certificate bundle.
    #[serde(
        default,
        deserialize_with = "deserialize_url_safe",
        rename = "value",
        serialize_with = "serialize_url_safe",
        skip_serializing_if = "Option::is_none"
    )]
    pub certificate_backup: Option<Vec<u8>>,
}

/// Properties of the key backing a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct SecretProperties {
    /// The media type (MIME type).
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
}

/// The certificate issuer set parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct SetIssuerParameters {
    /// Attributes of the issuer object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<IssuerAttributes>,

    /// The credentials to be used for the issuer.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub credentials: Option<IssuerCredentials>,

    /// Details of the organization as provided to the issuer.
    #[serde(rename = "org_details", skip_serializing_if = "Option::is_none")]
    pub organization_details: Option<OrganizationDetails>,

    /// The issuer provider.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// The subject alternate names of a X509 object.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct SubjectAlternativeNames {
    /// Domain names.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dns_names: Option<Vec<String>>,

    /// Email addresses.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub emails: Option<Vec<String>>,

    /// User principal names.
    #[serde(rename = "upns", skip_serializing_if = "Option::is_none")]
    pub user_principal_names: Option<Vec<String>>,
}

/// The certificate operation update parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct UpdateCertificateOperationParameter {
    /// Indicates if cancellation was requested on the certificate operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cancellation_requested: Option<bool>,
}

/// The certificate update parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct UpdateCertificatePropertiesParameters {
    /// The attributes of the certificate (optional).
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub certificate_attributes: Option<CertificateAttributes>,

    /// The management policy for the certificate.
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub certificate_policy: Option<CertificatePolicy>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The certificate issuer update parameters.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct UpdateIssuerParameters {
    /// Attributes of the issuer object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<IssuerAttributes>,

    /// The credentials to be used for the issuer.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub credentials: Option<IssuerCredentials>,

    /// Details of the organization as provided to the issuer.
    #[serde(rename = "org_details", skip_serializing_if = "Option::is_none")]
    pub organization_details: Option<OrganizationDetails>,

    /// The issuer provider.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

/// Properties of the X509 component of a certificate.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize)]
pub struct X509CertificateProperties {
    /// The enhanced key usage.
    #[serde(rename = "ekus", skip_serializing_if = "Option::is_none")]
    pub enhanced_key_usage: Option<Vec<String>>,

    /// Defines how the certificate's key may be used.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key_usage: Option<Vec<KeyUsageType>>,

    /// The subject name. Should be a valid X509 distinguished Name.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,

    /// The subject alternative names.
    #[serde(rename = "sans", skip_serializing_if = "Option::is_none")]
    pub subject_alternative_names: Option<SubjectAlternativeNames>,

    /// The duration that the certificate is valid in months.
    #[serde(rename = "validity_months", skip_serializing_if = "Option::is_none")]
    pub validity_in_months: Option<i32>,
}
