// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

/// The type of the action.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[non_exhaustive]
pub enum CertificatePolicyAction {
    /// A certificate policy that will auto-renew a certificate.
    AutoRenew,

    /// A certificate policy that will email certificate contacts.
    EmailContacts,
}

/// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum CurveName {
    /// The NIST P-256 elliptic curve, AKA SECG curve SECP256R1.
    P256,

    /// The SECG SECP256K1 elliptic curve.
    P256K,

    /// The NIST P-384 elliptic curve, AKA SECG curve SECP384R1.
    P384,

    /// The NIST P-521 elliptic curve, AKA SECG curve SECP521R1.
    P521,

    /// Any other value not defined in `CurveName`.
    UnknownValue(String),
}

/// Reflects the deletion recovery level currently in effect for secrets in the current vault. If it contains 'Purgeable',
/// the secret can be permanently deleted by a privileged user; otherwise, only the system can purge the secret, at the end
/// of the retention interval.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum DeletionRecoveryLevel {
    /// Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e.
    /// purge when 7 <= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during
    /// the retention interval and while the subscription is still available.
    CustomizedRecoverable,

    /// Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge)
    /// is not permitted, and in which the subscription itself cannot be permanently canceled when 7 <= SoftDeleteRetentionInDays
    /// < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects
    /// the fact that the subscription itself cannot be cancelled.
    CustomizedRecoverableProtectedSubscription,

    /// Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e.
    /// purge when 7 <= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during
    /// the retention interval, unless a Purge operation is requested, or the subscription is cancelled.
    CustomizedRecoverablePurgeable,

    /// Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level
    /// corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting
    /// a Delete operation at the entity level or higher (vault, resource group, subscription etc.)
    Purgeable,

    /// Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e.
    /// purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days) and while
    /// the subscription is still available. System wil permanently delete it after 90 days, if not recovered
    Recoverable,

    /// Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate
    /// and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled.
    /// System wil permanently delete it after 90 days, if not recovered
    RecoverableProtectedSubscription,

    /// Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e.
    /// purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless
    /// a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not
    /// recovered
    RecoverablePurgeable,

    /// Any other value not defined in `DeletionRecoveryLevel`.
    UnknownValue(String),
}

/// The type of key pair to be used for the certificate.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum KeyType {
    /// Elliptic Curve.
    Ec,

    /// Elliptic Curve with a private key which is not exportable from the HSM.
    EcHsm,

    /// Octet sequence (used to represent symmetric keys).
    Oct,

    /// Octet sequence with a private key which is not exportable from the HSM.
    OctHsm,

    /// RSA (<https://tools.ietf.org/html/rfc3447>).
    Rsa,

    /// RSA with a private key which is not exportable from the HSM.
    RsaHsm,

    /// Any other value not defined in `KeyType`.
    UnknownValue(String),
}

/// Supported usages of a certificate key.
#[derive(Debug, PartialEq, Eq, Clone)]
#[non_exhaustive]
pub enum KeyUsageType {
    /// Indicates that the certificate key can be used to sign a certificate revocation list.
    CRlSign,

    /// Indicates that the certificate key can be used for data encryption.
    DataEncipherment,

    /// Indicates that the certificate key can be used for decryption only.
    DecipherOnly,

    /// Indicates that the certificate key can be used as a digital signature.
    DigitalSignature,

    /// Indicates that the certificate key can be used for encryption only.
    EncipherOnly,

    /// Indicates that the certificate key can be used to determine key agreement, such as a key created using the Diffie-Hellman
    /// key agreement algorithm.
    KeyAgreement,

    /// Indicates that the certificate key can be used to sign certificates.
    KeyCertSign,

    /// Indicates that the certificate key can be used for key encryption.
    KeyEncipherment,

    /// Indicates that the certificate key can be used for authentication.
    NonRepudiation,

    /// Any other value not defined in `KeyUsageType`.
    UnknownValue(String),
}
