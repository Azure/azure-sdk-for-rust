// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    CertificatePolicy, CertificateProperties, Contacts, DeletedCertificateProperties,
    ImportCertificateParameters, IssuerProperties, ListCertificatePropertiesResult,
    ListDeletedCertificatePropertiesResult, ListIssuerPropertiesResult, MergeCertificateParameters,
    RestoreCertificateParameters, SetIssuerParameters, UpdateCertificateOperationParameter,
    UpdateCertificatePropertiesParameters, UpdateIssuerParameters,
};
use async_trait::async_trait;
use azure_core::{
    http::{pager::Page, RequestContent},
    json::to_json,
    Result,
};

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListCertificatePropertiesResult {
    type Item = CertificateProperties;
    type IntoIter = <Vec<CertificateProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListDeletedCertificatePropertiesResult {
    type Item = DeletedCertificateProperties;
    type IntoIter = <Vec<DeletedCertificateProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListIssuerPropertiesResult {
    type Item = IssuerProperties;
    type IntoIter = <Vec<IssuerProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

impl TryFrom<CertificatePolicy> for RequestContent<CertificatePolicy> {
    type Error = azure_core::Error;
    fn try_from(value: CertificatePolicy) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<Contacts> for RequestContent<Contacts> {
    type Error = azure_core::Error;
    fn try_from(value: Contacts) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<ImportCertificateParameters> for RequestContent<ImportCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: ImportCertificateParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<MergeCertificateParameters> for RequestContent<MergeCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: MergeCertificateParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<RestoreCertificateParameters> for RequestContent<RestoreCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: RestoreCertificateParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<SetIssuerParameters> for RequestContent<SetIssuerParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SetIssuerParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<UpdateCertificateOperationParameter>
    for RequestContent<UpdateCertificateOperationParameter>
{
    type Error = azure_core::Error;
    fn try_from(value: UpdateCertificateOperationParameter) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<UpdateCertificatePropertiesParameters>
    for RequestContent<UpdateCertificatePropertiesParameters>
{
    type Error = azure_core::Error;
    fn try_from(value: UpdateCertificatePropertiesParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}

impl TryFrom<UpdateIssuerParameters> for RequestContent<UpdateIssuerParameters> {
    type Error = azure_core::Error;
    fn try_from(value: UpdateIssuerParameters) -> Result<Self> {
        Ok(to_json(&value)?.into())
    }
}
