// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    Certificate, CertificateOperation, CertificatePolicy, CertificateProperties, Contacts,
    CreateCertificateParameters, DeletedCertificateProperties, ImportCertificateParameters,
    IssuerProperties, ListCertificatePropertiesResult, ListDeletedCertificatePropertiesResult,
    ListIssuerPropertiesResult, MergeCertificateParameters, RestoreCertificateParameters,
    SetIssuerParameters, UpdateCertificateOperationParameter,
    UpdateCertificatePropertiesParameters, UpdateIssuerParameters,
};
use async_trait::async_trait;
use azure_core::{
    http::{
        poller::{PollerStatus, StatusMonitor},
        Page, RequestContent,
    },
    json::to_json,
    Result,
};

impl StatusMonitor for CertificateOperation {
    type Output = Certificate;
    fn status(&self) -> PollerStatus {
        self.status
            .as_deref()
            .map(Into::into)
            .unwrap_or(PollerStatus::InProgress)
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListCertificatePropertiesResult {
    type Item = CertificateProperties;
    type IntoIter = <Vec<CertificateProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListDeletedCertificatePropertiesResult {
    type Item = DeletedCertificateProperties;
    type IntoIter = <Vec<DeletedCertificateProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListIssuerPropertiesResult {
    type Item = IssuerProperties;
    type IntoIter = <Vec<IssuerProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

impl TryFrom<CertificatePolicy> for RequestContent<CertificatePolicy> {
    type Error = azure_core::Error;
    fn try_from(value: CertificatePolicy) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<Contacts> for RequestContent<Contacts> {
    type Error = azure_core::Error;
    fn try_from(value: Contacts) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<CreateCertificateParameters> for RequestContent<CreateCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: CreateCertificateParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<ImportCertificateParameters> for RequestContent<ImportCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: ImportCertificateParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<MergeCertificateParameters> for RequestContent<MergeCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: MergeCertificateParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<RestoreCertificateParameters> for RequestContent<RestoreCertificateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: RestoreCertificateParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<SetIssuerParameters> for RequestContent<SetIssuerParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SetIssuerParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<UpdateCertificateOperationParameter>
    for RequestContent<UpdateCertificateOperationParameter>
{
    type Error = azure_core::Error;
    fn try_from(value: UpdateCertificateOperationParameter) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<UpdateCertificatePropertiesParameters>
    for RequestContent<UpdateCertificatePropertiesParameters>
{
    type Error = azure_core::Error;
    fn try_from(value: UpdateCertificatePropertiesParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<UpdateIssuerParameters> for RequestContent<UpdateIssuerParameters> {
    type Error = azure_core::Error;
    fn try_from(value: UpdateIssuerParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}
