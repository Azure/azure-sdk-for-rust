// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use super::{
    DeletedSecretProperties, ListDeletedSecretPropertiesResult, ListSecretPropertiesResult,
    RestoreSecretParameters, SecretProperties, SetSecretParameters,
    UpdateSecretPropertiesParameters,
};
use async_trait::async_trait;
use azure_core::{
    http::{Page, RequestContent},
    json::to_json,
    Result,
};

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListDeletedSecretPropertiesResult {
    type Item = DeletedSecretProperties;
    type IntoIter = <Vec<DeletedSecretProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
impl Page for ListSecretPropertiesResult {
    type Item = SecretProperties;
    type IntoIter = <Vec<SecretProperties> as IntoIterator>::IntoIter;
    async fn into_items(self) -> Result<Self::IntoIter> {
        Ok(self.value.into_iter())
    }
}

impl TryFrom<RestoreSecretParameters> for RequestContent<RestoreSecretParameters> {
    type Error = azure_core::Error;
    fn try_from(value: RestoreSecretParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<SetSecretParameters> for RequestContent<SetSecretParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SetSecretParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<UpdateSecretPropertiesParameters>
    for RequestContent<UpdateSecretPropertiesParameters>
{
    type Error = azure_core::Error;
    fn try_from(value: UpdateSecretPropertiesParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}
