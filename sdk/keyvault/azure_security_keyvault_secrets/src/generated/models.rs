// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::DeletionRecoveryLevel;
use async_std::task::block_on;
use azure_core::{RequestContent, Response, Url};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use time::OffsetDateTime;

/// The backup secret result, containing the backup blob.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct BackupSecretResult {
    /// The backup blob containing the backed up secret.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<u8>>,
}

/// A Deleted Secret consisting of its previous id, attributes and its tags, as
/// well as information on when it will be purged.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct DeletedSecretBundle {
    /// The secret management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<SecretAttributes>,

    /// The content type of the secret.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The time when the secret was deleted, in UTC
    #[serde(rename = "deletedDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted_date: Option<OffsetDateTime>,

    /// The secret id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// If this is a secret backing a KV certificate, then this field specifies the
    /// corresponding key backing the KV certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kid: Option<String>,

    /// True if the secret's lifetime is managed by key vault. If this is a secret
    /// backing a certificate, then managed will be true.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,

    /// The url of the recovery object, used to identify and recover the deleted secret.
    #[serde(rename = "recoveryId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recovery_id: Option<String>,

    /// The time when the secret is scheduled to be purged, in UTC
    #[serde(rename = "scheduledPurgeDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_purge_date: Option<OffsetDateTime>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// The secret value.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The deleted secret item containing metadata about the deleted secret.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct DeletedSecretItem {
    /// The secret management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<SecretAttributes>,

    /// Type of the secret value such as a password.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The time when the secret was deleted, in UTC
    #[serde(rename = "deletedDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted_date: Option<OffsetDateTime>,

    /// Secret identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// True if the secret's lifetime is managed by key vault. If this is a key backing
    /// a certificate, then managed will be true.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,

    /// The url of the recovery object, used to identify and recover the deleted secret.
    #[serde(rename = "recoveryId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recovery_id: Option<String>,

    /// The time when the secret is scheduled to be purged, in UTC
    #[serde(rename = "scheduledPurgeDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_purge_date: Option<OffsetDateTime>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The secret management attributes.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretAttributes {
    /// Creation time in UTC.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<OffsetDateTime>,

    /// Determines whether the object is enabled.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,

    /// Expiry date in UTC.
    #[serde(rename = "exp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expires: Option<OffsetDateTime>,

    /// Not before date in UTC.
    #[serde(rename = "nbf")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub not_before: Option<OffsetDateTime>,

    /// softDelete data retention days. Value should be >=7 and <=90 when softDelete
    /// enabled, otherwise 0.
    #[serde(rename = "recoverableDays")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recoverable_days: Option<i32>,

    /// Reflects the deletion recovery level currently in effect for secrets in the
    /// current vault. If it contains 'Purgeable', the secret can be permanently
    /// deleted by a privileged user; otherwise, only the system can purge the secret,
    /// at the end of the retention interval.
    #[serde(rename = "recoveryLevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recovery_level: Option<DeletionRecoveryLevel>,

    /// Last updated time in UTC.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub updated: Option<OffsetDateTime>,
}

/// A secret consisting of a value, id and its attributes.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretBundle {
    /// The secret management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<SecretAttributes>,

    /// The content type of the secret.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The secret id.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// If this is a secret backing a KV certificate, then this field specifies the
    /// corresponding key backing the KV certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kid: Option<String>,

    /// True if the secret's lifetime is managed by key vault. If this is a secret
    /// backing a certificate, then managed will be true.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// The secret value.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The secret item containing secret metadata.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretItem {
    /// The secret management attributes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<SecretAttributes>,

    /// Type of the secret value such as a password.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// Secret identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// True if the secret's lifetime is managed by key vault. If this is a key backing
    /// a certificate, then managed will be true.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The secret list result.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretListResult {
    /// The link to the next page of items
    #[serde(rename = "nextLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_link: Option<Url>,

    /// The SecretItem items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<SecretItem>>,
}

/// The secret restore parameters.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretRestoreParameters {
    /// The backup blob associated with a secret bundle.
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub secret_bundle_backup: Option<Vec<u8>>,
}

/// The secret set parameters.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretSetParameters {
    /// Type of the secret value such as a password.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The secret management attributes.
    #[serde(rename = "attributes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub secret_attributes: Option<SecretAttributes>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// The value of the secret.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The secret update parameters.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct SecretUpdateParameters {
    /// Type of the secret value such as a password.
    #[serde(rename = "contentType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,

    /// The secret management attributes.
    #[serde(rename = "attributes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub secret_attributes: Option<SecretAttributes>,

    /// Application specific metadata in the form of key-value pairs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

impl TryFrom<Response<BackupSecretResult>> for BackupSecretResult {
    type Error = azure_core::Error;
    fn try_from(value: Response<BackupSecretResult>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<BackupSecretResult>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<DeletedSecretBundle>> for DeletedSecretBundle {
    type Error = azure_core::Error;
    fn try_from(value: Response<DeletedSecretBundle>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<DeletedSecretBundle>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<SecretBundle>> for SecretBundle {
    type Error = azure_core::Error;
    fn try_from(value: Response<SecretBundle>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<SecretBundle>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<SecretRestoreParameters> for RequestContent<SecretRestoreParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretRestoreParameters) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<SecretSetParameters> for RequestContent<SecretSetParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretSetParameters) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<SecretUpdateParameters> for RequestContent<SecretUpdateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretUpdateParameters) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}
