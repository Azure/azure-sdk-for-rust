// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{
    RequestContent, Response, Result,
};
use crate::models::{
    BackupSecretResult, DeletedSecretBundle, DeletedSecretListResult, SecretBundle, SecretListResult, SecretRestoreParameters, SecretSetParameters, SecretUpdateParameters,
};
use typespec_client_core::json::to_json;

impl TryFrom<Response<BackupSecretResult>> for BackupSecretResult {
    type Error = azure_core::Error;
    fn try_from(value: Response<BackupSecretResult>) -> Result<Self> {
        let f = || value.into_body().json::<BackupSecretResult>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<DeletedSecretBundle>> for DeletedSecretBundle {
    type Error = azure_core::Error;
    fn try_from(value: Response<DeletedSecretBundle>) -> Result<Self> {
        let f = || value.into_body().json::<DeletedSecretBundle>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<DeletedSecretListResult>> for DeletedSecretListResult {
    type Error = azure_core::Error;
    fn try_from(value: Response<DeletedSecretListResult>) -> Result<Self> {
        let f = || value.into_body().json::<DeletedSecretListResult>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<SecretBundle>> for SecretBundle {
    type Error = azure_core::Error;
    fn try_from(value: Response<SecretBundle>) -> Result<Self> {
        let f = || value.into_body().json::<SecretBundle>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<SecretListResult>> for SecretListResult {
    type Error = azure_core::Error;
    fn try_from(value: Response<SecretListResult>) -> Result<Self> {
        let f = || value.into_body().json::<SecretListResult>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<SecretRestoreParameters> for RequestContent<SecretRestoreParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretRestoreParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<SecretSetParameters> for RequestContent<SecretSetParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretSetParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<SecretUpdateParameters> for RequestContent<SecretUpdateParameters> {
    type Error = azure_core::Error;
    fn try_from(value: SecretUpdateParameters) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

