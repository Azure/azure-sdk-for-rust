use serde_json::Value;
use std::fs::{self, File};
use std::io::Write;

fn main() {
    // Read the JSON file generated by rustdoc
    let data = fs::read_to_string("/workspaces/azure-sdk-for-rust/target/doc/azure_core.json").expect("Unable to read file");
    let v: Value = serde_json::from_str(&data).expect("Unable to parse JSON");

    // Extract and transform the data
    let concise_api = extract_concise_api(&v);

    // Write the concise API to a file
    let output_file_path = "/workspaces/azure-sdk-for-rust/target/doc/azure_core_concise.json";
    let mut file = File::create(output_file_path).expect("Unable to create file");
    file.write_all(serde_json::to_string_pretty(&concise_api).expect("Unable to serialize JSON").as_bytes())
        .expect("Unable to write data to file");

    println!("Concise API written to {}", output_file_path);
}

fn extract_concise_api(json: &Value) -> Value {
    let mut concise_api = serde_json::Map::new();

    if let Some(items) = json.get("index").and_then(|index| index.as_object()) {
        println!("Found 'index' with {} items", items.len()); // Debug print
        for (key, item) in items {
            println!("Processing item with key: {}", key); // Debug print
            if let Some(name) = item.get("name").and_then(|name| name.as_str()) {
                println!("Found name: {}", name); // Debug print
                let kind = item.get("kind").and_then(|kind| kind.as_str()).or_else(|| {
                    item.get("inner").and_then(|inner| {
                        if inner.get("function").is_some() {
                            Some("function")
                        } else if inner.get("struct").is_some() {
                            Some("struct")
                        } else if inner.get("module").is_some() {
                            Some("module")
                        } else if inner.get("const").is_some() {
                            Some("const")
                        } else if inner.get("enum").is_some() {
                            Some("enum")
                        } else if inner.get("extern_crate").is_some() {
                            Some("extern_crate")
                        } else if inner.get("foreign_mod").is_some() {
                            Some("foreign_mod")
                        } else if inner.get("impl").is_some() {
                            Some("impl")
                        } else if inner.get("macro").is_some() {
                            Some("macro")
                        } else if inner.get("static").is_some() {
                            Some("static")
                        } else if inner.get("trait").is_some() {
                            Some("trait")
                        } else if inner.get("trait_alias").is_some() {
                            Some("trait_alias")
                        } else if inner.get("type").is_some() {
                            Some("type")
                        } else if inner.get("union").is_some() {
                            Some("union")
                        } else if inner.get("use").is_some() {
                            Some("use")
                        } else if inner.get("verbatim").is_some() {
                            Some("verbatim")
                        } else if inner.get("other").is_some() {
                            Some("other")
                        } else {
                            None
                        }
                    })
                });

                if let Some(kind) = kind {
                    println!("Inferred kind: {}", kind); // Debug print
                    concise_api.insert(name.to_string(), item.clone());
                } else {
                    println!("No 'kind' found or inferred for item with name: {}", name); // Debug print
                }
            } else {
                println!("No 'name' found for item with key: {}", key); // Debug print
            }
        }
    } else {
        println!("No items found in 'index'"); // Debug print
    }

    Value::Object(concise_api)
}
