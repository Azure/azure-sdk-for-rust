use serde_json::Value;
use std::fs::File;
use std::io::{self, Read, Write};

fn main() -> io::Result<()> {
    // Read the JSON file generated by rustdoc
    let mut file = File::open("/workspaces/azure-sdk-for-rust/target/doc/docs.json")?;
    let mut data = String::new();
    file.read_to_string(&mut data)?;

    // Parse the JSON data
    let v: Value = serde_json::from_str(&data).expect("Unable to parse JSON");

    // Extract the exported API surface
    let mut exported_api = serde_json::Map::new();
    exported_api.insert("crate_version".to_string(), v["crate_version"].clone());
    exported_api.insert("includes_private".to_string(), v["includes_private"].clone());

    let mut index = serde_json::Map::new();
    if let Some(items) = v["index"].as_object() {
        for (key, item) in items {
            if item["visibility"] == "public" {
                index.insert(key.clone(), item.clone());
            }
        }
    }
    exported_api.insert("index".to_string(), Value::Object(index));

    // Write the exported API surface to a new JSON file
    let output_file_path = "docs.api.json";
    let mut output_file = File::create(output_file_path)?;
    output_file.write_all(serde_json::to_string_pretty(&Value::Object(exported_api)).expect("Unable to serialize JSON").as_bytes())?;

    println!("The exported API surface has been successfully saved to '{}'", output_file_path);

    Ok(())
}
