// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    crate_models::{
        AcknowledgeCloudEventsRequest, RejectCloudEventsRequest, ReleaseCloudEventsRequest,
        RenewCloudEventLocksRequest,
    },
    AcknowledgeResult, CloudEvent, EventGridClientAcknowledgeCloudEventsOptions,
    EventGridClientPublishCloudEventOptions, EventGridClientPublishCloudEventsOptions,
    EventGridClientReceiveCloudEventsOptions, EventGridClientRejectCloudEventsOptions,
    EventGridClientReleaseCloudEventsOptions, EventGridClientRenewCloudEventLocksOptions,
    PublishResult, ReceiveResult, RejectResult, ReleaseResult, RenewLocksResult,
};
use azure_core::{
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientOptions, Context, Method, Pipeline, Request, RequestContent, Response, Url,
    },
    Result,
};
use std::sync::Arc;

/// Azure Messaging EventGrid Client
pub struct EventGridClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
}

/// Options used when creating a [`EventGridClient`](EventGridClient)
#[derive(Clone, SafeDebug)]
pub struct EventGridClientOptions {
    /// The API version to use for this operation.
    pub api_version: String,
    /// Allows customization of the client.
    pub client_options: ClientOptions,
}

impl EventGridClient {
    /// Creates a new EventGridClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        options: Option<EventGridClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://eventgrid.azure.net/.default"],
        ));
        Ok(Self {
            endpoint,
            api_version: options.api_version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock tokens, along
    /// with other failed lock tokens with their corresponding error information. Successfully acknowledged events will no longer
    /// be available to be received by any consumer.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event_subscription_name` - Event Subscription Name.
    /// * `lock_tokens` - Array of lock tokens.
    /// * `options` - Optional parameters for the request.
    pub async fn acknowledge_cloud_events(
        &self,
        topic_name: &str,
        event_subscription_name: &str,
        lock_tokens: Vec<String>,
        options: Option<EventGridClientAcknowledgeCloudEventsOptions<'_>>,
    ) -> Result<Response<AcknowledgeResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from(
            "topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge",
        );
        path = path.replace("{eventSubscriptionName}", event_subscription_name);
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        let body: RequestContent<AcknowledgeCloudEventsRequest> =
            AcknowledgeCloudEventsRequest { lock_tokens }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Publish a single Cloud Event to a namespace topic.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event` - Single Cloud Event being published.
    /// * `options` - Optional parameters for the request.
    pub async fn publish_cloud_event(
        &self,
        topic_name: &str,
        event: RequestContent<CloudEvent>,
        options: Option<EventGridClientPublishCloudEventOptions<'_>>,
    ) -> Result<Response<PublishResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("topics/{topicName}:publish");
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header(
            "content-type",
            "application/cloudevents+json; charset=utf-8",
        );
        request.set_body(event);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Publish a batch of Cloud Events to a namespace topic.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `events` - Array of Cloud Events being published.
    /// * `options` - Optional parameters for the request.
    pub async fn publish_cloud_events(
        &self,
        topic_name: &str,
        events: RequestContent<Vec<CloudEvent>>,
        options: Option<EventGridClientPublishCloudEventsOptions<'_>>,
    ) -> Result<Response<PublishResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("topics/{topicName}:publish");
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header(
            "content-type",
            "application/cloudevents-batch+json; charset=utf-8",
        );
        request.set_body(events);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Receive a batch of Cloud Events from a subscription.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event_subscription_name` - Event Subscription Name.
    /// * `options` - Optional parameters for the request.
    pub async fn receive_cloud_events(
        &self,
        topic_name: &str,
        event_subscription_name: &str,
        options: Option<EventGridClientReceiveCloudEventsOptions<'_>>,
    ) -> Result<Response<ReceiveResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path =
            String::from("topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive");
        path = path.replace("{eventSubscriptionName}", event_subscription_name);
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(max_events) = options.max_events {
            url.query_pairs_mut()
                .append_pair("maxEvents", &max_events.to_string());
        }
        if let Some(max_wait_time) = options.max_wait_time {
            url.query_pairs_mut()
                .append_pair("maxWaitTime", &max_wait_time.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along with other
    /// failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered and
    /// can no longer be received by a consumer.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event_subscription_name` - Event Subscription Name.
    /// * `lock_tokens` - Array of lock tokens.
    /// * `options` - Optional parameters for the request.
    pub async fn reject_cloud_events(
        &self,
        topic_name: &str,
        event_subscription_name: &str,
        lock_tokens: Vec<String>,
        options: Option<EventGridClientRejectCloudEventsOptions<'_>>,
    ) -> Result<Response<RejectResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path =
            String::from("topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject");
        path = path.replace("{eventSubscriptionName}", event_subscription_name);
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        let body: RequestContent<RejectCloudEventsRequest> =
            RejectCloudEventsRequest { lock_tokens }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along with other
    /// failed lock tokens with their corresponding error information. Successfully released events can be received by consumers.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event_subscription_name` - Event Subscription Name.
    /// * `lock_tokens` - Array of lock tokens.
    /// * `options` - Optional parameters for the request.
    pub async fn release_cloud_events(
        &self,
        topic_name: &str,
        event_subscription_name: &str,
        lock_tokens: Vec<String>,
        options: Option<EventGridClientReleaseCloudEventsOptions<'_>>,
    ) -> Result<Response<ReleaseResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path =
            String::from("topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release");
        path = path.replace("{eventSubscriptionName}", event_subscription_name);
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        if let Some(release_delay_in_seconds) = options.release_delay_in_seconds {
            url.query_pairs_mut()
                .append_pair("releaseDelayInSeconds", release_delay_in_seconds.as_ref());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        let body: RequestContent<ReleaseCloudEventsRequest> =
            ReleaseCloudEventsRequest { lock_tokens }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens, along
    /// with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure that
    /// the associated event is only available to the consumer that holds the renewed lock.
    ///
    /// # Arguments
    ///
    /// * `topic_name` - Topic Name.
    /// * `event_subscription_name` - Event Subscription Name.
    /// * `lock_tokens` - Array of lock tokens.
    /// * `options` - Optional parameters for the request.
    pub async fn renew_cloud_event_locks(
        &self,
        topic_name: &str,
        event_subscription_name: &str,
        lock_tokens: Vec<String>,
        options: Option<EventGridClientRenewCloudEventLocksOptions<'_>>,
    ) -> Result<Response<RenewLocksResult>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path =
            String::from("topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:renewLock");
        path = path.replace("{eventSubscriptionName}", event_subscription_name);
        path = path.replace("{topicName}", topic_name);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        let body: RequestContent<RenewCloudEventLocksRequest> =
            RenewCloudEventLocksRequest { lock_tokens }.try_into()?;
        request.set_body(body);
        self.pipeline.send(&ctx, &mut request).await
    }
}

impl Default for EventGridClientOptions {
    fn default() -> Self {
        Self {
            api_version: String::from("2024-06-01"),
            client_options: ClientOptions::default(),
        }
    }
}
