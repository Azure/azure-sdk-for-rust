// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::{base64, fmt::SafeDebug};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use time::OffsetDateTime;

/// The result of the Acknowledge operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct AcknowledgeResult {
    /// Array of FailedLockToken for failed cloud events. Each FailedLockToken includes the lock token along with the related
    /// error information (namely, the error code and description).
    #[serde(rename = "failedLockTokens", skip_serializing_if = "Option::is_none")]
    pub failed_lock_tokens: Option<Vec<FailedLockToken>>,

    /// Array of lock tokens for the successfully acknowledged cloud events.
    #[serde(
        rename = "succeededLockTokens",
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeded_lock_tokens: Option<Vec<String>>,
}

/// Properties of the Event Broker operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct BrokerProperties {
    /// The attempt count for delivering the event.
    #[serde(rename = "deliveryCount", skip_serializing_if = "Option::is_none")]
    pub delivery_count: Option<i32>,

    /// The token of the lock on the event.
    #[serde(rename = "lockToken", skip_serializing_if = "Option::is_none")]
    pub lock_token: Option<String>,
}

/// Properties of an event published to an Azure Messaging EventGrid Namespace topic using the CloudEvent 1.0 Schema.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
pub struct CloudEvent {
    /// Event data specific to the event type.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Value>,

    /// Event data specific to the event type, encoded as a base64 string.
    #[serde(
        default,
        deserialize_with = "base64::deserialize",
        serialize_with = "base64::serialize",
        skip_serializing_if = "Option::is_none"
    )]
    pub data_base64: Option<Vec<u8>>,

    /// Content type of data value.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub datacontenttype: Option<String>,

    /// Identifies the schema that data adheres to.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dataschema: Option<String>,

    /// An identifier for the event. The combination of id and source must be unique for each distinct event.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,

    /// The version of the CloudEvents specification which the event uses.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specversion: Option<String>,

    /// This describes the subject of the event in the context of the event producer (identified by source).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,

    /// The time (in UTC) the event was generated, in RFC3339 format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        with = "azure_core::date::rfc3339::option"
    )]
    pub time: Option<OffsetDateTime>,

    /// Type of event related to the originating occurrence.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The error object.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct Error {
    /// One of a server-defined set of error codes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,

    /// An array of details about specific errors that led to this reported error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<Error>>,

    /// An object containing more specific information than the current object about the error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub innererror: Option<InnerError>,

    /// A human-readable representation of the error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,

    /// The target of the error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

/// Failed LockToken information.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct FailedLockToken {
    /// Error information of the failed operation result for the lock token in the request.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,

    /// The lock token of an entry in the request.
    #[serde(rename = "lockToken", skip_serializing_if = "Option::is_none")]
    pub lock_token: Option<String>,
}

/// An object containing more specific information about the error. As per Microsoft One API guidelines - <https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#handling-errors>.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct InnerError {
    /// One of a server-defined set of error codes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,

    /// Inner error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub innererror: Option<Box<InnerError>>,
}

/// The result of the Publish operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct PublishResult {}

/// Receive operation details per Cloud Event.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct ReceiveDetails {
    /// The Event Broker details.
    #[serde(rename = "brokerProperties", skip_serializing_if = "Option::is_none")]
    pub broker_properties: Option<BrokerProperties>,

    /// Cloud Event details.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<CloudEvent>,
}

/// Details of the Receive operation response.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct ReceiveResult {
    /// Array of receive responses, one per cloud event.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<ReceiveDetails>>,
}

/// The result of the Reject operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct RejectResult {
    /// Array of FailedLockToken for failed cloud events. Each FailedLockToken includes the lock token along with the related
    /// error information (namely, the error code and description).
    #[serde(rename = "failedLockTokens", skip_serializing_if = "Option::is_none")]
    pub failed_lock_tokens: Option<Vec<FailedLockToken>>,

    /// Array of lock tokens for the successfully rejected cloud events.
    #[serde(
        rename = "succeededLockTokens",
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeded_lock_tokens: Option<Vec<String>>,
}

/// The result of the Release operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct ReleaseResult {
    /// Array of FailedLockToken for failed cloud events. Each FailedLockToken includes the lock token along with the related
    /// error information (namely, the error code and description).
    #[serde(rename = "failedLockTokens", skip_serializing_if = "Option::is_none")]
    pub failed_lock_tokens: Option<Vec<FailedLockToken>>,

    /// Array of lock tokens for the successfully released cloud events.
    #[serde(
        rename = "succeededLockTokens",
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeded_lock_tokens: Option<Vec<String>>,
}

/// The result of the RenewLock operation.
#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
#[non_exhaustive]
pub struct RenewLocksResult {
    /// Array of FailedLockToken for failed cloud events. Each FailedLockToken includes the lock token along with the related
    /// error information (namely, the error code and description).
    #[serde(rename = "failedLockTokens", skip_serializing_if = "Option::is_none")]
    pub failed_lock_tokens: Option<Vec<FailedLockToken>>,

    /// Array of lock tokens for the successfully renewed locks.
    #[serde(
        rename = "succeededLockTokens",
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeded_lock_tokens: Option<Vec<String>>,
}
