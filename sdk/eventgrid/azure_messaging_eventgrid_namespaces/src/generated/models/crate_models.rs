// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::{fmt::SafeDebug, http::RequestContent, json::to_json, Result};
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
pub(crate) struct AcknowledgeCloudEventsRequest {
    /// Array of lock tokens.
    #[serde(rename = "lockTokens")]
    pub(crate) lock_tokens: Vec<String>,
}

#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
pub(crate) struct RejectCloudEventsRequest {
    /// Array of lock tokens.
    #[serde(rename = "lockTokens")]
    pub(crate) lock_tokens: Vec<String>,
}

#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
pub(crate) struct ReleaseCloudEventsRequest {
    /// Array of lock tokens.
    #[serde(rename = "lockTokens")]
    pub(crate) lock_tokens: Vec<String>,
}

#[derive(Clone, Default, Deserialize, SafeDebug, Serialize, azure_core::http::Model)]
pub(crate) struct RenewCloudEventLocksRequest {
    /// Array of lock tokens.
    #[serde(rename = "lockTokens")]
    pub(crate) lock_tokens: Vec<String>,
}

impl TryFrom<AcknowledgeCloudEventsRequest> for RequestContent<AcknowledgeCloudEventsRequest> {
    type Error = azure_core::Error;
    fn try_from(value: AcknowledgeCloudEventsRequest) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<RejectCloudEventsRequest> for RequestContent<RejectCloudEventsRequest> {
    type Error = azure_core::Error;
    fn try_from(value: RejectCloudEventsRequest) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<ReleaseCloudEventsRequest> for RequestContent<ReleaseCloudEventsRequest> {
    type Error = azure_core::Error;
    fn try_from(value: ReleaseCloudEventsRequest) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}

impl TryFrom<RenewCloudEventLocksRequest> for RequestContent<RenewCloudEventLocksRequest> {
    type Error = azure_core::Error;
    fn try_from(value: RenewCloudEventLocksRequest) -> Result<Self> {
        RequestContent::try_from(to_json(&value)?)
    }
}
