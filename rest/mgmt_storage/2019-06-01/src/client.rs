#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
use crate::*;
use anyhow::{Error, Result};
pub async fn operations_list(configuration: &Configuration) -> Result<OperationListResult> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.Storage/operations", &configuration.base_path,);
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn skus_list(configuration: &Configuration, subscription_id: &str) -> Result<StorageSkuListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Storage/skus",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_check_name_availability(
    configuration: &Configuration,
    account_name: StorageAccountCheckNameAvailabilityParameters,
    subscription_id: &str,
) -> Result<CheckNameAvailabilityResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Storage/checkNameAvailability",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_get_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    expand: Option<&str>,
) -> Result<StorageAccount> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(expand) = expand {
        req_builder = req_builder.query(&[("$expand", expand)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_create(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    parameters: StorageAccountCreateParameters,
    subscription_id: &str,
) -> Result<StorageAccount> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    parameters: StorageAccountUpdateParameters,
    subscription_id: &str,
) -> Result<StorageAccount> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<()> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_list(configuration: &Configuration, subscription_id: &str) -> Result<StorageAccountListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Storage/storageAccounts",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_list_by_resource_group(
    configuration: &Configuration,
    resource_group_name: &str,
    subscription_id: &str,
) -> Result<StorageAccountListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts",
        &configuration.base_path, subscription_id, resource_group_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_list_keys(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    expand: Option<&str>,
) -> Result<StorageAccountListKeysResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/listKeys",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(expand) = expand {
        req_builder = req_builder.query(&[("$expand", expand)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_regenerate_key(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    regenerate_key: StorageAccountRegenerateKeyParameters,
    subscription_id: &str,
) -> Result<StorageAccountListKeysResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/regenerateKey",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn usages_list_by_location(configuration: &Configuration, subscription_id: &str, location: &str) -> Result<UsageListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Storage/locations/{}/usages",
        &configuration.base_path, subscription_id, location
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_list_account_sas(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    parameters: AccountSasParameters,
    subscription_id: &str,
) -> Result<ListAccountSasResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/ListAccountSas",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_list_service_sas(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    parameters: ServiceSasParameters,
    subscription_id: &str,
) -> Result<ListServiceSasResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/ListServiceSas",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_failover(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<()> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/failover",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_restore_blob_ranges(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    parameters: BlobRestoreParameters,
) -> Result<BlobRestoreStatus> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/restoreBlobRanges",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn management_policies_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    management_policy_name: &str,
) -> Result<ManagementPolicy> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/managementPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, management_policy_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn management_policies_create_or_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    management_policy_name: &str,
    properties: ManagementPolicy,
) -> Result<ManagementPolicy> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/managementPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, management_policy_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn management_policies_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    management_policy_name: &str,
) -> Result<()> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/managementPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, management_policy_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn private_endpoint_connections_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<PrivateEndpointConnectionListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/privateEndpointConnections",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn private_endpoint_connections_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    private_endpoint_connection_name: &str,
) -> Result<PrivateEndpointConnection> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/privateEndpointConnections/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, private_endpoint_connection_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn private_endpoint_connections_put(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    private_endpoint_connection_name: &str,
    properties: PrivateEndpointConnection,
) -> Result<PrivateEndpointConnection> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/privateEndpointConnections/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, private_endpoint_connection_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn private_endpoint_connections_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    private_endpoint_connection_name: &str,
) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/privateEndpointConnections/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, private_endpoint_connection_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn private_link_resources_list_by_storage_account(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<PrivateLinkResourceListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/privateLinkResources",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn object_replication_policies_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<ObjectReplicationPolicies> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/objectReplicationPolicies",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn object_replication_policies_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    object_replication_policy_id: &str,
) -> Result<ObjectReplicationPolicy> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/objectReplicationPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, object_replication_policy_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn object_replication_policies_create_or_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    object_replication_policy_id: &str,
    properties: ObjectReplicationPolicy,
) -> Result<ObjectReplicationPolicy> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/objectReplicationPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, object_replication_policy_id
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn object_replication_policies_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    object_replication_policy_id: &str,
) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/objectReplicationPolicies/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, object_replication_policy_id
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn storage_accounts_revoke_user_delegation_keys(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<()> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/revokeUserDelegationKeys",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn encryption_scopes_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    encryption_scope_name: &str,
) -> Result<EncryptionScope> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/encryptionScopes/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, encryption_scope_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn encryption_scopes_put(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    encryption_scope_name: &str,
    encryption_scope: EncryptionScope,
) -> Result<EncryptionScope> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/encryptionScopes/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, encryption_scope_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn encryption_scopes_patch(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    encryption_scope_name: &str,
    encryption_scope: EncryptionScope,
) -> Result<EncryptionScope> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/encryptionScopes/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, encryption_scope_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn encryption_scopes_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<EncryptionScopeListResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/encryptionScopes",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_services_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<BlobServiceItems> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_services_get_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    blob_services_name: &str,
) -> Result<BlobServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, blob_services_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_services_set_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    blob_services_name: &str,
    parameters: BlobServiceProperties,
) -> Result<BlobServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, blob_services_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    maxpagesize: Option<&str>,
    filter: Option<&str>,
    include: Option<&str>,
) -> Result<ListContainerItems> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(maxpagesize) = maxpagesize {
        req_builder = req_builder.query(&[("$maxpagesize", maxpagesize)]);
    }
    if let Some(filter) = filter {
        req_builder = req_builder.query(&[("$filter", filter)]);
    }
    if let Some(include) = include {
        req_builder = req_builder.query(&[("$include", include)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
) -> Result<BlobContainer> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, container_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_create(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    blob_container: BlobContainer,
    subscription_id: &str,
) -> Result<BlobContainer> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, container_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    blob_container: BlobContainer,
    subscription_id: &str,
) -> Result<BlobContainer> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, container_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
) -> Result<()> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, container_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_set_legal_hold(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
    legal_hold: LegalHold,
) -> Result<LegalHold> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/setLegalHold" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name) ;
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_clear_legal_hold(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
    legal_hold: LegalHold,
) -> Result<LegalHold> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/clearLegalHold" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name) ;
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_get_immutability_policy(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    immutability_policy_name: &str,
    subscription_id: &str,
    if_match: Option<&str>,
) -> Result<ImmutabilityPolicy> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/immutabilityPolicies/{}" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name , immutability_policy_name) ;
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_create_or_update_immutability_policy(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    immutability_policy_name: &str,
    subscription_id: &str,
    parameters: Option<ImmutabilityPolicy>,
    if_match: Option<&str>,
) -> Result<ImmutabilityPolicy> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/immutabilityPolicies/{}" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name , immutability_policy_name) ;
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_delete_immutability_policy(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    immutability_policy_name: &str,
    subscription_id: &str,
    if_match: &str,
) -> Result<ImmutabilityPolicy> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/immutabilityPolicies/{}" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name , immutability_policy_name) ;
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_lock_immutability_policy(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
    if_match: &str,
) -> Result<ImmutabilityPolicy> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/immutabilityPolicies/default/lock" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name) ;
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_extend_immutability_policy(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
    parameters: Option<ImmutabilityPolicy>,
    if_match: &str,
) -> Result<ImmutabilityPolicy> {
    let client = &configuration.client;
    let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/immutabilityPolicies/default/extend" , & configuration . base_path , subscription_id , resource_group_name , account_name , container_name) ;
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn blob_containers_lease(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    container_name: &str,
    subscription_id: &str,
    parameters: Option<LeaseContainerRequest>,
) -> Result<LeaseContainerResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/blobServices/default/containers/{}/lease",
        &configuration.base_path, subscription_id, resource_group_name, account_name, container_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_services_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<FileServiceItems> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_services_get_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    file_services_name: &str,
) -> Result<FileServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, file_services_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_services_set_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    file_services_name: &str,
    parameters: FileServiceProperties,
) -> Result<FileServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, file_services_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    maxpagesize: Option<&str>,
    filter: Option<&str>,
    expand: Option<&str>,
) -> Result<FileShareItems> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(maxpagesize) = maxpagesize {
        req_builder = req_builder.query(&[("$maxpagesize", maxpagesize)]);
    }
    if let Some(filter) = filter {
        req_builder = req_builder.query(&[("$filter", filter)]);
    }
    if let Some(expand) = expand {
        req_builder = req_builder.query(&[("$expand", expand)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    share_name: &str,
    subscription_id: &str,
    expand: Option<&str>,
) -> Result<FileShare> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(expand) = expand {
        req_builder = req_builder.query(&[("$expand", expand)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_create(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    share_name: &str,
    file_share: FileShare,
    subscription_id: &str,
) -> Result<FileShare> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    share_name: &str,
    file_share: FileShare,
    subscription_id: &str,
) -> Result<FileShare> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    share_name: &str,
    subscription_id: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn file_shares_restore(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    share_name: &str,
    deleted_share: DeletedShare,
    subscription_id: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}/restore",
        &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_services_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<ListQueueServices> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_services_get_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_service_name: &str,
) -> Result<QueueServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_service_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_services_set_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_service_name: &str,
    parameters: QueueServiceProperties,
) -> Result<QueueServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_service_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_name: &str,
) -> Result<StorageQueue> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/default/queues/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_create(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_name: &str,
    queue: StorageQueue,
) -> Result<StorageQueue> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/default/queues/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_name: &str,
    queue: StorageQueue,
) -> Result<StorageQueue> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/default/queues/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    queue_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/default/queues/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, queue_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn queue_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    maxpagesize: Option<&str>,
    filter: Option<&str>,
) -> Result<ListQueueResource> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/queueServices/default/queues",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    if let Some(maxpagesize) = maxpagesize {
        req_builder = req_builder.query(&[("$maxpagesize", maxpagesize)]);
    }
    if let Some(filter) = filter {
        req_builder = req_builder.query(&[("$filter", filter)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_services_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<ListTableServices> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_services_get_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_service_name: &str,
) -> Result<TableServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_service_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_services_set_service_properties(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_service_name: &str,
    parameters: TableServiceProperties,
) -> Result<TableServiceProperties> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_service_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_get(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_name: &str,
) -> Result<Table> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/default/tables/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_create(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_name: &str,
) -> Result<Table> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/default/tables/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_update(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_name: &str,
) -> Result<Table> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/default/tables/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_delete(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
    table_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/default/tables/{}",
        &configuration.base_path, subscription_id, resource_group_name, account_name, table_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
pub async fn table_list(
    configuration: &Configuration,
    resource_group_name: &str,
    account_name: &str,
    subscription_id: &str,
) -> Result<ListTableResource> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/tableServices/default/tables",
        &configuration.base_path, subscription_id, resource_group_name, account_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    match res.error_for_status_ref() {
        Ok(_) => Ok(res.json().await?),
        Err(err) => {
            let e = Error::new(err);
            let e = e.context(res.text().await?);
            Err(e)
        }
    }
}
