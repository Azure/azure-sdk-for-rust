name: Build and Test

on:
  pull_request:
  push:

env:
  RUSTFLAGS: -Dwarnings
  CARGO_INCREMENTAL: 0

jobs:
  fmt:
    name: Code Style
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt

      - uses: Swatinem/rust-cache@v1

      - name: cargo fmt sdk
        run: cargo fmt --all -- --check

      - name: cargo fmt services
        run: |
          ./eng/scripts/check_json_format.sh
          cargo fmt --manifest-path services/Cargo.toml --all -- --check

  test-sdk:
    name: SDK Tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt
        target: wasm32-unknown-unknown

    - uses: Swatinem/rust-cache@v1

    - name: fmt
      run: |
        cargo fmt --all -- --check
        ./eng/scripts/check_json_format.sh
        cargo fmt --manifest-path services/Cargo.toml --all -- --check
      if: matrix.rust == 'stable'

    - name: check core for wasm
      run: cargo check -p azure_core --target=wasm32-unknown-unknown

    # - name: check core for hyper
    #   run: cargo check -p azure_core --no-default-features --features enable_hyper

    - name: sdk tests
      run: cargo test --all

  test-services:
    name: Services Tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt

    - uses: Swatinem/rust-cache@v1

    - name: services check
      run: cargo check --manifest-path services/Cargo.toml --all

    - name: display free disk space
      run: df -h /
      if: ${{ always() }}

  test-integration:
    name: Integration Tests
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt

    - uses: Swatinem/rust-cache@v1

    - name: integration tests
      run: |
        sqllocaldb create MSSQLLocalDB
        sqllocaldb start MSSQLLocalDB

        &"C:\Program Files (x86)\Microsoft SDKs\Azure\Storage Emulator\AzureStorageEmulator.exe" start

        cargo test --features test_integration

    - name: display free disk space
      run: df -h /
      if: ${{ always() }}

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt

    - uses: Swatinem/rust-cache@v1

    - name: e2e tests build
      run: |
        PROJECTS=(core  cosmos  identity  service_bus  storage)
        for PROJ in ${PROJECTS[@]}
        do
          echo "Checking e2e tests for $PROJ"
          cargo check --tests --features test_e2e --manifest-path sdk/$PROJ/Cargo.toml || exit 1
        done

    - name: display free disk space
      run: df -h /
      if: ${{ always() }}

