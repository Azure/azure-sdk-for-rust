name: Copilot Setup Steps

# This workflow sets up the development environment for GitHub Copilot coding agent
# It leverages the existing devcontainer configuration to ensure consistency
# with the development environment and avoid duplication of tooling setup
#
# The workflow:
# - Uses the same base container image as the devcontainer (mcr.microsoft.com/devcontainers/rust)
# - Runs the devcontainer post-create script for environment setup
# - Installs the same development tools specified in the devcontainer
# - Caches Cargo dependencies for improved performance
# - Runs comprehensive workspace verification (check, clippy, fmt)
# - Tests basic functionality to ensure the environment is ready
#
# This approach maintains consistency with the existing devcontainer setup
# and avoids maintaining duplicate tool installation logic
#
# Triggers:
# - Manual execution via workflow_dispatch 
# - Weekly scheduled runs to keep environment fresh
# - Automatic runs when key configuration files change

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    # Run weekly to keep the environment fresh
    - cron: '0 2 * * 1' # Monday at 2 AM UTC
  push:
    branches: [main]
    paths:
      - 'rust-toolchain.toml'
      - 'Cargo.toml'
      - '.devcontainer/**'
      - '.github/workflows/copilot-setup-steps.yml'
  pull_request:
    paths:
      - 'rust-toolchain.toml'
      - 'Cargo.toml'
      - '.devcontainer/**'
      - '.github/workflows/copilot-setup-steps.yml'

jobs:
  setup-environment:
    name: Setup Copilot Coding Agent Environment
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/devcontainers/rust:1-1-bullseye
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup development environment using devcontainer configuration
        run: |
          # Run the devcontainer post-create script to set up additional toolchains
          chmod +x .devcontainer/oncreate
          ./.devcontainer/oncreate
      
      - name: Install additional tools for Azure SDK development
        run: |
          # Install tools commonly needed for Rust development and Azure SDK
          # Note: cargo-watch and http-server are already installed in the container
          cargo install cargo-audit || echo "cargo-audit already installed or failed to install"
          cargo install cargo-outdated || echo "cargo-outdated already installed or failed to install"
      
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Verify workspace setup
        run: |
          # Verify the workspace can be built
          cargo check --workspace --all-targets
          
          # Run basic linting
          cargo clippy --workspace --all-targets -- -D warnings
          
          # Check formatting
          cargo fmt --all -- --check
      
      - name: Setup environment variables
        run: |
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "CARGO_TERM_COLOR=always" >> $GITHUB_ENV
          echo "RUSTFLAGS=-D warnings" >> $GITHUB_ENV
      
      - name: Test basic functionality
        run: |
          # Test that we can run basic cargo commands
          cargo --version
          cargo tree --workspace | head -20
          
          # Verify that tests can be discovered
          cargo test --workspace --no-run
      
      - name: Environment summary
        run: |
          echo "=== Rust Environment Summary ==="
          rustc --version
          cargo --version
          echo "=== Installed Components ==="
          rustup component list --installed
          echo "=== Available Tools ==="
          which cargo-audit && cargo-audit --version || echo "cargo-audit not available"
          which cargo-outdated && cargo-outdated --version || echo "cargo-outdated not available"
          which cargo-watch && cargo-watch --version || echo "cargo-watch not available"
          which http-server && http-server --version || echo "http-server not available"
          echo "=== System Dependencies ==="
          openssl version
          pkg-config --exists openssl && echo "OpenSSL pkg-config: OK" || echo "OpenSSL pkg-config: NOT FOUND"
          echo "=== Workspace Structure ==="
          find . -name "Cargo.toml" | head -10
          echo "=== Environment Ready for Copilot Coding Agent ==="