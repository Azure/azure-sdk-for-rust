steps:
  - pwsh: |
      Write-Host '##vso[task.setvariable variable=VCPKG_BINARY_SOURCES_SECRET;issecret=true;]clear;x-azcopy,https://azuresdkartifacts.blob.core.windows.net/public-vcpkg-container,read'
      Write-Host '##vso[task.setvariable variable=X_VCPKG_ASSET_SOURCES_SECRET;issecret=true;]clear;x-azurl,https://azuresdkartifacts.blob.core.windows.net/public-vcpkg-container,,read'
    displayName: Set vcpkg variables

  - script: vcpkg --version
    condition: >-
      and(
      succeeded(),
      eq(variables['Agent.OS'], 'Windows_NT')
      )
    displayName: vcpkg --version

  - ${{if and(eq(variables['System.TeamProject'], 'internal'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    - task: AzurePowerShell@5
      displayName: Set vcpkg write-mode cache
      inputs:
        ScriptType: FilePath
        ScriptPath: eng/scripts/Set-VcpkgWriteModeCache.ps1
        azureSubscription: Azure SDK Artifacts
        azurePowerShellVersion: LatestVersion
        pwsh: true
      # This step is idempotent and can be run multiple times in cases of
      # failure and partial execution.
      retryCountOnTaskFailure: 3

  - pwsh: |
      vcpkg install
      Write-Host "##vso[task.setvariable variable=VCPKG_ROOT;]${env:VCPKG_INSTALLATION_ROOT}"
      Write-Host "##vso[task.setvariable variable=VCPKG_INSTALLED_ROOT;]$PWD\vcpkg_installed"
      Write-Host "##vso[task.setvariable variable=OPENSSL_DIR;]$PWD\vcpkg_installed\x64-windows"
    condition: >-
      and(
      succeeded(),
      eq(variables['Agent.OS'], 'Windows_NT')
      )
    displayName: vcpkg install
    workingDirectory: eng/
    env:
      VCPKG_BINARY_SOURCES: $(VCPKG_BINARY_SOURCES_SECRET)
      X_VCPKG_ASSET_SOURCES: $(X_VCPKG_ASSET_SOURCES_SECRET)
