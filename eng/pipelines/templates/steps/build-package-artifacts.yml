parameters:
  # - name: TestPipeline
  #   type: boolean
  #   default: false
  - name: ServiceDirectory
    type: string
    default: ""
  - name: Artifacts
    type: object
    default: []
  - name: RustChannel
    type: string
    default: stable
  - name: ArtifactSuffix
    type: string
    default: "linux"
  - name: BuildTargetingString
    type: string
    default: "*"

steps:
  - template: /eng/pipelines/templates/steps/use-rust.yml@self
    parameters:
      RustChannel: ${{ parameters.RustChannel }}

  # - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml@self
  #   parameters:
  #     PackageName: "azure-template"
  #     ServiceDirectory: "template"
  #     TestPipeline: ${{ parameters.TestPipeline }}

  - template: /eng/common/pipelines/templates/steps/set-default-branch.yml@self

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: "Tag scheduled builds"
    condition: and(eq(variables['Build.SourceBranchName'], variables['DefaultBranch']), eq(variables['Build.Reason'],'Schedule'))

  # now we need to call Save-Package-Properties so that we can filter on it
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - pwsh: |
          mkdir -p $(Build.ArtifactStagingDirectory)/diff
        displayName: Create PR Diff Folder

      - pwsh: |
          $location = Join-Path "$(Build.ArtifactStagingDirectory)" "diff"

          Write-Host "./eng/common/scripts/Generate-PR-Diff.ps1 -TargetPath `"$(Build.SourcesDirectory)`" -ArtifactPath `"$location`""
          ./eng/common/scripts/Generate-PR-Diff.ps1 -TargetPath "$(Build.SourcesDirectory)" -ArtifactPath "$location"
        displayName: Generate PR Diff

      - pwsh: |
          Write-Host "We freshly generated the PR diff, and this is what it sees!"
          Get-ChildItem -R -Force $(Build.ArtifactStagingDirectory)/diff | % { $_.FullName }
          cat $(Build.ArtifactStagingDirectory)/diff/diff.json
        displayName: Dump PR Diff

      - task: Powershell@2
        displayName: Save package properties filtered for PR
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
          arguments: >
            -PrDiff $(Build.ArtifactStagingDirectory)/diff/diff.json
            -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)

  - ${{ else }}:
      - task: Powershell@2
        displayName: Save package properties with dev version
        condition: and(succeeded(), eq(variables['SetDevVersion'],'true'))
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
          arguments: >
            -ServiceDirectory ${{parameters.ServiceDirectory}}
            -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
            -AddDevVersion
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)
      - task: Powershell@2
        displayName: Save package properties for service
        condition: and(succeeded(), ne(variables['SetDevVersion'],'true'))
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
          arguments: >
            -ServiceDirectory ${{parameters.ServiceDirectory}}
            -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
          pwsh: true
          workingDirectory: $(Pipeline.Workspace)

  - template: /eng/pipelines/templates/steps/resolve-package-targeting.yml
    parameters:
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo

  - pwsh: |
      ./eng/scripts/Build-Packages.ps1 -ServiceDirectory ${{ parameters.ServiceDirectory }} -TargetingString '$(TargetingString)' -RustToolchain $(RustToolchain)
    displayName: "Build Packages"
    timeoutInMinutes: 80
    env:
      CIBW_BUILD_VERBOSITY: 3

  - ${{ if eq(parameters.ArtifactSuffix, 'linux_stable') }}:
      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactPath: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "packages_${{ parameters.ArtifactSuffix }}"
