// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{RequestContent, Response};
use serde::{Deserialize, Serialize};

/// This is the child model to be flattened. And it has flattened property as well.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct ChildFlattenModel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ChildModel>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
}

/// This is the child model to be flattened.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct ChildModel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub age: Option<i32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

/// This is the model with one level of flattening.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct FlattenModel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ChildModel>,
}

/// This is the model with two levels of flattening.
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct NestedFlattenModel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ChildFlattenModel>,
}

impl TryFrom<FlattenModel> for RequestContent<FlattenModel> {
    type Error = azure_core::Error;
    fn try_from(value: FlattenModel) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<FlattenModel>> for FlattenModel {
    type Error = azure_core::Error;
    fn try_from(value: Response<FlattenModel>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<FlattenModel>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<NestedFlattenModel> for RequestContent<NestedFlattenModel> {
    type Error = azure_core::Error;
    fn try_from(value: NestedFlattenModel) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<NestedFlattenModel>> for NestedFlattenModel {
    type Error = azure_core::Error;
    fn try_from(value: Response<NestedFlattenModel>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<NestedFlattenModel>();
        let r = block_on(f())?;
        Ok(r)
    }
}
