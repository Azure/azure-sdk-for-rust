// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{FlattenModel, NestedFlattenModel};
use azure_core::builders::{ClientMethodOptionsBuilder, ClientOptionsBuilder};
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, ClientOptions, Context, Method, Pipeline, Policy,
    Request, RequestContent, Response, Result, RetryOptions, TransportOptions, Url,
};
use std::sync::Arc;

pub struct FlattenPropertyClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct FlattenPropertyClientOptions {
    client_options: ClientOptions,
}

impl FlattenPropertyClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<FlattenPropertyClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub async fn put_flatten_model(
        &self,
        input: RequestContent<FlattenModel>,
        options: Option<FlattenPropertyClientPutFlattenModelOptions<'_>>,
    ) -> Result<Response<FlattenModel>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/azure/client-generator-core/flatten-property/flattenModel");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(input);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn put_nested_flatten_model(
        &self,
        input: RequestContent<NestedFlattenModel>,
        options: Option<FlattenPropertyClientPutNestedFlattenModelOptions<'_>>,
    ) -> Result<Response<NestedFlattenModel>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/azure/client-generator-core/flatten-property/nestedFlattenModel");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(input);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

impl FlattenPropertyClientOptions {
    pub fn builder() -> builders::FlattenPropertyClientOptionsBuilder {
        builders::FlattenPropertyClientOptionsBuilder::new()
    }
}

impl Default for FlattenPropertyClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for FlattenPropertyClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

#[derive(Clone, Debug, Default)]
pub struct FlattenPropertyClientPutFlattenModelOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> FlattenPropertyClientPutFlattenModelOptions<'a> {
    pub fn builder() -> builders::FlattenPropertyClientPutFlattenModelOptionsBuilder<'a> {
        builders::FlattenPropertyClientPutFlattenModelOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct FlattenPropertyClientPutNestedFlattenModelOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> FlattenPropertyClientPutNestedFlattenModelOptions<'a> {
    pub fn builder() -> builders::FlattenPropertyClientPutNestedFlattenModelOptionsBuilder<'a> {
        builders::FlattenPropertyClientPutNestedFlattenModelOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct FlattenPropertyClientOptionsBuilder {
        options: FlattenPropertyClientOptions,
    }

    impl FlattenPropertyClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: FlattenPropertyClientOptions::default(),
            }
        }

        pub fn build(&self) -> FlattenPropertyClientOptions {
            self.options.clone()
        }
    }

    pub struct FlattenPropertyClientPutFlattenModelOptionsBuilder<'a> {
        options: FlattenPropertyClientPutFlattenModelOptions<'a>,
    }

    impl FlattenPropertyClientPutFlattenModelOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: FlattenPropertyClientPutFlattenModelOptions::default(),
            }
        }

        pub fn build(&self) -> FlattenPropertyClientPutFlattenModelOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for FlattenPropertyClientPutFlattenModelOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct FlattenPropertyClientPutNestedFlattenModelOptionsBuilder<'a> {
        options: FlattenPropertyClientPutNestedFlattenModelOptions<'a>,
    }

    impl FlattenPropertyClientPutNestedFlattenModelOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: FlattenPropertyClientPutNestedFlattenModelOptions::default(),
            }
        }

        pub fn build(&self) -> FlattenPropertyClientPutNestedFlattenModelOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a>
        for FlattenPropertyClientPutNestedFlattenModelOptionsBuilder<'a>
    {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
