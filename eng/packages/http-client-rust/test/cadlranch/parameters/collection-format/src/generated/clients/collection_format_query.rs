// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, Response,
    Result, Url,
};

pub struct CollectionFormatQuery {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl CollectionFormatQuery {
    pub async fn csv(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatQueryCsvOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/query/csv");
        url.query_pairs_mut()
            .append_pair("colors", &colors.join(","));
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn multi(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatQueryMultiOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/query/multi");
        for c in colors.iter() {
            url.query_pairs_mut().append_pair("colors", c);
        }
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn pipes(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatQueryPipesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/query/pipes");
        url.query_pairs_mut()
            .append_pair("colors", &colors.join("|"));
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn ssv(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatQuerySsvOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/query/ssv");
        url.query_pairs_mut()
            .append_pair("colors", &colors.join(" "));
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn tsv(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatQueryTsvOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/query/tsv");
        url.query_pairs_mut()
            .append_pair("colors", &colors.join("	"));
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatQueryCsvOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatQueryCsvOptions<'a> {
    pub fn builder() -> builders::CollectionFormatQueryCsvOptionsBuilder<'a> {
        builders::CollectionFormatQueryCsvOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatQueryMultiOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatQueryMultiOptions<'a> {
    pub fn builder() -> builders::CollectionFormatQueryMultiOptionsBuilder<'a> {
        builders::CollectionFormatQueryMultiOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatQueryPipesOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatQueryPipesOptions<'a> {
    pub fn builder() -> builders::CollectionFormatQueryPipesOptionsBuilder<'a> {
        builders::CollectionFormatQueryPipesOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatQuerySsvOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatQuerySsvOptions<'a> {
    pub fn builder() -> builders::CollectionFormatQuerySsvOptionsBuilder<'a> {
        builders::CollectionFormatQuerySsvOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatQueryTsvOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatQueryTsvOptions<'a> {
    pub fn builder() -> builders::CollectionFormatQueryTsvOptionsBuilder<'a> {
        builders::CollectionFormatQueryTsvOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct CollectionFormatQueryCsvOptionsBuilder<'a> {
        options: CollectionFormatQueryCsvOptions<'a>,
    }

    impl CollectionFormatQueryCsvOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatQueryCsvOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatQueryCsvOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatQueryCsvOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct CollectionFormatQueryMultiOptionsBuilder<'a> {
        options: CollectionFormatQueryMultiOptions<'a>,
    }

    impl CollectionFormatQueryMultiOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatQueryMultiOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatQueryMultiOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatQueryMultiOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct CollectionFormatQueryPipesOptionsBuilder<'a> {
        options: CollectionFormatQueryPipesOptions<'a>,
    }

    impl CollectionFormatQueryPipesOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatQueryPipesOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatQueryPipesOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatQueryPipesOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct CollectionFormatQuerySsvOptionsBuilder<'a> {
        options: CollectionFormatQuerySsvOptions<'a>,
    }

    impl CollectionFormatQuerySsvOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatQuerySsvOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatQuerySsvOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatQuerySsvOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct CollectionFormatQueryTsvOptionsBuilder<'a> {
        options: CollectionFormatQueryTsvOptions<'a>,
    }

    impl CollectionFormatQueryTsvOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatQueryTsvOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatQueryTsvOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatQueryTsvOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
