// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::collection_format_header::CollectionFormatHeader;
use crate::collection_format_query::CollectionFormatQuery;
use azure_core::builders::ClientOptionsBuilder;
use azure_core::{ClientOptions, Pipeline, Policy, Result, RetryOptions, TransportOptions, Url};
use std::sync::Arc;

pub struct CollectionFormatClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct CollectionFormatClientOptions {
    client_options: ClientOptions,
}

impl CollectionFormatClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<CollectionFormatClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub fn get_collection_format_header_client(&self) -> CollectionFormatHeader {
        CollectionFormatHeader {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_collection_format_query_client(&self) -> CollectionFormatQuery {
        CollectionFormatQuery {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }
}

impl CollectionFormatClientOptions {
    pub fn builder() -> builders::CollectionFormatClientOptionsBuilder {
        builders::CollectionFormatClientOptionsBuilder::new()
    }
}

impl Default for CollectionFormatClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for CollectionFormatClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

pub mod builders {
    use super::*;

    pub struct CollectionFormatClientOptionsBuilder {
        options: CollectionFormatClientOptions,
    }

    impl CollectionFormatClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatClientOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatClientOptions {
            self.options.clone()
        }
    }
}
