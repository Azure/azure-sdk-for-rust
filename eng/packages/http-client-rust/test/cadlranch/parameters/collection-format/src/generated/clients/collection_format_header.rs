// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, Response,
    Result, Url,
};

pub struct CollectionFormatHeader {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl CollectionFormatHeader {
    pub async fn csv(
        &self,
        colors: Vec<String>,
        options: Option<CollectionFormatHeaderCsvOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/parameters/collection-format/header/csv");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("colors", colors.join(","));
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct CollectionFormatHeaderCsvOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> CollectionFormatHeaderCsvOptions<'a> {
    pub fn builder() -> builders::CollectionFormatHeaderCsvOptionsBuilder<'a> {
        builders::CollectionFormatHeaderCsvOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct CollectionFormatHeaderCsvOptionsBuilder<'a> {
        options: CollectionFormatHeaderCsvOptions<'a>,
    }

    impl CollectionFormatHeaderCsvOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: CollectionFormatHeaderCsvOptions::default(),
            }
        }

        pub fn build(&self) -> CollectionFormatHeaderCsvOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for CollectionFormatHeaderCsvOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
