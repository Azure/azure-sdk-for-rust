// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, Response,
    Result, Url,
};

pub struct SpecialWordsOperations {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl SpecialWordsOperations {
    pub async fn and(
        &self,
        options: Option<SpecialWordsOperationsAndOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/and");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn as_fn(
        &self,
        options: Option<SpecialWordsOperationsAsOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/as");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn assert(
        &self,
        options: Option<SpecialWordsOperationsAssertOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/assert");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn async_fn(
        &self,
        options: Option<SpecialWordsOperationsAsyncOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/async");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn await_fn(
        &self,
        options: Option<SpecialWordsOperationsAwaitOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/await");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn break_fn(
        &self,
        options: Option<SpecialWordsOperationsBreakOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/break");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn class(
        &self,
        options: Option<SpecialWordsOperationsClassOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/class");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn constructor(
        &self,
        options: Option<SpecialWordsOperationsConstructorOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/constructor");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn continue_fn(
        &self,
        options: Option<SpecialWordsOperationsContinueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/continue");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn def(
        &self,
        options: Option<SpecialWordsOperationsDefOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/def");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn del(
        &self,
        options: Option<SpecialWordsOperationsDelOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/del");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn elif(
        &self,
        options: Option<SpecialWordsOperationsElifOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/elif");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn else_fn(
        &self,
        options: Option<SpecialWordsOperationsElseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/else");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn except(
        &self,
        options: Option<SpecialWordsOperationsExceptOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/except");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn exec(
        &self,
        options: Option<SpecialWordsOperationsExecOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/exec");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn finally(
        &self,
        options: Option<SpecialWordsOperationsFinallyOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/finally");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn for_fn(
        &self,
        options: Option<SpecialWordsOperationsForOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/for");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn from(
        &self,
        options: Option<SpecialWordsOperationsFromOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/from");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn global(
        &self,
        options: Option<SpecialWordsOperationsGlobalOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/global");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn if_fn(
        &self,
        options: Option<SpecialWordsOperationsIfOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/if");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn import(
        &self,
        options: Option<SpecialWordsOperationsImportOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/import");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn in_fn(
        &self,
        options: Option<SpecialWordsOperationsInOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/in");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn is(
        &self,
        options: Option<SpecialWordsOperationsIsOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/is");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn lambda(
        &self,
        options: Option<SpecialWordsOperationsLambdaOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/lambda");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn not(
        &self,
        options: Option<SpecialWordsOperationsNotOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/not");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn or(
        &self,
        options: Option<SpecialWordsOperationsOrOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/or");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn pass(
        &self,
        options: Option<SpecialWordsOperationsPassOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/pass");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn raise(
        &self,
        options: Option<SpecialWordsOperationsRaiseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/raise");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn return_fn(
        &self,
        options: Option<SpecialWordsOperationsReturnOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/return");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn try_fn(
        &self,
        options: Option<SpecialWordsOperationsTryOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/try");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn while_fn(
        &self,
        options: Option<SpecialWordsOperationsWhileOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/while");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with(
        &self,
        options: Option<SpecialWordsOperationsWithOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/with");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn yield_fn(
        &self,
        options: Option<SpecialWordsOperationsYieldOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/operations/yield");
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsAndOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsAndOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsAndOptionsBuilder<'a> {
        builders::SpecialWordsOperationsAndOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsAsOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsAsOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsAsOptionsBuilder<'a> {
        builders::SpecialWordsOperationsAsOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsAssertOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsAssertOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsAssertOptionsBuilder<'a> {
        builders::SpecialWordsOperationsAssertOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsAsyncOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsAsyncOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsAsyncOptionsBuilder<'a> {
        builders::SpecialWordsOperationsAsyncOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsAwaitOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsAwaitOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsAwaitOptionsBuilder<'a> {
        builders::SpecialWordsOperationsAwaitOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsBreakOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsBreakOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsBreakOptionsBuilder<'a> {
        builders::SpecialWordsOperationsBreakOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsClassOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsClassOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsClassOptionsBuilder<'a> {
        builders::SpecialWordsOperationsClassOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsConstructorOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsConstructorOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsConstructorOptionsBuilder<'a> {
        builders::SpecialWordsOperationsConstructorOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsContinueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsContinueOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsContinueOptionsBuilder<'a> {
        builders::SpecialWordsOperationsContinueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsDefOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsDefOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsDefOptionsBuilder<'a> {
        builders::SpecialWordsOperationsDefOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsDelOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsDelOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsDelOptionsBuilder<'a> {
        builders::SpecialWordsOperationsDelOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsElifOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsElifOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsElifOptionsBuilder<'a> {
        builders::SpecialWordsOperationsElifOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsElseOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsElseOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsElseOptionsBuilder<'a> {
        builders::SpecialWordsOperationsElseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsExceptOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsExceptOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsExceptOptionsBuilder<'a> {
        builders::SpecialWordsOperationsExceptOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsExecOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsExecOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsExecOptionsBuilder<'a> {
        builders::SpecialWordsOperationsExecOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsFinallyOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsFinallyOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsFinallyOptionsBuilder<'a> {
        builders::SpecialWordsOperationsFinallyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsForOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsForOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsForOptionsBuilder<'a> {
        builders::SpecialWordsOperationsForOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsFromOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsFromOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsFromOptionsBuilder<'a> {
        builders::SpecialWordsOperationsFromOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsGlobalOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsGlobalOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsGlobalOptionsBuilder<'a> {
        builders::SpecialWordsOperationsGlobalOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsIfOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsIfOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsIfOptionsBuilder<'a> {
        builders::SpecialWordsOperationsIfOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsImportOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsImportOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsImportOptionsBuilder<'a> {
        builders::SpecialWordsOperationsImportOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsInOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsInOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsInOptionsBuilder<'a> {
        builders::SpecialWordsOperationsInOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsIsOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsIsOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsIsOptionsBuilder<'a> {
        builders::SpecialWordsOperationsIsOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsLambdaOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsLambdaOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsLambdaOptionsBuilder<'a> {
        builders::SpecialWordsOperationsLambdaOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsNotOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsNotOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsNotOptionsBuilder<'a> {
        builders::SpecialWordsOperationsNotOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsOrOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsOrOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsOrOptionsBuilder<'a> {
        builders::SpecialWordsOperationsOrOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsPassOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsPassOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsPassOptionsBuilder<'a> {
        builders::SpecialWordsOperationsPassOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsRaiseOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsRaiseOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsRaiseOptionsBuilder<'a> {
        builders::SpecialWordsOperationsRaiseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsReturnOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsReturnOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsReturnOptionsBuilder<'a> {
        builders::SpecialWordsOperationsReturnOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsTryOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsTryOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsTryOptionsBuilder<'a> {
        builders::SpecialWordsOperationsTryOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsWhileOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsWhileOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsWhileOptionsBuilder<'a> {
        builders::SpecialWordsOperationsWhileOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsWithOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsWithOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsWithOptionsBuilder<'a> {
        builders::SpecialWordsOperationsWithOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsOperationsYieldOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsOperationsYieldOptions<'a> {
    pub fn builder() -> builders::SpecialWordsOperationsYieldOptionsBuilder<'a> {
        builders::SpecialWordsOperationsYieldOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct SpecialWordsOperationsAndOptionsBuilder<'a> {
        options: SpecialWordsOperationsAndOptions<'a>,
    }

    impl SpecialWordsOperationsAndOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsAndOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsAndOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsAndOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsAsOptionsBuilder<'a> {
        options: SpecialWordsOperationsAsOptions<'a>,
    }

    impl SpecialWordsOperationsAsOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsAsOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsAsOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsAsOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsAssertOptionsBuilder<'a> {
        options: SpecialWordsOperationsAssertOptions<'a>,
    }

    impl SpecialWordsOperationsAssertOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsAssertOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsAssertOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsAssertOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsAsyncOptionsBuilder<'a> {
        options: SpecialWordsOperationsAsyncOptions<'a>,
    }

    impl SpecialWordsOperationsAsyncOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsAsyncOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsAsyncOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsAsyncOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsAwaitOptionsBuilder<'a> {
        options: SpecialWordsOperationsAwaitOptions<'a>,
    }

    impl SpecialWordsOperationsAwaitOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsAwaitOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsAwaitOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsAwaitOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsBreakOptionsBuilder<'a> {
        options: SpecialWordsOperationsBreakOptions<'a>,
    }

    impl SpecialWordsOperationsBreakOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsBreakOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsBreakOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsBreakOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsClassOptionsBuilder<'a> {
        options: SpecialWordsOperationsClassOptions<'a>,
    }

    impl SpecialWordsOperationsClassOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsClassOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsClassOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsClassOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsConstructorOptionsBuilder<'a> {
        options: SpecialWordsOperationsConstructorOptions<'a>,
    }

    impl SpecialWordsOperationsConstructorOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsConstructorOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsConstructorOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsConstructorOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsContinueOptionsBuilder<'a> {
        options: SpecialWordsOperationsContinueOptions<'a>,
    }

    impl SpecialWordsOperationsContinueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsContinueOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsContinueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsContinueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsDefOptionsBuilder<'a> {
        options: SpecialWordsOperationsDefOptions<'a>,
    }

    impl SpecialWordsOperationsDefOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsDefOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsDefOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsDefOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsDelOptionsBuilder<'a> {
        options: SpecialWordsOperationsDelOptions<'a>,
    }

    impl SpecialWordsOperationsDelOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsDelOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsDelOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsDelOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsElifOptionsBuilder<'a> {
        options: SpecialWordsOperationsElifOptions<'a>,
    }

    impl SpecialWordsOperationsElifOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsElifOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsElifOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsElifOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsElseOptionsBuilder<'a> {
        options: SpecialWordsOperationsElseOptions<'a>,
    }

    impl SpecialWordsOperationsElseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsElseOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsElseOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsElseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsExceptOptionsBuilder<'a> {
        options: SpecialWordsOperationsExceptOptions<'a>,
    }

    impl SpecialWordsOperationsExceptOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsExceptOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsExceptOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsExceptOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsExecOptionsBuilder<'a> {
        options: SpecialWordsOperationsExecOptions<'a>,
    }

    impl SpecialWordsOperationsExecOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsExecOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsExecOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsExecOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsFinallyOptionsBuilder<'a> {
        options: SpecialWordsOperationsFinallyOptions<'a>,
    }

    impl SpecialWordsOperationsFinallyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsFinallyOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsFinallyOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsFinallyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsForOptionsBuilder<'a> {
        options: SpecialWordsOperationsForOptions<'a>,
    }

    impl SpecialWordsOperationsForOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsForOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsForOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsForOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsFromOptionsBuilder<'a> {
        options: SpecialWordsOperationsFromOptions<'a>,
    }

    impl SpecialWordsOperationsFromOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsFromOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsFromOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsFromOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsGlobalOptionsBuilder<'a> {
        options: SpecialWordsOperationsGlobalOptions<'a>,
    }

    impl SpecialWordsOperationsGlobalOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsGlobalOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsGlobalOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsGlobalOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsIfOptionsBuilder<'a> {
        options: SpecialWordsOperationsIfOptions<'a>,
    }

    impl SpecialWordsOperationsIfOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsIfOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsIfOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsIfOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsImportOptionsBuilder<'a> {
        options: SpecialWordsOperationsImportOptions<'a>,
    }

    impl SpecialWordsOperationsImportOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsImportOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsImportOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsImportOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsInOptionsBuilder<'a> {
        options: SpecialWordsOperationsInOptions<'a>,
    }

    impl SpecialWordsOperationsInOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsInOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsInOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsInOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsIsOptionsBuilder<'a> {
        options: SpecialWordsOperationsIsOptions<'a>,
    }

    impl SpecialWordsOperationsIsOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsIsOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsIsOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsIsOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsLambdaOptionsBuilder<'a> {
        options: SpecialWordsOperationsLambdaOptions<'a>,
    }

    impl SpecialWordsOperationsLambdaOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsLambdaOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsLambdaOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsLambdaOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsNotOptionsBuilder<'a> {
        options: SpecialWordsOperationsNotOptions<'a>,
    }

    impl SpecialWordsOperationsNotOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsNotOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsNotOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsNotOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsOrOptionsBuilder<'a> {
        options: SpecialWordsOperationsOrOptions<'a>,
    }

    impl SpecialWordsOperationsOrOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsOrOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsOrOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsOrOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsPassOptionsBuilder<'a> {
        options: SpecialWordsOperationsPassOptions<'a>,
    }

    impl SpecialWordsOperationsPassOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsPassOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsPassOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsPassOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsRaiseOptionsBuilder<'a> {
        options: SpecialWordsOperationsRaiseOptions<'a>,
    }

    impl SpecialWordsOperationsRaiseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsRaiseOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsRaiseOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsRaiseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsReturnOptionsBuilder<'a> {
        options: SpecialWordsOperationsReturnOptions<'a>,
    }

    impl SpecialWordsOperationsReturnOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsReturnOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsReturnOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsReturnOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsTryOptionsBuilder<'a> {
        options: SpecialWordsOperationsTryOptions<'a>,
    }

    impl SpecialWordsOperationsTryOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsTryOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsTryOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsTryOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsWhileOptionsBuilder<'a> {
        options: SpecialWordsOperationsWhileOptions<'a>,
    }

    impl SpecialWordsOperationsWhileOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsWhileOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsWhileOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsWhileOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsWithOptionsBuilder<'a> {
        options: SpecialWordsOperationsWithOptions<'a>,
    }

    impl SpecialWordsOperationsWithOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsWithOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsWithOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsWithOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsOperationsYieldOptionsBuilder<'a> {
        options: SpecialWordsOperationsYieldOptions<'a>,
    }

    impl SpecialWordsOperationsYieldOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsOperationsYieldOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsOperationsYieldOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsOperationsYieldOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
