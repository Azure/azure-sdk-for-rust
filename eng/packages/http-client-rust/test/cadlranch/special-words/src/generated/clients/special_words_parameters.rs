// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, Response,
    Result, Url,
};

pub struct SpecialWordsParameters {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl SpecialWordsParameters {
    pub async fn with_and(
        &self,
        and: impl Into<String>,
        options: Option<SpecialWordsParametersWithAndOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/and");
        url.query_pairs_mut().append_pair("and", &and.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_as(
        &self,
        as_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithAsOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/as");
        url.query_pairs_mut().append_pair("as", &as_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_assert(
        &self,
        assert: impl Into<String>,
        options: Option<SpecialWordsParametersWithAssertOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/assert");
        url.query_pairs_mut().append_pair("assert", &assert.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_async(
        &self,
        async_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithAsyncOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/async");
        url.query_pairs_mut()
            .append_pair("async", &async_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_await(
        &self,
        await_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithAwaitOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/await");
        url.query_pairs_mut()
            .append_pair("await", &await_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_break(
        &self,
        break_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithBreakOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/break");
        url.query_pairs_mut()
            .append_pair("break", &break_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_cancellation_token(
        &self,
        cancellation_token: impl Into<String>,
        options: Option<SpecialWordsParametersWithCancellationTokenOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/cancellationToken");
        url.query_pairs_mut()
            .append_pair("cancellationToken", &cancellation_token.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_class(
        &self,
        class: impl Into<String>,
        options: Option<SpecialWordsParametersWithClassOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/class");
        url.query_pairs_mut().append_pair("class", &class.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_constructor(
        &self,
        constructor: impl Into<String>,
        options: Option<SpecialWordsParametersWithConstructorOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/constructor");
        url.query_pairs_mut()
            .append_pair("constructor", &constructor.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_continue(
        &self,
        continue_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithContinueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/continue");
        url.query_pairs_mut()
            .append_pair("continue", &continue_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_def(
        &self,
        def: impl Into<String>,
        options: Option<SpecialWordsParametersWithDefOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/def");
        url.query_pairs_mut().append_pair("def", &def.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_del(
        &self,
        del: impl Into<String>,
        options: Option<SpecialWordsParametersWithDelOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/del");
        url.query_pairs_mut().append_pair("del", &del.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_elif(
        &self,
        elif: impl Into<String>,
        options: Option<SpecialWordsParametersWithElifOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/elif");
        url.query_pairs_mut().append_pair("elif", &elif.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_else(
        &self,
        else_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithElseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/else");
        url.query_pairs_mut()
            .append_pair("else", &else_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_except(
        &self,
        except: impl Into<String>,
        options: Option<SpecialWordsParametersWithExceptOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/except");
        url.query_pairs_mut().append_pair("except", &except.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_exec(
        &self,
        exec: impl Into<String>,
        options: Option<SpecialWordsParametersWithExecOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/exec");
        url.query_pairs_mut().append_pair("exec", &exec.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_finally(
        &self,
        finally: impl Into<String>,
        options: Option<SpecialWordsParametersWithFinallyOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/finally");
        url.query_pairs_mut()
            .append_pair("finally", &finally.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_for(
        &self,
        for_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithForOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/for");
        url.query_pairs_mut().append_pair("for", &for_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_from(
        &self,
        from: impl Into<String>,
        options: Option<SpecialWordsParametersWithFromOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/from");
        url.query_pairs_mut().append_pair("from", &from.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_global(
        &self,
        global: impl Into<String>,
        options: Option<SpecialWordsParametersWithGlobalOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/global");
        url.query_pairs_mut().append_pair("global", &global.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_if(
        &self,
        if_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithIfOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/if");
        url.query_pairs_mut().append_pair("if", &if_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_import(
        &self,
        import: impl Into<String>,
        options: Option<SpecialWordsParametersWithImportOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/import");
        url.query_pairs_mut().append_pair("import", &import.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_in(
        &self,
        in_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithInOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/in");
        url.query_pairs_mut().append_pair("in", &in_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_is(
        &self,
        is: impl Into<String>,
        options: Option<SpecialWordsParametersWithIsOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/is");
        url.query_pairs_mut().append_pair("is", &is.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_lambda(
        &self,
        lambda: impl Into<String>,
        options: Option<SpecialWordsParametersWithLambdaOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/lambda");
        url.query_pairs_mut().append_pair("lambda", &lambda.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_not(
        &self,
        not: impl Into<String>,
        options: Option<SpecialWordsParametersWithNotOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/not");
        url.query_pairs_mut().append_pair("not", &not.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_or(
        &self,
        or: impl Into<String>,
        options: Option<SpecialWordsParametersWithOrOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/or");
        url.query_pairs_mut().append_pair("or", &or.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_pass(
        &self,
        pass: impl Into<String>,
        options: Option<SpecialWordsParametersWithPassOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/pass");
        url.query_pairs_mut().append_pair("pass", &pass.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_raise(
        &self,
        raise: impl Into<String>,
        options: Option<SpecialWordsParametersWithRaiseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/raise");
        url.query_pairs_mut().append_pair("raise", &raise.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_return(
        &self,
        return_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithReturnOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/return");
        url.query_pairs_mut()
            .append_pair("return", &return_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_try(
        &self,
        try_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithTryOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/try");
        url.query_pairs_mut().append_pair("try", &try_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_while(
        &self,
        while_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithWhileOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/while");
        url.query_pairs_mut()
            .append_pair("while", &while_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_with(
        &self,
        with: impl Into<String>,
        options: Option<SpecialWordsParametersWithOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/with");
        url.query_pairs_mut().append_pair("with", &with.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn with_yield(
        &self,
        yield_param: impl Into<String>,
        options: Option<SpecialWordsParametersWithYieldOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/special-words/parameters/yield");
        url.query_pairs_mut()
            .append_pair("yield", &yield_param.into());
        let mut request = Request::new(url, Method::Get);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithAndOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithAndOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithAndOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithAndOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithAsOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithAsOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithAsOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithAsOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithAssertOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithAssertOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithAssertOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithAssertOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithAsyncOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithAsyncOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithAsyncOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithAsyncOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithAwaitOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithAwaitOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithAwaitOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithAwaitOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithBreakOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithBreakOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithBreakOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithBreakOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithCancellationTokenOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithCancellationTokenOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithCancellationTokenOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithCancellationTokenOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithClassOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithClassOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithClassOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithClassOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithConstructorOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithConstructorOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithConstructorOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithConstructorOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithContinueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithContinueOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithContinueOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithContinueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithDefOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithDefOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithDefOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithDefOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithDelOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithDelOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithDelOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithDelOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithElifOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithElifOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithElifOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithElifOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithElseOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithElseOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithElseOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithElseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithExceptOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithExceptOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithExceptOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithExceptOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithExecOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithExecOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithExecOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithExecOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithFinallyOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithFinallyOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithFinallyOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithFinallyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithForOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithForOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithForOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithForOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithFromOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithFromOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithFromOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithFromOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithGlobalOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithGlobalOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithGlobalOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithGlobalOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithIfOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithIfOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithIfOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithIfOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithImportOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithImportOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithImportOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithImportOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithInOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithInOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithInOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithInOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithIsOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithIsOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithIsOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithIsOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithLambdaOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithLambdaOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithLambdaOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithLambdaOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithNotOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithNotOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithNotOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithNotOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithOrOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithOrOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithOrOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithOrOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithPassOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithPassOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithPassOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithPassOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithRaiseOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithRaiseOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithRaiseOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithRaiseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithReturnOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithReturnOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithReturnOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithReturnOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithTryOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithTryOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithTryOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithTryOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithWhileOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithWhileOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithWhileOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithWhileOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct SpecialWordsParametersWithYieldOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> SpecialWordsParametersWithYieldOptions<'a> {
    pub fn builder() -> builders::SpecialWordsParametersWithYieldOptionsBuilder<'a> {
        builders::SpecialWordsParametersWithYieldOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct SpecialWordsParametersWithAndOptionsBuilder<'a> {
        options: SpecialWordsParametersWithAndOptions<'a>,
    }

    impl SpecialWordsParametersWithAndOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithAndOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithAndOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithAndOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithAsOptionsBuilder<'a> {
        options: SpecialWordsParametersWithAsOptions<'a>,
    }

    impl SpecialWordsParametersWithAsOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithAsOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithAsOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithAsOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithAssertOptionsBuilder<'a> {
        options: SpecialWordsParametersWithAssertOptions<'a>,
    }

    impl SpecialWordsParametersWithAssertOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithAssertOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithAssertOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithAssertOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithAsyncOptionsBuilder<'a> {
        options: SpecialWordsParametersWithAsyncOptions<'a>,
    }

    impl SpecialWordsParametersWithAsyncOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithAsyncOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithAsyncOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithAsyncOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithAwaitOptionsBuilder<'a> {
        options: SpecialWordsParametersWithAwaitOptions<'a>,
    }

    impl SpecialWordsParametersWithAwaitOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithAwaitOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithAwaitOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithAwaitOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithBreakOptionsBuilder<'a> {
        options: SpecialWordsParametersWithBreakOptions<'a>,
    }

    impl SpecialWordsParametersWithBreakOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithBreakOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithBreakOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithBreakOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithCancellationTokenOptionsBuilder<'a> {
        options: SpecialWordsParametersWithCancellationTokenOptions<'a>,
    }

    impl SpecialWordsParametersWithCancellationTokenOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithCancellationTokenOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithCancellationTokenOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a>
        for SpecialWordsParametersWithCancellationTokenOptionsBuilder<'a>
    {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithClassOptionsBuilder<'a> {
        options: SpecialWordsParametersWithClassOptions<'a>,
    }

    impl SpecialWordsParametersWithClassOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithClassOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithClassOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithClassOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithConstructorOptionsBuilder<'a> {
        options: SpecialWordsParametersWithConstructorOptions<'a>,
    }

    impl SpecialWordsParametersWithConstructorOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithConstructorOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithConstructorOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a>
        for SpecialWordsParametersWithConstructorOptionsBuilder<'a>
    {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithContinueOptionsBuilder<'a> {
        options: SpecialWordsParametersWithContinueOptions<'a>,
    }

    impl SpecialWordsParametersWithContinueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithContinueOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithContinueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithContinueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithDefOptionsBuilder<'a> {
        options: SpecialWordsParametersWithDefOptions<'a>,
    }

    impl SpecialWordsParametersWithDefOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithDefOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithDefOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithDefOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithDelOptionsBuilder<'a> {
        options: SpecialWordsParametersWithDelOptions<'a>,
    }

    impl SpecialWordsParametersWithDelOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithDelOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithDelOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithDelOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithElifOptionsBuilder<'a> {
        options: SpecialWordsParametersWithElifOptions<'a>,
    }

    impl SpecialWordsParametersWithElifOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithElifOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithElifOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithElifOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithElseOptionsBuilder<'a> {
        options: SpecialWordsParametersWithElseOptions<'a>,
    }

    impl SpecialWordsParametersWithElseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithElseOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithElseOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithElseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithExceptOptionsBuilder<'a> {
        options: SpecialWordsParametersWithExceptOptions<'a>,
    }

    impl SpecialWordsParametersWithExceptOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithExceptOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithExceptOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithExceptOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithExecOptionsBuilder<'a> {
        options: SpecialWordsParametersWithExecOptions<'a>,
    }

    impl SpecialWordsParametersWithExecOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithExecOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithExecOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithExecOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithFinallyOptionsBuilder<'a> {
        options: SpecialWordsParametersWithFinallyOptions<'a>,
    }

    impl SpecialWordsParametersWithFinallyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithFinallyOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithFinallyOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithFinallyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithForOptionsBuilder<'a> {
        options: SpecialWordsParametersWithForOptions<'a>,
    }

    impl SpecialWordsParametersWithForOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithForOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithForOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithForOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithFromOptionsBuilder<'a> {
        options: SpecialWordsParametersWithFromOptions<'a>,
    }

    impl SpecialWordsParametersWithFromOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithFromOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithFromOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithFromOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithGlobalOptionsBuilder<'a> {
        options: SpecialWordsParametersWithGlobalOptions<'a>,
    }

    impl SpecialWordsParametersWithGlobalOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithGlobalOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithGlobalOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithGlobalOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithIfOptionsBuilder<'a> {
        options: SpecialWordsParametersWithIfOptions<'a>,
    }

    impl SpecialWordsParametersWithIfOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithIfOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithIfOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithIfOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithImportOptionsBuilder<'a> {
        options: SpecialWordsParametersWithImportOptions<'a>,
    }

    impl SpecialWordsParametersWithImportOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithImportOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithImportOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithImportOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithInOptionsBuilder<'a> {
        options: SpecialWordsParametersWithInOptions<'a>,
    }

    impl SpecialWordsParametersWithInOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithInOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithInOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithInOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithIsOptionsBuilder<'a> {
        options: SpecialWordsParametersWithIsOptions<'a>,
    }

    impl SpecialWordsParametersWithIsOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithIsOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithIsOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithIsOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithLambdaOptionsBuilder<'a> {
        options: SpecialWordsParametersWithLambdaOptions<'a>,
    }

    impl SpecialWordsParametersWithLambdaOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithLambdaOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithLambdaOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithLambdaOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithNotOptionsBuilder<'a> {
        options: SpecialWordsParametersWithNotOptions<'a>,
    }

    impl SpecialWordsParametersWithNotOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithNotOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithNotOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithNotOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithOrOptionsBuilder<'a> {
        options: SpecialWordsParametersWithOrOptions<'a>,
    }

    impl SpecialWordsParametersWithOrOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithOrOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithOrOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithOrOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithPassOptionsBuilder<'a> {
        options: SpecialWordsParametersWithPassOptions<'a>,
    }

    impl SpecialWordsParametersWithPassOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithPassOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithPassOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithPassOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithRaiseOptionsBuilder<'a> {
        options: SpecialWordsParametersWithRaiseOptions<'a>,
    }

    impl SpecialWordsParametersWithRaiseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithRaiseOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithRaiseOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithRaiseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithReturnOptionsBuilder<'a> {
        options: SpecialWordsParametersWithReturnOptions<'a>,
    }

    impl SpecialWordsParametersWithReturnOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithReturnOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithReturnOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithReturnOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithTryOptionsBuilder<'a> {
        options: SpecialWordsParametersWithTryOptions<'a>,
    }

    impl SpecialWordsParametersWithTryOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithTryOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithTryOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithTryOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithWhileOptionsBuilder<'a> {
        options: SpecialWordsParametersWithWhileOptions<'a>,
    }

    impl SpecialWordsParametersWithWhileOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithWhileOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithWhileOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithWhileOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithOptionsBuilder<'a> {
        options: SpecialWordsParametersWithOptions<'a>,
    }

    impl SpecialWordsParametersWithOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct SpecialWordsParametersWithYieldOptionsBuilder<'a> {
        options: SpecialWordsParametersWithYieldOptions<'a>,
    }

    impl SpecialWordsParametersWithYieldOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: SpecialWordsParametersWithYieldOptions::default(),
            }
        }

        pub fn build(&self) -> SpecialWordsParametersWithYieldOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for SpecialWordsParametersWithYieldOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
