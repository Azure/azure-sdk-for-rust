// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};

pub struct ArrayDurationValue {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl ArrayDurationValue {
    pub async fn get(
        &self,
        options: Option<ArrayDurationValueGetOptions<'_>>,
    ) -> Result<Response<Vec<String>>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/array/duration");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn put(
        &self,
        body: RequestContent<Vec<String>>,
        options: Option<ArrayDurationValuePutOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/array/duration");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct ArrayDurationValueGetOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ArrayDurationValueGetOptions<'a> {
    pub fn builder() -> builders::ArrayDurationValueGetOptionsBuilder<'a> {
        builders::ArrayDurationValueGetOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct ArrayDurationValuePutOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ArrayDurationValuePutOptions<'a> {
    pub fn builder() -> builders::ArrayDurationValuePutOptionsBuilder<'a> {
        builders::ArrayDurationValuePutOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct ArrayDurationValueGetOptionsBuilder<'a> {
        options: ArrayDurationValueGetOptions<'a>,
    }

    impl ArrayDurationValueGetOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ArrayDurationValueGetOptions::default(),
            }
        }

        pub fn build(&self) -> ArrayDurationValueGetOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ArrayDurationValueGetOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct ArrayDurationValuePutOptionsBuilder<'a> {
        options: ArrayDurationValuePutOptions<'a>,
    }

    impl ArrayDurationValuePutOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ArrayDurationValuePutOptions::default(),
            }
        }

        pub fn build(&self) -> ArrayDurationValuePutOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ArrayDurationValuePutOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
