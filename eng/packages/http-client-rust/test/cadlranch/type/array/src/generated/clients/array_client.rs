// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::array_boolean_value::ArrayBooleanValue;
use crate::array_datetime_value::ArrayDatetimeValue;
use crate::array_duration_value::ArrayDurationValue;
use crate::array_float32_value::ArrayFloat32Value;
use crate::array_int32_value::ArrayInt32Value;
use crate::array_int64_value::ArrayInt64Value;
use crate::array_model_value::ArrayModelValue;
use crate::array_nullable_boolean_value::ArrayNullableBooleanValue;
use crate::array_nullable_float_value::ArrayNullableFloatValue;
use crate::array_nullable_int32_value::ArrayNullableInt32Value;
use crate::array_nullable_model_value::ArrayNullableModelValue;
use crate::array_nullable_string_value::ArrayNullableStringValue;
use crate::array_string_value::ArrayStringValue;
use crate::array_unknown_value::ArrayUnknownValue;
use azure_core::builders::ClientOptionsBuilder;
use azure_core::{ClientOptions, Pipeline, Policy, Result, RetryOptions, TransportOptions, Url};
use std::sync::Arc;

pub struct ArrayClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct ArrayClientOptions {
    client_options: ClientOptions,
}

impl ArrayClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<ArrayClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub fn get_array_boolean_value_client(&self) -> ArrayBooleanValue {
        ArrayBooleanValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_datetime_value_client(&self) -> ArrayDatetimeValue {
        ArrayDatetimeValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_duration_value_client(&self) -> ArrayDurationValue {
        ArrayDurationValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_float32_value_client(&self) -> ArrayFloat32Value {
        ArrayFloat32Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_int32_value_client(&self) -> ArrayInt32Value {
        ArrayInt32Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_int64_value_client(&self) -> ArrayInt64Value {
        ArrayInt64Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_model_value_client(&self) -> ArrayModelValue {
        ArrayModelValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_nullable_boolean_value_client(&self) -> ArrayNullableBooleanValue {
        ArrayNullableBooleanValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_nullable_float_value_client(&self) -> ArrayNullableFloatValue {
        ArrayNullableFloatValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_nullable_int32_value_client(&self) -> ArrayNullableInt32Value {
        ArrayNullableInt32Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_nullable_model_value_client(&self) -> ArrayNullableModelValue {
        ArrayNullableModelValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_nullable_string_value_client(&self) -> ArrayNullableStringValue {
        ArrayNullableStringValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_string_value_client(&self) -> ArrayStringValue {
        ArrayStringValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_array_unknown_value_client(&self) -> ArrayUnknownValue {
        ArrayUnknownValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }
}

impl ArrayClientOptions {
    pub fn builder() -> builders::ArrayClientOptionsBuilder {
        builders::ArrayClientOptionsBuilder::new()
    }
}

impl Default for ArrayClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for ArrayClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

pub mod builders {
    use super::*;

    pub struct ArrayClientOptionsBuilder {
        options: ArrayClientOptions,
    }

    impl ArrayClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: ArrayClientOptions::default(),
            }
        }

        pub fn build(&self) -> ArrayClientOptions {
            self.options.clone()
        }
    }
}
