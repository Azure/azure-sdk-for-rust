// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{RequestContent, Response};
use serde::{Deserialize, Serialize};

/// Empty model used in operation parameters
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct EmptyInput {}

/// Empty model used in both parameter and return type
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct EmptyInputOutput {}

/// Empty model used in operation return type
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct EmptyOutput {}

impl TryFrom<EmptyInput> for RequestContent<EmptyInput> {
    type Error = azure_core::Error;
    fn try_from(value: EmptyInput) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<EmptyInputOutput> for RequestContent<EmptyInputOutput> {
    type Error = azure_core::Error;
    fn try_from(value: EmptyInputOutput) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<EmptyInputOutput>> for EmptyInputOutput {
    type Error = azure_core::Error;
    fn try_from(value: Response<EmptyInputOutput>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<EmptyInputOutput>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<Response<EmptyOutput>> for EmptyOutput {
    type Error = azure_core::Error;
    fn try_from(value: Response<EmptyOutput>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<EmptyOutput>();
        let r = block_on(f())?;
        Ok(r)
    }
}
