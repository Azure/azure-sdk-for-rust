// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{EmptyInput, EmptyInputOutput, EmptyOutput};
use azure_core::builders::{ClientMethodOptionsBuilder, ClientOptionsBuilder};
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, ClientOptions, Context, Method, Pipeline, Policy,
    Request, RequestContent, Response, Result, RetryOptions, TransportOptions, Url,
};
use std::sync::Arc;

pub struct EmptyClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct EmptyClientOptions {
    client_options: ClientOptions,
}

impl EmptyClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<EmptyClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub async fn get_empty(
        &self,
        options: Option<EmptyClientGetEmptyOptions<'_>>,
    ) -> Result<Response<EmptyOutput>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/empty/alone");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn post_round_trip_empty(
        &self,
        body: RequestContent<EmptyInputOutput>,
        options: Option<EmptyClientPostRoundTripEmptyOptions<'_>>,
    ) -> Result<Response<EmptyInputOutput>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/empty/round-trip");
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn put_empty(
        &self,
        input: RequestContent<EmptyInput>,
        options: Option<EmptyClientPutEmptyOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/empty/alone");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(input);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

impl EmptyClientOptions {
    pub fn builder() -> builders::EmptyClientOptionsBuilder {
        builders::EmptyClientOptionsBuilder::new()
    }
}

impl Default for EmptyClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for EmptyClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

#[derive(Clone, Debug, Default)]
pub struct EmptyClientGetEmptyOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> EmptyClientGetEmptyOptions<'a> {
    pub fn builder() -> builders::EmptyClientGetEmptyOptionsBuilder<'a> {
        builders::EmptyClientGetEmptyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct EmptyClientPostRoundTripEmptyOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> EmptyClientPostRoundTripEmptyOptions<'a> {
    pub fn builder() -> builders::EmptyClientPostRoundTripEmptyOptionsBuilder<'a> {
        builders::EmptyClientPostRoundTripEmptyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct EmptyClientPutEmptyOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> EmptyClientPutEmptyOptions<'a> {
    pub fn builder() -> builders::EmptyClientPutEmptyOptionsBuilder<'a> {
        builders::EmptyClientPutEmptyOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct EmptyClientOptionsBuilder {
        options: EmptyClientOptions,
    }

    impl EmptyClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: EmptyClientOptions::default(),
            }
        }

        pub fn build(&self) -> EmptyClientOptions {
            self.options.clone()
        }
    }

    pub struct EmptyClientGetEmptyOptionsBuilder<'a> {
        options: EmptyClientGetEmptyOptions<'a>,
    }

    impl EmptyClientGetEmptyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: EmptyClientGetEmptyOptions::default(),
            }
        }

        pub fn build(&self) -> EmptyClientGetEmptyOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for EmptyClientGetEmptyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct EmptyClientPostRoundTripEmptyOptionsBuilder<'a> {
        options: EmptyClientPostRoundTripEmptyOptions<'a>,
    }

    impl EmptyClientPostRoundTripEmptyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: EmptyClientPostRoundTripEmptyOptions::default(),
            }
        }

        pub fn build(&self) -> EmptyClientPostRoundTripEmptyOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for EmptyClientPostRoundTripEmptyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct EmptyClientPutEmptyOptionsBuilder<'a> {
        options: EmptyClientPutEmptyOptions<'a>,
    }

    impl EmptyClientPutEmptyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: EmptyClientPutEmptyOptions::default(),
            }
        }

        pub fn build(&self) -> EmptyClientPutEmptyOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for EmptyClientPutEmptyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
