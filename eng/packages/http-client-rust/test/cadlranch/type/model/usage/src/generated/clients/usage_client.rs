// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{InputOutputRecord, InputRecord, OutputRecord};
use azure_core::builders::{ClientMethodOptionsBuilder, ClientOptionsBuilder};
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, ClientOptions, Context, Method, Pipeline, Policy,
    Request, RequestContent, Response, Result, RetryOptions, TransportOptions, Url,
};
use std::sync::Arc;

pub struct UsageClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct UsageClientOptions {
    client_options: ClientOptions,
}

impl UsageClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<UsageClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub async fn input(
        &self,
        input: RequestContent<InputRecord>,
        options: Option<UsageClientInputOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/usage/input");
        let mut request = Request::new(url, Method::Post);
        request.insert_header("content-type", "application/json");
        request.set_body(input);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn input_and_output(
        &self,
        body: RequestContent<InputOutputRecord>,
        options: Option<UsageClientInputAndOutputOptions<'_>>,
    ) -> Result<Response<InputOutputRecord>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/usage/input-output");
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn output(
        &self,
        options: Option<UsageClientOutputOptions<'_>>,
    ) -> Result<Response<OutputRecord>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/model/usage/output");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

impl UsageClientOptions {
    pub fn builder() -> builders::UsageClientOptionsBuilder {
        builders::UsageClientOptionsBuilder::new()
    }
}

impl Default for UsageClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for UsageClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

#[derive(Clone, Debug, Default)]
pub struct UsageClientInputOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> UsageClientInputOptions<'a> {
    pub fn builder() -> builders::UsageClientInputOptionsBuilder<'a> {
        builders::UsageClientInputOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct UsageClientInputAndOutputOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> UsageClientInputAndOutputOptions<'a> {
    pub fn builder() -> builders::UsageClientInputAndOutputOptionsBuilder<'a> {
        builders::UsageClientInputAndOutputOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct UsageClientOutputOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> UsageClientOutputOptions<'a> {
    pub fn builder() -> builders::UsageClientOutputOptionsBuilder<'a> {
        builders::UsageClientOutputOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct UsageClientOptionsBuilder {
        options: UsageClientOptions,
    }

    impl UsageClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: UsageClientOptions::default(),
            }
        }

        pub fn build(&self) -> UsageClientOptions {
            self.options.clone()
        }
    }

    pub struct UsageClientInputOptionsBuilder<'a> {
        options: UsageClientInputOptions<'a>,
    }

    impl UsageClientInputOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: UsageClientInputOptions::default(),
            }
        }

        pub fn build(&self) -> UsageClientInputOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for UsageClientInputOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct UsageClientInputAndOutputOptionsBuilder<'a> {
        options: UsageClientInputAndOutputOptions<'a>,
    }

    impl UsageClientInputAndOutputOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: UsageClientInputAndOutputOptions::default(),
            }
        }

        pub fn build(&self) -> UsageClientInputAndOutputOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for UsageClientInputAndOutputOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct UsageClientOutputOptionsBuilder<'a> {
        options: UsageClientOutputOptions<'a>,
    }

    impl UsageClientOutputOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: UsageClientOutputOptions::default(),
            }
        }

        pub fn build(&self) -> UsageClientOutputOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for UsageClientOutputOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
