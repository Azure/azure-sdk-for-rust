// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{RequestContent, Response};
use serde::{Deserialize, Serialize};

/// Record used both as operation parameter and return type
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct InputOutputRecord {
    #[serde(rename = "requiredProp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required_prop: Option<String>,
}

/// Record used in operation parameters
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct InputRecord {
    #[serde(rename = "requiredProp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required_prop: Option<String>,
}

/// Record used in operation return type
#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct OutputRecord {
    #[serde(rename = "requiredProp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required_prop: Option<String>,
}

impl TryFrom<InputOutputRecord> for RequestContent<InputOutputRecord> {
    type Error = azure_core::Error;
    fn try_from(value: InputOutputRecord) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<InputOutputRecord>> for InputOutputRecord {
    type Error = azure_core::Error;
    fn try_from(value: Response<InputOutputRecord>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<InputOutputRecord>();
        let r = block_on(f())?;
        Ok(r)
    }
}

impl TryFrom<InputRecord> for RequestContent<InputRecord> {
    type Error = azure_core::Error;
    fn try_from(value: InputRecord) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<OutputRecord>> for OutputRecord {
    type Error = azure_core::Error;
    fn try_from(value: Response<OutputRecord>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<OutputRecord>();
        let r = block_on(f())?;
        Ok(r)
    }
}
