// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::DaysOfWeekEnum;
use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};

pub struct FixedString {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl FixedString {
    /// getKnownValue
    pub async fn get_known_value(
        &self,
        options: Option<FixedStringGetKnownValueOptions<'_>>,
    ) -> Result<Response<DaysOfWeekEnum>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/fixed/string/known-value");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// putKnownValue
    pub async fn put_known_value(
        &self,
        body: RequestContent<DaysOfWeekEnum>,
        options: Option<FixedStringPutKnownValueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/fixed/string/known-value");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// putUnknownValue
    pub async fn put_unknown_value(
        &self,
        body: RequestContent<DaysOfWeekEnum>,
        options: Option<FixedStringPutUnknownValueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/fixed/string/unknown-value");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct FixedStringGetKnownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> FixedStringGetKnownValueOptions<'a> {
    pub fn builder() -> builders::FixedStringGetKnownValueOptionsBuilder<'a> {
        builders::FixedStringGetKnownValueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct FixedStringPutKnownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> FixedStringPutKnownValueOptions<'a> {
    pub fn builder() -> builders::FixedStringPutKnownValueOptionsBuilder<'a> {
        builders::FixedStringPutKnownValueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct FixedStringPutUnknownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> FixedStringPutUnknownValueOptions<'a> {
    pub fn builder() -> builders::FixedStringPutUnknownValueOptionsBuilder<'a> {
        builders::FixedStringPutUnknownValueOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct FixedStringGetKnownValueOptionsBuilder<'a> {
        options: FixedStringGetKnownValueOptions<'a>,
    }

    impl FixedStringGetKnownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: FixedStringGetKnownValueOptions::default(),
            }
        }

        pub fn build(&self) -> FixedStringGetKnownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for FixedStringGetKnownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct FixedStringPutKnownValueOptionsBuilder<'a> {
        options: FixedStringPutKnownValueOptions<'a>,
    }

    impl FixedStringPutKnownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: FixedStringPutKnownValueOptions::default(),
            }
        }

        pub fn build(&self) -> FixedStringPutKnownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for FixedStringPutKnownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct FixedStringPutUnknownValueOptionsBuilder<'a> {
        options: FixedStringPutUnknownValueOptions<'a>,
    }

    impl FixedStringPutUnknownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: FixedStringPutUnknownValueOptions::default(),
            }
        }

        pub fn build(&self) -> FixedStringPutUnknownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for FixedStringPutUnknownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
