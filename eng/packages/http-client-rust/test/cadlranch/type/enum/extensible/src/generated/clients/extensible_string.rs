// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::DaysOfWeekExtensibleEnum;
use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};

pub struct ExtensibleString {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl ExtensibleString {
    pub async fn get_known_value(
        &self,
        options: Option<ExtensibleStringGetKnownValueOptions<'_>>,
    ) -> Result<Response<DaysOfWeekExtensibleEnum>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/extensible/string/known-value");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn get_unknown_value(
        &self,
        options: Option<ExtensibleStringGetUnknownValueOptions<'_>>,
    ) -> Result<Response<DaysOfWeekExtensibleEnum>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/extensible/string/unknown-value");
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn put_known_value(
        &self,
        body: RequestContent<DaysOfWeekExtensibleEnum>,
        options: Option<ExtensibleStringPutKnownValueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/extensible/string/known-value");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    pub async fn put_unknown_value(
        &self,
        body: RequestContent<DaysOfWeekExtensibleEnum>,
        options: Option<ExtensibleStringPutUnknownValueOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/type/enum/extensible/string/unknown-value");
        let mut request = Request::new(url, Method::Put);
        request.insert_header("content-type", "application/json");
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct ExtensibleStringGetKnownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ExtensibleStringGetKnownValueOptions<'a> {
    pub fn builder() -> builders::ExtensibleStringGetKnownValueOptionsBuilder<'a> {
        builders::ExtensibleStringGetKnownValueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct ExtensibleStringGetUnknownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ExtensibleStringGetUnknownValueOptions<'a> {
    pub fn builder() -> builders::ExtensibleStringGetUnknownValueOptionsBuilder<'a> {
        builders::ExtensibleStringGetUnknownValueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct ExtensibleStringPutKnownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ExtensibleStringPutKnownValueOptions<'a> {
    pub fn builder() -> builders::ExtensibleStringPutKnownValueOptionsBuilder<'a> {
        builders::ExtensibleStringPutKnownValueOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct ExtensibleStringPutUnknownValueOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> ExtensibleStringPutUnknownValueOptions<'a> {
    pub fn builder() -> builders::ExtensibleStringPutUnknownValueOptionsBuilder<'a> {
        builders::ExtensibleStringPutUnknownValueOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct ExtensibleStringGetKnownValueOptionsBuilder<'a> {
        options: ExtensibleStringGetKnownValueOptions<'a>,
    }

    impl ExtensibleStringGetKnownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ExtensibleStringGetKnownValueOptions::default(),
            }
        }

        pub fn build(&self) -> ExtensibleStringGetKnownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ExtensibleStringGetKnownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct ExtensibleStringGetUnknownValueOptionsBuilder<'a> {
        options: ExtensibleStringGetUnknownValueOptions<'a>,
    }

    impl ExtensibleStringGetUnknownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ExtensibleStringGetUnknownValueOptions::default(),
            }
        }

        pub fn build(&self) -> ExtensibleStringGetUnknownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ExtensibleStringGetUnknownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct ExtensibleStringPutKnownValueOptionsBuilder<'a> {
        options: ExtensibleStringPutKnownValueOptions<'a>,
    }

    impl ExtensibleStringPutKnownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ExtensibleStringPutKnownValueOptions::default(),
            }
        }

        pub fn build(&self) -> ExtensibleStringPutKnownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ExtensibleStringPutKnownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct ExtensibleStringPutUnknownValueOptionsBuilder<'a> {
        options: ExtensibleStringPutUnknownValueOptions<'a>,
    }

    impl ExtensibleStringPutUnknownValueOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: ExtensibleStringPutUnknownValueOptions::default(),
            }
        }

        pub fn build(&self) -> ExtensibleStringPutUnknownValueOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for ExtensibleStringPutUnknownValueOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
