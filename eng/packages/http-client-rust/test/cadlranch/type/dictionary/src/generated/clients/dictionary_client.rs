// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::dictionary_boolean_value::DictionaryBooleanValue;
use crate::dictionary_datetime_value::DictionaryDatetimeValue;
use crate::dictionary_duration_value::DictionaryDurationValue;
use crate::dictionary_float32_value::DictionaryFloat32Value;
use crate::dictionary_int32_value::DictionaryInt32Value;
use crate::dictionary_int64_value::DictionaryInt64Value;
use crate::dictionary_model_value::DictionaryModelValue;
use crate::dictionary_nullable_float_value::DictionaryNullableFloatValue;
use crate::dictionary_recursive_model_value::DictionaryRecursiveModelValue;
use crate::dictionary_string_value::DictionaryStringValue;
use crate::dictionary_unknown_value::DictionaryUnknownValue;
use azure_core::builders::ClientOptionsBuilder;
use azure_core::{ClientOptions, Pipeline, Policy, Result, RetryOptions, TransportOptions, Url};
use std::sync::Arc;

pub struct DictionaryClient {
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct DictionaryClientOptions {
    client_options: ClientOptions,
}

impl DictionaryClient {
    pub fn with_no_credential(
        endpoint: impl AsRef<str>,
        options: Option<DictionaryClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let options = options.unwrap_or_default();
        Ok(Self {
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                Vec::default(),
            ),
        })
    }

    pub fn get_dictionary_boolean_value_client(&self) -> DictionaryBooleanValue {
        DictionaryBooleanValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_datetime_value_client(&self) -> DictionaryDatetimeValue {
        DictionaryDatetimeValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_duration_value_client(&self) -> DictionaryDurationValue {
        DictionaryDurationValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_float32_value_client(&self) -> DictionaryFloat32Value {
        DictionaryFloat32Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_int32_value_client(&self) -> DictionaryInt32Value {
        DictionaryInt32Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_int64_value_client(&self) -> DictionaryInt64Value {
        DictionaryInt64Value {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_model_value_client(&self) -> DictionaryModelValue {
        DictionaryModelValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_nullable_float_value_client(&self) -> DictionaryNullableFloatValue {
        DictionaryNullableFloatValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_recursive_model_value_client(&self) -> DictionaryRecursiveModelValue {
        DictionaryRecursiveModelValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_string_value_client(&self) -> DictionaryStringValue {
        DictionaryStringValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }

    pub fn get_dictionary_unknown_value_client(&self) -> DictionaryUnknownValue {
        DictionaryUnknownValue {
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
        }
    }
}

impl DictionaryClientOptions {
    pub fn builder() -> builders::DictionaryClientOptionsBuilder {
        builders::DictionaryClientOptionsBuilder::new()
    }
}

impl Default for DictionaryClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for DictionaryClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

pub mod builders {
    use super::*;

    pub struct DictionaryClientOptionsBuilder {
        options: DictionaryClientOptions,
    }

    impl DictionaryClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: DictionaryClientOptions::default(),
            }
        }

        pub fn build(&self) -> DictionaryClientOptions {
            self.options.clone()
        }
    }
}
