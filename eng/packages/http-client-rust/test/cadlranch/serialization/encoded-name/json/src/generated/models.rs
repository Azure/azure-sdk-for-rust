// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use async_std::task::block_on;
use azure_core::{RequestContent, Response};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[non_exhaustive]
pub struct JsonEncodedNameModel {
    /// Pass in true
    #[serde(rename = "wireName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_name: Option<bool>,
}

impl TryFrom<JsonEncodedNameModel> for RequestContent<JsonEncodedNameModel> {
    type Error = azure_core::Error;
    fn try_from(value: JsonEncodedNameModel) -> Result<Self, Self::Error> {
        Ok(RequestContent::from(serde_json::to_vec(&value)?))
    }
}

impl TryFrom<Response<JsonEncodedNameModel>> for JsonEncodedNameModel {
    type Error = azure_core::Error;
    fn try_from(value: Response<JsonEncodedNameModel>) -> Result<Self, Self::Error> {
        let f = || value.into_body().json::<JsonEncodedNameModel>();
        let r = block_on(f())?;
        Ok(r)
    }
}
