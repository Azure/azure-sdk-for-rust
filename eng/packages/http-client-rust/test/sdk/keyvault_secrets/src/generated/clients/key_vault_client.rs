// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{
    BackupSecretResult, DeletedSecretBundle, SecretBundle, SecretRestoreParameters,
    SecretSetParameters, SecretUpdateParameters,
};
use azure_core::auth::TokenCredential;
use azure_core::builders::{ClientMethodOptionsBuilder, ClientOptionsBuilder};
use azure_core::{
    AsClientMethodOptions, BearerTokenCredentialPolicy, ClientMethodOptions, ClientOptions,
    Context, Method, Pipeline, Policy, Request, RequestContent, Response, Result, RetryOptions,
    TransportOptions, Url,
};
use std::sync::Arc;

pub struct KeyVaultClient {
    api_version: String,
    endpoint: Url,
    pipeline: Pipeline,
}

#[derive(Clone, Debug)]
pub struct KeyVaultClientOptions {
    api_version: String,
    client_options: ClientOptions,
}

impl KeyVaultClient {
    pub fn new(
        endpoint: impl AsRef<str>,
        credential: Arc<dyn TokenCredential>,
        options: Option<KeyVaultClientOptions>,
    ) -> Result<Self> {
        let mut endpoint = Url::parse(endpoint.as_ref())?;
        endpoint.query_pairs_mut().clear();
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://vault.azure.net/.default"],
        ));
        let options = options.unwrap_or_default();
        Ok(Self {
            api_version: options.api_version,
            endpoint,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Backs up the specified secret.
    ///
    /// Requests that a backup of the specified secret be downloaded to the client. All
    /// versions of the secret will be downloaded. This operation requires the
    /// secrets/backup permission.
    pub async fn backup_secret(
        &self,
        secret_name: impl Into<String>,
        options: Option<KeyVaultClientBackupSecretOptions<'_>>,
    ) -> Result<Response<BackupSecretResult>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/secrets/{secretName}/backup");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Deletes a secret from a specified key vault.
    ///
    /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE
    /// cannot be applied to an individual version of a secret. This operation requires
    /// the secrets/delete permission.
    pub async fn delete_secret(
        &self,
        secret_name: impl Into<String>,
        options: Option<KeyVaultClientDeleteSecretOptions<'_>>,
    ) -> Result<Response<DeletedSecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/secrets/{secretName}");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Gets the specified deleted secret.
    ///
    /// The Get Deleted Secret operation returns the specified deleted secret along
    /// with its attributes. This operation requires the secrets/get permission.
    pub async fn get_deleted_secret(
        &self,
        secret_name: impl Into<String>,
        options: Option<KeyVaultClientGetDeletedSecretOptions<'_>>,
    ) -> Result<Response<DeletedSecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/deletedsecrets/{secretName}");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Get a specified secret from a given key vault.
    ///
    /// The GET operation is applicable to any secret stored in Azure Key Vault. This
    /// operation requires the secrets/get permission.
    pub async fn get_secret(
        &self,
        secret_name: impl Into<String>,
        secret_version: impl Into<String>,
        options: Option<KeyVaultClientGetSecretOptions<'_>>,
    ) -> Result<Response<SecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/secrets/{secretName}/{secretVersion}");
        path = path.replace("{secretName}", &secret_name.into());
        path = path.replace("{secretVersion}", &secret_version.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Permanently deletes the specified secret.
    ///
    /// The purge deleted secret operation removes the secret permanently, without the
    /// possibility of recovery. This operation can only be enabled on a soft-delete
    /// enabled vault. This operation requires the secrets/purge permission.
    pub async fn purge_deleted_secret(
        &self,
        secret_name: impl Into<String>,
        options: Option<KeyVaultClientPurgeDeletedSecretOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/deletedsecrets/{secretName}");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Recovers the deleted secret to the latest version.
    ///
    /// Recovers the deleted secret in the specified vault. This operation can only be
    /// performed on a soft-delete enabled vault. This operation requires the
    /// secrets/recover permission.
    pub async fn recover_deleted_secret(
        &self,
        secret_name: impl Into<String>,
        options: Option<KeyVaultClientRecoverDeletedSecretOptions<'_>>,
    ) -> Result<Response<SecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/deletedsecrets/{secretName}/recover");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Restores a backed up secret to a vault.
    ///
    /// Restores a backed up secret, and all its versions, to a vault. This operation
    /// requires the secrets/restore permission.
    pub async fn restore_secret(
        &self,
        parameters: RequestContent<SecretRestoreParameters>,
        options: Option<KeyVaultClientRestoreSecretOptions<'_>>,
    ) -> Result<Response<SecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        url.set_path("/secrets/restore");
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(parameters);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Sets a secret in a specified key vault.
    ///
    /// The SET operation adds a secret to the Azure Key Vault. If the named secret
    /// already exists, Azure Key Vault creates a new version of that secret. This
    /// operation requires the secrets/set permission.
    pub async fn set_secret(
        &self,
        secret_name: impl Into<String>,
        parameters: RequestContent<SecretSetParameters>,
        options: Option<KeyVaultClientSetSecretOptions<'_>>,
    ) -> Result<Response<SecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/secrets/{secretName}");
        path = path.replace("{secretName}", &secret_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(parameters);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Updates the attributes associated with a specified secret in a given key vault.
    ///
    /// The UPDATE operation changes specified attributes of an existing stored secret.
    /// Attributes that are not specified in the request are left unchanged. The value
    /// of a secret itself cannot be changed. This operation requires the secrets/set
    /// permission.
    pub async fn update_secret(
        &self,
        secret_name: impl Into<String>,
        secret_version: impl Into<String>,
        parameters: RequestContent<SecretUpdateParameters>,
        options: Option<KeyVaultClientUpdateSecretOptions<'_>>,
    ) -> Result<Response<SecretBundle>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/secrets/{secretName}/{secretVersion}");
        path = path.replace("{secretName}", &secret_name.into());
        path = path.replace("{secretVersion}", &secret_version.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Patch);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        request.set_body(parameters);
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

impl KeyVaultClientOptions {
    pub fn builder() -> builders::KeyVaultClientOptionsBuilder {
        builders::KeyVaultClientOptionsBuilder::new()
    }
}

impl Default for KeyVaultClientOptions {
    fn default() -> Self {
        Self {
            api_version: String::from("7.6-preview.2"),
            client_options: ClientOptions::default(),
        }
    }
}

impl ClientOptionsBuilder for KeyVaultClientOptions {
    fn with_per_call_policies<P>(mut self, per_call_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_call_policies(per_call_policies);
        self
    }

    fn with_per_try_policies<P>(mut self, per_try_policies: P) -> Self
    where
        P: Into<Vec<Arc<dyn Policy>>>,
        Self: Sized,
    {
        self.client_options.set_per_try_policies(per_try_policies);
        self
    }

    fn with_retry<P>(mut self, retry: P) -> Self
    where
        P: Into<RetryOptions>,
        Self: Sized,
    {
        self.client_options.set_retry(retry);
        self
    }

    fn with_transport<P>(mut self, transport: P) -> Self
    where
        P: Into<TransportOptions>,
        Self: Sized,
    {
        self.client_options.set_transport(transport);
        self
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientBackupSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientBackupSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientBackupSecretOptionsBuilder<'a> {
        builders::KeyVaultClientBackupSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientDeleteSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientDeleteSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientDeleteSecretOptionsBuilder<'a> {
        builders::KeyVaultClientDeleteSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientGetDeletedSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientGetDeletedSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientGetDeletedSecretOptionsBuilder<'a> {
        builders::KeyVaultClientGetDeletedSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientGetSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientGetSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientGetSecretOptionsBuilder<'a> {
        builders::KeyVaultClientGetSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientPurgeDeletedSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientPurgeDeletedSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientPurgeDeletedSecretOptionsBuilder<'a> {
        builders::KeyVaultClientPurgeDeletedSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientRecoverDeletedSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientRecoverDeletedSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientRecoverDeletedSecretOptionsBuilder<'a> {
        builders::KeyVaultClientRecoverDeletedSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientRestoreSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientRestoreSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientRestoreSecretOptionsBuilder<'a> {
        builders::KeyVaultClientRestoreSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientSetSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientSetSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientSetSecretOptionsBuilder<'a> {
        builders::KeyVaultClientSetSecretOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct KeyVaultClientUpdateSecretOptions<'a> {
    method_options: ClientMethodOptions<'a>,
}

impl<'a> KeyVaultClientUpdateSecretOptions<'a> {
    pub fn builder() -> builders::KeyVaultClientUpdateSecretOptionsBuilder<'a> {
        builders::KeyVaultClientUpdateSecretOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct KeyVaultClientOptionsBuilder {
        options: KeyVaultClientOptions,
    }

    impl KeyVaultClientOptionsBuilder {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientOptions {
            self.options.clone()
        }

        pub fn with_api_version(mut self, api_version: impl Into<String>) -> Self {
            self.options.api_version = api_version.into();
            self
        }
    }

    pub struct KeyVaultClientBackupSecretOptionsBuilder<'a> {
        options: KeyVaultClientBackupSecretOptions<'a>,
    }

    impl KeyVaultClientBackupSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientBackupSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientBackupSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientBackupSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientDeleteSecretOptionsBuilder<'a> {
        options: KeyVaultClientDeleteSecretOptions<'a>,
    }

    impl KeyVaultClientDeleteSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientDeleteSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientDeleteSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientDeleteSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientGetDeletedSecretOptionsBuilder<'a> {
        options: KeyVaultClientGetDeletedSecretOptions<'a>,
    }

    impl KeyVaultClientGetDeletedSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientGetDeletedSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientGetDeletedSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientGetDeletedSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientGetSecretOptionsBuilder<'a> {
        options: KeyVaultClientGetSecretOptions<'a>,
    }

    impl KeyVaultClientGetSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientGetSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientGetSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientGetSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientPurgeDeletedSecretOptionsBuilder<'a> {
        options: KeyVaultClientPurgeDeletedSecretOptions<'a>,
    }

    impl KeyVaultClientPurgeDeletedSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientPurgeDeletedSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientPurgeDeletedSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientPurgeDeletedSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientRecoverDeletedSecretOptionsBuilder<'a> {
        options: KeyVaultClientRecoverDeletedSecretOptions<'a>,
    }

    impl KeyVaultClientRecoverDeletedSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientRecoverDeletedSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientRecoverDeletedSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientRecoverDeletedSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientRestoreSecretOptionsBuilder<'a> {
        options: KeyVaultClientRestoreSecretOptions<'a>,
    }

    impl KeyVaultClientRestoreSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientRestoreSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientRestoreSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientRestoreSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientSetSecretOptionsBuilder<'a> {
        options: KeyVaultClientSetSecretOptions<'a>,
    }

    impl KeyVaultClientSetSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientSetSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientSetSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientSetSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct KeyVaultClientUpdateSecretOptionsBuilder<'a> {
        options: KeyVaultClientUpdateSecretOptions<'a>,
    }

    impl KeyVaultClientUpdateSecretOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: KeyVaultClientUpdateSecretOptions::default(),
            }
        }

        pub fn build(&self) -> KeyVaultClientUpdateSecretOptions {
            self.options.clone()
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for KeyVaultClientUpdateSecretOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
