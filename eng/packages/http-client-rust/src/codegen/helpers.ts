/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/

import * as codegen from '@azure-tools/codegen';
import * as rust from '../codemodel/index.js';

const headerText = `// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

`;

export const AnnotationNonExhaustive = '#[non_exhaustive]\n';

export const AnonymousLifetimeAnnotation = '<\'_>';

// returns the content preamble common to all emitted files
export function contentPreamble(): string {
  return headerText;
}

// formats doc comments if available
export function formatDocComment(docs: rust.Docs): string {
  if (!docs.summary && !docs.description) {
    return '';
  }

  let docStr = '';
  if (docs.summary) {
    docStr = codegen.comment(docs.summary, '/// ', undefined, 120) + '\n';
  }

  if (docs.description) {
    if (docs.summary) {
      docStr += '///\n';
    }
    docStr += codegen.comment(docs.description, '/// ', undefined, 120) + '\n';
  }

  return docStr;
}

// returns 'pub ' prefix as required
export function emitPub(pub: boolean): string {
  return pub ? 'pub ' : '';
}

// returns the type declaration string for the specified Rust type
export function getTypeDeclaration(type: rust.Type, withAnonymousLifetime = false): string {
  switch (type.kind) {
    case 'arc':
      return `${type.name}<dyn ${getTypeDeclaration(type.type)}>`;
    case 'encodedBytes':
      return 'Vec<u8>';
    case 'hashmap':
      return `${type.name}<String, ${getTypeDeclaration(type.type, withAnonymousLifetime)}>`;
    case 'implTrait':
      return `impl ${type.name}<${getTypeDeclaration(type.type, withAnonymousLifetime)}>`;
    case 'literal':
      return `${type.value}`;
    case 'option':
      return `Option<${type.ref ? '&' : ''}${getTypeDeclaration(type.type, withAnonymousLifetime)}>`;
    case 'requestContent':
    case 'response':
    case 'result':
      return `${type.name}<${getTypeDeclaration(type.type, withAnonymousLifetime)}>`;
    case 'String':
    case 'str':
    case 'Url':
      return type.kind;
    case 'scalar':
      return type.type;
    case 'enum':
    case 'jsonValue':
    case 'offsetDateTime':
    case 'tokenCredential':
      return type.name;
    case 'external':
    case 'model':
    case 'struct':
      if (!type.lifetime) {
        return type.name;
      } else if (withAnonymousLifetime) {
        // this type has a lifetime but we don't want its name
        return `${type.name}${AnonymousLifetimeAnnotation}`;
      }
      return `${type.name}${getGenericLifetimeAnnotation(type.lifetime)}`;
    case 'unit':
      return '()';      
    case 'vector':
      return `Vec<${getTypeDeclaration(type.type, withAnonymousLifetime)}>`;
  }
}

// four spaces per indent level
const oneIndentation = '    ';

// helper for managing indentation levels
export class indentation {
  private level: number;
  constructor() {
    // level is one-based.
    this.level = 1;
  }

  // returns spaces for the current indentation level
  get(): string {
    let indent = oneIndentation;
    for (let i = 1; i < this.level; ++i) {
      indent += oneIndentation;
    }
    return indent;
  }

  // increments the indentation level
  push(): indentation {
    ++this.level;
    return this;
  }

  // decrements the indentation level
  pop(): indentation {
    --this.level;
    if (this.level < 1) {
      throw new Error('indentation stack underflow');
    }
    return this;
  }
}

// emits the derive annotation with the standard and any additional values
export function annotationDerive(...extra: Array<string>): string {
  const derive = new Array<string>('Clone', 'Debug', 'Deserialize', 'Serialize');
  // remove any empty values
  extra = extra.filter(entry => entry.trim() !== '');
  derive.push(...extra);
  derive.sort();
  return `#[derive(${derive.join(', ')})]\n`;
}

// used to sort strings in ascending order
export function sortAscending(a: string, b: string): number {
  return a < b ? -1 : a > b ? 1 : 0;
}

// returns the generic lifetime annotation string for lifetime (e.g. <'a>)
export function getGenericLifetimeAnnotation(lifetime: rust.Lifetime): string {
  return `<${lifetime.name}>`;
}
