#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use crate::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<error_response::Error>,
}
mod error_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Error {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub code: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub message: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub target: Option<String>,
        #[serde(skip_serializing_if = "Vec::is_empty")]
        pub details: Vec<serde_json::Value>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub innererror: Option<serde_json::Value>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutJobParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobDetails {
    #[serde(rename = "storageAccountId", skip_serializing_if = "Option::is_none")]
    pub storage_account_id: Option<String>,
    #[serde(rename = "jobType", skip_serializing_if = "Option::is_none")]
    pub job_type: Option<String>,
    #[serde(rename = "returnAddress", skip_serializing_if = "Option::is_none")]
    pub return_address: Option<ReturnAddress>,
    #[serde(rename = "returnShipping", skip_serializing_if = "Option::is_none")]
    pub return_shipping: Option<ReturnShipping>,
    #[serde(rename = "shippingInformation", skip_serializing_if = "Option::is_none")]
    pub shipping_information: Option<ShippingInformation>,
    #[serde(rename = "deliveryPackage", skip_serializing_if = "Option::is_none")]
    pub delivery_package: Option<PackageInfomation>,
    #[serde(rename = "returnPackage", skip_serializing_if = "Option::is_none")]
    pub return_package: Option<PackageInfomation>,
    #[serde(rename = "diagnosticsPath", skip_serializing_if = "Option::is_none")]
    pub diagnostics_path: Option<String>,
    #[serde(rename = "logLevel", skip_serializing_if = "Option::is_none")]
    pub log_level: Option<String>,
    #[serde(rename = "backupDriveManifest", skip_serializing_if = "Option::is_none")]
    pub backup_drive_manifest: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "cancelRequested", skip_serializing_if = "Option::is_none")]
    pub cancel_requested: Option<bool>,
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<i64>,
    #[serde(rename = "incompleteBlobListUri", skip_serializing_if = "Option::is_none")]
    pub incomplete_blob_list_uri: Option<String>,
    #[serde(rename = "driveList", skip_serializing_if = "Vec::is_empty")]
    pub drive_list: Vec<DriveStatus>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub export: Option<Export>,
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateJobParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<update_job_parameters::Properties>,
}
mod update_job_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Properties {
        #[serde(rename = "cancelRequested", skip_serializing_if = "Option::is_none")]
        pub cancel_requested: Option<bool>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub state: Option<String>,
        #[serde(rename = "returnAddress", skip_serializing_if = "Option::is_none")]
        pub return_address: Option<ReturnAddress>,
        #[serde(rename = "returnShipping", skip_serializing_if = "Option::is_none")]
        pub return_shipping: Option<ReturnShipping>,
        #[serde(rename = "deliveryPackage", skip_serializing_if = "Option::is_none")]
        pub delivery_package: Option<PackageInfomation>,
        #[serde(rename = "logLevel", skip_serializing_if = "Option::is_none")]
        pub log_level: Option<String>,
        #[serde(rename = "backupDriveManifest", skip_serializing_if = "Option::is_none")]
        pub backup_drive_manifest: Option<bool>,
        #[serde(rename = "driveList", skip_serializing_if = "Vec::is_empty")]
        pub drive_list: Vec<DriveStatus>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListJobsResponse {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<JobResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobResponse {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    pub name: String,
    pub display: operation::Display,
}
mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Location {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<location::Properties>,
}
mod location {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Properties {
        #[serde(rename = "recipientName", skip_serializing_if = "Option::is_none")]
        pub recipient_name: Option<String>,
        #[serde(rename = "streetAddress1", skip_serializing_if = "Option::is_none")]
        pub street_address1: Option<String>,
        #[serde(rename = "streetAddress2", skip_serializing_if = "Option::is_none")]
        pub street_address2: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub city: Option<String>,
        #[serde(rename = "stateOrProvince", skip_serializing_if = "Option::is_none")]
        pub state_or_province: Option<String>,
        #[serde(rename = "postalCode", skip_serializing_if = "Option::is_none")]
        pub postal_code: Option<String>,
        #[serde(rename = "countryOrRegion", skip_serializing_if = "Option::is_none")]
        pub country_or_region: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub phone: Option<String>,
        #[serde(rename = "supportedCarriers", skip_serializing_if = "Vec::is_empty")]
        pub supported_carriers: Vec<String>,
        #[serde(rename = "alternateLocations", skip_serializing_if = "Vec::is_empty")]
        pub alternate_locations: Vec<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReturnAddress {
    #[serde(rename = "recipientName")]
    pub recipient_name: String,
    #[serde(rename = "streetAddress1")]
    pub street_address1: String,
    #[serde(rename = "streetAddress2", skip_serializing_if = "Option::is_none")]
    pub street_address2: Option<String>,
    pub city: String,
    #[serde(rename = "stateOrProvince", skip_serializing_if = "Option::is_none")]
    pub state_or_province: Option<String>,
    #[serde(rename = "postalCode")]
    pub postal_code: String,
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: String,
    pub phone: String,
    pub email: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReturnShipping {
    #[serde(rename = "carrierName")]
    pub carrier_name: String,
    #[serde(rename = "carrierAccountNumber")]
    pub carrier_account_number: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingInformation {
    #[serde(rename = "recipientName")]
    pub recipient_name: String,
    #[serde(rename = "streetAddress1")]
    pub street_address1: String,
    #[serde(rename = "streetAddress2", skip_serializing_if = "Option::is_none")]
    pub street_address2: Option<String>,
    pub city: String,
    #[serde(rename = "stateOrProvince")]
    pub state_or_province: String,
    #[serde(rename = "postalCode")]
    pub postal_code: String,
    #[serde(rename = "countryOrRegion")]
    pub country_or_region: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageInfomation {
    #[serde(rename = "carrierName")]
    pub carrier_name: String,
    #[serde(rename = "trackingNumber")]
    pub tracking_number: String,
    #[serde(rename = "driveCount")]
    pub drive_count: i64,
    #[serde(rename = "shipDate")]
    pub ship_date: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DriveStatus {
    #[serde(rename = "driveId", skip_serializing_if = "Option::is_none")]
    pub drive_id: Option<String>,
    #[serde(rename = "bitLockerKey", skip_serializing_if = "Option::is_none")]
    pub bit_locker_key: Option<String>,
    #[serde(rename = "manifestFile", skip_serializing_if = "Option::is_none")]
    pub manifest_file: Option<String>,
    #[serde(rename = "manifestHash", skip_serializing_if = "Option::is_none")]
    pub manifest_hash: Option<String>,
    #[serde(rename = "driveHeaderHash", skip_serializing_if = "Option::is_none")]
    pub drive_header_hash: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<drive_status::State>,
    #[serde(rename = "copyStatus", skip_serializing_if = "Option::is_none")]
    pub copy_status: Option<String>,
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<i64>,
    #[serde(rename = "verboseLogUri", skip_serializing_if = "Option::is_none")]
    pub verbose_log_uri: Option<String>,
    #[serde(rename = "errorLogUri", skip_serializing_if = "Option::is_none")]
    pub error_log_uri: Option<String>,
    #[serde(rename = "manifestUri", skip_serializing_if = "Option::is_none")]
    pub manifest_uri: Option<String>,
    #[serde(rename = "bytesSucceeded", skip_serializing_if = "Option::is_none")]
    pub bytes_succeeded: Option<i64>,
}
mod drive_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Specified,
        Received,
        NeverReceived,
        Transferring,
        Completed,
        CompletedMoreInfo,
        ShippedBack,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Export {
    #[serde(rename = "blobList", skip_serializing_if = "Option::is_none")]
    pub blob_list: Option<export::BlobList>,
    #[serde(rename = "blobListblobPath", skip_serializing_if = "Option::is_none")]
    pub blob_listblob_path: Option<String>,
}
mod export {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct BlobList {
        #[serde(rename = "blobPath", skip_serializing_if = "Vec::is_empty")]
        pub blob_path: Vec<String>,
        #[serde(rename = "blobPathPrefix", skip_serializing_if = "Vec::is_empty")]
        pub blob_path_prefix: Vec<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LocationsResponse {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Location>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetBitLockerKeysResponse {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DriveBitLockerKey>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DriveBitLockerKey {
    #[serde(rename = "bitLockerKey", skip_serializing_if = "Option::is_none")]
    pub bit_locker_key: Option<String>,
    #[serde(rename = "driveId", skip_serializing_if = "Option::is_none")]
    pub drive_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListOperationsResponse {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
}
