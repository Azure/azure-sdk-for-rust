#![doc = "generated by AutoRust"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AnalysisResultListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AnalysisResultSingletonResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl AnalysisResultListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AnalysisResultSingletonResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<AnalysisResultSingletonResourceProperties>,
}
impl AnalysisResultSingletonResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalysisResultSingletonResourceProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(rename = "analysisResultType")]
    pub analysis_result_type: analysis_result_singleton_resource_properties::AnalysisResultType,
}
impl AnalysisResultSingletonResourceProperties {
    pub fn new(analysis_result_type: analysis_result_singleton_resource_properties::AnalysisResultType) -> Self {
        Self {
            grade: None,
            analysis_result_type,
        }
    }
}
pub mod analysis_result_singleton_resource_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AnalysisResultType {
        ScriptExecution,
        Reliability,
        #[serde(rename = "CPUUtilization")]
        CpuUtilization,
        MemoryUtilization,
        #[serde(rename = "CPURegression")]
        CpuRegression,
        MemoryRegression,
        TestAnalysis,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AvailableOsListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AvailableOsResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl AvailableOsListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AvailableOsProperties {
    #[serde(rename = "osId", default, skip_serializing_if = "Option::is_none")]
    pub os_id: Option<String>,
    #[serde(rename = "osName", default, skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(rename = "osVersion", default, skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    #[serde(rename = "insiderChannel", default, skip_serializing_if = "Option::is_none")]
    pub insider_channel: Option<String>,
    #[serde(rename = "osUpdateType", default, skip_serializing_if = "Option::is_none")]
    pub os_update_type: Option<String>,
    #[serde(rename = "osPlatform", default, skip_serializing_if = "Option::is_none")]
    pub os_platform: Option<String>,
}
impl AvailableOsProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AvailableOsResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<AvailableOsProperties>,
}
impl AvailableOsResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CpuRegressionResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "cpuRegressionResults", default, skip_serializing_if = "Vec::is_empty")]
    pub cpu_regression_results: Vec<RegressionResult>,
}
impl CpuRegressionResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            cpu_regression_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CpuUtilizationResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "cpuUtilizationResults", default, skip_serializing_if = "Vec::is_empty")]
    pub cpu_utilization_results: Vec<UtilizationResult>,
}
impl CpuUtilizationResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            cpu_utilization_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CheckNameAvailabilityResult {
    #[serde(rename = "nameAvailable", default, skip_serializing_if = "Option::is_none")]
    pub name_available: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<check_name_availability_result::Reason>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl CheckNameAvailabilityResult {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod check_name_availability_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        Invalid,
        AlreadyExists,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Command {
    pub name: String,
    pub action: command::Action,
    #[serde(rename = "contentType")]
    pub content_type: command::ContentType,
    pub content: String,
    #[serde(rename = "runElevated", default, skip_serializing_if = "Option::is_none")]
    pub run_elevated: Option<bool>,
    #[serde(rename = "restartAfter", default, skip_serializing_if = "Option::is_none")]
    pub restart_after: Option<bool>,
    #[serde(rename = "maxRunTime", default, skip_serializing_if = "Option::is_none")]
    pub max_run_time: Option<i32>,
    #[serde(rename = "runAsInteractive", default, skip_serializing_if = "Option::is_none")]
    pub run_as_interactive: Option<bool>,
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(rename = "applyUpdateBefore", default, skip_serializing_if = "Option::is_none")]
    pub apply_update_before: Option<bool>,
}
impl Command {
    pub fn new(name: String, action: command::Action, content_type: command::ContentType, content: String) -> Self {
        Self {
            name,
            action,
            content_type,
            content,
            run_elevated: None,
            restart_after: None,
            max_run_time: None,
            run_as_interactive: None,
            always_run: None,
            apply_update_before: None,
        }
    }
}
pub mod command {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Action {
        Install,
        Launch,
        Close,
        Uninstall,
        Custom,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContentType {
        Inline,
        File,
        Path,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CustomerEventListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<CustomerEventResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl CustomerEventListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerEventProperties {
    #[serde(rename = "eventName")]
    pub event_name: String,
    pub receivers: Vec<NotificationEventReceiver>,
}
impl CustomerEventProperties {
    pub fn new(event_name: String, receivers: Vec<NotificationEventReceiver>) -> Self {
        Self { event_name, receivers }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CustomerEventResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<CustomerEventProperties>,
}
impl CustomerEventResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct DistributionGroupListReceiverValue {
    #[serde(rename = "distributionGroups", default, skip_serializing_if = "Vec::is_empty")]
    pub distribution_groups: Vec<String>,
}
impl DistributionGroupListReceiverValue {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct DownloadUrlResponse {
    #[serde(rename = "downloadUrl", default, skip_serializing_if = "Option::is_none")]
    pub download_url: Option<String>,
    #[serde(rename = "expirationTime", default, skip_serializing_if = "Option::is_none")]
    pub expiration_time: Option<String>,
}
impl DownloadUrlResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct EmailEventListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<EmailEventResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl EmailEventListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct EmailEventProperties {
    #[serde(rename = "eventId", default, skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "eventName", default, skip_serializing_if = "Option::is_none")]
    pub event_name: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
}
impl EmailEventProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct EmailEventResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<EmailEventProperties>,
}
impl EmailEventResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ErrorDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ErrorDefinition>,
}
impl ErrorDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ErrorResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDefinition>,
}
impl ErrorResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FavoriteProcessListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<FavoriteProcessResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl FavoriteProcessListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FavoriteProcessProperties {
    #[serde(rename = "actualProcessName")]
    pub actual_process_name: String,
}
impl FavoriteProcessProperties {
    pub fn new(actual_process_name: String) -> Self {
        Self { actual_process_name }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FavoriteProcessResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<FavoriteProcessProperties>,
}
impl FavoriteProcessResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FileUploadUrlResponse {
    #[serde(rename = "uploadUrl", default, skip_serializing_if = "Option::is_none")]
    pub upload_url: Option<String>,
    #[serde(rename = "blobPath", default, skip_serializing_if = "Option::is_none")]
    pub blob_path: Option<String>,
}
impl FileUploadUrlResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FlightingRingListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<FlightingRingResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl FlightingRingListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FlightingRingProperties {
    #[serde(rename = "actualFlightingRingName", default, skip_serializing_if = "Option::is_none")]
    pub actual_flighting_ring_name: Option<String>,
}
impl FlightingRingProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct FlightingRingResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<FlightingRingProperties>,
}
impl FlightingRingResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct GetFileUploadUrlParameters {
    #[serde(rename = "blobName", default, skip_serializing_if = "Option::is_none")]
    pub blob_name: Option<String>,
}
impl GetFileUploadUrlParameters {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct IdentifiedFailure {
    #[serde(rename = "failureId", default, skip_serializing_if = "Option::is_none")]
    pub failure_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<identified_failure::Category>,
    #[serde(rename = "errorMessage", default, skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub guidance: Option<String>,
}
impl IdentifiedFailure {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod identified_failure {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Category {
        None,
        Unidentified,
        Package,
        #[serde(rename = "OSUpdate")]
        OsUpdate,
        Infrastructure,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemoryRegressionResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "memoryRegressionResults", default, skip_serializing_if = "Vec::is_empty")]
    pub memory_regression_results: Vec<RegressionResult>,
}
impl MemoryRegressionResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            memory_regression_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemoryUtilizationResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "memoryUtilizationResults", default, skip_serializing_if = "Vec::is_empty")]
    pub memory_utilization_results: Vec<UtilizationResult>,
}
impl MemoryUtilizationResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            memory_utilization_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct NotificationEventReceiver {
    #[serde(rename = "receiverType", default, skip_serializing_if = "Option::is_none")]
    pub receiver_type: Option<String>,
    #[serde(rename = "receiverValue", default, skip_serializing_if = "Option::is_none")]
    pub receiver_value: Option<NotificationReceiverValue>,
}
impl NotificationEventReceiver {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct NotificationReceiverValue {
    #[serde(rename = "userObjectReceiverValue", default, skip_serializing_if = "Option::is_none")]
    pub user_object_receiver_value: Option<UserObjectReceiverValue>,
    #[serde(rename = "subscriptionReceiverValue", default, skip_serializing_if = "Option::is_none")]
    pub subscription_receiver_value: Option<SubscriptionReceiverValue>,
    #[serde(rename = "distributionGroupListReceiverValue", default, skip_serializing_if = "Option::is_none")]
    pub distribution_group_list_receiver_value: Option<DistributionGroupListReceiverValue>,
}
impl NotificationReceiverValue {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OsUpdateListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<OsUpdateResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl OsUpdateListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OsUpdateProperties {
    #[serde(rename = "osName", default, skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    #[serde(rename = "flightingRing", default, skip_serializing_if = "Option::is_none")]
    pub flighting_ring: Option<String>,
    #[serde(rename = "buildVersion", default, skip_serializing_if = "Option::is_none")]
    pub build_version: Option<String>,
    #[serde(rename = "buildRevision", default, skip_serializing_if = "Option::is_none")]
    pub build_revision: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<os_update_properties::Type>,
    #[serde(rename = "releaseVersionDate", default, skip_serializing_if = "Option::is_none")]
    pub release_version_date: Option<String>,
}
impl OsUpdateProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod os_update_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        SecurityUpdate,
        FeatureUpdate,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OsUpdateResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OsUpdateProperties>,
}
impl OsUpdateResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OsUpdateTestSummary {
    #[serde(rename = "osName", default, skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(rename = "releaseName", default, skip_serializing_if = "Option::is_none")]
    pub release_name: Option<String>,
    #[serde(rename = "buildVersion", default, skip_serializing_if = "Option::is_none")]
    pub build_version: Option<String>,
    #[serde(rename = "buildRevision", default, skip_serializing_if = "Option::is_none")]
    pub build_revision: Option<String>,
    #[serde(rename = "releaseVersionDate", default, skip_serializing_if = "Option::is_none")]
    pub release_version_date: Option<String>,
    #[serde(rename = "flightingRing", default, skip_serializing_if = "Option::is_none")]
    pub flighting_ring: Option<String>,
    #[serde(rename = "executionStatus", default, skip_serializing_if = "Option::is_none")]
    pub execution_status: Option<TestExecutionStatus>,
    #[serde(rename = "testStatus", default, skip_serializing_if = "Option::is_none")]
    pub test_status: Option<TestStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(rename = "testRunTime", default, skip_serializing_if = "Option::is_none")]
    pub test_run_time: Option<String>,
    #[serde(rename = "testType", default, skip_serializing_if = "Option::is_none")]
    pub test_type: Option<String>,
}
impl OsUpdateTestSummary {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OsUpdatesTestSummary {
    #[serde(rename = "executionStatus", default, skip_serializing_if = "Option::is_none")]
    pub execution_status: Option<TestExecutionStatus>,
    #[serde(rename = "testStatus", default, skip_serializing_if = "Option::is_none")]
    pub test_status: Option<TestStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(rename = "testRunTime", default, skip_serializing_if = "Option::is_none")]
    pub test_run_time: Option<String>,
    #[serde(rename = "osUpdateTestSummaries", default, skip_serializing_if = "Vec::is_empty")]
    pub os_update_test_summaries: Vec<OsUpdateTestSummary>,
}
impl OsUpdatesTestSummary {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Operation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "isDataAction", default, skip_serializing_if = "Option::is_none")]
    pub is_data_action: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OperationProperties>,
}
impl Operation {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
    pub struct Display {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
    }
    impl Display {
        pub fn new() -> Self {
            Self::default()
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl OperationListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationProperties {}
impl OperationProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageCheckNameAvailabilityParameters {
    pub name: String,
    #[serde(rename = "applicationName")]
    pub application_name: String,
    pub version: String,
    #[serde(rename = "type")]
    pub type_: String,
}
impl PackageCheckNameAvailabilityParameters {
    pub fn new(name: String, application_name: String, version: String, type_: String) -> Self {
        Self {
            name,
            application_name,
            version,
            type_,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PackageListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<PackageResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl PackageListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageProperties {
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "applicationName")]
    pub application_name: String,
    pub version: String,
    #[serde(rename = "testTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub test_types: Vec<TestType>,
    #[serde(rename = "targetOSList")]
    pub target_os_list: Vec<TargetOsInfo>,
    #[serde(rename = "packageStatus", default, skip_serializing_if = "Option::is_none")]
    pub package_status: Option<package_properties::PackageStatus>,
    #[serde(rename = "lastModifiedTime", default, skip_serializing_if = "Option::is_none")]
    pub last_modified_time: Option<String>,
    #[serde(rename = "flightingRing")]
    pub flighting_ring: String,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(rename = "blobPath")]
    pub blob_path: String,
    #[serde(rename = "validationResults", default, skip_serializing_if = "Vec::is_empty")]
    pub validation_results: Vec<PackageValidationResult>,
    pub tests: Vec<Test>,
}
impl PackageProperties {
    pub fn new(
        application_name: String,
        version: String,
        target_os_list: Vec<TargetOsInfo>,
        flighting_ring: String,
        blob_path: String,
        tests: Vec<Test>,
    ) -> Self {
        Self {
            provisioning_state: None,
            application_name,
            version,
            test_types: Vec::new(),
            target_os_list,
            package_status: None,
            last_modified_time: None,
            flighting_ring,
            is_enabled: None,
            blob_path,
            validation_results: Vec::new(),
            tests,
        }
    }
}
pub mod package_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PackageStatus {
        Unknown,
        Registered,
        Ready,
        Error,
        ValidatingPackage,
        PreValidationCheckPass,
        Deleted,
        ValidationLongerThanUsual,
        VerifyingPackage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageResource {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PackageProperties>,
}
impl PackageResource {
    pub fn new(tracked_resource: TrackedResource) -> Self {
        Self {
            tracked_resource,
            system_data: None,
            properties: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PackageUpdateParameterProperties {
    #[serde(rename = "targetOSList", default, skip_serializing_if = "Vec::is_empty")]
    pub target_os_list: Vec<TargetOsInfo>,
    #[serde(rename = "flightingRing", default, skip_serializing_if = "Option::is_none")]
    pub flighting_ring: Option<String>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(rename = "blobPath", default, skip_serializing_if = "Option::is_none")]
    pub blob_path: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tests: Vec<Test>,
}
impl PackageUpdateParameterProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PackageUpdateParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PackageUpdateParameterProperties>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Tags>,
}
impl PackageUpdateParameters {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PackageValidationResult {
    #[serde(rename = "validationName", default, skip_serializing_if = "Option::is_none")]
    pub validation_name: Option<String>,
    #[serde(rename = "isValid", default, skip_serializing_if = "Option::is_none")]
    pub is_valid: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<String>,
}
impl PackageValidationResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProvisioningState {
    Succeeded,
    Failed,
    Cancelled,
    Creating,
    Deleting,
    Updating,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProxyResource {
    #[serde(flatten)]
    pub resource: Resource,
}
impl ProxyResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RegressionResult {
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub diff: Option<f64>,
    #[serde(rename = "isRegressed", default, skip_serializing_if = "Option::is_none")]
    pub is_regressed: Option<bool>,
}
impl RegressionResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RegressionTestDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub diff: Option<f64>,
    #[serde(rename = "isRegressed", default, skip_serializing_if = "Option::is_none")]
    pub is_regressed: Option<bool>,
}
impl RegressionTestDetails {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ReliabilityResult {
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "launchCount", default, skip_serializing_if = "Option::is_none")]
    pub launch_count: Option<i32>,
    #[serde(rename = "crashCount", default, skip_serializing_if = "Option::is_none")]
    pub crash_count: Option<i32>,
    #[serde(rename = "hangCount", default, skip_serializing_if = "Option::is_none")]
    pub hang_count: Option<i32>,
    #[serde(rename = "regressionGrade", default, skip_serializing_if = "Option::is_none")]
    pub regression_grade: Option<TestGrade>,
    #[serde(rename = "crashRegressionGrade", default, skip_serializing_if = "Option::is_none")]
    pub crash_regression_grade: Option<TestGrade>,
    #[serde(rename = "crashRegressionTestDetails", default, skip_serializing_if = "Option::is_none")]
    pub crash_regression_test_details: Option<RegressionTestDetails>,
    #[serde(rename = "hangRegressionGrade", default, skip_serializing_if = "Option::is_none")]
    pub hang_regression_grade: Option<TestGrade>,
    #[serde(rename = "hangRegressionTestDetails", default, skip_serializing_if = "Option::is_none")]
    pub hang_regression_test_details: Option<RegressionTestDetails>,
}
impl ReliabilityResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReliabilityResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "reliabilityResults", default, skip_serializing_if = "Vec::is_empty")]
    pub reliability_results: Vec<ReliabilityResult>,
}
impl ReliabilityResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            reliability_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Resource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
impl Resource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ScriptExecutionResult {
    #[serde(rename = "scriptName", default, skip_serializing_if = "Option::is_none")]
    pub script_name: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "exitCode", default, skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<i32>,
    #[serde(rename = "timedOut", default, skip_serializing_if = "Option::is_none")]
    pub timed_out: Option<bool>,
}
impl ScriptExecutionResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScriptExecutionResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "scriptExecutionResults", default, skip_serializing_if = "Vec::is_empty")]
    pub script_execution_results: Vec<ScriptExecutionResult>,
}
impl ScriptExecutionResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            script_execution_results: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SubscriptionReceiverValue {
    #[serde(rename = "subscriptionId", default, skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    #[serde(rename = "subscriptionName", default, skip_serializing_if = "Option::is_none")]
    pub subscription_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}
impl SubscriptionReceiverValue {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SystemData {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "createdByType", default, skip_serializing_if = "Option::is_none")]
    pub created_by_type: Option<system_data::CreatedByType>,
    #[serde(rename = "createdAt", default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "lastModifiedBy", default, skip_serializing_if = "Option::is_none")]
    pub last_modified_by: Option<String>,
    #[serde(rename = "lastModifiedByType", default, skip_serializing_if = "Option::is_none")]
    pub last_modified_by_type: Option<system_data::LastModifiedByType>,
    #[serde(rename = "lastModifiedAt", default, skip_serializing_if = "Option::is_none")]
    pub last_modified_at: Option<String>,
}
impl SystemData {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod system_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CreatedByType {
        User,
        Application,
        ManagedIdentity,
        Key,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LastModifiedByType {
        User,
        Application,
        ManagedIdentity,
        Key,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Tags {}
impl Tags {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetOsInfo {
    #[serde(rename = "osUpdateType")]
    pub os_update_type: String,
    #[serde(rename = "targetOSs")]
    pub target_o_ss: Vec<String>,
}
impl TargetOsInfo {
    pub fn new(os_update_type: String, target_o_ss: Vec<String>) -> Self {
        Self {
            os_update_type,
            target_o_ss,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Test {
    #[serde(rename = "testType")]
    pub test_type: TestType,
    #[serde(rename = "validationRunStatus", default, skip_serializing_if = "Option::is_none")]
    pub validation_run_status: Option<test::ValidationRunStatus>,
    #[serde(rename = "isActive", default, skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    pub commands: Vec<Command>,
}
impl Test {
    pub fn new(test_type: TestType, commands: Vec<Command>) -> Self {
        Self {
            test_type,
            validation_run_status: None,
            is_active: None,
            commands,
        }
    }
}
pub mod test {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ValidationRunStatus {
        Unknown,
        Pending,
        Passed,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestAnalysisResult {
    #[serde(rename = "blobData", default, skip_serializing_if = "Option::is_none")]
    pub blob_data: Option<String>,
    #[serde(rename = "testAnalysisStatus", default, skip_serializing_if = "Option::is_none")]
    pub test_analysis_status: Option<test_analysis_result::TestAnalysisStatus>,
    #[serde(rename = "identifiedFailures", default, skip_serializing_if = "Vec::is_empty")]
    pub identified_failures: Vec<IdentifiedFailure>,
}
impl TestAnalysisResult {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod test_analysis_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TestAnalysisStatus {
        None,
        Analyzing,
        Completed,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAnalysisResultSingletonResourceProperties {
    #[serde(flatten)]
    pub analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties,
    #[serde(rename = "testAnalysisResult", default, skip_serializing_if = "Option::is_none")]
    pub test_analysis_result: Option<TestAnalysisResult>,
}
impl TestAnalysisResultSingletonResourceProperties {
    pub fn new(analysis_result_singleton_resource_properties: AnalysisResultSingletonResourceProperties) -> Self {
        Self {
            analysis_result_singleton_resource_properties,
            test_analysis_result: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestBaseAccountResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestBaseAccountListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestBaseAccountResource {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestBaseAccountResourceProperties>,
}
impl TestBaseAccountResource {
    pub fn new(tracked_resource: TrackedResource) -> Self {
        Self {
            tracked_resource,
            system_data: None,
            properties: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestBaseAccountResourceProperties {
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    pub sku: TestBaseAccountSku,
    #[serde(rename = "accessLevel", default, skip_serializing_if = "Option::is_none")]
    pub access_level: Option<String>,
}
impl TestBaseAccountResourceProperties {
    pub fn new(sku: TestBaseAccountSku) -> Self {
        Self {
            provisioning_state: None,
            sku,
            access_level: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestBaseAccountSku {
    #[serde(rename = "resourceType", default, skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    pub name: String,
    pub tier: test_base_account_sku::Tier,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub capabilities: Vec<TestBaseAccountSkuCapability>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub locations: Vec<String>,
}
impl TestBaseAccountSku {
    pub fn new(name: String, tier: test_base_account_sku::Tier) -> Self {
        Self {
            resource_type: None,
            name,
            tier,
            capabilities: Vec::new(),
            locations: Vec::new(),
        }
    }
}
pub mod test_base_account_sku {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Tier {
        Standard,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestBaseAccountSkuCapability {
    pub name: String,
    pub value: String,
}
impl TestBaseAccountSkuCapability {
    pub fn new(name: String, value: String) -> Self {
        Self { name, value }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountSkuListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestBaseAccountSku>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestBaseAccountSkuListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountUpdateParameterProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sku: Option<TestBaseAccountSku>,
}
impl TestBaseAccountUpdateParameterProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountUpdateParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestBaseAccountUpdateParameterProperties>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Tags>,
}
impl TestBaseAccountUpdateParameters {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountUsageData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<TestBaseAccountUsageName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(rename = "currentValue", default, skip_serializing_if = "Option::is_none")]
    pub current_value: Option<i64>,
}
impl TestBaseAccountUsageData {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountUsageDataList {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestBaseAccountUsageData>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestBaseAccountUsageDataList {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestBaseAccountUsageName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "localizedValue", default, skip_serializing_if = "Option::is_none")]
    pub localized_value: Option<String>,
}
impl TestBaseAccountUsageName {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TestExecutionStatus {
    None,
    InProgress,
    Processing,
    Completed,
    NotExecuted,
    Incomplete,
    Failed,
    Succeeded,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TestGrade {
    None,
    NotAvailable,
    Pass,
    Fail,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestResultAnalysisSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "analysisStatus", default, skip_serializing_if = "Option::is_none")]
    pub analysis_status: Option<test_result_analysis_summary::AnalysisStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
}
impl TestResultAnalysisSummary {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod test_result_analysis_summary {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AnalysisStatus {
        None,
        Completed,
        InProgress,
        Failed,
        Succeeded,
        Available,
        NotAvailable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestResultListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestResultResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestResultListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestResultProperties {
    #[serde(rename = "baselineTestResultId", default, skip_serializing_if = "Option::is_none")]
    pub baseline_test_result_id: Option<String>,
    #[serde(rename = "packageId", default, skip_serializing_if = "Option::is_none")]
    pub package_id: Option<String>,
    #[serde(rename = "applicationName", default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(rename = "applicationVersion", default, skip_serializing_if = "Option::is_none")]
    pub application_version: Option<String>,
    #[serde(rename = "osName", default, skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(rename = "releaseName", default, skip_serializing_if = "Option::is_none")]
    pub release_name: Option<String>,
    #[serde(rename = "releaseVersionDate", default, skip_serializing_if = "Option::is_none")]
    pub release_version_date: Option<String>,
    #[serde(rename = "flightingRing", default, skip_serializing_if = "Option::is_none")]
    pub flighting_ring: Option<String>,
    #[serde(rename = "buildVersion", default, skip_serializing_if = "Option::is_none")]
    pub build_version: Option<String>,
    #[serde(rename = "buildRevision", default, skip_serializing_if = "Option::is_none")]
    pub build_revision: Option<String>,
    #[serde(rename = "testType", default, skip_serializing_if = "Option::is_none")]
    pub test_type: Option<String>,
    #[serde(rename = "testRunTime", default, skip_serializing_if = "Option::is_none")]
    pub test_run_time: Option<String>,
    #[serde(rename = "isDownloadDataAvailable", default, skip_serializing_if = "Option::is_none")]
    pub is_download_data_available: Option<bool>,
    #[serde(rename = "isVideoAvailable", default, skip_serializing_if = "Option::is_none")]
    pub is_video_available: Option<bool>,
    #[serde(rename = "executionStatus", default, skip_serializing_if = "Option::is_none")]
    pub execution_status: Option<TestExecutionStatus>,
    #[serde(rename = "testStatus", default, skip_serializing_if = "Option::is_none")]
    pub test_status: Option<TestStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(rename = "kbNumber", default, skip_serializing_if = "Option::is_none")]
    pub kb_number: Option<String>,
    #[serde(rename = "packageVersion", default, skip_serializing_if = "Option::is_none")]
    pub package_version: Option<String>,
    #[serde(rename = "analysisSummaries", default, skip_serializing_if = "Vec::is_empty")]
    pub analysis_summaries: Vec<TestResultAnalysisSummary>,
}
impl TestResultProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestResultResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestResultProperties>,
}
impl TestResultResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TestStatus {
    None,
    TestExecutionInProgress,
    DataProcessing,
    TestFailure,
    UpdateFailure,
    TestAndUpdateFailure,
    InfrastructureFailure,
    Completed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestSummaryListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestSummaryResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestSummaryListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestSummaryProperties {
    #[serde(rename = "testSummaryId", default, skip_serializing_if = "Option::is_none")]
    pub test_summary_id: Option<String>,
    #[serde(rename = "packageId", default, skip_serializing_if = "Option::is_none")]
    pub package_id: Option<String>,
    #[serde(rename = "applicationName", default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(rename = "applicationVersion", default, skip_serializing_if = "Option::is_none")]
    pub application_version: Option<String>,
    #[serde(rename = "executionStatus", default, skip_serializing_if = "Option::is_none")]
    pub execution_status: Option<TestExecutionStatus>,
    #[serde(rename = "testStatus", default, skip_serializing_if = "Option::is_none")]
    pub test_status: Option<TestStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade: Option<TestGrade>,
    #[serde(rename = "testRunTime", default, skip_serializing_if = "Option::is_none")]
    pub test_run_time: Option<String>,
    #[serde(rename = "featureUpdatesTestSummary", default, skip_serializing_if = "Option::is_none")]
    pub feature_updates_test_summary: Option<OsUpdatesTestSummary>,
    #[serde(rename = "securityUpdatesTestSummary", default, skip_serializing_if = "Option::is_none")]
    pub security_updates_test_summary: Option<OsUpdatesTestSummary>,
}
impl TestSummaryProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestSummaryResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestSummaryProperties>,
}
impl TestSummaryResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TestType {
    OutOfBoxTest,
    FunctionalTest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestTypeListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestTypeResource>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl TestTypeListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestTypeProperties {
    #[serde(rename = "actualTestTypeName", default, skip_serializing_if = "Option::is_none")]
    pub actual_test_type_name: Option<String>,
}
impl TestTypeProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TestTypeResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(rename = "systemData", default, skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestTypeProperties>,
}
impl TestTypeResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackedResource {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Tags>,
    pub location: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}
impl TrackedResource {
    pub fn new(location: String) -> Self {
        Self {
            resource: Resource::default(),
            tags: None,
            location,
            etag: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct UserObjectReceiverValue {
    #[serde(rename = "userObjectIds", default, skip_serializing_if = "Vec::is_empty")]
    pub user_object_ids: Vec<String>,
}
impl UserObjectReceiverValue {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct UtilizationBound {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentile: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}
impl UtilizationBound {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct UtilizationEntry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}
impl UtilizationEntry {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct UtilizationResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<String>,
    #[serde(rename = "upperBound", default, skip_serializing_if = "Option::is_none")]
    pub upper_bound: Option<UtilizationBound>,
    #[serde(rename = "lowerBound", default, skip_serializing_if = "Option::is_none")]
    pub lower_bound: Option<UtilizationBound>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub utilization: Vec<UtilizationEntry>,
}
impl UtilizationResult {
    pub fn new() -> Self {
        Self::default()
    }
}
