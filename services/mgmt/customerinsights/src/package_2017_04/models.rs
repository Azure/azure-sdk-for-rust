#![doc = "generated by AutoRust"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssignmentPrincipal {
    #[serde(rename = "principalId")]
    pub principal_id: String,
    #[serde(rename = "principalType")]
    pub principal_type: String,
    #[serde(rename = "principalMetadata", default, skip_serializing_if = "Option::is_none")]
    pub principal_metadata: Option<serde_json::Value>,
}
impl AssignmentPrincipal {
    pub fn new(principal_id: String, principal_type: String) -> Self {
        Self {
            principal_id,
            principal_type,
            principal_metadata: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationPolicy {
    #[serde(rename = "policyName", default, skip_serializing_if = "Option::is_none")]
    pub policy_name: Option<String>,
    pub permissions: Vec<PermissionTypes>,
    #[serde(rename = "primaryKey", default, skip_serializing_if = "Option::is_none")]
    pub primary_key: Option<String>,
    #[serde(rename = "secondaryKey", default, skip_serializing_if = "Option::is_none")]
    pub secondary_key: Option<String>,
}
impl AuthorizationPolicy {
    pub fn new(permissions: Vec<PermissionTypes>) -> Self {
        Self {
            policy_name: None,
            permissions,
            primary_key: None,
            secondary_key: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AuthorizationPolicyListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AuthorizationPolicyResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl AuthorizationPolicyListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AuthorizationPolicyResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<AuthorizationPolicy>,
}
impl AuthorizationPolicyResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureBlobConnectorProperties {
    #[serde(rename = "connectionKeyVaultUrl")]
    pub connection_key_vault_url: String,
}
impl AzureBlobConnectorProperties {
    pub fn new(connection_key_vault_url: String) -> Self {
        Self { connection_key_vault_url }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CanonicalProfileDefinition {
    #[serde(rename = "canonicalProfileId", default, skip_serializing_if = "Option::is_none")]
    pub canonical_profile_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub properties: Vec<serde_json::Value>,
}
impl CanonicalProfileDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Connector {
    #[serde(rename = "connectorId", default, skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<i64>,
    #[serde(rename = "connectorName", default, skip_serializing_if = "Option::is_none")]
    pub connector_name: Option<String>,
    #[serde(rename = "connectorType")]
    pub connector_type: ConnectorType,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "connectorProperties")]
    pub connector_properties: serde_json::Value,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<connector::State>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "isInternal", default, skip_serializing_if = "Option::is_none")]
    pub is_internal: Option<bool>,
}
impl Connector {
    pub fn new(connector_type: ConnectorType, connector_properties: serde_json::Value) -> Self {
        Self {
            connector_id: None,
            connector_name: None,
            connector_type,
            display_name: None,
            description: None,
            connector_properties,
            created: None,
            last_modified: None,
            state: None,
            tenant_id: None,
            is_internal: None,
        }
    }
}
pub mod connector {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Creating,
        Created,
        Ready,
        Expiring,
        Deleting,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ConnectorListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ConnectorResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl ConnectorListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMapping {
    #[serde(rename = "connectorName", default, skip_serializing_if = "Option::is_none")]
    pub connector_name: Option<String>,
    #[serde(rename = "connectorType", default, skip_serializing_if = "Option::is_none")]
    pub connector_type: Option<ConnectorType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[serde(rename = "entityType")]
    pub entity_type: connector_mapping::EntityType,
    #[serde(rename = "entityTypeName")]
    pub entity_type_name: String,
    #[serde(rename = "connectorMappingName", default, skip_serializing_if = "Option::is_none")]
    pub connector_mapping_name: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "dataFormatId", default, skip_serializing_if = "Option::is_none")]
    pub data_format_id: Option<String>,
    #[serde(rename = "mappingProperties")]
    pub mapping_properties: ConnectorMappingProperties,
    #[serde(rename = "nextRunTime", default, skip_serializing_if = "Option::is_none")]
    pub next_run_time: Option<String>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<connector_mapping::State>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}
impl ConnectorMapping {
    pub fn new(
        entity_type: connector_mapping::EntityType,
        entity_type_name: String,
        mapping_properties: ConnectorMappingProperties,
    ) -> Self {
        Self {
            connector_name: None,
            connector_type: None,
            created: None,
            last_modified: None,
            entity_type,
            entity_type_name,
            connector_mapping_name: None,
            display_name: None,
            description: None,
            data_format_id: None,
            mapping_properties,
            next_run_time: None,
            run_id: None,
            state: None,
            tenant_id: None,
        }
    }
}
pub mod connector_mapping {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EntityType {
        None,
        Profile,
        Interaction,
        Relationship,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Creating,
        Created,
        Failed,
        Ready,
        Running,
        Stopped,
        Expiring,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMappingAvailability {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub frequency: Option<connector_mapping_availability::Frequency>,
    pub interval: i64,
}
impl ConnectorMappingAvailability {
    pub fn new(interval: i64) -> Self {
        Self { frequency: None, interval }
    }
}
pub mod connector_mapping_availability {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Frequency {
        Minute,
        Hour,
        Day,
        Week,
        Month,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ConnectorMappingCompleteOperation {
    #[serde(rename = "completionOperationType", default, skip_serializing_if = "Option::is_none")]
    pub completion_operation_type: Option<connector_mapping_complete_operation::CompletionOperationType>,
    #[serde(rename = "destinationFolder", default, skip_serializing_if = "Option::is_none")]
    pub destination_folder: Option<String>,
}
impl ConnectorMappingCompleteOperation {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod connector_mapping_complete_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CompletionOperationType {
        DoNothing,
        DeleteFile,
        MoveFile,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMappingErrorManagement {
    #[serde(rename = "errorManagementType")]
    pub error_management_type: connector_mapping_error_management::ErrorManagementType,
    #[serde(rename = "errorLimit", default, skip_serializing_if = "Option::is_none")]
    pub error_limit: Option<i64>,
}
impl ConnectorMappingErrorManagement {
    pub fn new(error_management_type: connector_mapping_error_management::ErrorManagementType) -> Self {
        Self {
            error_management_type,
            error_limit: None,
        }
    }
}
pub mod connector_mapping_error_management {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ErrorManagementType {
        RejectAndContinue,
        StopImport,
        RejectUntilLimit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMappingFormat {
    #[serde(rename = "formatType")]
    pub format_type: connector_mapping_format::FormatType,
    #[serde(rename = "columnDelimiter", default, skip_serializing_if = "Option::is_none")]
    pub column_delimiter: Option<String>,
    #[serde(rename = "acceptLanguage", default, skip_serializing_if = "Option::is_none")]
    pub accept_language: Option<String>,
    #[serde(rename = "quoteCharacter", default, skip_serializing_if = "Option::is_none")]
    pub quote_character: Option<String>,
    #[serde(rename = "quoteEscapeCharacter", default, skip_serializing_if = "Option::is_none")]
    pub quote_escape_character: Option<String>,
    #[serde(rename = "arraySeparator", default, skip_serializing_if = "Option::is_none")]
    pub array_separator: Option<String>,
}
impl ConnectorMappingFormat {
    pub fn new(format_type: connector_mapping_format::FormatType) -> Self {
        Self {
            format_type,
            column_delimiter: None,
            accept_language: None,
            quote_character: None,
            quote_escape_character: None,
            array_separator: None,
        }
    }
}
pub mod connector_mapping_format {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FormatType {
        TextFormat,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ConnectorMappingListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ConnectorMappingResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl ConnectorMappingListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMappingProperties {
    #[serde(rename = "folderPath", default, skip_serializing_if = "Option::is_none")]
    pub folder_path: Option<String>,
    #[serde(rename = "fileFilter", default, skip_serializing_if = "Option::is_none")]
    pub file_filter: Option<String>,
    #[serde(rename = "hasHeader", default, skip_serializing_if = "Option::is_none")]
    pub has_header: Option<bool>,
    #[serde(rename = "errorManagement")]
    pub error_management: ConnectorMappingErrorManagement,
    pub format: ConnectorMappingFormat,
    pub availability: ConnectorMappingAvailability,
    pub structure: Vec<ConnectorMappingStructure>,
    #[serde(rename = "completeOperation")]
    pub complete_operation: ConnectorMappingCompleteOperation,
}
impl ConnectorMappingProperties {
    pub fn new(
        error_management: ConnectorMappingErrorManagement,
        format: ConnectorMappingFormat,
        availability: ConnectorMappingAvailability,
        structure: Vec<ConnectorMappingStructure>,
        complete_operation: ConnectorMappingCompleteOperation,
    ) -> Self {
        Self {
            folder_path: None,
            file_filter: None,
            has_header: None,
            error_management,
            format,
            availability,
            structure,
            complete_operation,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ConnectorMappingResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<ConnectorMapping>,
}
impl ConnectorMappingResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConnectorMappingStructure {
    #[serde(rename = "propertyName")]
    pub property_name: String,
    #[serde(rename = "columnName")]
    pub column_name: String,
    #[serde(rename = "customFormatSpecifier", default, skip_serializing_if = "Option::is_none")]
    pub custom_format_specifier: Option<String>,
    #[serde(rename = "isEncrypted", default, skip_serializing_if = "Option::is_none")]
    pub is_encrypted: Option<bool>,
}
impl ConnectorMappingStructure {
    pub fn new(property_name: String, column_name: String) -> Self {
        Self {
            property_name,
            column_name,
            custom_format_specifier: None,
            is_encrypted: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ConnectorResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Connector>,
}
impl ConnectorResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ConnectorType {
    None,
    #[serde(rename = "CRM")]
    Crm,
    AzureBlob,
    Salesforce,
    ExchangeOnline,
    Outbound,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CrmConnectorEntities {
    #[serde(rename = "logicalName")]
    pub logical_name: String,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "isProfile", default, skip_serializing_if = "Option::is_none")]
    pub is_profile: Option<bool>,
}
impl CrmConnectorEntities {
    pub fn new(logical_name: String) -> Self {
        Self {
            logical_name,
            display_name: None,
            is_profile: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CrmConnectorProperties {
    #[serde(rename = "connectionString", default, skip_serializing_if = "Option::is_none")]
    pub connection_string: Option<String>,
    #[serde(rename = "organizationId")]
    pub organization_id: String,
    #[serde(rename = "organizationUrl")]
    pub organization_url: String,
    pub entities: Vec<CrmConnectorEntities>,
    #[serde(rename = "accessToken", default, skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
}
impl CrmConnectorProperties {
    pub fn new(organization_id: String, organization_url: String, entities: Vec<CrmConnectorEntities>) -> Self {
        Self {
            connection_string: None,
            organization_id,
            organization_url,
            entities,
            access_token: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct DataSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "dataSourceType", default, skip_serializing_if = "Option::is_none")]
    pub data_source_type: Option<data_source::DataSourceType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<data_source::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "dataSourceReferenceId", default, skip_serializing_if = "Option::is_none")]
    pub data_source_reference_id: Option<String>,
}
impl DataSource {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod data_source {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSourceType {
        Connector,
        LinkInteraction,
        SystemDefault,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        None,
        Active,
        Deleted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct DataSourcePrecedence {
    #[serde(rename = "dataSource", default, skip_serializing_if = "Option::is_none")]
    pub data_source: Option<DataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub precedence: Option<i64>,
}
impl DataSourcePrecedence {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrichingKpi {
    #[serde(flatten)]
    pub kpi_definition: KpiDefinition,
}
impl EnrichingKpi {
    pub fn new(kpi_definition: KpiDefinition) -> Self {
        Self { kpi_definition }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct EntityTypeDefinition {
    #[serde(flatten)]
    pub metadata_definition_base: MetadataDefinitionBase,
    #[serde(rename = "apiEntitySetName", default, skip_serializing_if = "Option::is_none")]
    pub api_entity_set_name: Option<String>,
    #[serde(rename = "entityType", default, skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<entity_type_definition::EntityType>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<PropertyDefinition>,
    #[serde(rename = "instancesCount", default, skip_serializing_if = "Option::is_none")]
    pub instances_count: Option<i64>,
    #[serde(rename = "lastChangedUtc", default, skip_serializing_if = "Option::is_none")]
    pub last_changed_utc: Option<String>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "schemaItemTypeLink", default, skip_serializing_if = "Option::is_none")]
    pub schema_item_type_link: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "timestampFieldName", default, skip_serializing_if = "Option::is_none")]
    pub timestamp_field_name: Option<String>,
    #[serde(rename = "typeName", default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
}
impl EntityTypeDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod entity_type_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EntityType {
        None,
        Profile,
        Interaction,
        Relationship,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct GetImageUploadUrlInput {
    #[serde(rename = "entityType", default, skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<String>,
    #[serde(rename = "entityTypeName", default, skip_serializing_if = "Option::is_none")]
    pub entity_type_name: Option<String>,
    #[serde(rename = "relativePath", default, skip_serializing_if = "Option::is_none")]
    pub relative_path: Option<String>,
}
impl GetImageUploadUrlInput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Hub {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<HubPropertiesFormat>,
}
impl Hub {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct HubBillingInfoFormat {
    #[serde(rename = "skuName", default, skip_serializing_if = "Option::is_none")]
    pub sku_name: Option<String>,
    #[serde(rename = "minUnits", default, skip_serializing_if = "Option::is_none")]
    pub min_units: Option<i64>,
    #[serde(rename = "maxUnits", default, skip_serializing_if = "Option::is_none")]
    pub max_units: Option<i64>,
}
impl HubBillingInfoFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct HubListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Hub>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl HubListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct HubPropertiesFormat {
    #[serde(rename = "apiEndpoint", default, skip_serializing_if = "Option::is_none")]
    pub api_endpoint: Option<String>,
    #[serde(rename = "webEndpoint", default, skip_serializing_if = "Option::is_none")]
    pub web_endpoint: Option<String>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[serde(rename = "tenantFeatures", default, skip_serializing_if = "Option::is_none")]
    pub tenant_features: Option<i64>,
    #[serde(rename = "hubBillingInfo", default, skip_serializing_if = "Option::is_none")]
    pub hub_billing_info: Option<HubBillingInfoFormat>,
}
impl HubPropertiesFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ImageDefinition {
    #[serde(rename = "imageExists", default, skip_serializing_if = "Option::is_none")]
    pub image_exists: Option<bool>,
    #[serde(rename = "contentUrl", default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<String>,
    #[serde(rename = "relativePath", default, skip_serializing_if = "Option::is_none")]
    pub relative_path: Option<String>,
}
impl ImageDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct InteractionListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<InteractionResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl InteractionListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct InteractionResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<InteractionTypeDefinition>,
}
impl InteractionResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct InteractionTypeDefinition {
    #[serde(flatten)]
    pub entity_type_definition: EntityTypeDefinition,
    #[serde(rename = "idPropertyNames", default, skip_serializing_if = "Vec::is_empty")]
    pub id_property_names: Vec<String>,
    #[serde(rename = "participantProfiles", default, skip_serializing_if = "Vec::is_empty")]
    pub participant_profiles: Vec<Participant>,
    #[serde(rename = "primaryParticipantProfilePropertyName", default, skip_serializing_if = "Option::is_none")]
    pub primary_participant_profile_property_name: Option<String>,
    #[serde(rename = "dataSourcePrecedenceRules", default, skip_serializing_if = "Vec::is_empty")]
    pub data_source_precedence_rules: Vec<DataSourcePrecedence>,
    #[serde(rename = "defaultDataSource", default, skip_serializing_if = "Option::is_none")]
    pub default_data_source: Option<DataSource>,
    #[serde(rename = "isActivity", default, skip_serializing_if = "Option::is_none")]
    pub is_activity: Option<bool>,
}
impl InteractionTypeDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KpiAlias {
    #[serde(rename = "aliasName")]
    pub alias_name: String,
    pub expression: String,
}
impl KpiAlias {
    pub fn new(alias_name: String, expression: String) -> Self {
        Self { alias_name, expression }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KpiDefinition {
    #[serde(rename = "entityType")]
    pub entity_type: kpi_definition::EntityType,
    #[serde(rename = "entityTypeName")]
    pub entity_type_name: String,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "kpiName", default, skip_serializing_if = "Option::is_none")]
    pub kpi_name: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "calculationWindow")]
    pub calculation_window: kpi_definition::CalculationWindow,
    #[serde(rename = "calculationWindowFieldName", default, skip_serializing_if = "Option::is_none")]
    pub calculation_window_field_name: Option<String>,
    pub function: kpi_definition::Function,
    pub expression: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    #[serde(rename = "groupBy", default, skip_serializing_if = "Vec::is_empty")]
    pub group_by: Vec<String>,
    #[serde(rename = "groupByMetadata", default, skip_serializing_if = "Vec::is_empty")]
    pub group_by_metadata: Vec<KpiGroupByMetadata>,
    #[serde(rename = "participantProfilesMetadata", default, skip_serializing_if = "Vec::is_empty")]
    pub participant_profiles_metadata: Vec<KpiParticipantProfilesMetadata>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "thresHolds", default, skip_serializing_if = "Option::is_none")]
    pub thres_holds: Option<KpiThresholds>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub aliases: Vec<KpiAlias>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub extracts: Vec<KpiExtract>,
}
impl KpiDefinition {
    pub fn new(
        entity_type: kpi_definition::EntityType,
        entity_type_name: String,
        calculation_window: kpi_definition::CalculationWindow,
        function: kpi_definition::Function,
        expression: String,
    ) -> Self {
        Self {
            entity_type,
            entity_type_name,
            tenant_id: None,
            kpi_name: None,
            display_name: None,
            description: None,
            calculation_window,
            calculation_window_field_name: None,
            function,
            expression,
            unit: None,
            filter: None,
            group_by: Vec::new(),
            group_by_metadata: Vec::new(),
            participant_profiles_metadata: Vec::new(),
            provisioning_state: None,
            thres_holds: None,
            aliases: Vec::new(),
            extracts: Vec::new(),
        }
    }
}
pub mod kpi_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EntityType {
        None,
        Profile,
        Interaction,
        Relationship,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CalculationWindow {
        Lifetime,
        Hour,
        Day,
        Week,
        Month,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Function {
        Sum,
        Avg,
        Min,
        Max,
        Last,
        Count,
        None,
        CountDistinct,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KpiExtract {
    #[serde(rename = "extractName")]
    pub extract_name: String,
    pub expression: String,
}
impl KpiExtract {
    pub fn new(extract_name: String, expression: String) -> Self {
        Self { extract_name, expression }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct KpiGroupByMetadata {
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(rename = "fieldType", default, skip_serializing_if = "Option::is_none")]
    pub field_type: Option<String>,
}
impl KpiGroupByMetadata {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct KpiListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<KpiResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl KpiListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KpiParticipantProfilesMetadata {
    #[serde(rename = "typeName")]
    pub type_name: String,
}
impl KpiParticipantProfilesMetadata {
    pub fn new(type_name: String) -> Self {
        Self { type_name }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct KpiResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<KpiDefinition>,
}
impl KpiResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KpiThresholds {
    #[serde(rename = "lowerLimit")]
    pub lower_limit: f64,
    #[serde(rename = "upperLimit")]
    pub upper_limit: f64,
    #[serde(rename = "increasingKpi")]
    pub increasing_kpi: bool,
}
impl KpiThresholds {
    pub fn new(lower_limit: f64, upper_limit: f64, increasing_kpi: bool) -> Self {
        Self {
            lower_limit,
            upper_limit,
            increasing_kpi,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinkDefinition {
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "linkName", default, skip_serializing_if = "Option::is_none")]
    pub link_name: Option<String>,
    #[serde(rename = "sourceEntityType")]
    pub source_entity_type: link_definition::SourceEntityType,
    #[serde(rename = "targetEntityType")]
    pub target_entity_type: link_definition::TargetEntityType,
    #[serde(rename = "sourceEntityTypeName")]
    pub source_entity_type_name: String,
    #[serde(rename = "targetEntityTypeName")]
    pub target_entity_type_name: String,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<TypePropertiesMapping>,
    #[serde(rename = "participantPropertyReferences")]
    pub participant_property_references: Vec<ParticipantPropertyReference>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "referenceOnly", default, skip_serializing_if = "Option::is_none")]
    pub reference_only: Option<bool>,
    #[serde(rename = "operationType", default, skip_serializing_if = "Option::is_none")]
    pub operation_type: Option<link_definition::OperationType>,
}
impl LinkDefinition {
    pub fn new(
        source_entity_type: link_definition::SourceEntityType,
        target_entity_type: link_definition::TargetEntityType,
        source_entity_type_name: String,
        target_entity_type_name: String,
        participant_property_references: Vec<ParticipantPropertyReference>,
    ) -> Self {
        Self {
            tenant_id: None,
            link_name: None,
            source_entity_type,
            target_entity_type,
            source_entity_type_name,
            target_entity_type_name,
            display_name: None,
            description: None,
            mappings: Vec::new(),
            participant_property_references,
            provisioning_state: None,
            reference_only: None,
            operation_type: None,
        }
    }
}
pub mod link_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceEntityType {
        None,
        Profile,
        Interaction,
        Relationship,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetEntityType {
        None,
        Profile,
        Interaction,
        Relationship,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationType {
        Upsert,
        Delete,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LinkListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LinkResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl LinkListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LinkResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<LinkDefinition>,
}
impl LinkResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MetadataDefinitionBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(rename = "localizedAttributes", default, skip_serializing_if = "Option::is_none")]
    pub localized_attributes: Option<serde_json::Value>,
    #[serde(rename = "smallImage", default, skip_serializing_if = "Option::is_none")]
    pub small_image: Option<String>,
    #[serde(rename = "mediumImage", default, skip_serializing_if = "Option::is_none")]
    pub medium_image: Option<String>,
    #[serde(rename = "largeImage", default, skip_serializing_if = "Option::is_none")]
    pub large_image: Option<String>,
}
impl MetadataDefinitionBase {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Operation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
impl Operation {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
    pub struct Display {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
    }
    impl Display {
        pub fn new() -> Self {
            Self::default()
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl OperationListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Participant {
    #[serde(rename = "profileTypeName")]
    pub profile_type_name: String,
    #[serde(rename = "participantPropertyReferences")]
    pub participant_property_references: Vec<ParticipantPropertyReference>,
    #[serde(rename = "participantName")]
    pub participant_name: String,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}
impl Participant {
    pub fn new(
        profile_type_name: String,
        participant_property_references: Vec<ParticipantPropertyReference>,
        participant_name: String,
    ) -> Self {
        Self {
            profile_type_name,
            participant_property_references,
            participant_name,
            display_name: None,
            description: None,
            role: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParticipantProfilePropertyReference {
    #[serde(rename = "interactionPropertyName")]
    pub interaction_property_name: String,
    #[serde(rename = "profilePropertyName")]
    pub profile_property_name: String,
}
impl ParticipantProfilePropertyReference {
    pub fn new(interaction_property_name: String, profile_property_name: String) -> Self {
        Self {
            interaction_property_name,
            profile_property_name,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParticipantPropertyReference {
    #[serde(rename = "sourcePropertyName")]
    pub source_property_name: String,
    #[serde(rename = "targetPropertyName")]
    pub target_property_name: String,
}
impl ParticipantPropertyReference {
    pub fn new(source_property_name: String, target_property_name: String) -> Self {
        Self {
            source_property_name,
            target_property_name,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum PermissionTypes {
    Read,
    Write,
    Manage,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Prediction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(rename = "involvedInteractionTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub involved_interaction_types: Vec<String>,
    #[serde(rename = "involvedKpiTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub involved_kpi_types: Vec<String>,
    #[serde(rename = "involvedRelationships", default, skip_serializing_if = "Vec::is_empty")]
    pub involved_relationships: Vec<String>,
    #[serde(rename = "negativeOutcomeExpression")]
    pub negative_outcome_expression: String,
    #[serde(rename = "positiveOutcomeExpression")]
    pub positive_outcome_expression: String,
    #[serde(rename = "primaryProfileType")]
    pub primary_profile_type: String,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "predictionName", default, skip_serializing_if = "Option::is_none")]
    pub prediction_name: Option<String>,
    #[serde(rename = "scopeExpression")]
    pub scope_expression: String,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "autoAnalyze")]
    pub auto_analyze: bool,
    pub mappings: prediction::Mappings,
    #[serde(rename = "scoreLabel")]
    pub score_label: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub grades: Vec<serde_json::Value>,
    #[serde(rename = "systemGeneratedEntities", default, skip_serializing_if = "Option::is_none")]
    pub system_generated_entities: Option<prediction::SystemGeneratedEntities>,
}
impl Prediction {
    pub fn new(
        negative_outcome_expression: String,
        positive_outcome_expression: String,
        primary_profile_type: String,
        scope_expression: String,
        auto_analyze: bool,
        mappings: prediction::Mappings,
        score_label: String,
    ) -> Self {
        Self {
            description: None,
            display_name: None,
            involved_interaction_types: Vec::new(),
            involved_kpi_types: Vec::new(),
            involved_relationships: Vec::new(),
            negative_outcome_expression,
            positive_outcome_expression,
            primary_profile_type,
            provisioning_state: None,
            prediction_name: None,
            scope_expression,
            tenant_id: None,
            auto_analyze,
            mappings,
            score_label,
            grades: Vec::new(),
            system_generated_entities: None,
        }
    }
}
pub mod prediction {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Mappings {
        pub score: String,
        pub grade: String,
        pub reason: String,
    }
    impl Mappings {
        pub fn new(score: String, grade: String, reason: String) -> Self {
            Self { score, grade, reason }
        }
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
    pub struct SystemGeneratedEntities {
        #[serde(rename = "generatedInteractionTypes", default, skip_serializing_if = "Vec::is_empty")]
        pub generated_interaction_types: Vec<String>,
        #[serde(rename = "generatedLinks", default, skip_serializing_if = "Vec::is_empty")]
        pub generated_links: Vec<String>,
        #[serde(rename = "generatedKpis", default, skip_serializing_if = "Option::is_none")]
        pub generated_kpis: Option<serde_json::Value>,
    }
    impl SystemGeneratedEntities {
        pub fn new() -> Self {
            Self::default()
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PredictionDistributionDefinition {
    #[serde(rename = "totalPositives", default, skip_serializing_if = "Option::is_none")]
    pub total_positives: Option<i64>,
    #[serde(rename = "totalNegatives", default, skip_serializing_if = "Option::is_none")]
    pub total_negatives: Option<i64>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub distributions: Vec<serde_json::Value>,
}
impl PredictionDistributionDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PredictionListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<PredictionResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl PredictionListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredictionModelStatus {
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "predictionName", default, skip_serializing_if = "Option::is_none")]
    pub prediction_name: Option<String>,
    #[serde(rename = "predictionGuidId", default, skip_serializing_if = "Option::is_none")]
    pub prediction_guid_id: Option<String>,
    pub status: prediction_model_status::Status,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "trainingSetCount", default, skip_serializing_if = "Option::is_none")]
    pub training_set_count: Option<i64>,
    #[serde(rename = "testSetCount", default, skip_serializing_if = "Option::is_none")]
    pub test_set_count: Option<i64>,
    #[serde(rename = "validationSetCount", default, skip_serializing_if = "Option::is_none")]
    pub validation_set_count: Option<i64>,
    #[serde(rename = "trainingAccuracy", default, skip_serializing_if = "Option::is_none")]
    pub training_accuracy: Option<i64>,
    #[serde(rename = "signalsUsed", default, skip_serializing_if = "Option::is_none")]
    pub signals_used: Option<i64>,
    #[serde(rename = "modelVersion", default, skip_serializing_if = "Option::is_none")]
    pub model_version: Option<String>,
}
impl PredictionModelStatus {
    pub fn new(status: prediction_model_status::Status) -> Self {
        Self {
            tenant_id: None,
            prediction_name: None,
            prediction_guid_id: None,
            status,
            message: None,
            training_set_count: None,
            test_set_count: None,
            validation_set_count: None,
            training_accuracy: None,
            signals_used: None,
            model_version: None,
        }
    }
}
pub mod prediction_model_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        New,
        Provisioning,
        ProvisioningFailed,
        PendingDiscovering,
        Discovering,
        PendingFeaturing,
        Featuring,
        FeaturingFailed,
        PendingTraining,
        Training,
        TrainingFailed,
        Evaluating,
        EvaluatingFailed,
        PendingModelConfirmation,
        Active,
        Deleted,
        HumanIntervention,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PredictionResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Prediction>,
}
impl PredictionResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PredictionTrainingResults {
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "scoreName", default, skip_serializing_if = "Option::is_none")]
    pub score_name: Option<String>,
    #[serde(rename = "predictionDistribution", default, skip_serializing_if = "Option::is_none")]
    pub prediction_distribution: Option<PredictionDistributionDefinition>,
    #[serde(rename = "canonicalProfiles", default, skip_serializing_if = "Vec::is_empty")]
    pub canonical_profiles: Vec<CanonicalProfileDefinition>,
    #[serde(rename = "primaryProfileInstanceCount", default, skip_serializing_if = "Option::is_none")]
    pub primary_profile_instance_count: Option<i64>,
}
impl PredictionTrainingResults {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProfileEnumValidValuesFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i64>,
    #[serde(rename = "localizedValueNames", default, skip_serializing_if = "Option::is_none")]
    pub localized_value_names: Option<serde_json::Value>,
}
impl ProfileEnumValidValuesFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProfileListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ProfileResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl ProfileListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProfileResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProfileTypeDefinition>,
}
impl ProfileResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProfileTypeDefinition {
    #[serde(flatten)]
    pub entity_type_definition: EntityTypeDefinition,
    #[serde(rename = "strongIds", default, skip_serializing_if = "Vec::is_empty")]
    pub strong_ids: Vec<StrongId>,
}
impl ProfileTypeDefinition {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyDefinition {
    #[serde(rename = "arrayValueSeparator", default, skip_serializing_if = "Option::is_none")]
    pub array_value_separator: Option<String>,
    #[serde(rename = "enumValidValues", default, skip_serializing_if = "Vec::is_empty")]
    pub enum_valid_values: Vec<ProfileEnumValidValuesFormat>,
    #[serde(rename = "fieldName")]
    pub field_name: String,
    #[serde(rename = "fieldType")]
    pub field_type: String,
    #[serde(rename = "isArray", default, skip_serializing_if = "Option::is_none")]
    pub is_array: Option<bool>,
    #[serde(rename = "isEnum", default, skip_serializing_if = "Option::is_none")]
    pub is_enum: Option<bool>,
    #[serde(rename = "isFlagEnum", default, skip_serializing_if = "Option::is_none")]
    pub is_flag_enum: Option<bool>,
    #[serde(rename = "isImage", default, skip_serializing_if = "Option::is_none")]
    pub is_image: Option<bool>,
    #[serde(rename = "isLocalizedString", default, skip_serializing_if = "Option::is_none")]
    pub is_localized_string: Option<bool>,
    #[serde(rename = "isName", default, skip_serializing_if = "Option::is_none")]
    pub is_name: Option<bool>,
    #[serde(rename = "isRequired", default, skip_serializing_if = "Option::is_none")]
    pub is_required: Option<bool>,
    #[serde(rename = "propertyId", default, skip_serializing_if = "Option::is_none")]
    pub property_id: Option<String>,
    #[serde(rename = "schemaItemPropLink", default, skip_serializing_if = "Option::is_none")]
    pub schema_item_prop_link: Option<String>,
    #[serde(rename = "maxLength", default, skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i64>,
    #[serde(rename = "isAvailableInGraph", default, skip_serializing_if = "Option::is_none")]
    pub is_available_in_graph: Option<bool>,
    #[serde(rename = "dataSourcePrecedenceRules", default, skip_serializing_if = "Vec::is_empty")]
    pub data_source_precedence_rules: Vec<DataSourcePrecedence>,
}
impl PropertyDefinition {
    pub fn new(field_name: String, field_type: String) -> Self {
        Self {
            array_value_separator: None,
            enum_valid_values: Vec::new(),
            field_name,
            field_type,
            is_array: None,
            is_enum: None,
            is_flag_enum: None,
            is_image: None,
            is_localized_string: None,
            is_name: None,
            is_required: None,
            property_id: None,
            schema_item_prop_link: None,
            max_length: None,
            is_available_in_graph: None,
            data_source_precedence_rules: Vec::new(),
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProvisioningState {
    Provisioning,
    Succeeded,
    Expiring,
    Deleting,
    HumanIntervention,
    Failed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProxyResource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
impl ProxyResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cardinality: Option<relationship_definition::Cardinality>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "expiryDateTimeUtc", default, skip_serializing_if = "Option::is_none")]
    pub expiry_date_time_utc: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<PropertyDefinition>,
    #[serde(rename = "lookupMappings", default, skip_serializing_if = "Vec::is_empty")]
    pub lookup_mappings: Vec<RelationshipTypeMapping>,
    #[serde(rename = "profileType")]
    pub profile_type: String,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "relationshipName", default, skip_serializing_if = "Option::is_none")]
    pub relationship_name: Option<String>,
    #[serde(rename = "relatedProfileType")]
    pub related_profile_type: String,
    #[serde(rename = "relationshipGuidId", default, skip_serializing_if = "Option::is_none")]
    pub relationship_guid_id: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}
impl RelationshipDefinition {
    pub fn new(profile_type: String, related_profile_type: String) -> Self {
        Self {
            cardinality: None,
            display_name: None,
            description: None,
            expiry_date_time_utc: None,
            fields: Vec::new(),
            lookup_mappings: Vec::new(),
            profile_type,
            provisioning_state: None,
            relationship_name: None,
            related_profile_type,
            relationship_guid_id: None,
            tenant_id: None,
        }
    }
}
pub mod relationship_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Cardinality {
        OneToOne,
        OneToMany,
        ManyToMany,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipLinkDefinition {
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "interactionType")]
    pub interaction_type: String,
    #[serde(rename = "linkName", default, skip_serializing_if = "Option::is_none")]
    pub link_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<RelationshipLinkFieldMapping>,
    #[serde(rename = "profilePropertyReferences")]
    pub profile_property_references: Vec<ParticipantProfilePropertyReference>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    #[serde(rename = "relatedProfilePropertyReferences")]
    pub related_profile_property_references: Vec<ParticipantProfilePropertyReference>,
    #[serde(rename = "relationshipName")]
    pub relationship_name: String,
    #[serde(rename = "relationshipGuidId", default, skip_serializing_if = "Option::is_none")]
    pub relationship_guid_id: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}
impl RelationshipLinkDefinition {
    pub fn new(
        interaction_type: String,
        profile_property_references: Vec<ParticipantProfilePropertyReference>,
        related_profile_property_references: Vec<ParticipantProfilePropertyReference>,
        relationship_name: String,
    ) -> Self {
        Self {
            display_name: None,
            description: None,
            interaction_type,
            link_name: None,
            mappings: Vec::new(),
            profile_property_references,
            provisioning_state: None,
            related_profile_property_references,
            relationship_name,
            relationship_guid_id: None,
            tenant_id: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipLinkFieldMapping {
    #[serde(rename = "interactionFieldName")]
    pub interaction_field_name: String,
    #[serde(rename = "linkType", default, skip_serializing_if = "Option::is_none")]
    pub link_type: Option<relationship_link_field_mapping::LinkType>,
    #[serde(rename = "relationshipFieldName")]
    pub relationship_field_name: String,
}
impl RelationshipLinkFieldMapping {
    pub fn new(interaction_field_name: String, relationship_field_name: String) -> Self {
        Self {
            interaction_field_name,
            link_type: None,
            relationship_field_name,
        }
    }
}
pub mod relationship_link_field_mapping {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LinkType {
        UpdateAlways,
        CopyIfNull,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RelationshipLinkListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RelationshipLinkResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl RelationshipLinkListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RelationshipLinkResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<RelationshipLinkDefinition>,
}
impl RelationshipLinkResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RelationshipListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RelationshipResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl RelationshipListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RelationshipResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<RelationshipDefinition>,
}
impl RelationshipResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipTypeFieldMapping {
    #[serde(rename = "profileFieldName")]
    pub profile_field_name: String,
    #[serde(rename = "relatedProfileKeyProperty")]
    pub related_profile_key_property: String,
}
impl RelationshipTypeFieldMapping {
    pub fn new(profile_field_name: String, related_profile_key_property: String) -> Self {
        Self {
            profile_field_name,
            related_profile_key_property,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipTypeMapping {
    #[serde(rename = "fieldMappings")]
    pub field_mappings: Vec<RelationshipTypeFieldMapping>,
}
impl RelationshipTypeMapping {
    pub fn new(field_mappings: Vec<RelationshipTypeFieldMapping>) -> Self {
        Self { field_mappings }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RelationshipsLookup {
    #[serde(rename = "profileName", default, skip_serializing_if = "Option::is_none")]
    pub profile_name: Option<String>,
    #[serde(rename = "profilePropertyReferences", default, skip_serializing_if = "Vec::is_empty")]
    pub profile_property_references: Vec<ParticipantProfilePropertyReference>,
    #[serde(rename = "relatedProfileName", default, skip_serializing_if = "Option::is_none")]
    pub related_profile_name: Option<String>,
    #[serde(rename = "relatedProfilePropertyReferences", default, skip_serializing_if = "Vec::is_empty")]
    pub related_profile_property_references: Vec<ParticipantProfilePropertyReference>,
    #[serde(rename = "existingRelationshipName", default, skip_serializing_if = "Option::is_none")]
    pub existing_relationship_name: Option<String>,
}
impl RelationshipsLookup {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Resource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
impl Resource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ResourceSetDescription {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub elements: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub exceptions: Vec<String>,
}
impl ResourceSetDescription {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Role {
    #[serde(rename = "roleName", default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
impl Role {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RoleAssignment {
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "assignmentName", default, skip_serializing_if = "Option::is_none")]
    pub assignment_name: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ProvisioningState>,
    pub role: role_assignment::Role,
    pub principals: Vec<AssignmentPrincipal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interactions: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kpis: Option<ResourceSetDescription>,
    #[serde(rename = "sasPolicies", default, skip_serializing_if = "Option::is_none")]
    pub sas_policies: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connectors: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub views: Option<ResourceSetDescription>,
    #[serde(rename = "relationshipLinks", default, skip_serializing_if = "Option::is_none")]
    pub relationship_links: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relationships: Option<ResourceSetDescription>,
    #[serde(rename = "widgetTypes", default, skip_serializing_if = "Option::is_none")]
    pub widget_types: Option<ResourceSetDescription>,
    #[serde(rename = "roleAssignments", default, skip_serializing_if = "Option::is_none")]
    pub role_assignments: Option<ResourceSetDescription>,
    #[serde(rename = "conflationPolicies", default, skip_serializing_if = "Option::is_none")]
    pub conflation_policies: Option<ResourceSetDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub segments: Option<ResourceSetDescription>,
}
impl RoleAssignment {
    pub fn new(role: role_assignment::Role, principals: Vec<AssignmentPrincipal>) -> Self {
        Self {
            tenant_id: None,
            assignment_name: None,
            display_name: None,
            description: None,
            provisioning_state: None,
            role,
            principals,
            profiles: None,
            interactions: None,
            links: None,
            kpis: None,
            sas_policies: None,
            connectors: None,
            views: None,
            relationship_links: None,
            relationships: None,
            widget_types: None,
            role_assignments: None,
            conflation_policies: None,
            segments: None,
        }
    }
}
pub mod role_assignment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Role {
        Admin,
        Reader,
        ManageAdmin,
        ManageReader,
        DataAdmin,
        DataReader,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RoleAssignmentListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RoleAssignmentResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl RoleAssignmentListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RoleAssignmentResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<RoleAssignment>,
}
impl RoleAssignmentResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RoleListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RoleResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl RoleListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RoleResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Role>,
}
impl RoleResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SalesforceConnectorProperties {
    pub usersetting: SalesforceDiscoverSetting,
    pub salesforcetables: Vec<SalesforceTable>,
}
impl SalesforceConnectorProperties {
    pub fn new(usersetting: SalesforceDiscoverSetting, salesforcetables: Vec<SalesforceTable>) -> Self {
        Self {
            usersetting,
            salesforcetables,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SalesforceDiscoverSetting {
    #[serde(rename = "salesforceConnectionStringSecretUrl")]
    pub salesforce_connection_string_secret_url: String,
}
impl SalesforceDiscoverSetting {
    pub fn new(salesforce_connection_string_secret_url: String) -> Self {
        Self {
            salesforce_connection_string_secret_url,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SalesforceTable {
    #[serde(rename = "isProfile", default, skip_serializing_if = "Option::is_none")]
    pub is_profile: Option<String>,
    #[serde(rename = "tableCategory")]
    pub table_category: String,
    #[serde(rename = "tableName")]
    pub table_name: String,
    #[serde(rename = "tableRemarks", default, skip_serializing_if = "Option::is_none")]
    pub table_remarks: Option<String>,
    #[serde(rename = "tableSchema")]
    pub table_schema: String,
}
impl SalesforceTable {
    pub fn new(table_category: String, table_name: String, table_schema: String) -> Self {
        Self {
            is_profile: None,
            table_category,
            table_name,
            table_remarks: None,
            table_schema,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StrongId {
    #[serde(rename = "keyPropertyNames")]
    pub key_property_names: Vec<String>,
    #[serde(rename = "strongIdName")]
    pub strong_id_name: String,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<serde_json::Value>,
}
impl StrongId {
    pub fn new(key_property_names: Vec<String>, strong_id_name: String) -> Self {
        Self {
            key_property_names,
            strong_id_name,
            display_name: None,
            description: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SuggestRelationshipLinksResponse {
    #[serde(rename = "interactionName", default, skip_serializing_if = "Option::is_none")]
    pub interaction_name: Option<String>,
    #[serde(rename = "suggestedRelationships", default, skip_serializing_if = "Vec::is_empty")]
    pub suggested_relationships: Vec<RelationshipsLookup>,
}
impl SuggestRelationshipLinksResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypePropertiesMapping {
    #[serde(rename = "sourcePropertyName")]
    pub source_property_name: String,
    #[serde(rename = "targetPropertyName")]
    pub target_property_name: String,
    #[serde(rename = "linkType", default, skip_serializing_if = "Option::is_none")]
    pub link_type: Option<type_properties_mapping::LinkType>,
}
impl TypePropertiesMapping {
    pub fn new(source_property_name: String, target_property_name: String) -> Self {
        Self {
            source_property_name,
            target_property_name,
            link_type: None,
        }
    }
}
pub mod type_properties_mapping {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LinkType {
        UpdateAlways,
        CopyIfNull,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct View {
    #[serde(rename = "viewName", default, skip_serializing_if = "Option::is_none")]
    pub view_name: Option<String>,
    #[serde(rename = "userId", default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    pub definition: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
}
impl View {
    pub fn new(definition: String) -> Self {
        Self {
            view_name: None,
            user_id: None,
            tenant_id: None,
            display_name: None,
            definition,
            changed: None,
            created: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ViewListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ViewResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl ViewListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ViewResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<View>,
}
impl ViewResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetType {
    #[serde(rename = "widgetTypeName", default, skip_serializing_if = "Option::is_none")]
    pub widget_type_name: Option<String>,
    pub definition: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "displayName", default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<serde_json::Value>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "widgetVersion", default, skip_serializing_if = "Option::is_none")]
    pub widget_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
}
impl WidgetType {
    pub fn new(definition: String) -> Self {
        Self {
            widget_type_name: None,
            definition,
            description: None,
            display_name: None,
            image_url: None,
            tenant_id: None,
            widget_version: None,
            changed: None,
            created: None,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct WidgetTypeListResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WidgetTypeResourceFormat>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl WidgetTypeListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct WidgetTypeResourceFormat {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<WidgetType>,
}
impl WidgetTypeResourceFormat {
    pub fn new() -> Self {
        Self::default()
    }
}
