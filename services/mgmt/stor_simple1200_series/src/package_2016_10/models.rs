#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlRecord {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: AccessControlRecordProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlRecordList {
    pub value: Vec<AccessControlRecord>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlRecordProperties {
    #[serde(rename = "initiatorName")]
    pub initiator_name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alert {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: AlertProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertErrorDetails {
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub occurences: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<alert_filter::Status>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<alert_filter::Severity>,
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<alert_filter::SourceType>,
    #[serde(rename = "sourceName", skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    #[serde(rename = "appearedOnTime", skip_serializing_if = "Option::is_none")]
    pub appeared_on_time: Option<String>,
}
mod alert_filter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Active,
        Cleared,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Severity {
        Informational,
        Warning,
        Critical,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceType {
        Resource,
        Device,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertList {
    pub value: Vec<Alert>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertProperties {
    pub title: String,
    pub scope: alert_properties::Scope,
    #[serde(rename = "alertType")]
    pub alert_type: String,
    #[serde(rename = "appearedAtTime")]
    pub appeared_at_time: String,
    #[serde(rename = "appearedAtSourceTime")]
    pub appeared_at_source_time: String,
    #[serde(rename = "clearedAtTime", skip_serializing_if = "Option::is_none")]
    pub cleared_at_time: Option<String>,
    #[serde(rename = "clearedAtSourceTime", skip_serializing_if = "Option::is_none")]
    pub cleared_at_source_time: Option<String>,
    pub source: AlertSource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<String>,
    #[serde(rename = "resolutionReason", skip_serializing_if = "Option::is_none")]
    pub resolution_reason: Option<String>,
    pub severity: alert_properties::Severity,
    pub status: alert_properties::Status,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<AlertErrorDetails>,
    #[serde(rename = "detailedInformation", skip_serializing_if = "Option::is_none")]
    pub detailed_information: Option<serde_json::Value>,
}
mod alert_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        Resource,
        Device,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Severity {
        Informational,
        Warning,
        Critical,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Active,
        Cleared,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertSettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: AlertSettingsProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertSettingsProperties {
    #[serde(rename = "emailNotification")]
    pub email_notification: alert_settings_properties::EmailNotification,
    #[serde(rename = "notificationToServiceOwners")]
    pub notification_to_service_owners: alert_settings_properties::NotificationToServiceOwners,
    #[serde(rename = "alertNotificationCulture")]
    pub alert_notification_culture: String,
    #[serde(rename = "additionalRecipientEmailList", skip_serializing_if = "Vec::is_empty")]
    pub additional_recipient_email_list: Vec<String>,
}
mod alert_settings_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EmailNotification {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum NotificationToServiceOwners {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertSource {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "timeZone", skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
    #[serde(rename = "alertSourceType", skip_serializing_if = "Option::is_none")]
    pub alert_source_type: Option<alert_source::AlertSourceType>,
}
mod alert_source {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AlertSourceType {
        Resource,
        Device,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsymmetricEncryptedSecret {
    pub value: String,
    #[serde(rename = "encryptionCertificateThumbprint", skip_serializing_if = "Option::is_none")]
    pub encryption_certificate_thumbprint: Option<String>,
    #[serde(rename = "encryptionAlgorithm")]
    pub encryption_algorithm: asymmetric_encrypted_secret::EncryptionAlgorithm,
}
mod asymmetric_encrypted_secret {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncryptionAlgorithm {
        None,
        #[serde(rename = "AES256")]
        Aes256,
        #[serde(rename = "RSAES_PKCS1_v_1_5")]
        RsaesPkcs1V15,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableProviderOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<AvailableProviderOperationDisplay>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AvailableProviderOperationProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableProviderOperationDisplay {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableProviderOperationProperties {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableProviderOperations {
    pub value: Vec<AvailableProviderOperation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Backup {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: BackupProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupElement {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: BackupElementProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupElementProperties {
    #[serde(rename = "sizeInBytes")]
    pub size_in_bytes: i64,
    #[serde(rename = "endpointName")]
    pub endpoint_name: String,
    #[serde(rename = "dataPolicy")]
    pub data_policy: backup_element_properties::DataPolicy,
}
mod backup_element_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataPolicy {
        Invalid,
        Local,
        Tiered,
        Cloud,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupFilter {
    #[serde(rename = "initiatedBy", skip_serializing_if = "Option::is_none")]
    pub initiated_by: Option<backup_filter::InitiatedBy>,
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
}
mod backup_filter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InitiatedBy {
        Manual,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupList {
    pub value: Vec<Backup>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupProperties {
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    #[serde(rename = "targetType", skip_serializing_if = "Option::is_none")]
    pub target_type: Option<String>,
    #[serde(rename = "sizeInBytes")]
    pub size_in_bytes: i64,
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "expirationTime", skip_serializing_if = "Option::is_none")]
    pub expiration_time: Option<String>,
    #[serde(rename = "initiatedBy")]
    pub initiated_by: backup_properties::InitiatedBy,
    #[serde(rename = "deviceId")]
    pub device_id: String,
    pub elements: Vec<BackupElement>,
}
mod backup_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InitiatedBy {
        Manual,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupScheduleGroup {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: BackupScheduleGroupProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupScheduleGroupList {
    pub value: Vec<BackupScheduleGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackupScheduleGroupProperties {
    #[serde(rename = "startTime")]
    pub start_time: Time,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseModel {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChapProperties {
    pub password: AsymmetricEncryptedSecret,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChapSettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: ChapProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChapSettingsList {
    pub value: Vec<ChapSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClearAlertRequest {
    #[serde(rename = "resolutionMessage", skip_serializing_if = "Option::is_none")]
    pub resolution_message: Option<String>,
    pub alerts: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneRequest {
    pub properties: CloneRequestProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneRequestProperties {
    #[serde(rename = "targetDeviceId")]
    pub target_device_id: String,
    #[serde(rename = "targetAccessPointId")]
    pub target_access_point_id: String,
    #[serde(rename = "newEndpointName")]
    pub new_endpoint_name: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub share: Option<FileShare>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disk: Option<IscsiDisk>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    #[serde(flatten)]
    pub base_model: BaseModel,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DeviceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceDetails {
    #[serde(rename = "endpointCount", skip_serializing_if = "Option::is_none")]
    pub endpoint_count: Option<i32>,
    #[serde(rename = "totalStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub total_storage_in_bytes: Option<i64>,
    #[serde(rename = "totalLocalStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub total_local_storage_in_bytes: Option<i64>,
    #[serde(rename = "provisionedStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub provisioned_storage_in_bytes: Option<i64>,
    #[serde(rename = "provisionedLocalStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub provisioned_local_storage_in_bytes: Option<i64>,
    #[serde(rename = "usingStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub using_storage_in_bytes: Option<i64>,
    #[serde(rename = "usingLocalStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub using_local_storage_in_bytes: Option<i64>,
    #[serde(rename = "totalBackupSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub total_backup_size_in_bytes: Option<i64>,
    #[serde(rename = "availableStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub available_storage_in_bytes: Option<i64>,
    #[serde(rename = "availableLocalStorageInBytes", skip_serializing_if = "Option::is_none")]
    pub available_local_storage_in_bytes: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceList {
    pub value: Vec<Device>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DevicePatch {
    #[serde(rename = "deviceDescription", skip_serializing_if = "Option::is_none")]
    pub device_description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceProperties {
    #[serde(rename = "activationTime", skip_serializing_if = "Option::is_none")]
    pub activation_time: Option<String>,
    #[serde(rename = "allowedDeviceOperations", skip_serializing_if = "Vec::is_empty")]
    pub allowed_device_operations: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub culture: Option<String>,
    #[serde(rename = "deviceCapabilities", skip_serializing_if = "Vec::is_empty")]
    pub device_capabilities: Vec<String>,
    #[serde(rename = "deviceDescription", skip_serializing_if = "Option::is_none")]
    pub device_description: Option<String>,
    #[serde(rename = "domainName", skip_serializing_if = "Option::is_none")]
    pub domain_name: Option<String>,
    #[serde(rename = "deviceSoftwareVersion", skip_serializing_if = "Option::is_none")]
    pub device_software_version: Option<String>,
    #[serde(rename = "friendlySoftwareName", skip_serializing_if = "Option::is_none")]
    pub friendly_software_name: Option<String>,
    #[serde(rename = "deviceConfigurationStatus", skip_serializing_if = "Option::is_none")]
    pub device_configuration_status: Option<device_properties::DeviceConfigurationStatus>,
    #[serde(rename = "modelDescription", skip_serializing_if = "Option::is_none")]
    pub model_description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<device_properties::Status>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<device_properties::Type>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<DeviceDetails>,
}
mod device_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceConfigurationStatus {
        Complete,
        Pending,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Unknown,
        Online,
        Offline,
        RequiresAttention,
        MaintenanceMode,
        Creating,
        Provisioning,
        Deleted,
        ReadyToSetup,
        Deactivated,
        Deactivating,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        Invalid,
        Appliance,
        VirtualAppliance,
        Series9000OnPremVirtualAppliance,
        Series9000VirtualAppliance,
        Series9000PhysicalAppliance,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EncryptionSettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: EncryptionSettingsProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EncryptionSettingsProperties {
    #[serde(rename = "encryptionStatus")]
    pub encryption_status: encryption_settings_properties::EncryptionStatus,
    #[serde(rename = "keyRolloverStatus")]
    pub key_rollover_status: encryption_settings_properties::KeyRolloverStatus,
}
mod encryption_settings_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncryptionStatus {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum KeyRolloverStatus {
        Required,
        NotRequired,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Error {
    #[serde(rename = "errorCode")]
    pub error_code: String,
    pub message: Message,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<Item>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailoverRequest {
    #[serde(rename = "accesspointIds", skip_serializing_if = "Vec::is_empty")]
    pub accesspoint_ids: Vec<String>,
    #[serde(rename = "targetDeviceId", skip_serializing_if = "Option::is_none")]
    pub target_device_id: Option<String>,
    #[serde(rename = "skipValidation", skip_serializing_if = "Option::is_none")]
    pub skip_validation: Option<bool>,
    #[serde(rename = "keepSourceDevice", skip_serializing_if = "Option::is_none")]
    pub keep_source_device: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServer {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: FileServerProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerList {
    pub value: Vec<FileServer>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerProperties {
    #[serde(rename = "domainName")]
    pub domain_name: String,
    #[serde(rename = "storageDomainId")]
    pub storage_domain_id: String,
    #[serde(rename = "backupScheduleGroupId")]
    pub backup_schedule_group_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileShare {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: FileShareProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileShareList {
    pub value: Vec<FileShare>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileShareProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "shareStatus")]
    pub share_status: file_share_properties::ShareStatus,
    #[serde(rename = "dataPolicy")]
    pub data_policy: file_share_properties::DataPolicy,
    #[serde(rename = "adminUser")]
    pub admin_user: String,
    #[serde(rename = "provisionedCapacityInBytes")]
    pub provisioned_capacity_in_bytes: i64,
    #[serde(rename = "usedCapacityInBytes", skip_serializing)]
    pub used_capacity_in_bytes: Option<i64>,
    #[serde(rename = "localUsedCapacityInBytes", skip_serializing)]
    pub local_used_capacity_in_bytes: Option<i64>,
    #[serde(rename = "monitoringStatus")]
    pub monitoring_status: file_share_properties::MonitoringStatus,
}
mod file_share_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareStatus {
        Online,
        Offline,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataPolicy {
        Invalid,
        Local,
        Tiered,
        Cloud,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MonitoringStatus {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpConfig {
    #[serde(rename = "ipAddress")]
    pub ip_address: String,
    #[serde(rename = "prefixLength", skip_serializing_if = "Option::is_none")]
    pub prefix_length: Option<i32>,
    pub gateway: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiDisk {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: IscsiDiskProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiDiskList {
    pub value: Vec<IscsiDisk>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiDiskProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "diskStatus")]
    pub disk_status: iscsi_disk_properties::DiskStatus,
    #[serde(rename = "accessControlRecords")]
    pub access_control_records: Vec<String>,
    #[serde(rename = "dataPolicy")]
    pub data_policy: iscsi_disk_properties::DataPolicy,
    #[serde(rename = "provisionedCapacityInBytes")]
    pub provisioned_capacity_in_bytes: i64,
    #[serde(rename = "usedCapacityInBytes", skip_serializing)]
    pub used_capacity_in_bytes: Option<i64>,
    #[serde(rename = "localUsedCapacityInBytes", skip_serializing)]
    pub local_used_capacity_in_bytes: Option<i64>,
    #[serde(rename = "monitoringStatus")]
    pub monitoring_status: iscsi_disk_properties::MonitoringStatus,
}
mod iscsi_disk_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskStatus {
        Online,
        Offline,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataPolicy {
        Invalid,
        Local,
        Tiered,
        Cloud,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MonitoringStatus {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiServer {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: IscsiServerProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiServerList {
    pub value: Vec<IscsiServer>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IscsiServerProperties {
    #[serde(rename = "storageDomainId")]
    pub storage_domain_id: String,
    #[serde(rename = "backupScheduleGroupId")]
    pub backup_schedule_group_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "chapId", skip_serializing_if = "Option::is_none")]
    pub chap_id: Option<String>,
    #[serde(rename = "reverseChapId", skip_serializing_if = "Option::is_none")]
    pub reverse_chap_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Item {
    pub key: String,
    pub value: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub status: job::Status,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "percentComplete")]
    pub percent_complete: i32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<JobErrorDetails>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
mod job {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Invalid,
        Running,
        Succeeded,
        Failed,
        Canceled,
        Paused,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobErrorDetails {
    #[serde(rename = "errorDetails", skip_serializing_if = "Vec::is_empty")]
    pub error_details: Vec<JobErrorItem>,
    pub code: String,
    pub message: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobErrorItem {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub recommendations: Vec<String>,
    pub code: String,
    pub message: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobFilter {
    #[serde(rename = "jobType")]
    pub job_type: job_filter::JobType,
    pub status: job_filter::Status,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
mod job_filter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobType {
        Backup,
        Clone,
        Failover,
        DownloadUpdates,
        InstallUpdates,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Invalid,
        Running,
        Succeeded,
        Failed,
        Canceled,
        Paused,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobList {
    pub value: Vec<Job>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[serde(rename = "jobType")]
    pub job_type: job_properties::JobType,
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    #[serde(rename = "entityType", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<String>,
    #[serde(rename = "jobStages", skip_serializing_if = "Vec::is_empty")]
    pub job_stages: Vec<JobStage>,
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    #[serde(rename = "isCancellable", skip_serializing_if = "Option::is_none")]
    pub is_cancellable: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stats: Option<JobStats>,
    #[serde(rename = "targetType", skip_serializing_if = "Option::is_none")]
    pub target_type: Option<job_properties::TargetType>,
    #[serde(rename = "sourceDeviceId", skip_serializing_if = "Option::is_none")]
    pub source_device_id: Option<String>,
    #[serde(rename = "backupPointInTime", skip_serializing_if = "Option::is_none")]
    pub backup_point_in_time: Option<String>,
    #[serde(rename = "downloadProgress", skip_serializing_if = "Option::is_none")]
    pub download_progress: Option<UpdateDownloadProgress>,
    #[serde(rename = "installProgress", skip_serializing_if = "Option::is_none")]
    pub install_progress: Option<UpdateInstallProgress>,
}
mod job_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobType {
        Backup,
        Clone,
        Failover,
        DownloadUpdates,
        InstallUpdates,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetType {
        FileServer,
        DiskServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobStage {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "stageStatus")]
    pub stage_status: job_stage::StageStatus,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
}
mod job_stage {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageStatus {
        Invalid,
        Running,
        Succeeded,
        Failed,
        Canceled,
        Paused,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobStats {
    #[serde(rename = "completedWorkItemCount", skip_serializing_if = "Option::is_none")]
    pub completed_work_item_count: Option<i32>,
    #[serde(rename = "totalWorkItemCount", skip_serializing_if = "Option::is_none")]
    pub total_work_item_count: Option<i32>,
    #[serde(rename = "estimatedTimeRemaining", skip_serializing_if = "Option::is_none")]
    pub estimated_time_remaining: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Manager {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ManagerProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerExtendedInfo {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: ManagerExtendedInfoProperties,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerExtendedInfoProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "integrityKey")]
    pub integrity_key: String,
    #[serde(rename = "encryptionKey", skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<String>,
    #[serde(rename = "encryptionKeyThumbprint", skip_serializing_if = "Option::is_none")]
    pub encryption_key_thumbprint: Option<String>,
    #[serde(rename = "portalCertificateThumbprint", skip_serializing_if = "Option::is_none")]
    pub portal_certificate_thumbprint: Option<String>,
    pub algorithm: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerIntrinsicSettings {
    #[serde(rename = "type")]
    pub type_: manager_intrinsic_settings::Type,
}
mod manager_intrinsic_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        GardaV1,
        HelsinkiV1,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerList {
    pub value: Vec<Manager>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerPatch {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerProperties {
    #[serde(rename = "cisIntrinsicSettings", skip_serializing_if = "Option::is_none")]
    pub cis_intrinsic_settings: Option<ManagerIntrinsicSettings>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<ManagerSku>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagerSku {
    pub name: manager_sku::Name,
}
mod manager_sku {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Name {
        Standard,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Message {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricAvailablity {
    #[serde(rename = "timeGrain")]
    pub time_grain: String,
    pub retention: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricData {
    #[serde(rename = "timeStamp")]
    pub time_stamp: String,
    pub sum: f64,
    pub count: i32,
    pub average: f64,
    pub minimum: f64,
    pub maximum: f64,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricDefinition {
    pub name: MetricName,
    pub unit: metric_definition::Unit,
    #[serde(rename = "primaryAggregationType")]
    pub primary_aggregation_type: metric_definition::PrimaryAggregationType,
    #[serde(rename = "resourceId")]
    pub resource_id: String,
    #[serde(rename = "metricAvailabilities")]
    pub metric_availabilities: Vec<MetricAvailablity>,
    pub dimensions: Vec<MetricDimension>,
    #[serde(rename = "type")]
    pub type_: String,
}
mod metric_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Unit {
        Bytes,
        BytesPerSecond,
        Count,
        CountPerSecond,
        Percent,
        Seconds,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PrimaryAggregationType {
        Average,
        Last,
        Maximum,
        Minimum,
        None,
        Total,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricDefinitionList {
    pub value: Vec<MetricDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricDimension {
    pub name: String,
    pub value: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<MetricNameFilter>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "timeGrain", skip_serializing_if = "Option::is_none")]
    pub time_grain: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricList {
    pub value: Vec<Metrics>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricName {
    pub value: String,
    #[serde(rename = "localizedValue")]
    pub localized_value: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricNameFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Metrics {
    #[serde(rename = "resourceId")]
    pub resource_id: String,
    #[serde(rename = "startTime")]
    pub start_time: String,
    #[serde(rename = "endTime")]
    pub end_time: String,
    #[serde(rename = "timeGrain")]
    pub time_grain: String,
    #[serde(rename = "primaryAggregation")]
    pub primary_aggregation: metrics::PrimaryAggregation,
    pub name: MetricName,
    pub dimensions: Vec<MetricDimension>,
    pub unit: metrics::Unit,
    #[serde(rename = "type")]
    pub type_: String,
    pub values: Vec<MetricData>,
}
mod metrics {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PrimaryAggregation {
        Average,
        Last,
        Maximum,
        Minimum,
        None,
        Total,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Unit {
        Bytes,
        BytesPerSecond,
        Count,
        CountPerSecond,
        Percent,
        Seconds,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkAdapter {
    #[serde(rename = "networkAdapterName")]
    pub network_adapter_name: String,
    #[serde(rename = "iPv4Info", skip_serializing_if = "Option::is_none")]
    pub i_pv4_info: Option<IpConfig>,
    #[serde(rename = "iPv6Info", skip_serializing_if = "Option::is_none")]
    pub i_pv6_info: Option<IpConfig>,
    #[serde(rename = "dhcpStatus")]
    pub dhcp_status: network_adapter::DhcpStatus,
    #[serde(rename = "linkSpeed", skip_serializing_if = "Option::is_none")]
    pub link_speed: Option<i64>,
}
mod network_adapter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DhcpStatus {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkSettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: NetworkSettingsProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkSettingsProperties {
    #[serde(rename = "primaryDnsServer")]
    pub primary_dns_server: String,
    #[serde(rename = "secondaryDnsServer", skip_serializing_if = "Option::is_none")]
    pub secondary_dns_server: Option<String>,
    #[serde(rename = "nodeNetworks")]
    pub node_networks: Vec<NodeNetwork>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeNetwork {
    #[serde(rename = "networkAdapters")]
    pub network_adapters: Vec<NetworkAdapter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RawCertificateData {
    #[serde(rename = "authType", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<raw_certificate_data::AuthType>,
    pub certificate: String,
}
mod raw_certificate_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AuthType {
        Invalid,
        AccessControlService,
        AzureActiveDirectory,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    pub location: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceCertificateAndAadDetails {
    #[serde(rename = "authType", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<resource_certificate_and_aad_details::AuthType>,
    pub certificate: String,
    #[serde(rename = "resourceId")]
    pub resource_id: i64,
    #[serde(rename = "aadAuthority")]
    pub aad_authority: String,
    #[serde(rename = "aadTenantId")]
    pub aad_tenant_id: String,
    #[serde(rename = "servicePrincipalClientId")]
    pub service_principal_client_id: String,
    #[serde(rename = "servicePrincipalObjectId")]
    pub service_principal_object_id: String,
    #[serde(rename = "azureManagementEndpointAudience")]
    pub azure_management_endpoint_audience: String,
    pub subject: String,
    #[serde(rename = "validFrom")]
    pub valid_from: String,
    #[serde(rename = "validTo")]
    pub valid_to: String,
    pub thumbprint: String,
    #[serde(rename = "friendlyName")]
    pub friendly_name: String,
    pub issuer: String,
}
mod resource_certificate_and_aad_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AuthType {
        Invalid,
        AccessControlService,
        AzureActiveDirectory,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecuritySettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: SecuritySettingsProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecuritySettingsProperties {
    #[serde(rename = "deviceAdminPassword")]
    pub device_admin_password: AsymmetricEncryptedSecret,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SendTestAlertEmailRequest {
    #[serde(rename = "emailList")]
    pub email_list: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccountCredential {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: StorageAccountCredentialProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccountCredentialList {
    pub value: Vec<StorageAccountCredential>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccountCredentialProperties {
    #[serde(rename = "cloudType")]
    pub cloud_type: storage_account_credential_properties::CloudType,
    #[serde(rename = "endPoint")]
    pub end_point: String,
    pub login: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "enableSSL")]
    pub enable_ssl: storage_account_credential_properties::EnableSsl,
    #[serde(rename = "accessKey", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<AsymmetricEncryptedSecret>,
}
mod storage_account_credential_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CloudType {
        Azure,
        S3,
        #[serde(rename = "S3_RRS")]
        S3Rrs,
        OpenStack,
        #[serde(rename = "HP")]
        Hp,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EnableSsl {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageDomain {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: StorageDomainProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageDomainList {
    pub value: Vec<StorageDomain>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageDomainProperties {
    #[serde(rename = "storageAccountCredentialIds")]
    pub storage_account_credential_ids: Vec<String>,
    #[serde(rename = "encryptionKey", skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<AsymmetricEncryptedSecret>,
    #[serde(rename = "encryptionStatus")]
    pub encryption_status: storage_domain_properties::EncryptionStatus,
}
mod storage_domain_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncryptionStatus {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SymmetricEncryptedSecret {
    pub value: String,
    #[serde(rename = "valueCertificateThumbprint", skip_serializing_if = "Option::is_none")]
    pub value_certificate_thumbprint: Option<String>,
    #[serde(rename = "encryptionAlgorithm")]
    pub encryption_algorithm: symmetric_encrypted_secret::EncryptionAlgorithm,
}
mod symmetric_encrypted_secret {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncryptionAlgorithm {
        None,
        #[serde(rename = "AES256")]
        Aes256,
        #[serde(rename = "RSAES_PKCS1_v_1_5")]
        RsaesPkcs1V15,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Time {
    pub hour: i32,
    pub minute: i32,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeSettings {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: TimeSettingsProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeSettingsProperties {
    #[serde(rename = "timeZone")]
    pub time_zone: String,
    #[serde(rename = "primaryTimeServer")]
    pub primary_time_server: String,
    #[serde(rename = "secondaryTimeServer", skip_serializing_if = "Option::is_none")]
    pub secondary_time_server: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateDownloadProgress {
    #[serde(rename = "downloadPhase", skip_serializing_if = "Option::is_none")]
    pub download_phase: Option<update_download_progress::DownloadPhase>,
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<i32>,
    #[serde(rename = "totalBytesToDownload", skip_serializing_if = "Option::is_none")]
    pub total_bytes_to_download: Option<f64>,
    #[serde(rename = "totalBytesDownloaded", skip_serializing_if = "Option::is_none")]
    pub total_bytes_downloaded: Option<f64>,
    #[serde(rename = "numberOfUpdatesToDownload", skip_serializing_if = "Option::is_none")]
    pub number_of_updates_to_download: Option<i32>,
    #[serde(rename = "numberOfUpdatesDownloaded", skip_serializing_if = "Option::is_none")]
    pub number_of_updates_downloaded: Option<i32>,
}
mod update_download_progress {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DownloadPhase {
        Unknown,
        Initializing,
        Downloading,
        Verifying,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateInstallProgress {
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<i32>,
    #[serde(rename = "numberOfUpdatesToInstall", skip_serializing_if = "Option::is_none")]
    pub number_of_updates_to_install: Option<i32>,
    #[serde(rename = "numberOfUpdatesInstalled", skip_serializing_if = "Option::is_none")]
    pub number_of_updates_installed: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Updates {
    #[serde(flatten)]
    pub base_model: BaseModel,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdatesProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatesProperties {
    #[serde(rename = "deviceVersion", skip_serializing_if = "Option::is_none")]
    pub device_version: Option<String>,
    #[serde(rename = "deviceLastScannedTime", skip_serializing_if = "Option::is_none")]
    pub device_last_scanned_time: Option<String>,
    #[serde(rename = "regularUpdatesAvailable", skip_serializing_if = "Option::is_none")]
    pub regular_updates_available: Option<bool>,
    #[serde(rename = "rebootRequiredForInstall", skip_serializing_if = "Option::is_none")]
    pub reboot_required_for_install: Option<bool>,
    #[serde(rename = "totalItemsPendingForDownload", skip_serializing_if = "Option::is_none")]
    pub total_items_pending_for_download: Option<i32>,
    #[serde(rename = "totalItemsPendingForInstall", skip_serializing_if = "Option::is_none")]
    pub total_items_pending_for_install: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<updates_properties::Status>,
    #[serde(rename = "lastCompletedScanTime", skip_serializing_if = "Option::is_none")]
    pub last_completed_scan_time: Option<String>,
    #[serde(rename = "lastCompletedDownloadJobTime", skip_serializing_if = "Option::is_none")]
    pub last_completed_download_job_time: Option<String>,
    #[serde(rename = "lastCompletedInstallJobTime", skip_serializing_if = "Option::is_none")]
    pub last_completed_install_job_time: Option<String>,
    #[serde(rename = "inProgressDownloadJobId", skip_serializing_if = "Option::is_none")]
    pub in_progress_download_job_id: Option<String>,
    #[serde(rename = "inProgressInstallJobId", skip_serializing_if = "Option::is_none")]
    pub in_progress_install_job_id: Option<String>,
    #[serde(rename = "inProgressScanStartedTime", skip_serializing_if = "Option::is_none")]
    pub in_progress_scan_started_time: Option<String>,
    #[serde(rename = "inProgressDownloadJobStartedTime", skip_serializing_if = "Option::is_none")]
    pub in_progress_download_job_started_time: Option<String>,
    #[serde(rename = "inProgressInstallJobStartedTime", skip_serializing_if = "Option::is_none")]
    pub in_progress_install_job_started_time: Option<String>,
}
mod updates_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Idle,
        Scanning,
        Downloading,
        Installing,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadCertificateRequest {
    pub properties: RawCertificateData,
    #[serde(rename = "contractVersion", skip_serializing)]
    pub contract_version: Option<upload_certificate_request::ContractVersion>,
}
mod upload_certificate_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContractVersion {
        InvalidVersion,
        #[serde(rename = "V2011_09")]
        V201109,
        #[serde(rename = "V2012_02")]
        V201202,
        #[serde(rename = "V2012_05")]
        V201205,
        #[serde(rename = "V2012_12")]
        V201212,
        #[serde(rename = "V2013_04")]
        V201304,
        #[serde(rename = "V2013_10")]
        V201310,
        #[serde(rename = "V2013_11")]
        V201311,
        #[serde(rename = "V2014_04")]
        V201404,
        #[serde(rename = "V2014_06")]
        V201406,
        #[serde(rename = "V2014_07")]
        V201407,
        #[serde(rename = "V2014_09")]
        V201409,
        #[serde(rename = "V2014_10")]
        V201410,
        #[serde(rename = "V2014_12")]
        V201412,
        #[serde(rename = "V2015_01")]
        V201501,
        #[serde(rename = "V2015_02")]
        V201502,
        #[serde(rename = "V2015_04")]
        V201504,
        #[serde(rename = "V2015_05")]
        V201505,
        #[serde(rename = "V2015_06")]
        V201506,
        #[serde(rename = "V2015_07")]
        V201507,
        #[serde(rename = "V2015_08")]
        V201508,
        #[serde(rename = "V2015_10")]
        V201510,
        #[serde(rename = "V2015_12")]
        V201512,
        #[serde(rename = "V2016_01")]
        V201601,
        #[serde(rename = "V2016_02")]
        V201602,
        #[serde(rename = "V2016_04")]
        V201604,
        #[serde(rename = "V2016_05")]
        V201605,
        #[serde(rename = "V2016_07")]
        V201607,
        #[serde(rename = "V2016_08")]
        V201608,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadCertificateResponse {
    #[serde(flatten)]
    pub base_model: BaseModel,
    pub properties: ResourceCertificateAndAadDetails,
}
