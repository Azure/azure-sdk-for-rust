#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Object {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseInstanceCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DatabaseInstance>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DatabaseInstanceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseInstanceProperties {
    #[serde(rename = "discoveryData", skip_serializing_if = "Vec::is_empty")]
    pub discovery_data: Vec<DatabaseInstanceDiscoveryDetails>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<serde_json::Value>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseInstanceDiscoveryDetails {
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "instanceId", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    #[serde(rename = "enqueueTime", skip_serializing_if = "Option::is_none")]
    pub enqueue_time: Option<String>,
    #[serde(rename = "solutionName", skip_serializing_if = "Option::is_none")]
    pub solution_name: Option<String>,
    #[serde(rename = "instanceName", skip_serializing_if = "Option::is_none")]
    pub instance_name: Option<String>,
    #[serde(rename = "instanceVersion", skip_serializing_if = "Option::is_none")]
    pub instance_version: Option<String>,
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "hostName", skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "portNumber", skip_serializing_if = "Option::is_none")]
    pub port_number: Option<i32>,
    #[serde(rename = "extendedInfo", skip_serializing_if = "Option::is_none")]
    pub extended_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseInstanceSummary {
    #[serde(rename = "databasesAssessedCount", skip_serializing_if = "Option::is_none")]
    pub databases_assessed_count: Option<i32>,
    #[serde(rename = "migrationReadyCount", skip_serializing_if = "Option::is_none")]
    pub migration_ready_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Database>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Database {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DatabaseProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseProperties {
    #[serde(rename = "assessmentData", skip_serializing_if = "Vec::is_empty")]
    pub assessment_data: Vec<DatabaseAssessmentDetails>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseAssessmentDetails {
    #[serde(rename = "assessmentId", skip_serializing_if = "Option::is_none")]
    pub assessment_id: Option<String>,
    #[serde(rename = "migrationBlockersCount", skip_serializing_if = "Option::is_none")]
    pub migration_blockers_count: Option<i32>,
    #[serde(rename = "breakingChangesCount", skip_serializing_if = "Option::is_none")]
    pub breaking_changes_count: Option<i32>,
    #[serde(rename = "isReadyForMigration", skip_serializing_if = "Option::is_none")]
    pub is_ready_for_migration: Option<bool>,
    #[serde(rename = "assessmentTargetType", skip_serializing_if = "Option::is_none")]
    pub assessment_target_type: Option<String>,
    #[serde(rename = "lastAssessedTime", skip_serializing_if = "Option::is_none")]
    pub last_assessed_time: Option<String>,
    #[serde(rename = "compatibilityLevel", skip_serializing_if = "Option::is_none")]
    pub compatibility_level: Option<String>,
    #[serde(rename = "databaseSizeInMB", skip_serializing_if = "Option::is_none")]
    pub database_size_in_mb: Option<String>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "enqueueTime", skip_serializing_if = "Option::is_none")]
    pub enqueue_time: Option<String>,
    #[serde(rename = "solutionName", skip_serializing_if = "Option::is_none")]
    pub solution_name: Option<String>,
    #[serde(rename = "instanceId", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    #[serde(rename = "databaseName", skip_serializing_if = "Option::is_none")]
    pub database_name: Option<String>,
    #[serde(rename = "extendedInfo", skip_serializing_if = "Option::is_none")]
    pub extended_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<MigrateEvent>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MigrateEventProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateEventProperties {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing_if = "Option::is_none")]
    pub possible_causes: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub solution: Option<String>,
    #[serde(rename = "clientRequestId", skip_serializing_if = "Option::is_none")]
    pub client_request_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataQueryOptions1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<FilterQueryOption>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataQueryContext {
    #[serde(rename = "defaultQuerySettings", skip_serializing_if = "Option::is_none")]
    pub default_query_settings: Option<DefaultQuerySettings>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub model: Option<IEdmModel>,
    #[serde(rename = "elementType", skip_serializing_if = "Option::is_none")]
    pub element_type: Option<IEdmType>,
    #[serde(rename = "navigationSource", skip_serializing_if = "Option::is_none")]
    pub navigation_source: Option<IEdmNavigationSource>,
    #[serde(rename = "elementClrType", skip_serializing)]
    pub element_clr_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<ODataPath>,
    #[serde(rename = "requestContainer", skip_serializing_if = "Option::is_none")]
    pub request_container: Option<IServiceProvider>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataRawQueryOptions {
    #[serde(skip_serializing)]
    pub filter: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterQueryOption {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<ODataQueryContext>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub validator: Option<FilterQueryValidator>,
    #[serde(rename = "filterClause", skip_serializing_if = "Option::is_none")]
    pub filter_clause: Option<FilterClause>,
    #[serde(rename = "rawValue", skip_serializing)]
    pub raw_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataQueryValidator {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefaultQuerySettings {
    #[serde(rename = "enableExpand", skip_serializing_if = "Option::is_none")]
    pub enable_expand: Option<bool>,
    #[serde(rename = "enableSelect", skip_serializing_if = "Option::is_none")]
    pub enable_select: Option<bool>,
    #[serde(rename = "enableCount", skip_serializing_if = "Option::is_none")]
    pub enable_count: Option<bool>,
    #[serde(rename = "enableOrderBy", skip_serializing_if = "Option::is_none")]
    pub enable_order_by: Option<bool>,
    #[serde(rename = "enableFilter", skip_serializing_if = "Option::is_none")]
    pub enable_filter: Option<bool>,
    #[serde(rename = "maxTop", skip_serializing_if = "Option::is_none")]
    pub max_top: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmModel {
    #[serde(rename = "schemaElements", skip_serializing)]
    pub schema_elements: Vec<IEdmSchemaElement>,
    #[serde(rename = "vocabularyAnnotations", skip_serializing)]
    pub vocabulary_annotations: Vec<IEdmVocabularyAnnotation>,
    #[serde(rename = "referencedModels", skip_serializing)]
    pub referenced_models: Vec<IEdmModel>,
    #[serde(rename = "declaredNamespaces", skip_serializing)]
    pub declared_namespaces: Vec<String>,
    #[serde(rename = "directValueAnnotationsManager", skip_serializing_if = "Option::is_none")]
    pub direct_value_annotations_manager: Option<IEdmDirectValueAnnotationsManager>,
    #[serde(rename = "entityContainer", skip_serializing_if = "Option::is_none")]
    pub entity_container: Option<IEdmEntityContainer>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmType {
    #[serde(rename = "typeKind", skip_serializing)]
    pub type_kind: Option<i_edm_type::TypeKind>,
}
pub mod i_edm_type {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TypeKind {
        None,
        Primitive,
        Entity,
        Complex,
        Collection,
        EntityReference,
        Enum,
        TypeDefinition,
        Untyped,
        Path,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmNavigationSource {
    #[serde(rename = "navigationPropertyBindings", skip_serializing)]
    pub navigation_property_bindings: Vec<IEdmNavigationPropertyBinding>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<IEdmPathExpression>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IEdmType>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataPath {
    #[serde(rename = "edmType", skip_serializing_if = "Option::is_none")]
    pub edm_type: Option<IEdmType>,
    #[serde(rename = "navigationSource", skip_serializing_if = "Option::is_none")]
    pub navigation_source: Option<IEdmNavigationSource>,
    #[serde(skip_serializing)]
    pub segments: Vec<ODataPathSegment>,
    #[serde(rename = "pathTemplate", skip_serializing)]
    pub path_template: Option<String>,
    #[serde(skip_serializing)]
    pub path: Vec<ODataPathSegment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IServiceProvider {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SelectExpandQueryValidator {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SelectExpandClause {
    #[serde(rename = "selectedItems", skip_serializing)]
    pub selected_items: Vec<SelectItem>,
    #[serde(rename = "allSelected", skip_serializing)]
    pub all_selected: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyClause {
    #[serde(skip_serializing)]
    pub transformations: Vec<TransformationNode>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterQueryValidator {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterClause {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<SingleValueNode>,
    #[serde(rename = "rangeVariable", skip_serializing_if = "Option::is_none")]
    pub range_variable: Option<RangeVariable>,
    #[serde(rename = "itemType", skip_serializing_if = "Option::is_none")]
    pub item_type: Option<IEdmTypeReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmSchemaElement {
    #[serde(rename = "schemaElementKind", skip_serializing)]
    pub schema_element_kind: Option<i_edm_schema_element::SchemaElementKind>,
    #[serde(skip_serializing)]
    pub namespace: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_schema_element {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SchemaElementKind {
        None,
        TypeDefinition,
        Term,
        Action,
        EntityContainer,
        Function,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmVocabularyAnnotation {
    #[serde(skip_serializing)]
    pub qualifier: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<IEdmTerm>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<IEdmVocabularyAnnotatable>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<IEdmExpression>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmDirectValueAnnotationsManager {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmEntityContainer {
    #[serde(skip_serializing)]
    pub elements: Vec<IEdmEntityContainerElement>,
    #[serde(rename = "schemaElementKind", skip_serializing)]
    pub schema_element_kind: Option<i_edm_entity_container::SchemaElementKind>,
    #[serde(skip_serializing)]
    pub namespace: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_entity_container {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SchemaElementKind {
        None,
        TypeDefinition,
        Term,
        Action,
        EntityContainer,
        Function,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmNavigationPropertyBinding {
    #[serde(rename = "navigationProperty", skip_serializing_if = "Option::is_none")]
    pub navigation_property: Option<IEdmNavigationProperty>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<IEdmNavigationSource>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<IEdmPathExpression>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmPathExpression {
    #[serde(rename = "pathSegments", skip_serializing)]
    pub path_segments: Vec<String>,
    #[serde(skip_serializing)]
    pub path: Option<String>,
    #[serde(rename = "expressionKind", skip_serializing)]
    pub expression_kind: Option<i_edm_path_expression::ExpressionKind>,
}
pub mod i_edm_path_expression {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExpressionKind {
        None,
        BinaryConstant,
        BooleanConstant,
        DateTimeOffsetConstant,
        DecimalConstant,
        FloatingConstant,
        GuidConstant,
        IntegerConstant,
        StringConstant,
        DurationConstant,
        Null,
        Record,
        Collection,
        Path,
        If,
        Cast,
        IsType,
        FunctionApplication,
        LabeledExpressionReference,
        Labeled,
        PropertyPath,
        NavigationPropertyPath,
        DateConstant,
        TimeOfDayConstant,
        EnumMember,
        AnnotationPath,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ODataPathSegment {
    #[serde(rename = "edmType", skip_serializing_if = "Option::is_none")]
    pub edm_type: Option<IEdmType>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SelectItem {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransformationNode {
    #[serde(skip_serializing)]
    pub kind: Option<transformation_node::Kind>,
}
pub mod transformation_node {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        Aggregate,
        GroupBy,
        Filter,
        Compute,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleValueNode {
    #[serde(rename = "typeReference", skip_serializing_if = "Option::is_none")]
    pub type_reference: Option<IEdmTypeReference>,
    #[serde(skip_serializing)]
    pub kind: Option<single_value_node::Kind>,
}
pub mod single_value_node {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        None,
        Constant,
        Convert,
        NonResourceRangeVariableReference,
        BinaryOperator,
        UnaryOperator,
        SingleValuePropertyAccess,
        CollectionPropertyAccess,
        SingleValueFunctionCall,
        Any,
        CollectionNavigationNode,
        SingleNavigationNode,
        SingleValueOpenPropertyAccess,
        SingleResourceCast,
        All,
        CollectionResourceCast,
        ResourceRangeVariableReference,
        SingleResourceFunctionCall,
        CollectionFunctionCall,
        CollectionResourceFunctionCall,
        NamedFunctionParameter,
        ParameterAlias,
        EntitySet,
        KeyLookup,
        SearchTerm,
        CollectionOpenPropertyAccess,
        CollectionComplexNode,
        SingleComplexNode,
        Count,
        SingleValueCast,
        CollectionPropertyNode,
        AggregatedCollectionPropertyNode,
        In,
        CollectionConstant,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RangeVariable {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "typeReference", skip_serializing_if = "Option::is_none")]
    pub type_reference: Option<IEdmTypeReference>,
    #[serde(skip_serializing)]
    pub kind: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmTypeReference {
    #[serde(rename = "isNullable", skip_serializing)]
    pub is_nullable: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<IEdmType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmTerm {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IEdmTypeReference>,
    #[serde(rename = "appliesTo", skip_serializing)]
    pub applies_to: Option<String>,
    #[serde(rename = "defaultValue", skip_serializing)]
    pub default_value: Option<String>,
    #[serde(rename = "schemaElementKind", skip_serializing)]
    pub schema_element_kind: Option<i_edm_term::SchemaElementKind>,
    #[serde(skip_serializing)]
    pub namespace: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_term {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SchemaElementKind {
        None,
        TypeDefinition,
        Term,
        Action,
        EntityContainer,
        Function,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmVocabularyAnnotatable {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmExpression {
    #[serde(rename = "expressionKind", skip_serializing)]
    pub expression_kind: Option<i_edm_expression::ExpressionKind>,
}
pub mod i_edm_expression {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExpressionKind {
        None,
        BinaryConstant,
        BooleanConstant,
        DateTimeOffsetConstant,
        DecimalConstant,
        FloatingConstant,
        GuidConstant,
        IntegerConstant,
        StringConstant,
        DurationConstant,
        Null,
        Record,
        Collection,
        Path,
        If,
        Cast,
        IsType,
        FunctionApplication,
        LabeledExpressionReference,
        Labeled,
        PropertyPath,
        NavigationPropertyPath,
        DateConstant,
        TimeOfDayConstant,
        EnumMember,
        AnnotationPath,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmEntityContainerElement {
    #[serde(rename = "containerElementKind", skip_serializing)]
    pub container_element_kind: Option<i_edm_entity_container_element::ContainerElementKind>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<IEdmEntityContainer>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_entity_container_element {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContainerElementKind {
        None,
        EntitySet,
        ActionImport,
        FunctionImport,
        Singleton,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmNavigationProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub partner: Box<Option<IEdmNavigationProperty>>,
    #[serde(rename = "onDelete", skip_serializing)]
    pub on_delete: Option<i_edm_navigation_property::OnDelete>,
    #[serde(rename = "containsTarget", skip_serializing)]
    pub contains_target: Option<bool>,
    #[serde(rename = "referentialConstraint", skip_serializing_if = "Option::is_none")]
    pub referential_constraint: Option<IEdmReferentialConstraint>,
    #[serde(rename = "propertyKind", skip_serializing)]
    pub property_kind: Option<i_edm_navigation_property::PropertyKind>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IEdmTypeReference>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<IEdmStructuredType>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_navigation_property {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OnDelete {
        None,
        Cascade,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PropertyKind {
        None,
        Structural,
        Navigation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmReferentialConstraint {
    #[serde(rename = "propertyPairs", skip_serializing)]
    pub property_pairs: Vec<EdmReferentialConstraintPropertyPair>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmStructuredType {
    #[serde(rename = "isAbstract", skip_serializing)]
    pub is_abstract: Option<bool>,
    #[serde(rename = "isOpen", skip_serializing)]
    pub is_open: Option<bool>,
    #[serde(rename = "baseType", skip_serializing_if = "Option::is_none")]
    pub base_type: Box<Option<IEdmStructuredType>>,
    #[serde(rename = "declaredProperties", skip_serializing)]
    pub declared_properties: Vec<IEdmProperty>,
    #[serde(rename = "typeKind", skip_serializing)]
    pub type_kind: Option<i_edm_structured_type::TypeKind>,
}
pub mod i_edm_structured_type {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TypeKind {
        None,
        Primitive,
        Entity,
        Complex,
        Collection,
        EntityReference,
        Enum,
        TypeDefinition,
        Untyped,
        Path,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdmReferentialConstraintPropertyPair {
    #[serde(rename = "dependentProperty", skip_serializing_if = "Option::is_none")]
    pub dependent_property: Option<IEdmStructuralProperty>,
    #[serde(rename = "principalProperty", skip_serializing_if = "Option::is_none")]
    pub principal_property: Option<IEdmStructuralProperty>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmProperty {
    #[serde(rename = "propertyKind", skip_serializing)]
    pub property_kind: Option<i_edm_property::PropertyKind>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IEdmTypeReference>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<IEdmStructuredType>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_property {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PropertyKind {
        None,
        Structural,
        Navigation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IEdmStructuralProperty {
    #[serde(rename = "defaultValueString", skip_serializing)]
    pub default_value_string: Option<String>,
    #[serde(rename = "propertyKind", skip_serializing)]
    pub property_kind: Option<i_edm_structural_property::PropertyKind>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IEdmTypeReference>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<IEdmStructuredType>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
pub mod i_edm_structural_property {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PropertyKind {
        None,
        Structural,
        Navigation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Machine>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Machine {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MachineProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineProperties {
    #[serde(rename = "discoveryData", skip_serializing_if = "Vec::is_empty")]
    pub discovery_data: Vec<DiscoveryDetails>,
    #[serde(rename = "assessmentData", skip_serializing_if = "Vec::is_empty")]
    pub assessment_data: Vec<AssessmentDetails>,
    #[serde(rename = "migrationData", skip_serializing_if = "Vec::is_empty")]
    pub migration_data: Vec<MigrationDetails>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscoveryDetails {
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "osName", skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(rename = "osVersion", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    #[serde(rename = "enqueueTime", skip_serializing_if = "Option::is_none")]
    pub enqueue_time: Option<String>,
    #[serde(rename = "solutionName", skip_serializing_if = "Option::is_none")]
    pub solution_name: Option<String>,
    #[serde(rename = "machineId", skip_serializing_if = "Option::is_none")]
    pub machine_id: Option<String>,
    #[serde(rename = "machineManagerId", skip_serializing_if = "Option::is_none")]
    pub machine_manager_id: Option<String>,
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "machineName", skip_serializing_if = "Option::is_none")]
    pub machine_name: Option<String>,
    #[serde(rename = "ipAddresses", skip_serializing_if = "Vec::is_empty")]
    pub ip_addresses: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "biosId", skip_serializing_if = "Option::is_none")]
    pub bios_id: Option<String>,
    #[serde(rename = "macAddresses", skip_serializing_if = "Vec::is_empty")]
    pub mac_addresses: Vec<String>,
    #[serde(rename = "extendedInfo", skip_serializing_if = "Option::is_none")]
    pub extended_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssessmentDetails {
    #[serde(rename = "assessmentId", skip_serializing_if = "Option::is_none")]
    pub assessment_id: Option<String>,
    #[serde(rename = "targetVMSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetVMLocation", skip_serializing_if = "Option::is_none")]
    pub target_vm_location: Option<String>,
    #[serde(rename = "targetStorageType", skip_serializing_if = "Option::is_none")]
    pub target_storage_type: Option<serde_json::Value>,
    #[serde(rename = "enqueueTime", skip_serializing_if = "Option::is_none")]
    pub enqueue_time: Option<String>,
    #[serde(rename = "solutionName", skip_serializing_if = "Option::is_none")]
    pub solution_name: Option<String>,
    #[serde(rename = "machineId", skip_serializing_if = "Option::is_none")]
    pub machine_id: Option<String>,
    #[serde(rename = "machineManagerId", skip_serializing_if = "Option::is_none")]
    pub machine_manager_id: Option<String>,
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "machineName", skip_serializing_if = "Option::is_none")]
    pub machine_name: Option<String>,
    #[serde(rename = "ipAddresses", skip_serializing_if = "Vec::is_empty")]
    pub ip_addresses: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "biosId", skip_serializing_if = "Option::is_none")]
    pub bios_id: Option<String>,
    #[serde(rename = "macAddresses", skip_serializing_if = "Vec::is_empty")]
    pub mac_addresses: Vec<String>,
    #[serde(rename = "extendedInfo", skip_serializing_if = "Option::is_none")]
    pub extended_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationDetails {
    #[serde(rename = "migrationPhase", skip_serializing_if = "Option::is_none")]
    pub migration_phase: Option<String>,
    #[serde(rename = "migrationTested", skip_serializing_if = "Option::is_none")]
    pub migration_tested: Option<bool>,
    #[serde(rename = "replicationProgressPercentage", skip_serializing_if = "Option::is_none")]
    pub replication_progress_percentage: Option<i32>,
    #[serde(rename = "targetVMArmId", skip_serializing_if = "Option::is_none")]
    pub target_vm_arm_id: Option<String>,
    #[serde(rename = "enqueueTime", skip_serializing_if = "Option::is_none")]
    pub enqueue_time: Option<String>,
    #[serde(rename = "solutionName", skip_serializing_if = "Option::is_none")]
    pub solution_name: Option<String>,
    #[serde(rename = "machineId", skip_serializing_if = "Option::is_none")]
    pub machine_id: Option<String>,
    #[serde(rename = "machineManagerId", skip_serializing_if = "Option::is_none")]
    pub machine_manager_id: Option<String>,
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(rename = "lastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "machineName", skip_serializing_if = "Option::is_none")]
    pub machine_name: Option<String>,
    #[serde(rename = "ipAddresses", skip_serializing_if = "Vec::is_empty")]
    pub ip_addresses: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "biosId", skip_serializing_if = "Option::is_none")]
    pub bios_id: Option<String>,
    #[serde(rename = "macAddresses", skip_serializing_if = "Vec::is_empty")]
    pub mac_addresses: Vec<String>,
    #[serde(rename = "extendedInfo", skip_serializing_if = "Option::is_none")]
    pub extended_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateProject {
    #[serde(rename = "eTag", skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MigrateProjectProperties>,
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<migrate_project::Tags>,
}
pub mod migrate_project {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Tags {
        #[serde(rename = "additionalProperties", skip_serializing_if = "Option::is_none")]
        pub additional_properties: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateProjectProperties {
    #[serde(rename = "registeredTools", skip_serializing_if = "Vec::is_empty")]
    pub registered_tools: Vec<String>,
    #[serde(skip_serializing)]
    pub summary: Option<serde_json::Value>,
    #[serde(rename = "lastSummaryRefreshedTime", skip_serializing)]
    pub last_summary_refreshed_time: Option<String>,
    #[serde(rename = "refreshSummaryState", skip_serializing)]
    pub refresh_summary_state: Option<migrate_project_properties::RefreshSummaryState>,
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<migrate_project_properties::ProvisioningState>,
}
pub mod migrate_project_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RefreshSummaryState {
        Started,
        InProgress,
        Completed,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Accepted,
        Creating,
        Deleting,
        Failed,
        Moving,
        Succeeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectSummary {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
    #[serde(rename = "refreshSummaryState", skip_serializing_if = "Option::is_none")]
    pub refresh_summary_state: Option<project_summary::RefreshSummaryState>,
    #[serde(rename = "lastSummaryRefreshedTime", skip_serializing_if = "Option::is_none")]
    pub last_summary_refreshed_time: Option<String>,
    #[serde(rename = "extendedSummary", skip_serializing_if = "Option::is_none")]
    pub extended_summary: Option<serde_json::Value>,
}
pub mod project_summary {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RefreshSummaryState {
        Started,
        InProgress,
        Completed,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterToolInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tool: Option<register_tool_input::Tool>,
}
pub mod register_tool_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Tool {
        ServerDiscovery,
        ServerAssessment,
        ServerMigration,
        Cloudamize,
        Turbonomic,
        Zerto,
        CorentTech,
        ServerAssessmentV1,
        #[serde(rename = "ServerMigration_Replication")]
        ServerMigrationReplication,
        Carbonite,
        DataMigrationAssistant,
        DatabaseMigrationService,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegistrationResult {
    #[serde(rename = "isRegistered", skip_serializing_if = "Option::is_none")]
    pub is_registered: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RefreshSummaryResult {
    #[serde(rename = "isRefreshed", skip_serializing_if = "Option::is_none")]
    pub is_refreshed: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RefreshSummaryInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<refresh_summary_input::Goal>,
}
pub mod refresh_summary_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Goal {
        Servers,
        Databases,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Solution {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SolutionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolutionProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tool: Option<solution_properties::Tool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<solution_properties::Purpose>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<solution_properties::Goal>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<solution_properties::Status>,
    #[serde(rename = "cleanupState", skip_serializing_if = "Option::is_none")]
    pub cleanup_state: Option<solution_properties::CleanupState>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<SolutionSummary>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<SolutionDetails>,
}
pub mod solution_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Tool {
        ServerDiscovery,
        ServerAssessment,
        ServerMigration,
        Cloudamize,
        Turbonomic,
        Zerto,
        CorentTech,
        ServerAssessmentV1,
        #[serde(rename = "ServerMigration_Replication")]
        ServerMigrationReplication,
        Carbonite,
        DataMigrationAssistant,
        DatabaseMigrationService,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Purpose {
        Discovery,
        Assessment,
        Migration,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Goal {
        Servers,
        Databases,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Inactive,
        Active,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CleanupState {
        None,
        Started,
        InProgress,
        Completed,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolutionSummary {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolutionDetails {
    #[serde(rename = "groupCount", skip_serializing_if = "Option::is_none")]
    pub group_count: Option<i32>,
    #[serde(rename = "assessmentCount", skip_serializing_if = "Option::is_none")]
    pub assessment_count: Option<i32>,
    #[serde(rename = "extendedDetails", skip_serializing_if = "Option::is_none")]
    pub extended_details: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolutionsCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Solution>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolutionConfig {
    #[serde(rename = "publisherSasUri", skip_serializing_if = "Option::is_none")]
    pub publisher_sas_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServersProjectSummary {
    #[serde(flatten)]
    pub project_summary: ProjectSummary,
    #[serde(rename = "discoveredCount", skip_serializing_if = "Option::is_none")]
    pub discovered_count: Option<i32>,
    #[serde(rename = "assessedCount", skip_serializing_if = "Option::is_none")]
    pub assessed_count: Option<i32>,
    #[serde(rename = "replicatingCount", skip_serializing_if = "Option::is_none")]
    pub replicating_count: Option<i32>,
    #[serde(rename = "testMigratedCount", skip_serializing_if = "Option::is_none")]
    pub test_migrated_count: Option<i32>,
    #[serde(rename = "migratedCount", skip_serializing_if = "Option::is_none")]
    pub migrated_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseProjectSummary {
    #[serde(flatten)]
    pub project_summary: ProjectSummary,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServersSolutionSummary {
    #[serde(flatten)]
    pub solution_summary: SolutionSummary,
    #[serde(rename = "discoveredCount", skip_serializing_if = "Option::is_none")]
    pub discovered_count: Option<i32>,
    #[serde(rename = "assessedCount", skip_serializing_if = "Option::is_none")]
    pub assessed_count: Option<i32>,
    #[serde(rename = "replicatingCount", skip_serializing_if = "Option::is_none")]
    pub replicating_count: Option<i32>,
    #[serde(rename = "testMigratedCount", skip_serializing_if = "Option::is_none")]
    pub test_migrated_count: Option<i32>,
    #[serde(rename = "migratedCount", skip_serializing_if = "Option::is_none")]
    pub migrated_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabasesSolutionSummary {
    #[serde(flatten)]
    pub solution_summary: SolutionSummary,
    #[serde(rename = "databasesAssessedCount", skip_serializing_if = "Option::is_none")]
    pub databases_assessed_count: Option<i32>,
    #[serde(rename = "databaseInstancesAssessedCount", skip_serializing_if = "Option::is_none")]
    pub database_instances_assessed_count: Option<i32>,
    #[serde(rename = "migrationReadyCount", skip_serializing_if = "Option::is_none")]
    pub migration_ready_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineMigrateEventProperties {
    #[serde(flatten)]
    pub migrate_event_properties: MigrateEventProperties,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub machine: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseMigrateEventProperties {
    #[serde(flatten)]
    pub migrate_event_properties: MigrateEventProperties,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    #[serde(rename = "databaseInstanceId", skip_serializing_if = "Option::is_none")]
    pub database_instance_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResultList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub display: Option<OperationDisplay>,
    #[serde(skip_serializing)]
    pub origin: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationDisplay {
    #[serde(skip_serializing)]
    pub provider: Option<String>,
    #[serde(skip_serializing)]
    pub resource: Option<String>,
    #[serde(skip_serializing)]
    pub operation: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
}
