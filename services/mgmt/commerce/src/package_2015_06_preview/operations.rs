#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod usage_aggregates {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        reported_start_time: &str,
        reported_end_time: &str,
        show_details: Option<bool>,
        aggregation_granularity: Option<&str>,
        continuation_token: Option<&str>,
        subscription_id: &str,
    ) -> Result<UsageAggregationListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Commerce/UsageAggregates",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("reportedStartTime", reported_start_time)]);
        req_builder = req_builder.query(&[("reportedEndTime", reported_end_time)]);
        if let Some(show_details) = show_details {
            req_builder = req_builder.query(&[("showDetails", show_details)]);
        }
        if let Some(aggregation_granularity) = aggregation_granularity {
            req_builder = req_builder.query(&[("aggregationGranularity", aggregation_granularity)]);
        }
        if let Some(continuation_token) = continuation_token {
            req_builder = req_builder.query(&[("continuationToken", continuation_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod rate_card {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, filter: &str, subscription_id: &str) -> Result<ResourceRateCardInfo> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Commerce/RateCard",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("$filter", filter)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
