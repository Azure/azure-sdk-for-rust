#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubResource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Object {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceReference {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Workflow {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowProperties {
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowProvisioningState>,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "accessEndpoint", skip_serializing)]
    pub access_endpoint: Option<String>,
    #[serde(rename = "endpointsConfiguration", skip_serializing_if = "Option::is_none")]
    pub endpoints_configuration: Option<FlowEndpointsConfiguration>,
    #[serde(rename = "accessControl", skip_serializing_if = "Option::is_none")]
    pub access_control: Option<FlowAccessControlConfiguration>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,
    #[serde(rename = "integrationAccount", skip_serializing_if = "Option::is_none")]
    pub integration_account: Option<ResourceReference>,
    #[serde(rename = "integrationServiceEnvironment", skip_serializing_if = "Option::is_none")]
    pub integration_service_environment: Option<ResourceReference>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Workflow>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowVersion {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowVersionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowVersionProperties {
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowProvisioningState>,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "accessEndpoint", skip_serializing)]
    pub access_endpoint: Option<String>,
    #[serde(rename = "endpointsConfiguration", skip_serializing_if = "Option::is_none")]
    pub endpoints_configuration: Option<FlowEndpointsConfiguration>,
    #[serde(rename = "accessControl", skip_serializing_if = "Option::is_none")]
    pub access_control: Option<FlowAccessControlConfiguration>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,
    #[serde(rename = "integrationAccount", skip_serializing_if = "Option::is_none")]
    pub integration_account: Option<ResourceReference>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowVersionListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowVersion>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTrigger {
    #[serde(flatten)]
    pub sub_resource: SubResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowTriggerProperties>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerProperties {
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowTriggerProvisioningState>,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(rename = "lastExecutionTime", skip_serializing)]
    pub last_execution_time: Option<String>,
    #[serde(rename = "nextExecutionTime", skip_serializing)]
    pub next_execution_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<WorkflowTriggerRecurrence>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow: Option<ResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowTrigger>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerCallbackUrl {
    #[serde(skip_serializing)]
    pub value: Option<String>,
    #[serde(skip_serializing)]
    pub method: Option<String>,
    #[serde(rename = "basePath", skip_serializing)]
    pub base_path: Option<String>,
    #[serde(rename = "relativePath", skip_serializing)]
    pub relative_path: Option<String>,
    #[serde(rename = "relativePathParameters", skip_serializing_if = "Vec::is_empty")]
    pub relative_path_parameters: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub queries: Option<WorkflowTriggerListCallbackUrlQueries>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerListCallbackUrlQueries {
    #[serde(rename = "api-version", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sp: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sv: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sig: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub se: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerHistory {
    #[serde(flatten)]
    pub sub_resource: SubResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowTriggerHistoryProperties>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerHistoryProperties {
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(rename = "scheduledTime", skip_serializing)]
    pub scheduled_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Object>,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub correlation: Option<Correlation>,
    #[serde(rename = "inputsLink", skip_serializing_if = "Option::is_none")]
    pub inputs_link: Option<ContentLink>,
    #[serde(rename = "outputsLink", skip_serializing_if = "Option::is_none")]
    pub outputs_link: Option<ContentLink>,
    #[serde(skip_serializing)]
    pub fired: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub run: Option<ResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerHistoryListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowTriggerHistory>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerHistoryFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRun {
    #[serde(flatten)]
    pub sub_resource: SubResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowRunProperties>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunProperties {
    #[serde(rename = "waitEndTime", skip_serializing)]
    pub wait_end_time: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Object>,
    #[serde(rename = "correlationId", skip_serializing)]
    pub correlation_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub correlation: Option<Correlation>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow: Option<ResourceReference>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub trigger: Option<WorkflowRunTrigger>,
    #[serde(skip_serializing)]
    pub outputs: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<WorkflowRunTrigger>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowRun>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunAction {
    #[serde(flatten)]
    pub sub_resource: SubResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkflowRunActionProperties>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionProperties {
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Object>,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub correlation: Option<RunActionCorrelation>,
    #[serde(rename = "inputsLink", skip_serializing_if = "Option::is_none")]
    pub inputs_link: Option<ContentLink>,
    #[serde(rename = "outputsLink", skip_serializing_if = "Option::is_none")]
    pub outputs_link: Option<ContentLink>,
    #[serde(rename = "trackedProperties", skip_serializing_if = "Option::is_none")]
    pub tracked_properties: Option<Object>,
    #[serde(rename = "retryHistory", skip_serializing_if = "Vec::is_empty")]
    pub retry_history: Vec<RetryHistory>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowRunAction>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SkuName {
    NotSpecified,
    Free,
    Shared,
    Basic,
    Standard,
    Premium,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum WorkflowState {
    NotSpecified,
    Completed,
    Enabled,
    Disabled,
    Deleted,
    Suspended,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum WorkflowStatus {
    NotSpecified,
    Paused,
    Running,
    Waiting,
    Succeeded,
    Skipped,
    Suspended,
    Cancelled,
    Failed,
    Faulted,
    TimedOut,
    Aborted,
    Ignored,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ParameterType {
    NotSpecified,
    String,
    SecureString,
    Int,
    Float,
    Bool,
    Array,
    Object,
    SecureObject,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum KeyType {
    NotSpecified,
    Primary,
    Secondary,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sku {
    pub name: SkuName,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub plan: Option<ResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "contentVersion", skip_serializing_if = "Option::is_none")]
    pub content_version: Option<String>,
    #[serde(rename = "contentSize", skip_serializing_if = "Option::is_none")]
    pub content_size: Option<i64>,
    #[serde(rename = "contentHash", skip_serializing_if = "Option::is_none")]
    pub content_hash: Option<ContentHash>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Object>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentHash {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegenerateActionParameter {
    #[serde(rename = "keyType", skip_serializing_if = "Option::is_none")]
    pub key_type: Option<KeyType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetryHistory {
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "clientRequestId", skip_serializing_if = "Option::is_none")]
    pub client_request_id: Option<String>,
    #[serde(rename = "serviceRequestId", skip_serializing_if = "Option::is_none")]
    pub service_request_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Correlation {
    #[serde(rename = "clientTrackingId", skip_serializing_if = "Option::is_none")]
    pub client_tracking_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowParameter {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<ParameterType>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowOutputParameter {
    #[serde(flatten)]
    pub workflow_parameter: WorkflowParameter,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Object>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum RecurrenceFrequency {
    NotSpecified,
    Second,
    Minute,
    Hour,
    Day,
    Week,
    Month,
    Year,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurrenceSchedule {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub minutes: Vec<i32>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub hours: Vec<i32>,
    #[serde(rename = "weekDays", skip_serializing_if = "Vec::is_empty")]
    pub week_days: Vec<String>,
    #[serde(rename = "monthDays", skip_serializing_if = "Vec::is_empty")]
    pub month_days: Vec<i32>,
    #[serde(rename = "monthlyOccurrences", skip_serializing_if = "Vec::is_empty")]
    pub monthly_occurrences: Vec<RecurrenceScheduleOccurrence>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurrenceScheduleOccurrence {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub day: Option<DayOfWeek>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub occurrence: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerRecurrence {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frequency: Option<RecurrenceFrequency>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interval: Option<i32>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "timeZone", skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<RecurrenceSchedule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunTrigger {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Object>,
    #[serde(rename = "inputsLink", skip_serializing_if = "Option::is_none")]
    pub inputs_link: Option<ContentLink>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Object>,
    #[serde(rename = "outputsLink", skip_serializing_if = "Option::is_none")]
    pub outputs_link: Option<ContentLink>,
    #[serde(rename = "scheduledTime", skip_serializing)]
    pub scheduled_time: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub correlation: Option<Correlation>,
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Object>,
    #[serde(rename = "trackedProperties", skip_serializing_if = "Option::is_none")]
    pub tracked_properties: Option<Object>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum WorkflowTriggerProvisioningState {
    NotSpecified,
    Accepted,
    Running,
    Ready,
    Creating,
    Created,
    Deleting,
    Deleted,
    Canceled,
    Failed,
    Succeeded,
    Moving,
    Updating,
    Registering,
    Registered,
    Unregistering,
    Unregistered,
    Completed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum WorkflowProvisioningState {
    NotSpecified,
    Accepted,
    Running,
    Ready,
    Creating,
    Created,
    Deleting,
    Deleted,
    Canceled,
    Failed,
    Succeeded,
    Moving,
    Updating,
    Registering,
    Registered,
    Unregistering,
    Unregistered,
    Completed,
    Renewing,
    Pending,
    Waiting,
    InProgress,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum DayOfWeek {
    Sunday,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenerateUpgradedDefinitionParameters {
    #[serde(rename = "targetSchemaVersion", skip_serializing_if = "Option::is_none")]
    pub target_schema_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ApiTier {
    NotSpecified,
    Enterprise,
    Standard,
    Premium,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiOperationAnnotation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusAnnotation>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerXml {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attribute: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub wrapped: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extensions: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerExternalDocumentation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extensions: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicSchema {
    #[serde(rename = "operationId", skip_serializing_if = "Option::is_none")]
    pub operation_id: Option<String>,
    #[serde(rename = "valuePath", skip_serializing_if = "Option::is_none")]
    pub value_path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicProperties {
    #[serde(rename = "operationId", skip_serializing_if = "Option::is_none")]
    pub operation_id: Option<String>,
    #[serde(rename = "valuePath", skip_serializing_if = "Option::is_none")]
    pub value_path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicList {
    #[serde(rename = "operationId", skip_serializing_if = "Option::is_none")]
    pub operation_id: Option<String>,
    #[serde(rename = "builtInOperation", skip_serializing_if = "Option::is_none")]
    pub built_in_operation: Option<String>,
    #[serde(rename = "itemsPath", skip_serializing_if = "Option::is_none")]
    pub items_path: Option<String>,
    #[serde(rename = "itemValuePath", skip_serializing_if = "Option::is_none")]
    pub item_value_path: Option<String>,
    #[serde(rename = "itemTitlePath", skip_serializing_if = "Option::is_none")]
    pub item_title_path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicTree {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub settings: Option<SwaggerCustomDynamicTreeSettings>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub open: Option<SwaggerCustomDynamicTreeCommand>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub browse: Option<SwaggerCustomDynamicTreeCommand>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicTreeParameter {
    #[serde(rename = "selectedItemValuePath", skip_serializing_if = "Option::is_none")]
    pub selected_item_value_path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Object>,
    #[serde(rename = "parameterReference", skip_serializing_if = "Option::is_none")]
    pub parameter_reference: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicTreeCommand {
    #[serde(rename = "operationId", skip_serializing_if = "Option::is_none")]
    pub operation_id: Option<String>,
    #[serde(rename = "itemsPath", skip_serializing_if = "Option::is_none")]
    pub items_path: Option<String>,
    #[serde(rename = "itemValuePath", skip_serializing_if = "Option::is_none")]
    pub item_value_path: Option<String>,
    #[serde(rename = "itemTitlePath", skip_serializing_if = "Option::is_none")]
    pub item_title_path: Option<String>,
    #[serde(rename = "itemFullTitlePath", skip_serializing_if = "Option::is_none")]
    pub item_full_title_path: Option<String>,
    #[serde(rename = "itemIsParent", skip_serializing_if = "Option::is_none")]
    pub item_is_parent: Option<String>,
    #[serde(rename = "selectableFilter", skip_serializing_if = "Option::is_none")]
    pub selectable_filter: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerCustomDynamicTreeSettings {
    #[serde(rename = "CanSelectParentNodes", skip_serializing_if = "Option::is_none")]
    pub can_select_parent_nodes: Option<bool>,
    #[serde(rename = "CanSelectLeafNodes", skip_serializing_if = "Option::is_none")]
    pub can_select_leaf_nodes: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SwaggerSchemaType {
    String,
    Number,
    Integer,
    Boolean,
    Array,
    File,
    Object,
    Null,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwaggerSchema {
    #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
    pub ref_: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<SwaggerSchemaType>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Box<Option<SwaggerSchema>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "additionalProperties", skip_serializing_if = "Option::is_none")]
    pub additional_properties: Option<Object>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub required: Vec<String>,
    #[serde(rename = "maxProperties", skip_serializing_if = "Option::is_none")]
    pub max_properties: Option<i64>,
    #[serde(rename = "minProperties", skip_serializing_if = "Option::is_none")]
    pub min_properties: Option<i64>,
    #[serde(rename = "allOf", skip_serializing_if = "Vec::is_empty")]
    pub all_of: Vec<SwaggerSchema>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub discriminator: Option<String>,
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub xml: Option<SwaggerXml>,
    #[serde(rename = "externalDocs", skip_serializing_if = "Option::is_none")]
    pub external_docs: Option<SwaggerExternalDocumentation>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub example: Option<Object>,
    #[serde(rename = "notificationUrlExtension", skip_serializing_if = "Option::is_none")]
    pub notification_url_extension: Option<bool>,
    #[serde(rename = "dynamicSchemaOld", skip_serializing_if = "Option::is_none")]
    pub dynamic_schema_old: Option<SwaggerCustomDynamicSchema>,
    #[serde(rename = "dynamicSchemaNew", skip_serializing_if = "Option::is_none")]
    pub dynamic_schema_new: Option<SwaggerCustomDynamicProperties>,
    #[serde(rename = "dynamicListNew", skip_serializing_if = "Option::is_none")]
    pub dynamic_list_new: Option<SwaggerCustomDynamicList>,
    #[serde(rename = "dynamicTree", skip_serializing_if = "Option::is_none")]
    pub dynamic_tree: Option<SwaggerCustomDynamicTree>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiOperationPropertiesDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub trigger: Option<String>,
    #[serde(rename = "triggerHint", skip_serializing_if = "Option::is_none")]
    pub trigger_hint: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pageable: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub annotation: Option<ApiOperationAnnotation>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub api: Option<ApiReference>,
    #[serde(rename = "inputsDefinition", skip_serializing_if = "Option::is_none")]
    pub inputs_definition: Option<SwaggerSchema>,
    #[serde(rename = "responsesDefinition", skip_serializing_if = "Option::is_none")]
    pub responses_definition: Option<serde_json::Value>,
    #[serde(rename = "isWebhook", skip_serializing_if = "Option::is_none")]
    pub is_webhook: Option<bool>,
    #[serde(rename = "isNotification", skip_serializing_if = "Option::is_none")]
    pub is_notification: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiOperation {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApiOperationPropertiesDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiOperationListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ApiOperation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum StatusAnnotation {
    NotSpecified,
    Preview,
    Production,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTriggerReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "flowName", skip_serializing_if = "Option::is_none")]
    pub flow_name: Option<String>,
    #[serde(rename = "triggerName", skip_serializing_if = "Option::is_none")]
    pub trigger_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub swagger: Option<Object>,
    #[serde(rename = "brandColor", skip_serializing_if = "Option::is_none")]
    pub brand_color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<ApiTier>,
    #[serde(rename = "integrationServiceEnvironment", skip_serializing_if = "Option::is_none")]
    pub integration_service_environment: Option<ResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagedApiListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ManagedApi>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourceProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "connectionParameters", skip_serializing_if = "Option::is_none")]
    pub connection_parameters: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ApiResourceMetadata>,
    #[serde(rename = "runtimeUrls", skip_serializing_if = "Vec::is_empty")]
    pub runtime_urls: Vec<String>,
    #[serde(rename = "generalInformation", skip_serializing_if = "Option::is_none")]
    pub general_information: Option<ApiResourceGeneralInformation>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub capabilities: Vec<String>,
    #[serde(rename = "backendService", skip_serializing_if = "Option::is_none")]
    pub backend_service: Option<ApiResourceBackendService>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policies: Option<ApiResourcePolicies>,
    #[serde(rename = "apiDefinitionUrl", skip_serializing_if = "Option::is_none")]
    pub api_definition_url: Option<String>,
    #[serde(rename = "apiDefinitions", skip_serializing_if = "Option::is_none")]
    pub api_definitions: Option<ApiResourceDefinitions>,
    #[serde(rename = "integrationServiceEnvironment", skip_serializing_if = "Option::is_none")]
    pub integration_service_environment: Option<ResourceReference>,
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowProvisioningState>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<ApiTier>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourcePolicies {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "contentLink", skip_serializing_if = "Option::is_none")]
    pub content_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourceDefinitions {
    #[serde(rename = "originalSwaggerUrl", skip_serializing_if = "Option::is_none")]
    pub original_swagger_url: Option<String>,
    #[serde(rename = "modifiedSwaggerUrl", skip_serializing_if = "Option::is_none")]
    pub modified_swagger_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiDeploymentParameterMetadataSet {
    #[serde(rename = "packageContentLink", skip_serializing_if = "Option::is_none")]
    pub package_content_link: Option<ApiDeploymentParameterMetadata>,
    #[serde(rename = "redisCacheConnectionString", skip_serializing_if = "Option::is_none")]
    pub redis_cache_connection_string: Option<ApiDeploymentParameterMetadata>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiDeploymentParameterMetadata {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(rename = "isRequired", skip_serializing_if = "Option::is_none")]
    pub is_required: Option<bool>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visibility: Option<ApiDeploymentParameterVisibility>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ApiDeploymentParameterVisibility {
    NotSpecified,
    Default,
    Internal,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourceBackendService {
    #[serde(rename = "serviceUrl", skip_serializing_if = "Option::is_none")]
    pub service_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourceMetadata {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "brandColor", skip_serializing_if = "Option::is_none")]
    pub brand_color: Option<String>,
    #[serde(rename = "hideKey", skip_serializing_if = "Option::is_none")]
    pub hide_key: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "ApiType", skip_serializing_if = "Option::is_none")]
    pub api_type: Option<ApiType>,
    #[serde(rename = "wsdlService", skip_serializing_if = "Option::is_none")]
    pub wsdl_service: Option<WsdlService>,
    #[serde(rename = "wsdlImportMethod", skip_serializing_if = "Option::is_none")]
    pub wsdl_import_method: Option<WsdlImportMethod>,
    #[serde(rename = "connectionType", skip_serializing_if = "Option::is_none")]
    pub connection_type: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowProvisioningState>,
    #[serde(rename = "deploymentParameters", skip_serializing_if = "Option::is_none")]
    pub deployment_parameters: Option<ApiDeploymentParameterMetadataSet>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ApiType {
    NotSpecified,
    Rest,
    Soap,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WsdlService {
    #[serde(rename = "qualifiedName", skip_serializing_if = "Option::is_none")]
    pub qualified_name: Option<String>,
    #[serde(rename = "EndpointQualifiedNames", skip_serializing_if = "Vec::is_empty")]
    pub endpoint_qualified_names: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum WsdlImportMethod {
    NotSpecified,
    SoapToRest,
    SoapPassThrough,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiResourceGeneralInformation {
    #[serde(rename = "iconUrl", skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "termsOfUseUrl", skip_serializing_if = "Option::is_none")]
    pub terms_of_use_url: Option<String>,
    #[serde(rename = "releaseTag", skip_serializing_if = "Option::is_none")]
    pub release_tag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tier: Option<ApiTier>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagedApi {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApiResourceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
    NotSpecified,
    Unknown,
    Available,
    NotAvailable,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentNetworkEndpoint {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accessibility: Option<IntegrationServiceEnvironmentNetworkEndPointAccessibilityState>,
    #[serde(rename = "domainName", skip_serializing_if = "Option::is_none")]
    pub domain_name: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub ports: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentNetworkDependencyCategoryType {
    NotSpecified,
    AzureStorage,
    AzureManagement,
    AzureActiveDirectory,
    #[serde(rename = "SSLCertificateVerification")]
    SslCertificateVerification,
    DiagnosticLogsAndMetrics,
    IntegrationServiceEnvironmentConnectors,
    RedisCache,
    AccessEndpoints,
    RecoveryService,
    #[serde(rename = "SQL")]
    Sql,
    RegionalService,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentNetworkDependency {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<IntegrationServiceEnvironmentNetworkDependencyCategoryType>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<IntegrationServiceEnvironmentNetworkEndpoint>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentNetworkDependencyHealthState {
    NotSpecified,
    Healthy,
    Unhealthy,
    Unknown,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentNetworkDependencyHealth {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ExtendedErrorInfo>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<IntegrationServiceEnvironmentNetworkDependencyHealthState>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentNetworkHealth {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentSubnetNetworkHealth {
    #[serde(rename = "outboundNetworkDependencies", skip_serializing_if = "Vec::is_empty")]
    pub outbound_network_dependencies: Vec<IntegrationServiceEnvironmentNetworkDependency>,
    #[serde(rename = "outboundNetworkHealth", skip_serializing_if = "Option::is_none")]
    pub outbound_network_health: Option<IntegrationServiceEnvironmentNetworkDependencyHealth>,
    #[serde(rename = "networkDependencyHealthState")]
    pub network_dependency_health_state: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtendedErrorInfo {
    pub code: ErrorResponseCode,
    pub message: String,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ExtendedErrorInfo>,
    #[serde(rename = "innerError", skip_serializing_if = "Option::is_none")]
    pub inner_error: Option<Object>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ErrorResponseCode {
    NotSpecified,
    IntegrationServiceEnvironmentNotFound,
    InternalServerError,
    InvalidOperationId,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum AzureAsyncOperationState {
    Failed,
    Succeeded,
    Pending,
    Canceled,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationServiceEnvironment>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironment {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IntegrationServiceEnvironmentProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<IntegrationServiceEnvironmentSku>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentSku {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<IntegrationServiceEnvironmentSkuName>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentProperties {
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkflowProvisioningState>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
    #[serde(rename = "integrationServiceEnvironmentId", skip_serializing_if = "Option::is_none")]
    pub integration_service_environment_id: Option<String>,
    #[serde(rename = "endpointsConfiguration", skip_serializing_if = "Option::is_none")]
    pub endpoints_configuration: Option<FlowEndpointsConfiguration>,
    #[serde(rename = "networkConfiguration", skip_serializing_if = "Option::is_none")]
    pub network_configuration: Option<NetworkConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentSkuName {
    NotSpecified,
    Premium,
    Developer,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkConfiguration {
    #[serde(rename = "virtualNetworkAddressSpace", skip_serializing_if = "Option::is_none")]
    pub virtual_network_address_space: Option<String>,
    #[serde(rename = "accessEndpoint", skip_serializing_if = "Option::is_none")]
    pub access_endpoint: Option<IntegrationServiceEnvironmentAccessEndpoint>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub subnets: Vec<ResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentAccessEndpoint {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<IntegrationServiceEnvironmentAccessEndpointType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentAccessEndpointType {
    NotSpecified,
    External,
    Internal,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowAccessControlConfiguration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub triggers: Option<FlowAccessControlConfigurationPolicy>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contents: Option<FlowAccessControlConfigurationPolicy>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actions: Option<FlowAccessControlConfigurationPolicy>,
    #[serde(rename = "workflowManagement", skip_serializing_if = "Option::is_none")]
    pub workflow_management: Option<FlowAccessControlConfigurationPolicy>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowAccessControlConfigurationPolicy {
    #[serde(rename = "allowedCallerIpAddresses", skip_serializing_if = "Vec::is_empty")]
    pub allowed_caller_ip_addresses: Vec<IpAddressRange>,
    #[serde(rename = "openAuthenticationPolicies", skip_serializing_if = "Option::is_none")]
    pub open_authentication_policies: Option<OpenAuthenticationAccessPolicies>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpAddressRange {
    #[serde(rename = "addressRange", skip_serializing_if = "Option::is_none")]
    pub address_range: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAuthenticationAccessPolicies {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policies: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAuthenticationAccessPolicy {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<OpenAuthenticationProviderType>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub claims: Vec<OpenAuthenticationPolicyClaim>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OpenAuthenticationProviderType {
    #[serde(rename = "AAD")]
    Aad,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAuthenticationPolicyClaim {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowEndpointsConfiguration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow: Option<FlowEndpoints>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub connector: Option<FlowEndpoints>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlowEndpoints {
    #[serde(rename = "outgoingIpAddresses", skip_serializing_if = "Vec::is_empty")]
    pub outgoing_ip_addresses: Vec<IpAddress>,
    #[serde(rename = "accessEndpointIpAddresses", skip_serializing_if = "Vec::is_empty")]
    pub access_endpoint_ip_addresses: Vec<IpAddress>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpAddress {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentSkuList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationServiceEnvironmentSkuDefinition>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentSkuDefinition {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<integration_service_environment_sku_definition::Sku>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntegrationServiceEnvironmentSkuCapacity>,
}
pub mod integration_service_environment_sku_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Sku {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub name: Option<IntegrationServiceEnvironmentSkuName>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub tier: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationServiceEnvironmentSkuCapacity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub minimum: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub maximum: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default: Option<i32>,
    #[serde(rename = "scaleType", skip_serializing_if = "Option::is_none")]
    pub scale_type: Option<IntegrationServiceEnvironmentSkuScaleType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationServiceEnvironmentSkuScaleType {
    Manual,
    Automatic,
    None,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum IntegrationAccountSkuName {
    NotSpecified,
    Free,
    Basic,
    Standard,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccount {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IntegrationAccountProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<IntegrationAccountSku>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountProperties {
    #[serde(rename = "integrationServiceEnvironment", skip_serializing_if = "Option::is_none")]
    pub integration_service_environment: Option<IntegrationServiceEnvironment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<WorkflowState>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccount>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCallbackUrlParameters {
    #[serde(rename = "notAfter", skip_serializing_if = "Option::is_none")]
    pub not_after: Option<String>,
    #[serde(rename = "keyType", skip_serializing_if = "Option::is_none")]
    pub key_type: Option<KeyType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CallbackUrl {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSchema {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountSchemaProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSchemaProperties {
    #[serde(rename = "schemaType")]
    pub schema_type: SchemaType,
    #[serde(rename = "targetNamespace", skip_serializing_if = "Option::is_none")]
    pub target_namespace: Option<String>,
    #[serde(rename = "documentName", skip_serializing_if = "Option::is_none")]
    pub document_name: Option<String>,
    #[serde(rename = "fileName", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "contentLink", skip_serializing_if = "Option::is_none")]
    pub content_link: Option<ContentLink>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSchemaListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountSchema>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSchemaFilter {
    #[serde(rename = "schemaType")]
    pub schema_type: SchemaType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SchemaType {
    NotSpecified,
    Xml,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountMap {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountMapProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountMapProperties {
    #[serde(rename = "mapType")]
    pub map_type: MapType,
    #[serde(rename = "parametersSchema", skip_serializing_if = "Option::is_none")]
    pub parameters_schema: Option<integration_account_map_properties::ParametersSchema>,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "contentLink", skip_serializing_if = "Option::is_none")]
    pub content_link: Option<ContentLink>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}
pub mod integration_account_map_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct ParametersSchema {
        #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
        pub ref_: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountMapListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountMap>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountMapFilter {
    #[serde(rename = "mapType")]
    pub map_type: MapType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum MapType {
    NotSpecified,
    Xslt,
    Xslt20,
    Xslt30,
    Liquid,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSku {
    pub name: IntegrationAccountSkuName,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountPartnerListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountPartner>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountPartnerFilter {
    #[serde(rename = "partnerType")]
    pub partner_type: PartnerType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountPartner {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountPartnerProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountPartnerProperties {
    #[serde(rename = "partnerType")]
    pub partner_type: PartnerType,
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    pub content: PartnerContent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum PartnerType {
    NotSpecified,
    #[serde(rename = "B2B")]
    B2b,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartnerContent {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub b2b: Option<B2bPartnerContent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct B2bPartnerContent {
    #[serde(rename = "businessIdentities", skip_serializing_if = "Vec::is_empty")]
    pub business_identities: Vec<BusinessIdentity>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BusinessIdentity {
    pub qualifier: String,
    pub value: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountAgreementListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountAgreement>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountAgreementFilter {
    #[serde(rename = "agreementType")]
    pub agreement_type: AgreementType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountAgreement {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountAgreementProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountAgreementProperties {
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "agreementType")]
    pub agreement_type: AgreementType,
    #[serde(rename = "hostPartner")]
    pub host_partner: String,
    #[serde(rename = "guestPartner")]
    pub guest_partner: String,
    #[serde(rename = "hostIdentity")]
    pub host_identity: BusinessIdentity,
    #[serde(rename = "guestIdentity")]
    pub guest_identity: BusinessIdentity,
    pub content: AgreementContent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum AgreementType {
    NotSpecified,
    #[serde(rename = "AS2")]
    As2,
    X12,
    Edifact,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgreementContent {
    #[serde(rename = "aS2", skip_serializing_if = "Option::is_none")]
    pub a_s2: Option<As2AgreementContent>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x12: Option<X12AgreementContent>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub edifact: Option<EdifactAgreementContent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2AgreementContent {
    #[serde(rename = "receiveAgreement")]
    pub receive_agreement: As2OneWayAgreement,
    #[serde(rename = "sendAgreement")]
    pub send_agreement: As2OneWayAgreement,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2OneWayAgreement {
    #[serde(rename = "senderBusinessIdentity")]
    pub sender_business_identity: BusinessIdentity,
    #[serde(rename = "receiverBusinessIdentity")]
    pub receiver_business_identity: BusinessIdentity,
    #[serde(rename = "protocolSettings")]
    pub protocol_settings: As2ProtocolSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2ProtocolSettings {
    #[serde(rename = "messageConnectionSettings")]
    pub message_connection_settings: As2MessageConnectionSettings,
    #[serde(rename = "acknowledgementConnectionSettings")]
    pub acknowledgement_connection_settings: As2AcknowledgementConnectionSettings,
    #[serde(rename = "mdnSettings")]
    pub mdn_settings: As2MdnSettings,
    #[serde(rename = "securitySettings")]
    pub security_settings: As2SecuritySettings,
    #[serde(rename = "validationSettings")]
    pub validation_settings: As2ValidationSettings,
    #[serde(rename = "envelopeSettings")]
    pub envelope_settings: As2EnvelopeSettings,
    #[serde(rename = "errorSettings")]
    pub error_settings: As2ErrorSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2AcknowledgementConnectionSettings {
    #[serde(rename = "ignoreCertificateNameMismatch")]
    pub ignore_certificate_name_mismatch: bool,
    #[serde(rename = "supportHttpStatusCodeContinue")]
    pub support_http_status_code_continue: bool,
    #[serde(rename = "keepHttpConnectionAlive")]
    pub keep_http_connection_alive: bool,
    #[serde(rename = "unfoldHttpHeaders")]
    pub unfold_http_headers: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2MessageConnectionSettings {
    #[serde(rename = "ignoreCertificateNameMismatch")]
    pub ignore_certificate_name_mismatch: bool,
    #[serde(rename = "supportHttpStatusCodeContinue")]
    pub support_http_status_code_continue: bool,
    #[serde(rename = "keepHttpConnectionAlive")]
    pub keep_http_connection_alive: bool,
    #[serde(rename = "unfoldHttpHeaders")]
    pub unfold_http_headers: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2MdnSettings {
    #[serde(rename = "needMDN")]
    pub need_mdn: bool,
    #[serde(rename = "signMDN")]
    pub sign_mdn: bool,
    #[serde(rename = "sendMDNAsynchronously")]
    pub send_mdn_asynchronously: bool,
    #[serde(rename = "receiptDeliveryUrl", skip_serializing_if = "Option::is_none")]
    pub receipt_delivery_url: Option<String>,
    #[serde(rename = "dispositionNotificationTo", skip_serializing_if = "Option::is_none")]
    pub disposition_notification_to: Option<String>,
    #[serde(rename = "signOutboundMDNIfOptional")]
    pub sign_outbound_mdn_if_optional: bool,
    #[serde(rename = "mdnText", skip_serializing_if = "Option::is_none")]
    pub mdn_text: Option<String>,
    #[serde(rename = "sendInboundMDNToMessageBox")]
    pub send_inbound_mdn_to_message_box: bool,
    #[serde(rename = "micHashingAlgorithm")]
    pub mic_hashing_algorithm: HashingAlgorithm,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2SecuritySettings {
    #[serde(rename = "overrideGroupSigningCertificate")]
    pub override_group_signing_certificate: bool,
    #[serde(rename = "signingCertificateName", skip_serializing_if = "Option::is_none")]
    pub signing_certificate_name: Option<String>,
    #[serde(rename = "encryptionCertificateName", skip_serializing_if = "Option::is_none")]
    pub encryption_certificate_name: Option<String>,
    #[serde(rename = "enableNRRForInboundEncodedMessages")]
    pub enable_nrr_for_inbound_encoded_messages: bool,
    #[serde(rename = "enableNRRForInboundDecodedMessages")]
    pub enable_nrr_for_inbound_decoded_messages: bool,
    #[serde(rename = "enableNRRForOutboundMDN")]
    pub enable_nrr_for_outbound_mdn: bool,
    #[serde(rename = "enableNRRForOutboundEncodedMessages")]
    pub enable_nrr_for_outbound_encoded_messages: bool,
    #[serde(rename = "enableNRRForOutboundDecodedMessages")]
    pub enable_nrr_for_outbound_decoded_messages: bool,
    #[serde(rename = "enableNRRForInboundMDN")]
    pub enable_nrr_for_inbound_mdn: bool,
    #[serde(rename = "sha2AlgorithmFormat", skip_serializing_if = "Option::is_none")]
    pub sha2_algorithm_format: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2ValidationSettings {
    #[serde(rename = "overrideMessageProperties")]
    pub override_message_properties: bool,
    #[serde(rename = "encryptMessage")]
    pub encrypt_message: bool,
    #[serde(rename = "signMessage")]
    pub sign_message: bool,
    #[serde(rename = "compressMessage")]
    pub compress_message: bool,
    #[serde(rename = "checkDuplicateMessage")]
    pub check_duplicate_message: bool,
    #[serde(rename = "interchangeDuplicatesValidityDays")]
    pub interchange_duplicates_validity_days: i32,
    #[serde(rename = "checkCertificateRevocationListOnSend")]
    pub check_certificate_revocation_list_on_send: bool,
    #[serde(rename = "checkCertificateRevocationListOnReceive")]
    pub check_certificate_revocation_list_on_receive: bool,
    #[serde(rename = "encryptionAlgorithm")]
    pub encryption_algorithm: EncryptionAlgorithm,
    #[serde(rename = "signingAlgorithm", skip_serializing_if = "Option::is_none")]
    pub signing_algorithm: Option<SigningAlgorithm>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2EnvelopeSettings {
    #[serde(rename = "messageContentType")]
    pub message_content_type: String,
    #[serde(rename = "transmitFileNameInMimeHeader")]
    pub transmit_file_name_in_mime_header: bool,
    #[serde(rename = "fileNameTemplate")]
    pub file_name_template: String,
    #[serde(rename = "suspendMessageOnFileNameGenerationError")]
    pub suspend_message_on_file_name_generation_error: bool,
    #[serde(rename = "autogenerateFileName")]
    pub autogenerate_file_name: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct As2ErrorSettings {
    #[serde(rename = "suspendDuplicateMessage")]
    pub suspend_duplicate_message: bool,
    #[serde(rename = "resendIfMDNNotReceived")]
    pub resend_if_mdn_not_received: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12AgreementContent {
    #[serde(rename = "receiveAgreement")]
    pub receive_agreement: X12OneWayAgreement,
    #[serde(rename = "sendAgreement")]
    pub send_agreement: X12OneWayAgreement,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12OneWayAgreement {
    #[serde(rename = "senderBusinessIdentity")]
    pub sender_business_identity: BusinessIdentity,
    #[serde(rename = "receiverBusinessIdentity")]
    pub receiver_business_identity: BusinessIdentity,
    #[serde(rename = "protocolSettings")]
    pub protocol_settings: X12ProtocolSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12ProtocolSettings {
    #[serde(rename = "validationSettings")]
    pub validation_settings: X12ValidationSettings,
    #[serde(rename = "framingSettings")]
    pub framing_settings: X12FramingSettings,
    #[serde(rename = "envelopeSettings")]
    pub envelope_settings: X12EnvelopeSettings,
    #[serde(rename = "acknowledgementSettings")]
    pub acknowledgement_settings: X12AcknowledgementSettings,
    #[serde(rename = "messageFilter")]
    pub message_filter: X12MessageFilter,
    #[serde(rename = "securitySettings")]
    pub security_settings: X12SecuritySettings,
    #[serde(rename = "processingSettings")]
    pub processing_settings: X12ProcessingSettings,
    #[serde(rename = "envelopeOverrides", skip_serializing_if = "Vec::is_empty")]
    pub envelope_overrides: Vec<X12EnvelopeOverride>,
    #[serde(rename = "validationOverrides", skip_serializing_if = "Vec::is_empty")]
    pub validation_overrides: Vec<X12ValidationOverride>,
    #[serde(rename = "messageFilterList", skip_serializing_if = "Vec::is_empty")]
    pub message_filter_list: Vec<X12MessageIdentifier>,
    #[serde(rename = "schemaReferences")]
    pub schema_references: Vec<X12SchemaReference>,
    #[serde(rename = "x12DelimiterOverrides", skip_serializing_if = "Vec::is_empty")]
    pub x12_delimiter_overrides: Vec<X12DelimiterOverrides>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12ValidationSettings {
    #[serde(rename = "validateCharacterSet")]
    pub validate_character_set: bool,
    #[serde(rename = "checkDuplicateInterchangeControlNumber")]
    pub check_duplicate_interchange_control_number: bool,
    #[serde(rename = "interchangeControlNumberValidityDays")]
    pub interchange_control_number_validity_days: i32,
    #[serde(rename = "checkDuplicateGroupControlNumber")]
    pub check_duplicate_group_control_number: bool,
    #[serde(rename = "checkDuplicateTransactionSetControlNumber")]
    pub check_duplicate_transaction_set_control_number: bool,
    #[serde(rename = "validateEDITypes")]
    pub validate_edi_types: bool,
    #[serde(rename = "validateXSDTypes")]
    pub validate_xsd_types: bool,
    #[serde(rename = "allowLeadingAndTrailingSpacesAndZeroes")]
    pub allow_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trimLeadingAndTrailingSpacesAndZeroes")]
    pub trim_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trailingSeparatorPolicy")]
    pub trailing_separator_policy: TrailingSeparatorPolicy,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12FramingSettings {
    #[serde(rename = "dataElementSeparator")]
    pub data_element_separator: i32,
    #[serde(rename = "componentSeparator")]
    pub component_separator: i32,
    #[serde(rename = "replaceSeparatorsInPayload")]
    pub replace_separators_in_payload: bool,
    #[serde(rename = "replaceCharacter")]
    pub replace_character: i32,
    #[serde(rename = "segmentTerminator")]
    pub segment_terminator: i32,
    #[serde(rename = "characterSet")]
    pub character_set: X12CharacterSet,
    #[serde(rename = "segmentTerminatorSuffix")]
    pub segment_terminator_suffix: SegmentTerminatorSuffix,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12EnvelopeSettings {
    #[serde(rename = "controlStandardsId")]
    pub control_standards_id: i32,
    #[serde(rename = "useControlStandardsIdAsRepetitionCharacter")]
    pub use_control_standards_id_as_repetition_character: bool,
    #[serde(rename = "senderApplicationId")]
    pub sender_application_id: String,
    #[serde(rename = "receiverApplicationId")]
    pub receiver_application_id: String,
    #[serde(rename = "controlVersionNumber")]
    pub control_version_number: String,
    #[serde(rename = "interchangeControlNumberLowerBound")]
    pub interchange_control_number_lower_bound: i32,
    #[serde(rename = "interchangeControlNumberUpperBound")]
    pub interchange_control_number_upper_bound: i32,
    #[serde(rename = "rolloverInterchangeControlNumber")]
    pub rollover_interchange_control_number: bool,
    #[serde(rename = "enableDefaultGroupHeaders")]
    pub enable_default_group_headers: bool,
    #[serde(rename = "functionalGroupId", skip_serializing_if = "Option::is_none")]
    pub functional_group_id: Option<String>,
    #[serde(rename = "groupControlNumberLowerBound")]
    pub group_control_number_lower_bound: i32,
    #[serde(rename = "groupControlNumberUpperBound")]
    pub group_control_number_upper_bound: i32,
    #[serde(rename = "rolloverGroupControlNumber")]
    pub rollover_group_control_number: bool,
    #[serde(rename = "groupHeaderAgencyCode")]
    pub group_header_agency_code: String,
    #[serde(rename = "groupHeaderVersion")]
    pub group_header_version: String,
    #[serde(rename = "transactionSetControlNumberLowerBound")]
    pub transaction_set_control_number_lower_bound: i32,
    #[serde(rename = "transactionSetControlNumberUpperBound")]
    pub transaction_set_control_number_upper_bound: i32,
    #[serde(rename = "rolloverTransactionSetControlNumber")]
    pub rollover_transaction_set_control_number: bool,
    #[serde(rename = "transactionSetControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub transaction_set_control_number_prefix: Option<String>,
    #[serde(rename = "transactionSetControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub transaction_set_control_number_suffix: Option<String>,
    #[serde(rename = "overwriteExistingTransactionSetControlNumber")]
    pub overwrite_existing_transaction_set_control_number: bool,
    #[serde(rename = "groupHeaderDateFormat")]
    pub group_header_date_format: X12DateFormat,
    #[serde(rename = "groupHeaderTimeFormat")]
    pub group_header_time_format: X12TimeFormat,
    #[serde(rename = "usageIndicator")]
    pub usage_indicator: UsageIndicator,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12AcknowledgementSettings {
    #[serde(rename = "needTechnicalAcknowledgement")]
    pub need_technical_acknowledgement: bool,
    #[serde(rename = "batchTechnicalAcknowledgements")]
    pub batch_technical_acknowledgements: bool,
    #[serde(rename = "needFunctionalAcknowledgement")]
    pub need_functional_acknowledgement: bool,
    #[serde(rename = "functionalAcknowledgementVersion", skip_serializing_if = "Option::is_none")]
    pub functional_acknowledgement_version: Option<String>,
    #[serde(rename = "batchFunctionalAcknowledgements")]
    pub batch_functional_acknowledgements: bool,
    #[serde(rename = "needImplementationAcknowledgement")]
    pub need_implementation_acknowledgement: bool,
    #[serde(rename = "implementationAcknowledgementVersion", skip_serializing_if = "Option::is_none")]
    pub implementation_acknowledgement_version: Option<String>,
    #[serde(rename = "batchImplementationAcknowledgements")]
    pub batch_implementation_acknowledgements: bool,
    #[serde(rename = "needLoopForValidMessages")]
    pub need_loop_for_valid_messages: bool,
    #[serde(rename = "sendSynchronousAcknowledgement")]
    pub send_synchronous_acknowledgement: bool,
    #[serde(rename = "acknowledgementControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub acknowledgement_control_number_prefix: Option<String>,
    #[serde(rename = "acknowledgementControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub acknowledgement_control_number_suffix: Option<String>,
    #[serde(rename = "acknowledgementControlNumberLowerBound")]
    pub acknowledgement_control_number_lower_bound: i32,
    #[serde(rename = "acknowledgementControlNumberUpperBound")]
    pub acknowledgement_control_number_upper_bound: i32,
    #[serde(rename = "rolloverAcknowledgementControlNumber")]
    pub rollover_acknowledgement_control_number: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12MessageFilter {
    #[serde(rename = "messageFilterType")]
    pub message_filter_type: MessageFilterType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12SecuritySettings {
    #[serde(rename = "authorizationQualifier")]
    pub authorization_qualifier: String,
    #[serde(rename = "authorizationValue", skip_serializing_if = "Option::is_none")]
    pub authorization_value: Option<String>,
    #[serde(rename = "securityQualifier")]
    pub security_qualifier: String,
    #[serde(rename = "passwordValue", skip_serializing_if = "Option::is_none")]
    pub password_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12ProcessingSettings {
    #[serde(rename = "maskSecurityInfo")]
    pub mask_security_info: bool,
    #[serde(rename = "convertImpliedDecimal")]
    pub convert_implied_decimal: bool,
    #[serde(rename = "preserveInterchange")]
    pub preserve_interchange: bool,
    #[serde(rename = "suspendInterchangeOnError")]
    pub suspend_interchange_on_error: bool,
    #[serde(rename = "createEmptyXmlTagsForTrailingSeparators")]
    pub create_empty_xml_tags_for_trailing_separators: bool,
    #[serde(rename = "useDotAsDecimalSeparator")]
    pub use_dot_as_decimal_separator: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12EnvelopeOverride {
    #[serde(rename = "targetNamespace")]
    pub target_namespace: String,
    #[serde(rename = "protocolVersion")]
    pub protocol_version: String,
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "responsibleAgencyCode")]
    pub responsible_agency_code: String,
    #[serde(rename = "headerVersion")]
    pub header_version: String,
    #[serde(rename = "senderApplicationId")]
    pub sender_application_id: String,
    #[serde(rename = "receiverApplicationId")]
    pub receiver_application_id: String,
    #[serde(rename = "functionalIdentifierCode", skip_serializing_if = "Option::is_none")]
    pub functional_identifier_code: Option<String>,
    #[serde(rename = "dateFormat")]
    pub date_format: X12DateFormat,
    #[serde(rename = "timeFormat")]
    pub time_format: X12TimeFormat,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12ValidationOverride {
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "validateEDITypes")]
    pub validate_edi_types: bool,
    #[serde(rename = "validateXSDTypes")]
    pub validate_xsd_types: bool,
    #[serde(rename = "allowLeadingAndTrailingSpacesAndZeroes")]
    pub allow_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "validateCharacterSet")]
    pub validate_character_set: bool,
    #[serde(rename = "trimLeadingAndTrailingSpacesAndZeroes")]
    pub trim_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trailingSeparatorPolicy")]
    pub trailing_separator_policy: TrailingSeparatorPolicy,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12MessageIdentifier {
    #[serde(rename = "messageId")]
    pub message_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12SchemaReference {
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "senderApplicationId", skip_serializing_if = "Option::is_none")]
    pub sender_application_id: Option<String>,
    #[serde(rename = "schemaVersion")]
    pub schema_version: String,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct X12DelimiterOverrides {
    #[serde(rename = "protocolVersion", skip_serializing_if = "Option::is_none")]
    pub protocol_version: Option<String>,
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(rename = "dataElementSeparator")]
    pub data_element_separator: i32,
    #[serde(rename = "componentSeparator")]
    pub component_separator: i32,
    #[serde(rename = "segmentTerminator")]
    pub segment_terminator: i32,
    #[serde(rename = "segmentTerminatorSuffix")]
    pub segment_terminator_suffix: SegmentTerminatorSuffix,
    #[serde(rename = "replaceCharacter")]
    pub replace_character: i32,
    #[serde(rename = "replaceSeparatorsInPayload")]
    pub replace_separators_in_payload: bool,
    #[serde(rename = "targetNamespace", skip_serializing_if = "Option::is_none")]
    pub target_namespace: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum X12CharacterSet {
    NotSpecified,
    Basic,
    Extended,
    #[serde(rename = "UTF8")]
    Utf8,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SegmentTerminatorSuffix {
    NotSpecified,
    None,
    #[serde(rename = "CR")]
    Cr,
    #[serde(rename = "LF")]
    Lf,
    #[serde(rename = "CRLF")]
    Crlf,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum X12DateFormat {
    NotSpecified,
    #[serde(rename = "CCYYMMDD")]
    Ccyymmdd,
    #[serde(rename = "YYMMDD")]
    Yymmdd,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum X12TimeFormat {
    NotSpecified,
    #[serde(rename = "HHMM")]
    Hhmm,
    #[serde(rename = "HHMMSS")]
    Hhmmss,
    #[serde(rename = "HHMMSSdd")]
    HhmmsSdd,
    #[serde(rename = "HHMMSSd")]
    HhmmsSd,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum UsageIndicator {
    NotSpecified,
    Test,
    Information,
    Production,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum MessageFilterType {
    NotSpecified,
    Include,
    Exclude,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum HashingAlgorithm {
    NotSpecified,
    None,
    #[serde(rename = "MD5")]
    Md5,
    #[serde(rename = "SHA1")]
    Sha1,
    #[serde(rename = "SHA2256")]
    Sha2256,
    #[serde(rename = "SHA2384")]
    Sha2384,
    #[serde(rename = "SHA2512")]
    Sha2512,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EncryptionAlgorithm {
    NotSpecified,
    None,
    #[serde(rename = "DES3")]
    Des3,
    #[serde(rename = "RC2")]
    Rc2,
    #[serde(rename = "AES128")]
    Aes128,
    #[serde(rename = "AES192")]
    Aes192,
    #[serde(rename = "AES256")]
    Aes256,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SigningAlgorithm {
    NotSpecified,
    Default,
    #[serde(rename = "SHA1")]
    Sha1,
    #[serde(rename = "SHA2256")]
    Sha2256,
    #[serde(rename = "SHA2384")]
    Sha2384,
    #[serde(rename = "SHA2512")]
    Sha2512,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TrailingSeparatorPolicy {
    NotSpecified,
    NotAllowed,
    Optional,
    Mandatory,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactAgreementContent {
    #[serde(rename = "receiveAgreement")]
    pub receive_agreement: EdifactOneWayAgreement,
    #[serde(rename = "sendAgreement")]
    pub send_agreement: EdifactOneWayAgreement,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactOneWayAgreement {
    #[serde(rename = "senderBusinessIdentity")]
    pub sender_business_identity: BusinessIdentity,
    #[serde(rename = "receiverBusinessIdentity")]
    pub receiver_business_identity: BusinessIdentity,
    #[serde(rename = "protocolSettings")]
    pub protocol_settings: EdifactProtocolSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactProtocolSettings {
    #[serde(rename = "validationSettings")]
    pub validation_settings: EdifactValidationSettings,
    #[serde(rename = "framingSettings")]
    pub framing_settings: EdifactFramingSettings,
    #[serde(rename = "envelopeSettings")]
    pub envelope_settings: EdifactEnvelopeSettings,
    #[serde(rename = "acknowledgementSettings")]
    pub acknowledgement_settings: EdifactAcknowledgementSettings,
    #[serde(rename = "messageFilter")]
    pub message_filter: EdifactMessageFilter,
    #[serde(rename = "processingSettings")]
    pub processing_settings: EdifactProcessingSettings,
    #[serde(rename = "envelopeOverrides", skip_serializing_if = "Vec::is_empty")]
    pub envelope_overrides: Vec<EdifactEnvelopeOverride>,
    #[serde(rename = "messageFilterList", skip_serializing_if = "Vec::is_empty")]
    pub message_filter_list: Vec<EdifactMessageIdentifier>,
    #[serde(rename = "schemaReferences")]
    pub schema_references: Vec<EdifactSchemaReference>,
    #[serde(rename = "validationOverrides", skip_serializing_if = "Vec::is_empty")]
    pub validation_overrides: Vec<EdifactValidationOverride>,
    #[serde(rename = "edifactDelimiterOverrides", skip_serializing_if = "Vec::is_empty")]
    pub edifact_delimiter_overrides: Vec<EdifactDelimiterOverride>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactValidationSettings {
    #[serde(rename = "validateCharacterSet")]
    pub validate_character_set: bool,
    #[serde(rename = "checkDuplicateInterchangeControlNumber")]
    pub check_duplicate_interchange_control_number: bool,
    #[serde(rename = "interchangeControlNumberValidityDays")]
    pub interchange_control_number_validity_days: i32,
    #[serde(rename = "checkDuplicateGroupControlNumber")]
    pub check_duplicate_group_control_number: bool,
    #[serde(rename = "checkDuplicateTransactionSetControlNumber")]
    pub check_duplicate_transaction_set_control_number: bool,
    #[serde(rename = "validateEDITypes")]
    pub validate_edi_types: bool,
    #[serde(rename = "validateXSDTypes")]
    pub validate_xsd_types: bool,
    #[serde(rename = "allowLeadingAndTrailingSpacesAndZeroes")]
    pub allow_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trimLeadingAndTrailingSpacesAndZeroes")]
    pub trim_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trailingSeparatorPolicy")]
    pub trailing_separator_policy: TrailingSeparatorPolicy,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactFramingSettings {
    #[serde(rename = "serviceCodeListDirectoryVersion", skip_serializing_if = "Option::is_none")]
    pub service_code_list_directory_version: Option<String>,
    #[serde(rename = "characterEncoding", skip_serializing_if = "Option::is_none")]
    pub character_encoding: Option<String>,
    #[serde(rename = "protocolVersion")]
    pub protocol_version: i32,
    #[serde(rename = "dataElementSeparator")]
    pub data_element_separator: i32,
    #[serde(rename = "componentSeparator")]
    pub component_separator: i32,
    #[serde(rename = "segmentTerminator")]
    pub segment_terminator: i32,
    #[serde(rename = "releaseIndicator")]
    pub release_indicator: i32,
    #[serde(rename = "repetitionSeparator")]
    pub repetition_separator: i32,
    #[serde(rename = "characterSet")]
    pub character_set: EdifactCharacterSet,
    #[serde(rename = "decimalPointIndicator")]
    pub decimal_point_indicator: EdifactDecimalIndicator,
    #[serde(rename = "segmentTerminatorSuffix")]
    pub segment_terminator_suffix: SegmentTerminatorSuffix,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactEnvelopeSettings {
    #[serde(rename = "groupAssociationAssignedCode", skip_serializing_if = "Option::is_none")]
    pub group_association_assigned_code: Option<String>,
    #[serde(rename = "communicationAgreementId", skip_serializing_if = "Option::is_none")]
    pub communication_agreement_id: Option<String>,
    #[serde(rename = "applyDelimiterStringAdvice")]
    pub apply_delimiter_string_advice: bool,
    #[serde(rename = "createGroupingSegments")]
    pub create_grouping_segments: bool,
    #[serde(rename = "enableDefaultGroupHeaders")]
    pub enable_default_group_headers: bool,
    #[serde(rename = "recipientReferencePasswordValue", skip_serializing_if = "Option::is_none")]
    pub recipient_reference_password_value: Option<String>,
    #[serde(rename = "recipientReferencePasswordQualifier", skip_serializing_if = "Option::is_none")]
    pub recipient_reference_password_qualifier: Option<String>,
    #[serde(rename = "applicationReferenceId", skip_serializing_if = "Option::is_none")]
    pub application_reference_id: Option<String>,
    #[serde(rename = "processingPriorityCode", skip_serializing_if = "Option::is_none")]
    pub processing_priority_code: Option<String>,
    #[serde(rename = "interchangeControlNumberLowerBound")]
    pub interchange_control_number_lower_bound: i64,
    #[serde(rename = "interchangeControlNumberUpperBound")]
    pub interchange_control_number_upper_bound: i64,
    #[serde(rename = "rolloverInterchangeControlNumber")]
    pub rollover_interchange_control_number: bool,
    #[serde(rename = "interchangeControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub interchange_control_number_prefix: Option<String>,
    #[serde(rename = "interchangeControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub interchange_control_number_suffix: Option<String>,
    #[serde(rename = "senderReverseRoutingAddress", skip_serializing_if = "Option::is_none")]
    pub sender_reverse_routing_address: Option<String>,
    #[serde(rename = "receiverReverseRoutingAddress", skip_serializing_if = "Option::is_none")]
    pub receiver_reverse_routing_address: Option<String>,
    #[serde(rename = "functionalGroupId", skip_serializing_if = "Option::is_none")]
    pub functional_group_id: Option<String>,
    #[serde(rename = "groupControllingAgencyCode", skip_serializing_if = "Option::is_none")]
    pub group_controlling_agency_code: Option<String>,
    #[serde(rename = "groupMessageVersion", skip_serializing_if = "Option::is_none")]
    pub group_message_version: Option<String>,
    #[serde(rename = "groupMessageRelease", skip_serializing_if = "Option::is_none")]
    pub group_message_release: Option<String>,
    #[serde(rename = "groupControlNumberLowerBound")]
    pub group_control_number_lower_bound: i64,
    #[serde(rename = "groupControlNumberUpperBound")]
    pub group_control_number_upper_bound: i64,
    #[serde(rename = "rolloverGroupControlNumber")]
    pub rollover_group_control_number: bool,
    #[serde(rename = "groupControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub group_control_number_prefix: Option<String>,
    #[serde(rename = "groupControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub group_control_number_suffix: Option<String>,
    #[serde(rename = "groupApplicationReceiverQualifier", skip_serializing_if = "Option::is_none")]
    pub group_application_receiver_qualifier: Option<String>,
    #[serde(rename = "groupApplicationReceiverId", skip_serializing_if = "Option::is_none")]
    pub group_application_receiver_id: Option<String>,
    #[serde(rename = "groupApplicationSenderQualifier", skip_serializing_if = "Option::is_none")]
    pub group_application_sender_qualifier: Option<String>,
    #[serde(rename = "groupApplicationSenderId", skip_serializing_if = "Option::is_none")]
    pub group_application_sender_id: Option<String>,
    #[serde(rename = "groupApplicationPassword", skip_serializing_if = "Option::is_none")]
    pub group_application_password: Option<String>,
    #[serde(rename = "overwriteExistingTransactionSetControlNumber")]
    pub overwrite_existing_transaction_set_control_number: bool,
    #[serde(rename = "transactionSetControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub transaction_set_control_number_prefix: Option<String>,
    #[serde(rename = "transactionSetControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub transaction_set_control_number_suffix: Option<String>,
    #[serde(rename = "transactionSetControlNumberLowerBound")]
    pub transaction_set_control_number_lower_bound: i64,
    #[serde(rename = "transactionSetControlNumberUpperBound")]
    pub transaction_set_control_number_upper_bound: i64,
    #[serde(rename = "rolloverTransactionSetControlNumber")]
    pub rollover_transaction_set_control_number: bool,
    #[serde(rename = "isTestInterchange")]
    pub is_test_interchange: bool,
    #[serde(rename = "senderInternalIdentification", skip_serializing_if = "Option::is_none")]
    pub sender_internal_identification: Option<String>,
    #[serde(rename = "senderInternalSubIdentification", skip_serializing_if = "Option::is_none")]
    pub sender_internal_sub_identification: Option<String>,
    #[serde(rename = "receiverInternalIdentification", skip_serializing_if = "Option::is_none")]
    pub receiver_internal_identification: Option<String>,
    #[serde(rename = "receiverInternalSubIdentification", skip_serializing_if = "Option::is_none")]
    pub receiver_internal_sub_identification: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactAcknowledgementSettings {
    #[serde(rename = "needTechnicalAcknowledgement")]
    pub need_technical_acknowledgement: bool,
    #[serde(rename = "batchTechnicalAcknowledgements")]
    pub batch_technical_acknowledgements: bool,
    #[serde(rename = "needFunctionalAcknowledgement")]
    pub need_functional_acknowledgement: bool,
    #[serde(rename = "batchFunctionalAcknowledgements")]
    pub batch_functional_acknowledgements: bool,
    #[serde(rename = "needLoopForValidMessages")]
    pub need_loop_for_valid_messages: bool,
    #[serde(rename = "sendSynchronousAcknowledgement")]
    pub send_synchronous_acknowledgement: bool,
    #[serde(rename = "acknowledgementControlNumberPrefix", skip_serializing_if = "Option::is_none")]
    pub acknowledgement_control_number_prefix: Option<String>,
    #[serde(rename = "acknowledgementControlNumberSuffix", skip_serializing_if = "Option::is_none")]
    pub acknowledgement_control_number_suffix: Option<String>,
    #[serde(rename = "acknowledgementControlNumberLowerBound")]
    pub acknowledgement_control_number_lower_bound: i32,
    #[serde(rename = "acknowledgementControlNumberUpperBound")]
    pub acknowledgement_control_number_upper_bound: i32,
    #[serde(rename = "rolloverAcknowledgementControlNumber")]
    pub rollover_acknowledgement_control_number: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactMessageFilter {
    #[serde(rename = "messageFilterType")]
    pub message_filter_type: MessageFilterType,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactProcessingSettings {
    #[serde(rename = "maskSecurityInfo")]
    pub mask_security_info: bool,
    #[serde(rename = "preserveInterchange")]
    pub preserve_interchange: bool,
    #[serde(rename = "suspendInterchangeOnError")]
    pub suspend_interchange_on_error: bool,
    #[serde(rename = "createEmptyXmlTagsForTrailingSeparators")]
    pub create_empty_xml_tags_for_trailing_separators: bool,
    #[serde(rename = "useDotAsDecimalSeparator")]
    pub use_dot_as_decimal_separator: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactEnvelopeOverride {
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(rename = "messageVersion", skip_serializing_if = "Option::is_none")]
    pub message_version: Option<String>,
    #[serde(rename = "messageRelease", skip_serializing_if = "Option::is_none")]
    pub message_release: Option<String>,
    #[serde(rename = "messageAssociationAssignedCode", skip_serializing_if = "Option::is_none")]
    pub message_association_assigned_code: Option<String>,
    #[serde(rename = "targetNamespace", skip_serializing_if = "Option::is_none")]
    pub target_namespace: Option<String>,
    #[serde(rename = "functionalGroupId", skip_serializing_if = "Option::is_none")]
    pub functional_group_id: Option<String>,
    #[serde(rename = "senderApplicationQualifier", skip_serializing_if = "Option::is_none")]
    pub sender_application_qualifier: Option<String>,
    #[serde(rename = "senderApplicationId", skip_serializing_if = "Option::is_none")]
    pub sender_application_id: Option<String>,
    #[serde(rename = "receiverApplicationQualifier", skip_serializing_if = "Option::is_none")]
    pub receiver_application_qualifier: Option<String>,
    #[serde(rename = "receiverApplicationId", skip_serializing_if = "Option::is_none")]
    pub receiver_application_id: Option<String>,
    #[serde(rename = "controllingAgencyCode", skip_serializing_if = "Option::is_none")]
    pub controlling_agency_code: Option<String>,
    #[serde(rename = "groupHeaderMessageVersion", skip_serializing_if = "Option::is_none")]
    pub group_header_message_version: Option<String>,
    #[serde(rename = "groupHeaderMessageRelease", skip_serializing_if = "Option::is_none")]
    pub group_header_message_release: Option<String>,
    #[serde(rename = "associationAssignedCode", skip_serializing_if = "Option::is_none")]
    pub association_assigned_code: Option<String>,
    #[serde(rename = "applicationPassword", skip_serializing_if = "Option::is_none")]
    pub application_password: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactMessageIdentifier {
    #[serde(rename = "messageId")]
    pub message_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactSchemaReference {
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "messageVersion")]
    pub message_version: String,
    #[serde(rename = "messageRelease")]
    pub message_release: String,
    #[serde(rename = "senderApplicationId", skip_serializing_if = "Option::is_none")]
    pub sender_application_id: Option<String>,
    #[serde(rename = "senderApplicationQualifier", skip_serializing_if = "Option::is_none")]
    pub sender_application_qualifier: Option<String>,
    #[serde(rename = "associationAssignedCode", skip_serializing_if = "Option::is_none")]
    pub association_assigned_code: Option<String>,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactValidationOverride {
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "enforceCharacterSet")]
    pub enforce_character_set: bool,
    #[serde(rename = "validateEDITypes")]
    pub validate_edi_types: bool,
    #[serde(rename = "validateXSDTypes")]
    pub validate_xsd_types: bool,
    #[serde(rename = "allowLeadingAndTrailingSpacesAndZeroes")]
    pub allow_leading_and_trailing_spaces_and_zeroes: bool,
    #[serde(rename = "trailingSeparatorPolicy")]
    pub trailing_separator_policy: TrailingSeparatorPolicy,
    #[serde(rename = "trimLeadingAndTrailingSpacesAndZeroes")]
    pub trim_leading_and_trailing_spaces_and_zeroes: bool,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EdifactDelimiterOverride {
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(rename = "messageVersion", skip_serializing_if = "Option::is_none")]
    pub message_version: Option<String>,
    #[serde(rename = "messageRelease", skip_serializing_if = "Option::is_none")]
    pub message_release: Option<String>,
    #[serde(rename = "dataElementSeparator")]
    pub data_element_separator: i32,
    #[serde(rename = "componentSeparator")]
    pub component_separator: i32,
    #[serde(rename = "segmentTerminator")]
    pub segment_terminator: i32,
    #[serde(rename = "repetitionSeparator")]
    pub repetition_separator: i32,
    #[serde(rename = "segmentTerminatorSuffix")]
    pub segment_terminator_suffix: SegmentTerminatorSuffix,
    #[serde(rename = "decimalPointIndicator")]
    pub decimal_point_indicator: EdifactDecimalIndicator,
    #[serde(rename = "releaseIndicator")]
    pub release_indicator: i32,
    #[serde(rename = "messageAssociationAssignedCode", skip_serializing_if = "Option::is_none")]
    pub message_association_assigned_code: Option<String>,
    #[serde(rename = "targetNamespace", skip_serializing_if = "Option::is_none")]
    pub target_namespace: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EdifactCharacterSet {
    NotSpecified,
    #[serde(rename = "UNOB")]
    Unob,
    #[serde(rename = "UNOA")]
    Unoa,
    #[serde(rename = "UNOC")]
    Unoc,
    #[serde(rename = "UNOD")]
    Unod,
    #[serde(rename = "UNOE")]
    Unoe,
    #[serde(rename = "UNOF")]
    Unof,
    #[serde(rename = "UNOG")]
    Unog,
    #[serde(rename = "UNOH")]
    Unoh,
    #[serde(rename = "UNOI")]
    Unoi,
    #[serde(rename = "UNOJ")]
    Unoj,
    #[serde(rename = "UNOK")]
    Unok,
    #[serde(rename = "UNOX")]
    Unox,
    #[serde(rename = "UNOY")]
    Unoy,
    #[serde(rename = "KECA")]
    Keca,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EdifactDecimalIndicator {
    NotSpecified,
    Comma,
    Decimal,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountCertificateListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountCertificate>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountCertificate {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountCertificateProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountCertificateProperties {
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<KeyVaultKeyReference>,
    #[serde(rename = "publicCertificate", skip_serializing_if = "Option::is_none")]
    pub public_certificate: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyVaultKeyReference {
    #[serde(rename = "keyVault")]
    pub key_vault: key_vault_key_reference::KeyVault,
    #[serde(rename = "keyName")]
    pub key_name: String,
    #[serde(rename = "keyVersion", skip_serializing_if = "Option::is_none")]
    pub key_version: Option<String>,
}
pub mod key_vault_key_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct KeyVault {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub id: Option<String>,
        #[serde(skip_serializing)]
        pub name: Option<String>,
        #[serde(rename = "type", skip_serializing)]
        pub type_: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSessionFilter {
    #[serde(rename = "changedTime")]
    pub changed_time: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSessionListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IntegrationAccountSession>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSession {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: IntegrationAccountSessionProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationAccountSessionProperties {
    #[serde(rename = "createdTime", skip_serializing)]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing)]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<Object>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<Object>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListKeyVaultKeysDefinition {
    #[serde(rename = "keyVault")]
    pub key_vault: KeyVaultReference,
    #[serde(rename = "skipToken", skip_serializing_if = "Option::is_none")]
    pub skip_token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyVaultReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyVaultKeyCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<KeyVaultKey>,
    #[serde(rename = "skipToken", skip_serializing_if = "Option::is_none")]
    pub skip_token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyVaultKey {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kid: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attributes: Option<key_vault_key::Attributes>,
}
pub mod key_vault_key {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Attributes {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub enabled: Option<bool>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub created: Option<i64>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub updated: Option<i64>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackingEventsDefinition {
    #[serde(rename = "sourceType")]
    pub source_type: String,
    #[serde(rename = "trackEventsOptions", skip_serializing_if = "Option::is_none")]
    pub track_events_options: Option<TrackEventsOperationOptions>,
    pub events: Vec<TrackingEvent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TrackEventsOperationOptions {
    None,
    DisableSourceInfoEnrich,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackingEvent {
    #[serde(rename = "eventLevel")]
    pub event_level: EventLevel,
    #[serde(rename = "eventTime")]
    pub event_time: String,
    #[serde(rename = "recordType")]
    pub record_type: TrackingRecordType,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub record: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<TrackingEventErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EventLevel {
    LogAlways,
    Critical,
    Error,
    Warning,
    Informational,
    Verbose,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TrackingRecordType {
    NotSpecified,
    Custom,
    #[serde(rename = "AS2Message")]
    As2Message,
    #[serde(rename = "AS2MDN")]
    As2mdn,
    X12Interchange,
    X12FunctionalGroup,
    X12TransactionSet,
    X12InterchangeAcknowledgment,
    X12FunctionalGroupAcknowledgment,
    X12TransactionSetAcknowledgment,
    EdifactInterchange,
    EdifactFunctionalGroup,
    EdifactTransactionSet,
    EdifactInterchangeAcknowledgment,
    EdifactFunctionalGroupAcknowledgment,
    EdifactTransactionSetAcknowledgment,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackingEventErrorInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SetTriggerStateActionDefinition {
    pub source: WorkflowTriggerReference,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExpressionTraces {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<ExpressionRoot>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExpressionRoot {
    #[serde(flatten)]
    pub expression: Expression,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Expression {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub subexpressions: Vec<Expression>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<AzureResourceErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureResourceErrorInfo {
    #[serde(flatten)]
    pub error_info: ErrorInfo,
    pub message: String,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<AzureResourceErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorInfo {
    pub code: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionRepetitionDefinitionCollection {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkflowRunActionRepetitionDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionRepetitionDefinition {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: WorkflowRunActionRepetitionProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowRunActionRepetitionProperties {
    #[serde(flatten)]
    pub operation_result: OperationResult,
    #[serde(rename = "repetitionIndexes", skip_serializing_if = "Vec::is_empty")]
    pub repetition_indexes: Vec<RepetitionIndex>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepetitionIndex {
    #[serde(rename = "scopeName", skip_serializing_if = "Option::is_none")]
    pub scope_name: Option<String>,
    #[serde(rename = "itemIndex")]
    pub item_index: i32,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResult {
    #[serde(flatten)]
    pub operation_result_properties: OperationResultProperties,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Object>,
    #[serde(rename = "inputsLink", skip_serializing_if = "Option::is_none")]
    pub inputs_link: Option<ContentLink>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Object>,
    #[serde(rename = "outputsLink", skip_serializing_if = "Option::is_none")]
    pub outputs_link: Option<ContentLink>,
    #[serde(rename = "trackedProperties", skip_serializing_if = "Option::is_none")]
    pub tracked_properties: Option<Object>,
    #[serde(rename = "retryHistory", skip_serializing_if = "Vec::is_empty")]
    pub retry_history: Vec<RetryHistory>,
    #[serde(rename = "iterationCount", skip_serializing_if = "Option::is_none")]
    pub iteration_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResultProperties {
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub correlation: Option<RunActionCorrelation>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<WorkflowStatus>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunActionCorrelation {
    #[serde(flatten)]
    pub run_correlation: RunCorrelation,
    #[serde(rename = "actionTrackingId", skip_serializing_if = "Option::is_none")]
    pub action_tracking_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunCorrelation {
    #[serde(rename = "clientTrackingId", skip_serializing_if = "Option::is_none")]
    pub client_tracking_id: Option<String>,
    #[serde(rename = "clientKeywords", skip_serializing_if = "Vec::is_empty")]
    pub client_keywords: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonSchema {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssemblyCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AssemblyDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssemblyDefinition {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: AssemblyProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssemblyProperties {
    #[serde(flatten)]
    pub artifact_content_properties_definition: ArtifactContentPropertiesDefinition,
    #[serde(rename = "assemblyName")]
    pub assembly_name: String,
    #[serde(rename = "assemblyVersion", skip_serializing_if = "Option::is_none")]
    pub assembly_version: Option<String>,
    #[serde(rename = "assemblyCulture", skip_serializing_if = "Option::is_none")]
    pub assembly_culture: Option<String>,
    #[serde(rename = "assemblyPublicKeyToken", skip_serializing_if = "Option::is_none")]
    pub assembly_public_key_token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactContentPropertiesDefinition {
    #[serde(flatten)]
    pub artifact_properties: ArtifactProperties,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<serde_json::Value>,
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "contentLink", skip_serializing_if = "Option::is_none")]
    pub content_link: Option<ContentLink>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactProperties {
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing_if = "Option::is_none")]
    pub changed_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchConfigurationCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BatchConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchConfiguration {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: BatchConfigurationProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchConfigurationProperties {
    #[serde(flatten)]
    pub artifact_properties: ArtifactProperties,
    #[serde(rename = "batchGroupName")]
    pub batch_group_name: String,
    #[serde(rename = "releaseCriteria")]
    pub release_criteria: BatchReleaseCriteria,
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "changedTime", skip_serializing_if = "Option::is_none")]
    pub changed_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchReleaseCriteria {
    #[serde(rename = "messageCount", skip_serializing_if = "Option::is_none")]
    pub message_count: Option<i32>,
    #[serde(rename = "batchSize", skip_serializing_if = "Option::is_none")]
    pub batch_size: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<WorkflowTriggerRecurrence>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestHistoryListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RequestHistory>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestHistory {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RequestHistoryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestHistoryProperties {
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Request>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Response>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Request {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub headers: Option<Object>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Response {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub headers: Option<Object>,
    #[serde(rename = "statusCode", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<i32>,
    #[serde(rename = "bodyLink", skip_serializing_if = "Option::is_none")]
    pub body_link: Option<ContentLink>,
}
