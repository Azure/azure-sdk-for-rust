#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudShellConsole {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ConsoleProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsoleProperties {
    #[serde(rename = "osType")]
    pub os_type: console_properties::OsType,
    #[serde(rename = "provisioningState")]
    pub provisioning_state: console_properties::ProvisioningState,
    pub uri: String,
}
mod console_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        Linux,
        Windows,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        NotSpecified,
        Accepted,
        Pending,
        Updating,
        Creating,
        Repairing,
        Failed,
        Canceled,
        Succeeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsoleCreateProperties {
    #[serde(rename = "osType")]
    pub os_type: console_create_properties::OsType,
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<console_create_properties::ProvisioningState>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}
mod console_create_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        Linux,
        Windows,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        NotSpecified,
        Accepted,
        Pending,
        Updating,
        Creating,
        Repairing,
        Failed,
        Canceled,
        Succeeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsoleDefinition {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ConsoleCreateProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSettingsResponse {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: UserProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudShellUserSettings {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: UserProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudShellPatchUserSettings {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UserProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserProperties {
    #[serde(rename = "preferredOsType")]
    pub preferred_os_type: user_properties::PreferredOsType,
    #[serde(rename = "preferredLocation")]
    pub preferred_location: String,
    #[serde(rename = "storageProfile")]
    pub storage_profile: StorageProfile,
    #[serde(rename = "terminalSettings")]
    pub terminal_settings: TerminalSettings,
    #[serde(rename = "preferredShellType")]
    pub preferred_shell_type: user_properties::PreferredShellType,
}
mod user_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PreferredOsType {
        Windows,
        Linux,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PreferredShellType {
        #[serde(rename = "bash")]
        Bash,
        #[serde(rename = "pwsh")]
        Pwsh,
        #[serde(rename = "powershell")]
        Powershell,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageProfile {
    #[serde(rename = "storageAccountResourceId", skip_serializing_if = "Option::is_none")]
    pub storage_account_resource_id: Option<String>,
    #[serde(rename = "fileShareName", skip_serializing_if = "Option::is_none")]
    pub file_share_name: Option<String>,
    #[serde(rename = "diskSizeInGB", skip_serializing_if = "Option::is_none")]
    pub disk_size_in_gb: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TerminalSettings {
    #[serde(rename = "fontSize", skip_serializing_if = "Option::is_none")]
    pub font_size: Option<terminal_settings::FontSize>,
    #[serde(rename = "fontStyle", skip_serializing_if = "Option::is_none")]
    pub font_style: Option<terminal_settings::FontStyle>,
}
mod terminal_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FontSize {
        NotSpecified,
        Small,
        Medium,
        Large,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FontStyle {
        NotSpecified,
        Monospace,
        Courier,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    pub error: ErrorDetail,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetail {
    pub code: String,
    pub message: String,
}
