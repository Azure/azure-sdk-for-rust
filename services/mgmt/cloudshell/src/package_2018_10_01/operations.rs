#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub async fn get_user_settings_with_location(
    configuration: &Configuration,
    user_settings_name: &str,
    location: &str,
) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/userSettings/{}",
        &configuration.base_path, location, user_settings_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn put_user_settings_with_location(
    configuration: &Configuration,
    user_settings_name: &str,
    location: &str,
    parameters: &CloudShellUserSettings,
) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/userSettings/{}",
        &configuration.base_path, location, user_settings_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn patch_user_settings_with_location(
    configuration: &Configuration,
    user_settings_name: &str,
    location: &str,
    parameters: &CloudShellPatchUserSettings,
) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/userSettings/{}",
        &configuration.base_path, location, user_settings_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn delete_user_settings_with_location(
    configuration: &Configuration,
    user_settings_name: &str,
    location: &str,
) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/userSettings/{}",
        &configuration.base_path, location, user_settings_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn get_console_with_location(configuration: &Configuration, console_name: &str, location: &str) -> Result<CloudShellConsole> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/consoles/{}",
        &configuration.base_path, location, console_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn put_console_with_location(configuration: &Configuration, console_name: &str, location: &str) -> Result<CloudShellConsole> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/consoles/{}",
        &configuration.base_path, location, console_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn delete_console_with_location(configuration: &Configuration, console_name: &str, location: &str) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/consoles/{}",
        &configuration.base_path, location, console_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn keep_alive_with_location(configuration: &Configuration, console_name: &str, location: &str) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/locations/{}/consoles/{}/keepAlive",
        &configuration.base_path, location, console_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn get_user_settings(configuration: &Configuration, user_settings_name: &str) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/userSettings/{}",
        &configuration.base_path, user_settings_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn put_user_settings(
    configuration: &Configuration,
    user_settings_name: &str,
    parameters: &CloudShellUserSettings,
) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/userSettings/{}",
        &configuration.base_path, user_settings_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn patch_user_settings(
    configuration: &Configuration,
    user_settings_name: &str,
    parameters: &CloudShellPatchUserSettings,
) -> Result<UserSettingsResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/userSettings/{}",
        &configuration.base_path, user_settings_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn delete_user_settings(configuration: &Configuration, user_settings_name: &str) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/userSettings/{}",
        &configuration.base_path, user_settings_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn get_console(configuration: &Configuration, console_name: &str) -> Result<CloudShellConsole> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.Portal/consoles/{}", &configuration.base_path, console_name);
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn put_console(configuration: &Configuration, console_name: &str, parameters: &ConsoleDefinition) -> Result<CloudShellConsole> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.Portal/consoles/{}", &configuration.base_path, console_name);
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn delete_console(configuration: &Configuration, console_name: &str) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.Portal/consoles/{}", &configuration.base_path, console_name);
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn keep_alive(configuration: &Configuration, console_name: &str) -> Result<ErrorResponse> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/providers/Microsoft.Portal/consoles/{}/keepAlive",
        &configuration.base_path, console_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
