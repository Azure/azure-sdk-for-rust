#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
use reqwest::StatusCode;
use snafu::{ResultExt, Snafu};
pub async fn list_operations(configuration: &crate::Configuration) -> std::result::Result<SerialConsoleOperations, list_operations::Error> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.SerialConsole/operations", &configuration.base_path,);
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build().context(list_operations::BuildRequestError)?;
    let rsp = client.execute(req).await.context(list_operations::ExecuteRequestError)?;
    match rsp.status() {
        StatusCode::OK => {
            let body: bytes::Bytes = rsp.bytes().await.context(list_operations::ResponseBytesError)?;
            let rsp_value: SerialConsoleOperations = serde_json::from_slice(&body).context(list_operations::DeserializeError { body })?;
            Ok(rsp_value)
        }
        status_code => {
            let body: bytes::Bytes = rsp.bytes().await.context(list_operations::ResponseBytesError)?;
            list_operations::UnexpectedResponse { status_code, body: body }.fail()
        }
    }
}
pub mod list_operations {
    use crate::{models, models::*};
    use reqwest::StatusCode;
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        UnexpectedResponse { status_code: StatusCode, body: bytes::Bytes },
        BuildRequestError { source: reqwest::Error },
        ExecuteRequestError { source: reqwest::Error },
        ResponseBytesError { source: reqwest::Error },
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
    }
}
pub async fn get_console_status(
    configuration: &crate::Configuration,
    subscription_id: &str,
    default: &str,
) -> std::result::Result<SerialConsoleStatus, get_console_status::Error> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.SerialConsole/consoleServices/{}",
        &configuration.base_path, subscription_id, default
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build().context(get_console_status::BuildRequestError)?;
    let rsp = client.execute(req).await.context(get_console_status::ExecuteRequestError)?;
    match rsp.status() {
        StatusCode::OK => {
            let body: bytes::Bytes = rsp.bytes().await.context(get_console_status::ResponseBytesError)?;
            let rsp_value: SerialConsoleStatus = serde_json::from_slice(&body).context(get_console_status::DeserializeError { body })?;
            Ok(rsp_value)
        }
        StatusCode::NOT_FOUND => {
            let body: bytes::Bytes = rsp.bytes().await.context(get_console_status::ResponseBytesError)?;
            let rsp_value: GetSerialConsoleSubscriptionNotFound =
                serde_json::from_slice(&body).context(get_console_status::DeserializeError { body })?;
            get_console_status::NotFound404 { value: rsp_value }.fail()
        }
        status_code => {
            let body: bytes::Bytes = rsp.bytes().await.context(get_console_status::ResponseBytesError)?;
            get_console_status::UnexpectedResponse { status_code, body: body }.fail()
        }
    }
}
pub mod get_console_status {
    use crate::{models, models::*};
    use reqwest::StatusCode;
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        NotFound404 {
            value: models::GetSerialConsoleSubscriptionNotFound,
        },
        UnexpectedResponse {
            status_code: StatusCode,
            body: bytes::Bytes,
        },
        BuildRequestError {
            source: reqwest::Error,
        },
        ExecuteRequestError {
            source: reqwest::Error,
        },
        ResponseBytesError {
            source: reqwest::Error,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
    }
}
pub async fn disable_console(
    configuration: &crate::Configuration,
    subscription_id: &str,
    default: &str,
) -> std::result::Result<DisableSerialConsoleResult, disable_console::Error> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.SerialConsole/consoleServices/{}/disableConsole",
        &configuration.base_path, subscription_id, default
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build().context(disable_console::BuildRequestError)?;
    let rsp = client.execute(req).await.context(disable_console::ExecuteRequestError)?;
    match rsp.status() {
        StatusCode::OK => {
            let body: bytes::Bytes = rsp.bytes().await.context(disable_console::ResponseBytesError)?;
            let rsp_value: DisableSerialConsoleResult =
                serde_json::from_slice(&body).context(disable_console::DeserializeError { body })?;
            Ok(rsp_value)
        }
        StatusCode::NOT_FOUND => {
            let body: bytes::Bytes = rsp.bytes().await.context(disable_console::ResponseBytesError)?;
            let rsp_value: GetSerialConsoleSubscriptionNotFound =
                serde_json::from_slice(&body).context(disable_console::DeserializeError { body })?;
            disable_console::NotFound404 { value: rsp_value }.fail()
        }
        status_code => {
            let body: bytes::Bytes = rsp.bytes().await.context(disable_console::ResponseBytesError)?;
            disable_console::UnexpectedResponse { status_code, body: body }.fail()
        }
    }
}
pub mod disable_console {
    use crate::{models, models::*};
    use reqwest::StatusCode;
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        NotFound404 {
            value: models::GetSerialConsoleSubscriptionNotFound,
        },
        UnexpectedResponse {
            status_code: StatusCode,
            body: bytes::Bytes,
        },
        BuildRequestError {
            source: reqwest::Error,
        },
        ExecuteRequestError {
            source: reqwest::Error,
        },
        ResponseBytesError {
            source: reqwest::Error,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
    }
}
pub async fn enable_console(
    configuration: &crate::Configuration,
    subscription_id: &str,
    default: &str,
) -> std::result::Result<EnableSerialConsoleResult, enable_console::Error> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.SerialConsole/consoleServices/{}/enableConsole",
        &configuration.base_path, subscription_id, default
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build().context(enable_console::BuildRequestError)?;
    let rsp = client.execute(req).await.context(enable_console::ExecuteRequestError)?;
    match rsp.status() {
        StatusCode::OK => {
            let body: bytes::Bytes = rsp.bytes().await.context(enable_console::ResponseBytesError)?;
            let rsp_value: EnableSerialConsoleResult = serde_json::from_slice(&body).context(enable_console::DeserializeError { body })?;
            Ok(rsp_value)
        }
        StatusCode::NOT_FOUND => {
            let body: bytes::Bytes = rsp.bytes().await.context(enable_console::ResponseBytesError)?;
            let rsp_value: GetSerialConsoleSubscriptionNotFound =
                serde_json::from_slice(&body).context(enable_console::DeserializeError { body })?;
            enable_console::NotFound404 { value: rsp_value }.fail()
        }
        status_code => {
            let body: bytes::Bytes = rsp.bytes().await.context(enable_console::ResponseBytesError)?;
            enable_console::UnexpectedResponse { status_code, body: body }.fail()
        }
    }
}
pub mod enable_console {
    use crate::{models, models::*};
    use reqwest::StatusCode;
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        NotFound404 {
            value: models::GetSerialConsoleSubscriptionNotFound,
        },
        UnexpectedResponse {
            status_code: StatusCode,
            body: bytes::Bytes,
        },
        BuildRequestError {
            source: reqwest::Error,
        },
        ExecuteRequestError {
            source: reqwest::Error,
        },
        ResponseBytesError {
            source: reqwest::Error,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
    }
}
