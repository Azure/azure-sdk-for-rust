#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod account {
    use crate::{models::*, *};
    pub async fn get_storage_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        subscription_id: &str,
    ) -> Result<StorageAccountInfo> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_storage_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        parameters: &AddStorageAccountParameters,
        subscription_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update_storage_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        parameters: &AddStorageAccountParameters,
        subscription_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_storage_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        subscription_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_storage_container(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        container_name: &str,
        subscription_id: &str,
    ) -> Result<BlobContainer> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}/Containers/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name, container_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_storage_containers(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        subscription_id: &str,
    ) -> Result<ListBlobContainersResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}/Containers",
            &configuration.base_path, subscription_id, resource_group_name, account_name, storage_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_sas_tokens(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        storage_account_name: &str,
        container_name: &str,
        subscription_id: &str,
    ) -> Result<ListSasTokensResult> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/{}/Containers/{}/listSasTokens" , & configuration . base_path , subscription_id , resource_group_name , account_name , storage_account_name , container_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_data_lake_store_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        data_lake_store_account_name: &str,
        subscription_id: &str,
    ) -> Result<DataLakeStoreAccountInfo> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/DataLakeStoreAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, data_lake_store_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_data_lake_store_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        data_lake_store_account_name: &str,
        parameters: &AddDataLakeStoreParameters,
        subscription_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/DataLakeStoreAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, data_lake_store_account_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_data_lake_store_account(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        data_lake_store_account_name: &str,
        subscription_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/DataLakeStoreAccounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, data_lake_store_account_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_storage_accounts(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        skip: Option<i64>,
        expand: Option<&str>,
        select: Option<&str>,
        orderby: Option<&str>,
        count: Option<bool>,
        search: Option<&str>,
        format: Option<&str>,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccountListStorageAccountsResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/StorageAccounts/",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(skip) = skip {
            req_builder = req_builder.query(&[("$skip", skip)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(select) = select {
            req_builder = req_builder.query(&[("$select", select)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        if let Some(count) = count {
            req_builder = req_builder.query(&[("$count", count)]);
        }
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(format) = format {
            req_builder = req_builder.query(&[("$format", format)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_data_lake_store_accounts(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        skip: Option<i64>,
        expand: Option<&str>,
        select: Option<&str>,
        orderby: Option<&str>,
        count: Option<bool>,
        search: Option<&str>,
        format: Option<&str>,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccountListDataLakeStoreResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}/DataLakeStoreAccounts/",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(skip) = skip {
            req_builder = req_builder.query(&[("$skip", skip)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(select) = select {
            req_builder = req_builder.query(&[("$select", select)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        if let Some(count) = count {
            req_builder = req_builder.query(&[("$count", count)]);
        }
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(format) = format {
            req_builder = req_builder.query(&[("$format", format)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        resource_group_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        skip: Option<i64>,
        expand: Option<&str>,
        select: Option<&str>,
        orderby: Option<&str>,
        count: Option<bool>,
        search: Option<&str>,
        format: Option<&str>,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(skip) = skip {
            req_builder = req_builder.query(&[("$skip", skip)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(select) = select {
            req_builder = req_builder.query(&[("$select", select)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        if let Some(count) = count {
            req_builder = req_builder.query(&[("$count", count)]);
        }
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(format) = format {
            req_builder = req_builder.query(&[("$format", format)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        filter: Option<&str>,
        top: Option<i64>,
        skip: Option<i64>,
        expand: Option<&str>,
        select: Option<&str>,
        orderby: Option<&str>,
        count: Option<bool>,
        search: Option<&str>,
        format: Option<&str>,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DataLakeAnalytics/accounts",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(skip) = skip {
            req_builder = req_builder.query(&[("$skip", skip)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(select) = select {
            req_builder = req_builder.query(&[("$select", select)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        if let Some(count) = count {
            req_builder = req_builder.query(&[("$count", count)]);
        }
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(format) = format {
            req_builder = req_builder.query(&[("$format", format)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        resource_group_name: &str,
        account_name: &str,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(configuration: &Configuration, resource_group_name: &str, account_name: &str, subscription_id: &str) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        resource_group_name: &str,
        name: &str,
        parameters: &DataLakeAnalyticsAccount,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        resource_group_name: &str,
        name: &str,
        parameters: &DataLakeAnalyticsAccount,
        subscription_id: &str,
    ) -> Result<DataLakeAnalyticsAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataLakeAnalytics/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
