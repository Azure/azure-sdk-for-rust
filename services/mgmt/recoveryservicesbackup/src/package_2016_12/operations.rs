#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod backup_engines {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        filter: Option<&str>,
        skip_token: Option<&str>,
    ) -> Result<BackupEngineBaseResourceList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupEngines",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        backup_engine_name: &str,
        filter: Option<&str>,
        skip_token: Option<&str>,
    ) -> Result<BackupEngineBaseResource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupEngines/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, backup_engine_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protection_container_refresh_operation_results {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        operation_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/operationResults/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protectable_containers {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        filter: Option<&str>,
    ) -> Result<ProtectableContainerResourceList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectableContainers",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protection_containers {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
    ) -> Result<ProtectionContainerResource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name, container_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn register(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        parameters: &ProtectionContainerResource,
    ) -> Result<ProtectionContainerResource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name, container_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn unregister(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name, container_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn inquire(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        filter: Option<&str>,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/inquire" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn refresh(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        filter: Option<&str>,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/refreshContainers",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, fabric_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_workload_items {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        filter: Option<&str>,
        skip_token: Option<&str>,
    ) -> Result<WorkloadItemResourceList> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/items" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protection_container_operation_results {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        operation_id: &str,
    ) -> Result<ProtectionContainerResource> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/operationResults/{}" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name , operation_id) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backups {
    use crate::{models::*, *};
    pub async fn trigger(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        protected_item_name: &str,
        parameters: &BackupRequestResource,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/protectedItems/{}/backup" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name , protected_item_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protected_item_operation_statuses {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        protected_item_name: &str,
        operation_id: &str,
    ) -> Result<OperationStatus> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/protectedItems/{}/operationsStatus/{}" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name , protected_item_name , operation_id) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod item_level_recovery_connections {
    use crate::{models::*, *};
    pub async fn provision(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        protected_item_name: &str,
        recovery_point_id: &str,
        parameters: &IlrRequestResource,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/protectedItems/{}/recoveryPoints/{}/provisionInstantItemRecovery" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name , protected_item_name , recovery_point_id) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn revoke(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        fabric_name: &str,
        container_name: &str,
        protected_item_name: &str,
        recovery_point_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupFabrics/{}/protectionContainers/{}/protectedItems/{}/recoveryPoints/{}/revokeInstantItemRecovery" , & configuration . base_path , subscription_id , resource_group_name , vault_name , fabric_name , container_name , protected_item_name , recovery_point_id) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_operation_results {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        operation_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupOperationResults/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_operation_statuses {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        operation_id: &str,
    ) -> Result<OperationStatus> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupOperations/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protection_policies {
    use crate::{models::*, *};
    pub async fn delete(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        policy_name: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupPolicies/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, policy_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod protection_policy_operation_statuses {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        policy_name: &str,
        operation_id: &str,
    ) -> Result<OperationStatus> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupPolicies/{}/operations/{}",
            &configuration.base_path, subscription_id, resource_group_name, vault_name, policy_name, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_protectable_items {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        filter: Option<&str>,
        skip_token: Option<&str>,
    ) -> Result<WorkloadProtectableItemResourceList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupProtectableItems",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_protection_containers {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        filter: Option<&str>,
    ) -> Result<ProtectionContainerResourceList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupProtectionContainers",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod security_pi_ns {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
    ) -> Result<TokenInformation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupSecurityPIN",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod backup_resource_storage_configs {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
    ) -> Result<BackupResourceConfigResource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupstorageconfig/vaultstorageconfig",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        parameters: &BackupResourceConfigResource,
    ) -> Result<BackupResourceConfigResource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupstorageconfig/vaultstorageconfig",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch(
        configuration: &Configuration,
        vault_name: &str,
        resource_group_name: &str,
        subscription_id: &str,
        parameters: &BackupResourceConfigResource,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/Subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/backupstorageconfig/vaultstorageconfig",
            &configuration.base_path, subscription_id, resource_group_name, vault_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
