#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsageName {
    #[serde(skip_serializing)]
    pub value: Option<String>,
    #[serde(rename = "localizedValue", skip_serializing)]
    pub localized_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Usage {
    #[serde(skip_serializing)]
    pub unit: Option<usage::Unit>,
    #[serde(rename = "currentValue", skip_serializing)]
    pub current_value: Option<i32>,
    #[serde(skip_serializing)]
    pub limit: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<UsageName>,
}
mod usage {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Unit {
        Count,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListUsagesResult {
    #[serde(skip_serializing)]
    pub value: Vec<Usage>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerBaseProperties {
    #[serde(rename = "vmSize")]
    pub vm_size: String,
    #[serde(rename = "sshConfiguration")]
    pub ssh_configuration: SshConfiguration,
    #[serde(rename = "dataDisks")]
    pub data_disks: DataDisks,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<ResourceId>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<FileServer>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDisks {
    #[serde(rename = "diskSizeInGB")]
    pub disk_size_in_gb: i32,
    #[serde(rename = "cachingType", skip_serializing_if = "Option::is_none")]
    pub caching_type: Option<data_disks::CachingType>,
    #[serde(rename = "diskCount")]
    pub disk_count: i32,
    #[serde(rename = "storageAccountType")]
    pub storage_account_type: data_disks::StorageAccountType,
}
mod data_disks {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CachingType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "readonly")]
        Readonly,
        #[serde(rename = "readwrite")]
        Readwrite,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StorageAccountType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyVaultSecretReference {
    #[serde(rename = "sourceVault")]
    pub source_vault: ResourceId,
    #[serde(rename = "secretUrl")]
    pub secret_url: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MountSettings {
    #[serde(rename = "mountPoint", skip_serializing_if = "Option::is_none")]
    pub mount_point: Option<String>,
    #[serde(rename = "fileServerPublicIP", skip_serializing_if = "Option::is_none")]
    pub file_server_public_ip: Option<String>,
    #[serde(rename = "fileServerInternalIP", skip_serializing_if = "Option::is_none")]
    pub file_server_internal_ip: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SshConfiguration {
    #[serde(rename = "publicIPsToAllow", skip_serializing_if = "Vec::is_empty")]
    pub public_i_ps_to_allow: Vec<String>,
    #[serde(rename = "userAccountSettings")]
    pub user_account_settings: UserAccountSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerCreateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FileServerBaseProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerProperties {
    #[serde(rename = "vmSize", skip_serializing_if = "Option::is_none")]
    pub vm_size: Option<String>,
    #[serde(rename = "sshConfiguration", skip_serializing_if = "Option::is_none")]
    pub ssh_configuration: Option<SshConfiguration>,
    #[serde(rename = "dataDisks", skip_serializing_if = "Option::is_none")]
    pub data_disks: Option<DataDisks>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<ResourceId>,
    #[serde(rename = "mountSettings", skip_serializing_if = "Option::is_none")]
    pub mount_settings: Option<MountSettings>,
    #[serde(rename = "provisioningStateTransitionTime", skip_serializing)]
    pub provisioning_state_transition_time: Option<String>,
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<file_server_properties::ProvisioningState>,
}
mod file_server_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "updating")]
        Updating,
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServer {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FileServerProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterBaseProperties {
    #[serde(rename = "vmSize")]
    pub vm_size: String,
    #[serde(rename = "vmPriority", skip_serializing_if = "Option::is_none")]
    pub vm_priority: Option<cluster_base_properties::VmPriority>,
    #[serde(rename = "scaleSettings", skip_serializing_if = "Option::is_none")]
    pub scale_settings: Option<ScaleSettings>,
    #[serde(rename = "virtualMachineConfiguration", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_configuration: Option<VirtualMachineConfiguration>,
    #[serde(rename = "nodeSetup", skip_serializing_if = "Option::is_none")]
    pub node_setup: Option<NodeSetup>,
    #[serde(rename = "userAccountSettings")]
    pub user_account_settings: UserAccountSettings,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<ResourceId>,
}
mod cluster_base_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VmPriority {
        #[serde(rename = "dedicated")]
        Dedicated,
        #[serde(rename = "lowpriority")]
        Lowpriority,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterUpdateProperties {
    #[serde(rename = "scaleSettings", skip_serializing_if = "Option::is_none")]
    pub scale_settings: Option<ScaleSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum DeallocationOption {
    #[serde(rename = "requeue")]
    Requeue,
    #[serde(rename = "terminate")]
    Terminate,
    #[serde(rename = "waitforjobcompletion")]
    Waitforjobcompletion,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScaleSettings {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manual: Option<ManualScaleSettings>,
    #[serde(rename = "autoScale", skip_serializing_if = "Option::is_none")]
    pub auto_scale: Option<AutoScaleSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutoScaleSettings {
    #[serde(rename = "minimumNodeCount")]
    pub minimum_node_count: i32,
    #[serde(rename = "maximumNodeCount")]
    pub maximum_node_count: i32,
    #[serde(rename = "initialNodeCount", skip_serializing_if = "Option::is_none")]
    pub initial_node_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualScaleSettings {
    #[serde(rename = "targetNodeCount")]
    pub target_node_count: i32,
    #[serde(rename = "nodeDeallocationOption", skip_serializing_if = "Option::is_none")]
    pub node_deallocation_option: Option<DeallocationOption>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineConfiguration {
    #[serde(rename = "imageReference", skip_serializing_if = "Option::is_none")]
    pub image_reference: Option<ImageReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageReference {
    pub publisher: String,
    pub offer: String,
    pub sku: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "virtualMachineImageId", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_image_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeStateCounts {
    #[serde(rename = "idleNodeCount", skip_serializing)]
    pub idle_node_count: Option<i32>,
    #[serde(rename = "runningNodeCount", skip_serializing)]
    pub running_node_count: Option<i32>,
    #[serde(rename = "preparingNodeCount", skip_serializing)]
    pub preparing_node_count: Option<i32>,
    #[serde(rename = "unusableNodeCount", skip_serializing)]
    pub unusable_node_count: Option<i32>,
    #[serde(rename = "leavingNodeCount", skip_serializing)]
    pub leaving_node_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserAccountSettings {
    #[serde(rename = "adminUserName")]
    pub admin_user_name: String,
    #[serde(rename = "adminUserSshPublicKey", skip_serializing_if = "Option::is_none")]
    pub admin_user_ssh_public_key: Option<String>,
    #[serde(rename = "adminUserPassword", skip_serializing_if = "Option::is_none")]
    pub admin_user_password: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PerformanceCountersSettings {
    #[serde(rename = "appInsightsReference")]
    pub app_insights_reference: AppInsightsReference,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppInsightsReference {
    pub component: ResourceId,
    #[serde(rename = "instrumentationKey", skip_serializing_if = "Option::is_none")]
    pub instrumentation_key: Option<String>,
    #[serde(rename = "instrumentationKeySecretReference", skip_serializing_if = "Option::is_none")]
    pub instrumentation_key_secret_reference: Option<KeyVaultSecretReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeSetup {
    #[serde(rename = "setupTask", skip_serializing_if = "Option::is_none")]
    pub setup_task: Option<SetupTask>,
    #[serde(rename = "mountVolumes", skip_serializing_if = "Option::is_none")]
    pub mount_volumes: Option<MountVolumes>,
    #[serde(rename = "performanceCountersSettings", skip_serializing_if = "Option::is_none")]
    pub performance_counters_settings: Option<PerformanceCountersSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SetupTask {
    #[serde(rename = "commandLine")]
    pub command_line: String,
    #[serde(rename = "environmentVariables", skip_serializing_if = "Vec::is_empty")]
    pub environment_variables: Vec<EnvironmentVariable>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub secrets: Vec<EnvironmentVariableWithSecretValue>,
    #[serde(rename = "stdOutErrPathPrefix")]
    pub std_out_err_path_prefix: String,
    #[serde(rename = "stdOutErrPathSuffix", skip_serializing)]
    pub std_out_err_path_suffix: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterCreateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ClusterBaseProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterUpdateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ClusterUpdateProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterProperties {
    #[serde(rename = "vmSize", skip_serializing_if = "Option::is_none")]
    pub vm_size: Option<String>,
    #[serde(rename = "vmPriority", skip_serializing_if = "Option::is_none")]
    pub vm_priority: Option<cluster_properties::VmPriority>,
    #[serde(rename = "scaleSettings", skip_serializing_if = "Option::is_none")]
    pub scale_settings: Option<ScaleSettings>,
    #[serde(rename = "virtualMachineConfiguration", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_configuration: Option<VirtualMachineConfiguration>,
    #[serde(rename = "nodeSetup", skip_serializing_if = "Option::is_none")]
    pub node_setup: Option<NodeSetup>,
    #[serde(rename = "userAccountSettings", skip_serializing_if = "Option::is_none")]
    pub user_account_settings: Option<UserAccountSettings>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<ResourceId>,
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<cluster_properties::ProvisioningState>,
    #[serde(rename = "provisioningStateTransitionTime", skip_serializing)]
    pub provisioning_state_transition_time: Option<String>,
    #[serde(rename = "allocationState", skip_serializing)]
    pub allocation_state: Option<cluster_properties::AllocationState>,
    #[serde(rename = "allocationStateTransitionTime", skip_serializing)]
    pub allocation_state_transition_time: Option<String>,
    #[serde(skip_serializing)]
    pub errors: Vec<BatchAiError>,
    #[serde(rename = "currentNodeCount", skip_serializing)]
    pub current_node_count: Option<i32>,
    #[serde(rename = "nodeStateCounts", skip_serializing_if = "Option::is_none")]
    pub node_state_counts: Option<NodeStateCounts>,
}
mod cluster_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VmPriority {
        #[serde(rename = "dedicated")]
        Dedicated,
        #[serde(rename = "lowpriority")]
        Lowpriority,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "deleting")]
        Deleting,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AllocationState {
        #[serde(rename = "steady")]
        Steady,
        #[serde(rename = "resizing")]
        Resizing,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cluster {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ClusterProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Cluster>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobBaseProperties {
    #[serde(rename = "schedulingPriority", skip_serializing_if = "Option::is_none")]
    pub scheduling_priority: Option<job_base_properties::SchedulingPriority>,
    pub cluster: ResourceId,
    #[serde(rename = "mountVolumes", skip_serializing_if = "Option::is_none")]
    pub mount_volumes: Option<MountVolumes>,
    #[serde(rename = "nodeCount")]
    pub node_count: i32,
    #[serde(rename = "containerSettings", skip_serializing_if = "Option::is_none")]
    pub container_settings: Option<ContainerSettings>,
    #[serde(rename = "cntkSettings", skip_serializing_if = "Option::is_none")]
    pub cntk_settings: Option<CntKsettings>,
    #[serde(rename = "pyTorchSettings", skip_serializing_if = "Option::is_none")]
    pub py_torch_settings: Option<PyTorchSettings>,
    #[serde(rename = "tensorFlowSettings", skip_serializing_if = "Option::is_none")]
    pub tensor_flow_settings: Option<TensorFlowSettings>,
    #[serde(rename = "caffeSettings", skip_serializing_if = "Option::is_none")]
    pub caffe_settings: Option<CaffeSettings>,
    #[serde(rename = "caffe2Settings", skip_serializing_if = "Option::is_none")]
    pub caffe2_settings: Option<Caffe2Settings>,
    #[serde(rename = "chainerSettings", skip_serializing_if = "Option::is_none")]
    pub chainer_settings: Option<ChainerSettings>,
    #[serde(rename = "customToolkitSettings", skip_serializing_if = "Option::is_none")]
    pub custom_toolkit_settings: Option<CustomToolkitSettings>,
    #[serde(rename = "customMpiSettings", skip_serializing_if = "Option::is_none")]
    pub custom_mpi_settings: Option<CustomMpiSettings>,
    #[serde(rename = "horovodSettings", skip_serializing_if = "Option::is_none")]
    pub horovod_settings: Option<HorovodSettings>,
    #[serde(rename = "jobPreparation", skip_serializing_if = "Option::is_none")]
    pub job_preparation: Option<JobPreparation>,
    #[serde(rename = "stdOutErrPathPrefix")]
    pub std_out_err_path_prefix: String,
    #[serde(rename = "inputDirectories", skip_serializing_if = "Vec::is_empty")]
    pub input_directories: Vec<InputDirectory>,
    #[serde(rename = "outputDirectories", skip_serializing_if = "Vec::is_empty")]
    pub output_directories: Vec<OutputDirectory>,
    #[serde(rename = "environmentVariables", skip_serializing_if = "Vec::is_empty")]
    pub environment_variables: Vec<EnvironmentVariable>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub secrets: Vec<EnvironmentVariableWithSecretValue>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub constraints: Option<job_base_properties::Constraints>,
}
mod job_base_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SchedulingPriority {
        #[serde(rename = "low")]
        Low,
        #[serde(rename = "normal")]
        Normal,
        #[serde(rename = "high")]
        High,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Constraints {
        #[serde(rename = "maxWallClockTime", skip_serializing_if = "Option::is_none")]
        pub max_wall_clock_time: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobCreateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobBaseProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[serde(rename = "schedulingPriority", skip_serializing_if = "Option::is_none")]
    pub scheduling_priority: Option<job_properties::SchedulingPriority>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cluster: Option<ResourceId>,
    #[serde(rename = "mountVolumes", skip_serializing_if = "Option::is_none")]
    pub mount_volumes: Option<MountVolumes>,
    #[serde(rename = "nodeCount", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<i32>,
    #[serde(rename = "containerSettings", skip_serializing_if = "Option::is_none")]
    pub container_settings: Option<ContainerSettings>,
    #[serde(rename = "toolType", skip_serializing_if = "Option::is_none")]
    pub tool_type: Option<ToolType>,
    #[serde(rename = "cntkSettings", skip_serializing_if = "Option::is_none")]
    pub cntk_settings: Option<CntKsettings>,
    #[serde(rename = "pyTorchSettings", skip_serializing_if = "Option::is_none")]
    pub py_torch_settings: Option<PyTorchSettings>,
    #[serde(rename = "tensorFlowSettings", skip_serializing_if = "Option::is_none")]
    pub tensor_flow_settings: Option<TensorFlowSettings>,
    #[serde(rename = "caffeSettings", skip_serializing_if = "Option::is_none")]
    pub caffe_settings: Option<CaffeSettings>,
    #[serde(rename = "caffe2Settings", skip_serializing_if = "Option::is_none")]
    pub caffe2_settings: Option<Caffe2Settings>,
    #[serde(rename = "chainerSettings", skip_serializing_if = "Option::is_none")]
    pub chainer_settings: Option<ChainerSettings>,
    #[serde(rename = "customToolkitSettings", skip_serializing_if = "Option::is_none")]
    pub custom_toolkit_settings: Option<CustomToolkitSettings>,
    #[serde(rename = "customMpiSettings", skip_serializing_if = "Option::is_none")]
    pub custom_mpi_settings: Option<CustomMpiSettings>,
    #[serde(rename = "horovodSettings", skip_serializing_if = "Option::is_none")]
    pub horovod_settings: Option<HorovodSettings>,
    #[serde(rename = "jobPreparation", skip_serializing_if = "Option::is_none")]
    pub job_preparation: Option<JobPreparation>,
    #[serde(rename = "jobOutputDirectoryPathSegment", skip_serializing)]
    pub job_output_directory_path_segment: Option<String>,
    #[serde(rename = "stdOutErrPathPrefix", skip_serializing_if = "Option::is_none")]
    pub std_out_err_path_prefix: Option<String>,
    #[serde(rename = "inputDirectories", skip_serializing_if = "Vec::is_empty")]
    pub input_directories: Vec<InputDirectory>,
    #[serde(rename = "outputDirectories", skip_serializing_if = "Vec::is_empty")]
    pub output_directories: Vec<OutputDirectory>,
    #[serde(rename = "environmentVariables", skip_serializing_if = "Vec::is_empty")]
    pub environment_variables: Vec<EnvironmentVariable>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub secrets: Vec<EnvironmentVariableWithSecretValue>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub constraints: Option<job_properties::Constraints>,
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<job_properties::ProvisioningState>,
    #[serde(rename = "provisioningStateTransitionTime", skip_serializing)]
    pub provisioning_state_transition_time: Option<String>,
    #[serde(rename = "executionState", skip_serializing)]
    pub execution_state: Option<job_properties::ExecutionState>,
    #[serde(rename = "executionStateTransitionTime", skip_serializing)]
    pub execution_state_transition_time: Option<String>,
    #[serde(rename = "executionInfo", skip_serializing_if = "Option::is_none")]
    pub execution_info: Option<job_properties::ExecutionInfo>,
}
mod job_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SchedulingPriority {
        #[serde(rename = "low")]
        Low,
        #[serde(rename = "normal")]
        Normal,
        #[serde(rename = "high")]
        High,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Constraints {
        #[serde(rename = "maxWallClockTime", skip_serializing_if = "Option::is_none")]
        pub max_wall_clock_time: Option<String>,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExecutionState {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "running")]
        Running,
        #[serde(rename = "terminating")]
        Terminating,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct ExecutionInfo {
        #[serde(rename = "startTime", skip_serializing)]
        pub start_time: Option<String>,
        #[serde(rename = "endTime", skip_serializing)]
        pub end_time: Option<String>,
        #[serde(rename = "exitCode", skip_serializing)]
        pub exit_code: Option<i32>,
        #[serde(skip_serializing)]
        pub errors: Vec<BatchAiError>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Job>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteLoginInformation {
    #[serde(rename = "nodeId", skip_serializing)]
    pub node_id: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing)]
    pub ip_address: Option<String>,
    #[serde(skip_serializing)]
    pub port: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteLoginInformationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<RemoteLoginInformation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileProperties {
    #[serde(rename = "lastModified", skip_serializing)]
    pub last_modified: Option<String>,
    #[serde(rename = "contentLength", skip_serializing)]
    pub content_length: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct File {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "fileType", skip_serializing)]
    pub file_type: Option<file::FileType>,
    #[serde(rename = "downloadUrl", skip_serializing)]
    pub download_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FileProperties>,
}
mod file {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FileType {
        #[serde(rename = "file")]
        File,
        #[serde(rename = "directory")]
        Directory,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileListResult {
    #[serde(skip_serializing)]
    pub value: Vec<File>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceId {
    pub id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(skip_serializing)]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProxyResource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ToolType {
    #[serde(rename = "cntk")]
    Cntk,
    #[serde(rename = "tensorflow")]
    Tensorflow,
    #[serde(rename = "caffe")]
    Caffe,
    #[serde(rename = "caffe2")]
    Caffe2,
    #[serde(rename = "chainer")]
    Chainer,
    #[serde(rename = "horovod")]
    Horovod,
    #[serde(rename = "custommpi")]
    Custommpi,
    #[serde(rename = "custom")]
    Custom,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NameValuePair {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentVariable {
    pub name: String,
    pub value: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentVariableWithSecretValue {
    pub name: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "valueSecretReference", skip_serializing_if = "Option::is_none")]
    pub value_secret_reference: Option<KeyVaultSecretReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageSourceRegistry {
    #[serde(rename = "serverUrl", skip_serializing_if = "Option::is_none")]
    pub server_url: Option<String>,
    pub image: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub credentials: Option<PrivateRegistryCredentials>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateRegistryCredentials {
    pub username: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "passwordSecretReference", skip_serializing_if = "Option::is_none")]
    pub password_secret_reference: Option<KeyVaultSecretReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerSettings {
    #[serde(rename = "imageSourceRegistry")]
    pub image_source_registry: ImageSourceRegistry,
    #[serde(rename = "shmSize", skip_serializing_if = "Option::is_none")]
    pub shm_size: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputDirectory {
    pub id: String,
    pub path: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OutputDirectory {
    pub id: String,
    #[serde(rename = "pathPrefix")]
    pub path_prefix: String,
    #[serde(rename = "pathSuffix", skip_serializing_if = "Option::is_none")]
    pub path_suffix: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureStorageCredentialsInfo {
    #[serde(rename = "accountKey", skip_serializing_if = "Option::is_none")]
    pub account_key: Option<String>,
    #[serde(rename = "accountKeySecretReference", skip_serializing_if = "Option::is_none")]
    pub account_key_secret_reference: Option<KeyVaultSecretReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureFileShareReference {
    #[serde(rename = "accountName")]
    pub account_name: String,
    #[serde(rename = "azureFileUrl")]
    pub azure_file_url: String,
    pub credentials: AzureStorageCredentialsInfo,
    #[serde(rename = "relativeMountPath")]
    pub relative_mount_path: String,
    #[serde(rename = "fileMode", skip_serializing_if = "Option::is_none")]
    pub file_mode: Option<String>,
    #[serde(rename = "directoryMode", skip_serializing_if = "Option::is_none")]
    pub directory_mode: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureBlobFileSystemReference {
    #[serde(rename = "accountName")]
    pub account_name: String,
    #[serde(rename = "containerName")]
    pub container_name: String,
    pub credentials: AzureStorageCredentialsInfo,
    #[serde(rename = "relativeMountPath")]
    pub relative_mount_path: String,
    #[serde(rename = "mountOptions", skip_serializing_if = "Option::is_none")]
    pub mount_options: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileServerReference {
    #[serde(rename = "fileServer")]
    pub file_server: ResourceId,
    #[serde(rename = "sourceDirectory", skip_serializing_if = "Option::is_none")]
    pub source_directory: Option<String>,
    #[serde(rename = "relativeMountPath")]
    pub relative_mount_path: String,
    #[serde(rename = "mountOptions", skip_serializing_if = "Option::is_none")]
    pub mount_options: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnmanagedFileSystemReference {
    #[serde(rename = "mountCommand")]
    pub mount_command: String,
    #[serde(rename = "relativeMountPath")]
    pub relative_mount_path: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MountVolumes {
    #[serde(rename = "azureFileShares", skip_serializing_if = "Vec::is_empty")]
    pub azure_file_shares: Vec<AzureFileShareReference>,
    #[serde(rename = "azureBlobFileSystems", skip_serializing_if = "Vec::is_empty")]
    pub azure_blob_file_systems: Vec<AzureBlobFileSystemReference>,
    #[serde(rename = "fileServers", skip_serializing_if = "Vec::is_empty")]
    pub file_servers: Vec<FileServerReference>,
    #[serde(rename = "unmanagedFileSystems", skip_serializing_if = "Vec::is_empty")]
    pub unmanaged_file_systems: Vec<UnmanagedFileSystemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CntKsettings {
    #[serde(rename = "languageType", skip_serializing_if = "Option::is_none")]
    pub language_type: Option<String>,
    #[serde(rename = "configFilePath", skip_serializing_if = "Option::is_none")]
    pub config_file_path: Option<String>,
    #[serde(rename = "pythonScriptFilePath", skip_serializing_if = "Option::is_none")]
    pub python_script_file_path: Option<String>,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CaffeSettings {
    #[serde(rename = "configFilePath", skip_serializing_if = "Option::is_none")]
    pub config_file_path: Option<String>,
    #[serde(rename = "pythonScriptFilePath", skip_serializing_if = "Option::is_none")]
    pub python_script_file_path: Option<String>,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Caffe2Settings {
    #[serde(rename = "pythonScriptFilePath")]
    pub python_script_file_path: String,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChainerSettings {
    #[serde(rename = "pythonScriptFilePath")]
    pub python_script_file_path: String,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomToolkitSettings {
    #[serde(rename = "commandLine", skip_serializing_if = "Option::is_none")]
    pub command_line: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomMpiSettings {
    #[serde(rename = "commandLine")]
    pub command_line: String,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobPreparation {
    #[serde(rename = "commandLine")]
    pub command_line: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PyTorchSettings {
    #[serde(rename = "pythonScriptFilePath")]
    pub python_script_file_path: String,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
    #[serde(rename = "communicationBackend", skip_serializing_if = "Option::is_none")]
    pub communication_backend: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HorovodSettings {
    #[serde(rename = "pythonScriptFilePath")]
    pub python_script_file_path: String,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<String>,
    #[serde(rename = "processCount", skip_serializing_if = "Option::is_none")]
    pub process_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TensorFlowSettings {
    #[serde(rename = "pythonScriptFilePath")]
    pub python_script_file_path: String,
    #[serde(rename = "pythonInterpreterPath", skip_serializing_if = "Option::is_none")]
    pub python_interpreter_path: Option<String>,
    #[serde(rename = "masterCommandLineArgs", skip_serializing_if = "Option::is_none")]
    pub master_command_line_args: Option<String>,
    #[serde(rename = "workerCommandLineArgs", skip_serializing_if = "Option::is_none")]
    pub worker_command_line_args: Option<String>,
    #[serde(rename = "parameterServerCommandLineArgs", skip_serializing_if = "Option::is_none")]
    pub parameter_server_command_line_args: Option<String>,
    #[serde(rename = "workerCount", skip_serializing_if = "Option::is_none")]
    pub worker_count: Option<i32>,
    #[serde(rename = "parameterServerCount", skip_serializing_if = "Option::is_none")]
    pub parameter_server_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<CloudErrorBody>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudErrorBody {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<CloudErrorBody>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchAiError {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<NameValuePair>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
    #[serde(skip_serializing)]
    pub origin: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
}
mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing)]
        pub provider: Option<String>,
        #[serde(skip_serializing)]
        pub operation: Option<String>,
        #[serde(skip_serializing)]
        pub resource: Option<String>,
        #[serde(skip_serializing)]
        pub description: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Workspace>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceCreateParameters {
    pub location: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceUpdateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceProperties {
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<workspace_properties::ProvisioningState>,
    #[serde(rename = "provisioningStateTransitionTime", skip_serializing)]
    pub provisioning_state_transition_time: Option<String>,
}
mod workspace_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Workspace {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkspaceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExperimentListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Experiment>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExperimentProperties {
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<experiment_properties::ProvisioningState>,
    #[serde(rename = "provisioningStateTransitionTime", skip_serializing)]
    pub provisioning_state_transition_time: Option<String>,
}
mod experiment_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Experiment {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ExperimentProperties>,
}
