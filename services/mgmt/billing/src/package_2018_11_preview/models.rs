#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InitiateTransferRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InitiateTransferProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateAddressResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<AddressValidationStatus>,
    #[serde(rename = "suggestedAddresses", skip_serializing_if = "Vec::is_empty")]
    pub suggested_addresses: Vec<Address>,
    #[serde(rename = "validationMessage", skip_serializing_if = "Option::is_none")]
    pub validation_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum AddressValidationStatus {
    Valid,
    Invalid,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InitiateTransferProperties {
    #[serde(rename = "billingProfileId", skip_serializing_if = "Option::is_none")]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "recipientEmailId", skip_serializing_if = "Option::is_none")]
    pub recipient_email_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AcceptTransferRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AcceptTransferProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AcceptTransferProperties {
    #[serde(rename = "productDetails", skip_serializing_if = "Vec::is_empty")]
    pub product_details: Vec<ProductDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductDetails {
    #[serde(rename = "productType", skip_serializing_if = "Option::is_none")]
    pub product_type: Option<ProductType>,
    #[serde(rename = "productId", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProductType {
    AzureSubscription,
    AzureReservation,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransferProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecipientTransferDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RecipientTransferProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DetailedTransferStatus {
    #[serde(rename = "productType", skip_serializing_if = "Option::is_none")]
    pub product_type: Option<ProductType>,
    #[serde(rename = "productId", skip_serializing)]
    pub product_id: Option<String>,
    #[serde(rename = "transferStatus", skip_serializing_if = "Option::is_none")]
    pub transfer_status: Option<ProductTransferStatus>,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<Error>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Error {
    #[serde(rename = "errorCode", skip_serializing)]
    pub error_code: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing)]
    pub error_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EligibleProductType {
    DevTestAzureSubscription,
    StandardAzureSubscription,
    AzureReservation,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferProperties {
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "expirationTime", skip_serializing)]
    pub expiration_time: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "billingAccountId", skip_serializing)]
    pub billing_account_id: Option<String>,
    #[serde(rename = "transferStatus", skip_serializing_if = "Option::is_none")]
    pub transfer_status: Option<TransferStatus>,
    #[serde(rename = "recipientEmailId", skip_serializing)]
    pub recipient_email_id: Option<String>,
    #[serde(rename = "initiatorEmailId", skip_serializing)]
    pub initiator_email_id: Option<String>,
    #[serde(rename = "canceledBy", skip_serializing)]
    pub canceled_by: Option<String>,
    #[serde(rename = "lastModifiedTime", skip_serializing)]
    pub last_modified_time: Option<String>,
    #[serde(rename = "detailedTransferStatus", skip_serializing)]
    pub detailed_transfer_status: Vec<DetailedTransferStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecipientTransferProperties {
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "expirationTime", skip_serializing)]
    pub expiration_time: Option<String>,
    #[serde(rename = "allowedProductType", skip_serializing)]
    pub allowed_product_type: Vec<EligibleProductType>,
    #[serde(rename = "transferStatus", skip_serializing_if = "Option::is_none")]
    pub transfer_status: Option<TransferStatus>,
    #[serde(rename = "recipientEmailId", skip_serializing)]
    pub recipient_email_id: Option<String>,
    #[serde(rename = "initiatorEmailId", skip_serializing)]
    pub initiator_email_id: Option<String>,
    #[serde(rename = "canceledBy", skip_serializing)]
    pub canceled_by: Option<String>,
    #[serde(rename = "lastModifiedTime", skip_serializing)]
    pub last_modified_time: Option<String>,
    #[serde(rename = "detailedTransferStatus", skip_serializing)]
    pub detailed_transfer_status: Vec<DetailedTransferStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TransferStatus {
    Pending,
    InProgress,
    Completed,
    CompletedWithErrors,
    Failed,
    Canceled,
    Declined,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProductTransferStatus {
    NotStarted,
    InProgress,
    Completed,
    Failed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecipientTransferDetailsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<RecipientTransferDetails>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferDetailsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<TransferDetails>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferProductRequestProperties {
    #[serde(rename = "destinationInvoiceSectionId", skip_serializing_if = "Option::is_none")]
    pub destination_invoice_section_id: Option<String>,
    #[serde(rename = "destinationBillingProfileId", skip_serializing_if = "Option::is_none")]
    pub destination_billing_profile_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferBillingSubscriptionResult {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransferBillingSubscriptionResultProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferBillingSubscriptionResultProperties {
    #[serde(rename = "billingSubscriptionName", skip_serializing_if = "Option::is_none")]
    pub billing_subscription_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferBillingSubscriptionRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransferBillingSubscriptionRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferBillingSubscriptionRequestProperties {
    #[serde(rename = "destinationInvoiceSectionId", skip_serializing_if = "Option::is_none")]
    pub destination_invoice_section_id: Option<String>,
    #[serde(rename = "destinationBillingProfileId", skip_serializing_if = "Option::is_none")]
    pub destination_billing_profile_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateSubscriptionTransferEligibilityResult {
    #[serde(rename = "isTransferEligible", skip_serializing)]
    pub is_transfer_eligible: Option<bool>,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<ValidateSubscriptionTransferEligibilityError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateSubscriptionTransferEligibilityError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<SubscriptionTransferValidationErrorCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SubscriptionTransferValidationErrorCode {
    InvalidSource,
    SubscriptionNotActive,
    InsufficientPermissionOnSource,
    InsufficientPermissionOnDestination,
    DestinationBillingProfilePastDue,
    SubscriptionTypeNotSupported,
    CrossBillingAccountNotAllowed,
    NotAvailableForDestinationMarket,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateAutoRenewOperationSummary {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateAutoRenewOperationSummaryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateAutoRenewOperationSummaryProperties {
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingAccount>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccount {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "accountType", skip_serializing)]
    pub account_type: Option<billing_account_properties::AccountType>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[serde(skip_serializing)]
    pub company: Option<String>,
    #[serde(skip_serializing)]
    pub country: Option<String>,
    #[serde(rename = "invoiceSections", skip_serializing_if = "Vec::is_empty")]
    pub invoice_sections: Vec<InvoiceSection>,
    #[serde(rename = "billingProfiles", skip_serializing_if = "Vec::is_empty")]
    pub billing_profiles: Vec<BillingProfile>,
    #[serde(rename = "enrollmentDetails", skip_serializing_if = "Option::is_none")]
    pub enrollment_details: Option<Enrollment>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub departments: Vec<Department>,
    #[serde(rename = "enrollmentAccounts", skip_serializing_if = "Vec::is_empty")]
    pub enrollment_accounts: Vec<EnrollmentAccount>,
    #[serde(rename = "hasReadAccess", skip_serializing)]
    pub has_read_access: Option<bool>,
}
mod billing_account_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AccountType {
        Organization,
        Enrollment,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountUpdateProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProperty {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingPropertySummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPropertySummary {
    #[serde(rename = "billingTenantId", skip_serializing)]
    pub billing_tenant_id: Option<String>,
    #[serde(rename = "billingAccountId", skip_serializing)]
    pub billing_account_id: Option<String>,
    #[serde(rename = "billingAccountName", skip_serializing)]
    pub billing_account_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing)]
    pub billing_profile_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing)]
    pub cost_center: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionName", skip_serializing)]
    pub invoice_section_name: Option<String>,
    #[serde(rename = "productId", skip_serializing)]
    pub product_id: Option<String>,
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(rename = "skuId", skip_serializing)]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Enrollment {
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(skip_serializing)]
    pub channel: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policies: Option<EnrollmentPolicies>,
    #[serde(skip_serializing)]
    pub language: Option<String>,
    #[serde(rename = "countryCode", skip_serializing)]
    pub country_code: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "billingCycle", skip_serializing)]
    pub billing_cycle: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentPolicies {
    #[serde(rename = "accountOwnerViewCharges", skip_serializing)]
    pub account_owner_view_charges: Option<bool>,
    #[serde(rename = "departmentAdminViewCharges", skip_serializing)]
    pub department_admin_view_charges: Option<bool>,
    #[serde(rename = "marketplacesEnabled", skip_serializing)]
    pub marketplaces_enabled: Option<bool>,
    #[serde(rename = "reservedInstancesEnabled", skip_serializing)]
    pub reserved_instances_enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepartmentListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Department>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Department {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DepartmentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepartmentProperties {
    #[serde(rename = "departmentName", skip_serializing_if = "Option::is_none")]
    pub department_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "enrollmentAccounts", skip_serializing_if = "Vec::is_empty")]
    pub enrollment_accounts: Vec<EnrollmentAccount>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountListResult {
    #[serde(skip_serializing)]
    pub value: Vec<EnrollmentAccount>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccount {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EnrollmentAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountProperties {
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "accountOwner", skip_serializing_if = "Option::is_none")]
    pub account_owner: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub department: Option<Department>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingProfile>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfile {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingProfileProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileCreationParameters {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "poNumber", skip_serializing_if = "Option::is_none")]
    pub po_number: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[serde(rename = "invoiceEmailOptIn", skip_serializing_if = "Option::is_none")]
    pub invoice_email_opt_in: Option<bool>,
    #[serde(rename = "enableAzureSKUs", skip_serializing_if = "Vec::is_empty")]
    pub enable_azure_sk_us: Vec<EnabledAzureSkUs>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "poNumber", skip_serializing_if = "Option::is_none")]
    pub po_number: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[serde(rename = "invoiceEmailOptIn", skip_serializing)]
    pub invoice_email_opt_in: Option<bool>,
    #[serde(rename = "isClassic", skip_serializing)]
    pub is_classic: Option<bool>,
    #[serde(rename = "invoiceDay", skip_serializing)]
    pub invoice_day: Option<i64>,
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(rename = "enabledAzureSKUs", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_sk_us: Vec<EnabledAzureSkUs>,
    #[serde(rename = "invoiceSections", skip_serializing_if = "Vec::is_empty")]
    pub invoice_sections: Vec<InvoiceSection>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Address {
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "addressLine1", skip_serializing_if = "Option::is_none")]
    pub address_line1: Option<String>,
    #[serde(rename = "addressLine2", skip_serializing_if = "Option::is_none")]
    pub address_line2: Option<String>,
    #[serde(rename = "addressLine3", skip_serializing_if = "Option::is_none")]
    pub address_line3: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "postalCode", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Customer>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Customer {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CustomerProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "enabledAzureSKUs", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_sk_us: Vec<EnabledAzureSkUs>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub resellers: Vec<Reseller>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionCreationRequest {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing_if = "Option::is_none")]
    pub billing_profile_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<InvoiceSection>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSection {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InvoiceSectionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "billingProfiles", skip_serializing_if = "Vec::is_empty")]
    pub billing_profiles: Vec<BillingProfile>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnabledAzureSkUs {
    #[serde(rename = "skuId", skip_serializing_if = "Option::is_none")]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Reseller {
    #[serde(rename = "resellerId", skip_serializing)]
    pub reseller_id: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationStatus {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "statusDetail", skip_serializing_if = "Option::is_none")]
    pub status_detail: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DownloadUrl {
    #[serde(rename = "expiryTime", skip_serializing)]
    pub expiry_time: Option<String>,
    #[serde(skip_serializing)]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetails {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceListResult {
    #[serde(skip_serializing)]
    pub value: Vec<InvoiceSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSummary {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InvoiceSummaryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSummaryProperties {
    #[serde(rename = "dueDate", skip_serializing)]
    pub due_date: Option<String>,
    #[serde(rename = "invoiceDate", skip_serializing)]
    pub invoice_date: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<invoice_summary_properties::Status>,
    #[serde(rename = "amountDue", skip_serializing_if = "Option::is_none")]
    pub amount_due: Option<Amount>,
    #[serde(rename = "billedAmount", skip_serializing_if = "Option::is_none")]
    pub billed_amount: Option<Amount>,
    #[serde(rename = "invoicePeriodStartDate", skip_serializing)]
    pub invoice_period_start_date: Option<String>,
    #[serde(rename = "invoicePeriodEndDate", skip_serializing)]
    pub invoice_period_end_date: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing)]
    pub billing_profile_name: Option<String>,
    #[serde(rename = "purchaseOrderNumber", skip_serializing)]
    pub purchase_order_number: Option<String>,
    #[serde(rename = "documentUrls", skip_serializing)]
    pub document_urls: Vec<DownloadProperties>,
    #[serde(skip_serializing)]
    pub payments: Vec<PaymentProperties>,
}
mod invoice_summary_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        PastDue,
        Due,
        Paid,
        Void,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentProperties {
    #[serde(rename = "paymentType", skip_serializing)]
    pub payment_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Amount>,
    #[serde(skip_serializing)]
    pub date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DownloadProperties {
    #[serde(skip_serializing)]
    pub kind: Option<download_properties::Kind>,
    #[serde(skip_serializing)]
    pub url: Option<String>,
}
mod download_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        Invoice,
        VoidNote,
        Receipt,
        CreditNote,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<ProductSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductSummary {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductSummaryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductSummaryProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "purchaseDate", skip_serializing)]
    pub purchase_date: Option<String>,
    #[serde(rename = "productTypeId", skip_serializing)]
    pub product_type_id: Option<String>,
    #[serde(rename = "productType", skip_serializing)]
    pub product_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<product_summary_properties::Status>,
    #[serde(rename = "endDate", skip_serializing)]
    pub end_date: Option<String>,
    #[serde(rename = "billingFrequency", skip_serializing_if = "Option::is_none")]
    pub billing_frequency: Option<product_summary_properties::BillingFrequency>,
    #[serde(rename = "lastCharge", skip_serializing_if = "Option::is_none")]
    pub last_charge: Option<Amount>,
    #[serde(rename = "lastChargeDate", skip_serializing)]
    pub last_charge_date: Option<String>,
    #[serde(skip_serializing)]
    pub quantity: Option<f64>,
    #[serde(rename = "skuId", skip_serializing)]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
    #[serde(rename = "availabilityId", skip_serializing)]
    pub availability_id: Option<String>,
    #[serde(rename = "parentProductId", skip_serializing)]
    pub parent_product_id: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionName", skip_serializing)]
    pub invoice_section_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing)]
    pub billing_profile_name: Option<String>,
}
mod product_summary_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Active,
        Inactive,
        PastDue,
        Expiring,
        Expired,
        Disabled,
        Cancelled,
        AutoRenew,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingFrequency {
        OneTime,
        Monthly,
        UsageBased,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateProductTransferEligibilityResult {
    #[serde(rename = "isTransferEligible", skip_serializing)]
    pub is_transfer_eligible: Option<bool>,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<ValidateProductTransferEligibilityError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateProductTransferEligibilityError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<ProductTransferValidationErrorCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProductTransferValidationErrorCode {
    InvalidSource,
    ProductNotActive,
    InsufficientPermissionOnSource,
    InsufficientPermissionOnDestination,
    DestinationBillingProfilePastDue,
    ProductTypeNotSupported,
    CrossBillingAccountNotAllowed,
    NotAvailableForDestinationMarket,
    OneTimePurchaseProductTransferNotAllowed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscriptionsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingSubscriptionSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscriptionSummary {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingSubscriptionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscriptionProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
    #[serde(rename = "subscriptionBillingStatus", skip_serializing_if = "Option::is_none")]
    pub subscription_billing_status: Option<billing_subscription_properties::SubscriptionBillingStatus>,
    #[serde(rename = "lastMonthCharges", skip_serializing_if = "Option::is_none")]
    pub last_month_charges: Option<Amount>,
    #[serde(rename = "monthToDateCharges", skip_serializing_if = "Option::is_none")]
    pub month_to_date_charges: Option<Amount>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing)]
    pub billing_profile_name: Option<String>,
    #[serde(rename = "customerId", skip_serializing)]
    pub customer_id: Option<String>,
    #[serde(rename = "customerDisplayName", skip_serializing)]
    pub customer_display_name: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionName", skip_serializing)]
    pub invoice_section_name: Option<String>,
    #[serde(rename = "skuId", skip_serializing_if = "Option::is_none")]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reseller: Option<Reseller>,
}
mod billing_subscription_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SubscriptionBillingStatus {
        Active,
        Inactive,
        Abandoned,
        Deleted,
        Warning,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountContext {
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "enrollmentAccountName", skip_serializing_if = "Option::is_none")]
    pub enrollment_account_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<TransactionsSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionsSummary {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransactionsSummaryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionsSummaryProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<transactions_summary_properties::Kind>,
    #[serde(skip_serializing)]
    pub date: Option<String>,
    #[serde(skip_serializing)]
    pub invoice: Option<String>,
    #[serde(rename = "orderId", skip_serializing)]
    pub order_id: Option<String>,
    #[serde(rename = "orderName", skip_serializing)]
    pub order_name: Option<String>,
    #[serde(rename = "productFamily", skip_serializing)]
    pub product_family: Option<String>,
    #[serde(rename = "productTypeId", skip_serializing)]
    pub product_type_id: Option<String>,
    #[serde(rename = "productType", skip_serializing)]
    pub product_type: Option<String>,
    #[serde(rename = "productDescription", skip_serializing)]
    pub product_description: Option<String>,
    #[serde(rename = "transactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<transactions_summary_properties::TransactionType>,
    #[serde(rename = "transactionAmount", skip_serializing_if = "Option::is_none")]
    pub transaction_amount: Option<Amount>,
    #[serde(skip_serializing)]
    pub quantity: Option<i64>,
    #[serde(rename = "customerId", skip_serializing)]
    pub customer_id: Option<String>,
    #[serde(rename = "customerDisplayName", skip_serializing)]
    pub customer_display_name: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionName", skip_serializing)]
    pub invoice_section_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing)]
    pub billing_profile_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
    #[serde(rename = "subscriptionName", skip_serializing)]
    pub subscription_name: Option<String>,
}
mod transactions_summary_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "all")]
        All,
        #[serde(rename = "reservation")]
        Reservation,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransactionType {
        Purchase,
        #[serde(rename = "Usage Charge")]
        UsageCharge,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Policy {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PolicyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProperties {
    #[serde(rename = "marketplacePurchasesAllowed", skip_serializing_if = "Option::is_none")]
    pub marketplace_purchases_allowed: Option<bool>,
    #[serde(rename = "reservationPurchasesAllowed", skip_serializing_if = "Option::is_none")]
    pub reservation_purchases_allowed: Option<bool>,
    #[serde(rename = "subscriptionOwnerCanViewCharges", skip_serializing_if = "Option::is_none")]
    pub subscription_owner_can_view_charges: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableBalance {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AvailableBalanceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableBalanceProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Amount>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Amount {
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentMethodsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<PaymentMethod>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentMethod {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PaymentMethodProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentMethodProperties {
    #[serde(rename = "paymentMethodType", skip_serializing_if = "Option::is_none")]
    pub payment_method_type: Option<payment_method_properties::PaymentMethodType>,
    #[serde(skip_serializing)]
    pub details: Option<String>,
    #[serde(skip_serializing)]
    pub expiration: Option<String>,
    #[serde(skip_serializing)]
    pub currency: Option<String>,
}
mod payment_method_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PaymentMethodType {
        Credits,
        ChequeWire,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateAutoRenewRequest {
    #[serde(rename = "autoRenew", skip_serializing_if = "Option::is_none")]
    pub auto_renew: Option<update_auto_renew_request::AutoRenew>,
}
mod update_auto_renew_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AutoRenew {
        #[serde(rename = "true")]
        True,
        #[serde(rename = "false")]
        False,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing)]
        pub provider: Option<String>,
        #[serde(skip_serializing)]
        pub resource: Option<String>,
        #[serde(skip_serializing)]
        pub operation: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignmentPayload {
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "billingRoleDefinitionId", skip_serializing_if = "Option::is_none")]
    pub billing_role_definition_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignmentListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingRoleAssignment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignment {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingRoleAssignmentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignmentProperties {
    #[serde(rename = "createdOn", skip_serializing)]
    pub created_on: Option<String>,
    #[serde(rename = "createdByPrincipalTenantId", skip_serializing)]
    pub created_by_principal_tenant_id: Option<String>,
    #[serde(rename = "createdByPrincipalId", skip_serializing)]
    pub created_by_principal_id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "principalId", skip_serializing)]
    pub principal_id: Option<String>,
    #[serde(rename = "roleDefinitionName", skip_serializing)]
    pub role_definition_name: Option<String>,
    #[serde(skip_serializing)]
    pub scope: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinitionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingRoleDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinition {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingRoleDefinitionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinitionProperties {
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permissions: Option<BillingPermissionsListResult>,
    #[serde(rename = "roleName", skip_serializing)]
    pub role_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPermissionsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingPermissionsProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPermissionsProperties {
    #[serde(skip_serializing)]
    pub actions: Vec<Action>,
    #[serde(rename = "notActions", skip_serializing)]
    pub not_actions: Vec<NotAction>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgreementListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Agreement>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Agreement {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AgreementProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgreementProperties {
    #[serde(rename = "agreementLink", skip_serializing)]
    pub agreement_link: Option<String>,
    #[serde(rename = "effectiveDate", skip_serializing)]
    pub effective_date: Option<String>,
    #[serde(rename = "expirationDate", skip_serializing)]
    pub expiration_date: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<Participants>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Participants {
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "statusDate", skip_serializing)]
    pub status_date: Option<String>,
    #[serde(skip_serializing)]
    pub email: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LineOfCredit {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LineOfCreditProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LineOfCreditProperties {
    #[serde(rename = "creditLimit", skip_serializing_if = "Option::is_none")]
    pub credit_limit: Option<Amount>,
    #[serde(skip_serializing)]
    pub reason: Option<String>,
    #[serde(rename = "remainingBalance", skip_serializing_if = "Option::is_none")]
    pub remaining_balance: Option<Amount>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<line_of_credit_properties::Status>,
}
mod line_of_credit_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Approved,
        Rejected,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Action {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotAction {}
