#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod billing_accounts {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, expand: Option<&str>) -> Result<BillingAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/billingAccounts", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, billing_account_name: &str, expand: Option<&str>) -> Result<BillingAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        parameters: &BillingAccountUpdateProperties,
    ) -> Result<BillingAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod payment_methods {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<PaymentMethodsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/paymentMethods",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<PaymentMethodsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/paymentMethods",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod addresses {
    use crate::{models::*, *};
    pub async fn validate(configuration: &Configuration, address: &Address) -> Result<ValidateAddressResponse> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/validateAddress", &configuration.base_path,);
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(address);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod available_balances {
    use crate::{models::*, *};
    pub async fn get_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<AvailableBalance> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/availableBalance/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_profiles {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<BillingProfileListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        billing_account_name: &str,
        parameters: &BillingProfileCreationParameters,
    ) -> Result<BillingProfile> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        expand: Option<&str>,
    ) -> Result<BillingProfile> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        parameters: &BillingProfile,
    ) -> Result<BillingProfile> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod customers {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        filter: Option<&str>,
        skiptoken: Option<&str>,
    ) -> Result<CustomerListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skiptoken) = skiptoken {
            req_builder = req_builder.query(&[("$skiptoken", skiptoken)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
        expand: Option<&str>,
    ) -> Result<Customer> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod invoice_sections {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<InvoiceSectionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        billing_account_name: &str,
        parameters: &InvoiceSectionCreationRequest,
    ) -> Result<InvoiceSection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<InvoiceSectionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_create_subscription_permission(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<InvoiceSectionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/listInvoiceSectionsWithCreateSubscriptionPermission",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        expand: Option<&str>,
    ) -> Result<InvoiceSection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        parameters: &InvoiceSection,
    ) -> Result<InvoiceSection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn elevate_to_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<ErrorResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/elevate",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod departments {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
    ) -> Result<DepartmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/departments",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        department_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
    ) -> Result<Department> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/departments/{}",
            &configuration.base_path, billing_account_name, department_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod enrollment_accounts {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
    ) -> Result<EnrollmentAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/enrollmentAccounts",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_enrollment_account_id(
        configuration: &Configuration,
        billing_account_name: &str,
        enrollment_account_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
    ) -> Result<EnrollmentAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/enrollmentAccounts/{}",
            &configuration.base_path, billing_account_name, enrollment_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod invoices {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        period_start_date: &str,
        period_end_date: &str,
    ) -> Result<InvoiceListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("periodStartDate", period_start_date)]);
        req_builder = req_builder.query(&[("periodEndDate", period_end_date)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        period_start_date: &str,
        period_end_date: &str,
    ) -> Result<InvoiceListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoices",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("periodStartDate", period_start_date)]);
        req_builder = req_builder.query(&[("periodEndDate", period_end_date)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_name: &str,
    ) -> Result<InvoiceSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoices/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod price_sheet {
    use crate::{models::*, *};
    pub async fn download(configuration: &Configuration, billing_account_name: &str, invoice_name: &str) -> Result<DownloadUrl> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices/{}/pricesheet/default/download",
            &configuration.base_path, billing_account_name, invoice_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_subscriptions {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_customer_name(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_customer_name(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
        billing_subscription_name: &str,
    ) -> Result<BillingSubscriptionSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/billingSubscriptions/{}",
            &configuration.base_path, billing_account_name, customer_name, billing_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_subscription_name: &str,
    ) -> Result<BillingSubscriptionSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/billingSubscriptions/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn transfer(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_subscription_name: &str,
        parameters: &TransferBillingSubscriptionRequestProperties,
    ) -> Result<TransferBillingSubscriptionResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/billingSubscriptions/{}/transfer",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_subscription_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn validate_transfer(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_subscription_name: &str,
        parameters: &TransferBillingSubscriptionRequestProperties,
    ) -> Result<ValidateSubscriptionTransferEligibilityResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/billingSubscriptions/{}/validateTransferEligibility",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_subscription_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod products {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        filter: Option<&str>,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        filter: Option<&str>,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/products",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        product_name: &str,
    ) -> Result<ProductSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/products/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, product_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn transfer(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        product_name: &str,
        parameters: &TransferProductRequestProperties,
    ) -> Result<ProductSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/products/{}/transfer",
            &configuration.base_path, billing_account_name, invoice_section_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn validate_transfer(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        product_name: &str,
        parameters: &TransferProductRequestProperties,
    ) -> Result<ValidateProductTransferEligibilityResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/products/{}/validateTransferEligibility",
            &configuration.base_path, billing_account_name, invoice_section_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update_auto_renew_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        product_name: &str,
        body: &UpdateAutoRenewRequest,
    ) -> Result<UpdateAutoRenewOperationSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products/{}/updateAutoRenew",
            &configuration.base_path, billing_account_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update_auto_renew_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        product_name: &str,
        body: &UpdateAutoRenewRequest,
    ) -> Result<UpdateAutoRenewOperationSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/products/{}/updateAutoRenew",
            &configuration.base_path, billing_account_name, invoice_section_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod transactions {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        start_date: &str,
        end_date: &str,
        filter: Option<&str>,
    ) -> Result<TransactionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/transactions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("startDate", start_date)]);
        req_builder = req_builder.query(&[("endDate", end_date)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        start_date: &str,
        end_date: &str,
        filter: Option<&str>,
    ) -> Result<TransactionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/transactions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("startDate", start_date)]);
        req_builder = req_builder.query(&[("endDate", end_date)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_customer_name(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
        start_date: &str,
        end_date: &str,
        filter: Option<&str>,
    ) -> Result<TransactionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/transactions",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("startDate", start_date)]);
        req_builder = req_builder.query(&[("endDate", end_date)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        start_date: &str,
        end_date: &str,
        filter: Option<&str>,
    ) -> Result<TransactionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/transactions",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("startDate", start_date)]);
        req_builder = req_builder.query(&[("endDate", end_date)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policies {
    use crate::{models::*, *};
    pub async fn get_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/policies/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        parameters: &Policy,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/policies/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_property {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, subscription_id: &str) -> Result<BillingProperty> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingProperty",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod transfers {
    use crate::{models::*, *};
    pub async fn initiate(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        body: &InitiateTransferRequest,
    ) -> Result<TransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/initiateTransfer",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        transfer_name: &str,
    ) -> Result<TransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/transfers/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, transfer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn cancel(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        transfer_name: &str,
    ) -> Result<TransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/transfers/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, transfer_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<TransferDetailsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/transfers",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod recipient_transfers {
    use crate::{models::*, *};
    pub async fn accept(
        configuration: &Configuration,
        transfer_name: &str,
        body: &AcceptTransferRequest,
    ) -> Result<RecipientTransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/transfers/{}/acceptTransfer",
            &configuration.base_path, transfer_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn decline(configuration: &Configuration, transfer_name: &str) -> Result<RecipientTransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/transfers/{}/declineTransfer",
            &configuration.base_path, transfer_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, transfer_name: &str) -> Result<RecipientTransferDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/transfers/{}/",
            &configuration.base_path, transfer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration) -> Result<RecipientTransferDetailsListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/transfers", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_permissions {
    use crate::{models::*, *};
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingPermissions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_customers(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/providers/Microsoft.Billing/billingPermissions",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_sections(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingPermissions",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingPermissions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_role_definitions {
    use crate::{models::*, *};
    pub async fn get_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingRoleDefinitions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingRoleDefinitions",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingRoleDefinitions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_role_assignments {
    use crate::{models::*, *};
    pub async fn get_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, invoice_section_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/billingRoleAssignments",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        parameters: &BillingRoleAssignmentPayload,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/providers/Microsoft.Billing/createBillingRoleAssignment",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/billingRoleAssignments",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_by_invoice_section_name(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_section_name: &str,
        parameters: &BillingRoleAssignmentPayload,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoiceSections/{}/providers/Microsoft.Billing/createBillingRoleAssignment",
            &configuration.base_path, billing_account_name, invoice_section_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/billingRoleAssignments",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_by_billing_profile_name(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        parameters: &BillingRoleAssignmentPayload,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/providers/Microsoft.Billing/createBillingRoleAssignment",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod agreements {
    use crate::{models::*, *};
    pub async fn list_by_billing_account_name(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<AgreementListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/agreements",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        agreement_name: &str,
        expand: Option<&str>,
    ) -> Result<Agreement> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/agreements/{}",
            &configuration.base_path, billing_account_name, agreement_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod line_of_credits {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, subscription_id: &str) -> Result<LineOfCredit> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(configuration: &Configuration, subscription_id: &str, parameters: &LineOfCredit) -> Result<LineOfCredit> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
