#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod billing_accounts {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, expand: Option<&str>) -> Result<BillingAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/billingAccounts", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, billing_account_name: &str, expand: Option<&str>) -> Result<BillingAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        parameters: &BillingAccountUpdateRequest,
    ) -> Result<BillingAccount> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_invoice_sections_by_create_subscription_permission(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<InvoiceSectionListWithCreateSubPermissionResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/listInvoiceSectionsWithCreateSubscriptionPermission",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod address {
    use crate::{models::*, *};
    pub async fn validate(configuration: &Configuration, address: &AddressDetails) -> Result<ValidateAddressResponse> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/validateAddress", &configuration.base_path,);
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(address);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod available_balances {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, billing_account_name: &str, billing_profile_name: &str) -> Result<AvailableBalance> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/availableBalance/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod instructions {
    use crate::{models::*, *};
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<InstructionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/instructions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        instruction_name: &str,
    ) -> Result<Instruction> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/instructions/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, instruction_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn put(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        instruction_name: &str,
        parameters: &Instruction,
    ) -> Result<Instruction> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/instructions/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, instruction_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_profiles {
    use crate::{models::*, *};
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<BillingProfileListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        expand: Option<&str>,
    ) -> Result<BillingProfile> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        parameters: &BillingProfile,
    ) -> Result<BillingProfile> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod customers {
    use crate::{models::*, *};
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        search: Option<&str>,
        filter: Option<&str>,
    ) -> Result<CustomerListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/customers",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        search: Option<&str>,
        filter: Option<&str>,
    ) -> Result<CustomerListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(search) = search {
            req_builder = req_builder.query(&[("$search", search)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
        expand: Option<&str>,
    ) -> Result<Customer> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod invoice_sections {
    use crate::{models::*, *};
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<InvoiceSectionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
    ) -> Result<InvoiceSection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
        parameters: &InvoiceSection,
    ) -> Result<InvoiceSection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_permissions {
    use crate::{models::*, *};
    pub async fn list_by_customer(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/billingPermissions",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingPermissions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_sections(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingPermissions",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingPermissionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingPermissions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_subscriptions {
    use crate::{models::*, *};
    pub async fn list_by_customer(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingSubscriptionsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingSubscriptions",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, billing_account_name: &str, subscription_id: &str) -> Result<BillingSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions/{}",
            &configuration.base_path, billing_account_name, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        subscription_id: &str,
        parameters: &BillingSubscription,
    ) -> Result<BillingSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions/{}",
            &configuration.base_path, billing_account_name, subscription_id
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn move_(
        configuration: &Configuration,
        billing_account_name: &str,
        subscription_id: &str,
        parameters: &TransferBillingSubscriptionRequestProperties,
    ) -> Result<BillingSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions/{}/move",
            &configuration.base_path, billing_account_name, subscription_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn validate_move(
        configuration: &Configuration,
        billing_account_name: &str,
        subscription_id: &str,
        parameters: &TransferBillingSubscriptionRequestProperties,
    ) -> Result<ValidateSubscriptionTransferEligibilityResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingSubscriptions/{}/validateMoveEligibility",
            &configuration.base_path, billing_account_name, subscription_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod products {
    use crate::{models::*, *};
    pub async fn list_by_customer(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/products",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        filter: Option<&str>,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        filter: Option<&str>,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/products",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
        filter: Option<&str>,
    ) -> Result<ProductsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/products",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, billing_account_name: &str, product_name: &str) -> Result<Product> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products/{}",
            &configuration.base_path, billing_account_name, product_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        product_name: &str,
        parameters: &Product,
    ) -> Result<Product> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products/{}",
            &configuration.base_path, billing_account_name, product_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn move_(
        configuration: &Configuration,
        billing_account_name: &str,
        product_name: &str,
        parameters: &TransferProductRequestProperties,
    ) -> Result<Product> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products/{}/move",
            &configuration.base_path, billing_account_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn validate_move(
        configuration: &Configuration,
        billing_account_name: &str,
        product_name: &str,
        parameters: &TransferProductRequestProperties,
    ) -> Result<ValidateProductTransferEligibilityResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/products/{}/validateMoveEligibility",
            &configuration.base_path, billing_account_name, product_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod invoices {
    use crate::{models::*, *};
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        period_start_date: &str,
        period_end_date: &str,
    ) -> Result<InvoiceListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("periodStartDate", period_start_date)]);
        req_builder = req_builder.query(&[("periodEndDate", period_end_date)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        period_start_date: &str,
        period_end_date: &str,
    ) -> Result<InvoiceListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoices",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("periodStartDate", period_start_date)]);
        req_builder = req_builder.query(&[("periodEndDate", period_end_date)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, billing_account_name: &str, invoice_name: &str) -> Result<Invoice> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices/{}",
            &configuration.base_path, billing_account_name, invoice_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_id(configuration: &Configuration, invoice_name: &str) -> Result<Invoice> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/default/invoices/{}",
            &configuration.base_path, invoice_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn download_invoice(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_name: &str,
        download_token: &str,
    ) -> Result<DownloadUrl> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices/{}/download",
            &configuration.base_path, billing_account_name, invoice_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("downloadToken", download_token)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn download_multiple_billing_profile_invoices(
        configuration: &Configuration,
        billing_account_name: &str,
        download_urls: &Vec<String>,
    ) -> Result<DownloadUrl> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/downloadDocuments",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(download_urls);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        period_start_date: &str,
        period_end_date: &str,
    ) -> Result<InvoiceListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{}/invoices",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("periodStartDate", period_start_date)]);
        req_builder = req_builder.query(&[("periodEndDate", period_end_date)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_subscription_and_invoice_id(
        configuration: &Configuration,
        subscription_id: &str,
        invoice_name: &str,
    ) -> Result<Invoice> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{}/invoices/{}",
            &configuration.base_path, subscription_id, invoice_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn download_billing_subscription_invoice(
        configuration: &Configuration,
        subscription_id: &str,
        invoice_name: &str,
        download_token: &str,
    ) -> Result<DownloadUrl> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{}/invoices/{}/download",
            &configuration.base_path, subscription_id, invoice_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.query(&[("downloadToken", download_token)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn download_multiple_billing_subscription_invoices(
        configuration: &Configuration,
        subscription_id: &str,
        download_urls: &Vec<String>,
    ) -> Result<DownloadUrl> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{}/downloadDocuments",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(download_urls);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod transactions {
    use crate::{models::*, *};
    pub async fn list_by_invoice(
        configuration: &Configuration,
        billing_account_name: &str,
        invoice_name: &str,
    ) -> Result<TransactionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/invoices/{}/transactions",
            &configuration.base_path, billing_account_name, invoice_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policies {
    use crate::{models::*, *};
    pub async fn get_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/policies/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        parameters: &Policy,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/policies/default",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_customer(configuration: &Configuration, billing_account_name: &str, customer_name: &str) -> Result<CustomerPolicy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/policies/default",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update_customer(
        configuration: &Configuration,
        billing_account_name: &str,
        customer_name: &str,
        parameters: &CustomerPolicy,
    ) -> Result<CustomerPolicy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/customers/{}/policies/default",
            &configuration.base_path, billing_account_name, customer_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_property {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, subscription_id: &str) -> Result<BillingProperty> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingProperty/default",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(configuration: &Configuration, subscription_id: &str, parameters: &BillingProperty) -> Result<BillingProperty> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingProperty/default",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_role_definitions {
    use crate::{models::*, *};
    pub async fn get_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_definition_name: &str,
    ) -> Result<BillingRoleDefinition> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingRoleDefinitions/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_definition_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingRoleDefinitions",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingRoleDefinitions",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingRoleDefinitionListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingRoleDefinitions",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_role_assignments {
    use crate::{models::*, *};
    pub async fn get_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        billing_role_assignment_name: &str,
    ) -> Result<BillingRoleAssignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingRoleAssignments/{}",
            &configuration.base_path, billing_account_name, billing_profile_name, billing_role_assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingRoleAssignments",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_invoice_section(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
        invoice_section_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/invoiceSections/{}/billingRoleAssignments",
            &configuration.base_path, billing_account_name, billing_profile_name, invoice_section_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_billing_profile(
        configuration: &Configuration,
        billing_account_name: &str,
        billing_profile_name: &str,
    ) -> Result<BillingRoleAssignmentListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/billingProfiles/{}/billingRoleAssignments",
            &configuration.base_path, billing_account_name, billing_profile_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod agreements {
    use crate::{models::*, *};
    pub async fn list_by_billing_account(
        configuration: &Configuration,
        billing_account_name: &str,
        expand: Option<&str>,
    ) -> Result<AgreementListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/agreements",
            &configuration.base_path, billing_account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        billing_account_name: &str,
        agreement_name: &str,
        expand: Option<&str>,
    ) -> Result<Agreement> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/billingAccounts/{}/agreements/{}",
            &configuration.base_path, billing_account_name, agreement_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod enrollment_accounts {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<EnrollmentAccountListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Billing/enrollmentAccounts", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, name: &str) -> Result<EnrollmentAccountSummary> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Billing/enrollmentAccounts/{}",
            &configuration.base_path, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod billing_periods {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        filter: Option<&str>,
        skiptoken: Option<&str>,
        top: Option<i64>,
    ) -> Result<BillingPeriodsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingPeriods",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(skiptoken) = skiptoken {
            req_builder = req_builder.query(&[("$skiptoken", skiptoken)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, subscription_id: &str, billing_period_name: &str) -> Result<BillingPeriod> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Billing/billingPeriods/{}",
            &configuration.base_path, subscription_id, billing_period_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
