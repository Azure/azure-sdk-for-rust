#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Customer>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Customer {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CustomerProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerProperties {
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "enabledAzurePlans", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_plans: Vec<AzurePlan>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub resellers: Vec<Reseller>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateAddressResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<AddressValidationStatus>,
    #[serde(rename = "suggestedAddresses", skip_serializing_if = "Vec::is_empty")]
    pub suggested_addresses: Vec<AddressDetails>,
    #[serde(rename = "validationMessage", skip_serializing_if = "Option::is_none")]
    pub validation_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum AddressValidationStatus {
    Valid,
    Invalid,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferProductRequestProperties {
    #[serde(rename = "destinationInvoiceSectionId", skip_serializing_if = "Option::is_none")]
    pub destination_invoice_section_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferBillingSubscriptionRequestProperties {
    #[serde(rename = "destinationInvoiceSectionId")]
    pub destination_invoice_section_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateSubscriptionTransferEligibilityResult {
    #[serde(rename = "isMoveEligible", skip_serializing)]
    pub is_move_eligible: Option<bool>,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<ValidateSubscriptionTransferEligibilityError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateSubscriptionTransferEligibilityError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<SubscriptionTransferValidationErrorCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum SubscriptionTransferValidationErrorCode {
    BillingAccountInactive,
    CrossBillingAccountNotAllowed,
    DestinationBillingProfileInactive,
    DestinationBillingProfileNotFound,
    DestinationBillingProfilePastDue,
    DestinationInvoiceSectionInactive,
    DestinationInvoiceSectionNotFound,
    InsufficientPermissionOnDestination,
    InsufficientPermissionOnSource,
    InvalidDestination,
    InvalidSource,
    MarketplaceNotEnabledOnDestination,
    NotAvailableForDestinationMarket,
    ProductInactive,
    ProductNotFound,
    ProductTypeNotSupported,
    SourceBillingProfilePastDue,
    SourceInvoiceSectionInactive,
    SubscriptionNotActive,
    SubscriptionTypeNotSupported,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingAccount>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccount {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "soldTo", skip_serializing_if = "Option::is_none")]
    pub sold_to: Option<AddressDetails>,
    #[serde(rename = "agreementType", skip_serializing)]
    pub agreement_type: Option<billing_account_properties::AgreementType>,
    #[serde(rename = "accountType", skip_serializing)]
    pub account_type: Option<billing_account_properties::AccountType>,
    #[serde(rename = "accountStatus", skip_serializing)]
    pub account_status: Option<billing_account_properties::AccountStatus>,
    #[serde(rename = "billingProfiles", skip_serializing_if = "Option::is_none")]
    pub billing_profiles: Option<BillingProfilesOnExpand>,
    #[serde(rename = "enrollmentDetails", skip_serializing_if = "Option::is_none")]
    pub enrollment_details: Option<Enrollment>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub departments: Vec<Department>,
    #[serde(rename = "enrollmentAccounts", skip_serializing_if = "Vec::is_empty")]
    pub enrollment_accounts: Vec<EnrollmentAccount>,
    #[serde(rename = "hasReadAccess", skip_serializing)]
    pub has_read_access: Option<bool>,
}
pub mod billing_account_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgreementType {
        MicrosoftCustomerAgreement,
        EnterpriseAgreement,
        MicrosoftOnlineServicesProgram,
        MicrosoftPartnerAgreement,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AccountType {
        Enterprise,
        Individual,
        Partner,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AccountStatus {
        Active,
        Deleted,
        Disabled,
        Expired,
        Transferred,
        Extended,
        Terminated,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfilesOnExpand {
    #[serde(rename = "hasMoreResults", skip_serializing)]
    pub has_more_results: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BillingProfile>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingAccountUpdateRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProperty {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingPropertyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPropertyProperties {
    #[serde(rename = "accountAdminNotificationEmailAddress", skip_serializing)]
    pub account_admin_notification_email_address: Option<String>,
    #[serde(rename = "billingTenantId", skip_serializing)]
    pub billing_tenant_id: Option<String>,
    #[serde(rename = "billingAccountId", skip_serializing)]
    pub billing_account_id: Option<String>,
    #[serde(rename = "billingAccountDisplayName", skip_serializing)]
    pub billing_account_display_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "billingProfileStatus", skip_serializing)]
    pub billing_profile_status: Option<billing_property_properties::BillingProfileStatus>,
    #[serde(rename = "billingProfileStatusReasonCode", skip_serializing)]
    pub billing_profile_status_reason_code: Option<billing_property_properties::BillingProfileStatusReasonCode>,
    #[serde(rename = "billingProfileSpendingLimit", skip_serializing)]
    pub billing_profile_spending_limit: Option<billing_property_properties::BillingProfileSpendingLimit>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionDisplayName", skip_serializing)]
    pub invoice_section_display_name: Option<String>,
    #[serde(rename = "isAccountAdmin", skip_serializing)]
    pub is_account_admin: Option<bool>,
    #[serde(rename = "productId", skip_serializing)]
    pub product_id: Option<String>,
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(rename = "skuId", skip_serializing)]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
}
pub mod billing_property_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileStatus {
        Active,
        Disabled,
        Warned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileStatusReasonCode {
        PastDue,
        SpendingLimitReached,
        SpendingLimitExpired,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileSpendingLimit {
        Off,
        On,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Enrollment {
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(skip_serializing)]
    pub channel: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policies: Option<EnrollmentPolicies>,
    #[serde(skip_serializing)]
    pub language: Option<String>,
    #[serde(rename = "countryCode", skip_serializing)]
    pub country_code: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "billingCycle", skip_serializing)]
    pub billing_cycle: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentPolicies {
    #[serde(rename = "accountOwnerViewCharges", skip_serializing)]
    pub account_owner_view_charges: Option<bool>,
    #[serde(rename = "departmentAdminViewCharges", skip_serializing)]
    pub department_admin_view_charges: Option<bool>,
    #[serde(rename = "marketplacesEnabled", skip_serializing)]
    pub marketplaces_enabled: Option<bool>,
    #[serde(rename = "reservedInstancesEnabled", skip_serializing)]
    pub reserved_instances_enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Department {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DepartmentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepartmentProperties {
    #[serde(rename = "departmentName", skip_serializing_if = "Option::is_none")]
    pub department_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "enrollmentAccounts", skip_serializing_if = "Vec::is_empty")]
    pub enrollment_accounts: Vec<EnrollmentAccount>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccount {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EnrollmentAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountProperties {
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "accountOwner", skip_serializing_if = "Option::is_none")]
    pub account_owner: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub department: Option<Department>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstructionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Instruction>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingProfile>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfile {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingProfileProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Instruction {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InstructionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstructionProperties {
    pub amount: f64,
    #[serde(rename = "startDate")]
    pub start_date: String,
    #[serde(rename = "endDate")]
    pub end_date: String,
    #[serde(rename = "creationDate", skip_serializing_if = "Option::is_none")]
    pub creation_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileCreationRequest {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "poNumber", skip_serializing_if = "Option::is_none")]
    pub po_number: Option<String>,
    #[serde(rename = "billTo", skip_serializing_if = "Option::is_none")]
    pub bill_to: Option<AddressDetails>,
    #[serde(rename = "invoiceEmailOptIn", skip_serializing_if = "Option::is_none")]
    pub invoice_email_opt_in: Option<bool>,
    #[serde(rename = "enabledAzurePlans", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_plans: Vec<AzurePlan>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingProfileProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "poNumber", skip_serializing_if = "Option::is_none")]
    pub po_number: Option<String>,
    #[serde(rename = "billingRelationshipType", skip_serializing)]
    pub billing_relationship_type: Option<billing_profile_properties::BillingRelationshipType>,
    #[serde(rename = "billTo", skip_serializing_if = "Option::is_none")]
    pub bill_to: Option<AddressDetails>,
    #[serde(rename = "indirectRelationshipInfo", skip_serializing_if = "Option::is_none")]
    pub indirect_relationship_info: Option<IndirectRelationshipInfo>,
    #[serde(rename = "invoiceEmailOptIn", skip_serializing_if = "Option::is_none")]
    pub invoice_email_opt_in: Option<bool>,
    #[serde(rename = "invoiceDay", skip_serializing)]
    pub invoice_day: Option<i32>,
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(rename = "enabledAzurePlans", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_plans: Vec<AzurePlan>,
    #[serde(rename = "invoiceSections", skip_serializing_if = "Option::is_none")]
    pub invoice_sections: Option<InvoiceSectionsOnExpand>,
    #[serde(rename = "hasReadAccess", skip_serializing)]
    pub has_read_access: Option<bool>,
    #[serde(rename = "systemId", skip_serializing)]
    pub system_id: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<billing_profile_properties::Status>,
    #[serde(rename = "statusReasonCode", skip_serializing)]
    pub status_reason_code: Option<billing_profile_properties::StatusReasonCode>,
    #[serde(rename = "spendingLimit", skip_serializing)]
    pub spending_limit: Option<billing_profile_properties::SpendingLimit>,
    #[serde(rename = "targetClouds", skip_serializing)]
    pub target_clouds: Vec<TargetCloud>,
}
pub mod billing_profile_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingRelationshipType {
        Direct,
        IndirectCustomer,
        IndirectPartner,
        #[serde(rename = "CSPPartner")]
        CspPartner,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Active,
        Disabled,
        Warned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StatusReasonCode {
        PastDue,
        SpendingLimitReached,
        SpendingLimitExpired,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SpendingLimit {
        Off,
        On,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionsOnExpand {
    #[serde(rename = "hasMoreResults", skip_serializing)]
    pub has_more_results: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<InvoiceSection>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressDetails {
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "addressLine1")]
    pub address_line1: String,
    #[serde(rename = "addressLine2", skip_serializing_if = "Option::is_none")]
    pub address_line2: Option<String>,
    #[serde(rename = "addressLine3", skip_serializing_if = "Option::is_none")]
    pub address_line3: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub district: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    pub country: String,
    #[serde(rename = "postalCode", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndirectRelationshipInfo {
    #[serde(rename = "billingAccountName", skip_serializing_if = "Option::is_none")]
    pub billing_account_name: Option<String>,
    #[serde(rename = "billingProfileName", skip_serializing_if = "Option::is_none")]
    pub billing_profile_name: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionCreationRequest {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<InvoiceSection>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSection {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InvoiceSectionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub labels: Option<serde_json::Value>,
    #[serde(skip_serializing)]
    pub state: Option<invoice_section_properties::State>,
    #[serde(rename = "systemId", skip_serializing)]
    pub system_id: Option<String>,
    #[serde(rename = "targetCloud", skip_serializing_if = "Option::is_none")]
    pub target_cloud: Option<TargetCloud>,
}
pub mod invoice_section_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Active,
        Restricted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionListWithCreateSubPermissionResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<InvoiceSectionWithCreateSubPermission>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceSectionWithCreateSubPermission {
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionDisplayName", skip_serializing)]
    pub invoice_section_display_name: Option<String>,
    #[serde(rename = "invoiceSectionSystemId", skip_serializing)]
    pub invoice_section_system_id: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "billingProfileStatus", skip_serializing)]
    pub billing_profile_status: Option<invoice_section_with_create_sub_permission::BillingProfileStatus>,
    #[serde(rename = "billingProfileStatusReasonCode", skip_serializing)]
    pub billing_profile_status_reason_code: Option<invoice_section_with_create_sub_permission::BillingProfileStatusReasonCode>,
    #[serde(rename = "billingProfileSpendingLimit", skip_serializing)]
    pub billing_profile_spending_limit: Option<invoice_section_with_create_sub_permission::BillingProfileSpendingLimit>,
    #[serde(rename = "billingProfileSystemId", skip_serializing)]
    pub billing_profile_system_id: Option<String>,
    #[serde(rename = "enabledAzurePlans", skip_serializing_if = "Vec::is_empty")]
    pub enabled_azure_plans: Vec<AzurePlan>,
}
pub mod invoice_section_with_create_sub_permission {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileStatus {
        Active,
        Disabled,
        Warned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileStatusReasonCode {
        PastDue,
        SpendingLimitReached,
        SpendingLimitExpired,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingProfileSpendingLimit {
        Off,
        On,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzurePlan {
    #[serde(rename = "skuId", skip_serializing_if = "Option::is_none")]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DownloadUrl {
    #[serde(rename = "expiryTime", skip_serializing)]
    pub expiry_time: Option<String>,
    #[serde(skip_serializing)]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetails {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<ErrorSubDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDetails>,
}
pub type ErrorSubDetails = Vec<serde_json::Value>;
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Reseller {
    #[serde(rename = "resellerId", skip_serializing)]
    pub reseller_id: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Invoice>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invoice {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InvoiceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceProperties {
    #[serde(rename = "dueDate", skip_serializing)]
    pub due_date: Option<String>,
    #[serde(rename = "invoiceDate", skip_serializing)]
    pub invoice_date: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<invoice_properties::Status>,
    #[serde(rename = "amountDue", skip_serializing_if = "Option::is_none")]
    pub amount_due: Option<Amount>,
    #[serde(rename = "azurePrepaymentApplied", skip_serializing_if = "Option::is_none")]
    pub azure_prepayment_applied: Option<Amount>,
    #[serde(rename = "billedAmount", skip_serializing_if = "Option::is_none")]
    pub billed_amount: Option<Amount>,
    #[serde(rename = "creditAmount", skip_serializing_if = "Option::is_none")]
    pub credit_amount: Option<Amount>,
    #[serde(rename = "freeAzureCreditApplied", skip_serializing_if = "Option::is_none")]
    pub free_azure_credit_applied: Option<Amount>,
    #[serde(rename = "subTotal", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<Amount>,
    #[serde(rename = "taxAmount", skip_serializing_if = "Option::is_none")]
    pub tax_amount: Option<Amount>,
    #[serde(rename = "totalAmount", skip_serializing_if = "Option::is_none")]
    pub total_amount: Option<Amount>,
    #[serde(rename = "invoicePeriodStartDate", skip_serializing)]
    pub invoice_period_start_date: Option<String>,
    #[serde(rename = "invoicePeriodEndDate", skip_serializing)]
    pub invoice_period_end_date: Option<String>,
    #[serde(rename = "invoiceType", skip_serializing)]
    pub invoice_type: Option<invoice_properties::InvoiceType>,
    #[serde(rename = "isMonthlyInvoice", skip_serializing)]
    pub is_monthly_invoice: Option<bool>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "purchaseOrderNumber", skip_serializing)]
    pub purchase_order_number: Option<String>,
    #[serde(skip_serializing)]
    pub documents: Vec<Document>,
    #[serde(skip_serializing)]
    pub payments: Vec<PaymentProperties>,
    #[serde(rename = "rebillDetails", skip_serializing)]
    pub rebill_details: Option<serde_json::Value>,
    #[serde(rename = "documentType", skip_serializing)]
    pub document_type: Option<invoice_properties::DocumentType>,
    #[serde(rename = "billedDocumentId", skip_serializing)]
    pub billed_document_id: Option<String>,
    #[serde(rename = "creditForDocumentId", skip_serializing)]
    pub credit_for_document_id: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
}
pub mod invoice_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Due,
        OverDue,
        Paid,
        Void,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InvoiceType {
        AzureService,
        AzureMarketplace,
        AzureSupport,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DocumentType {
        Invoice,
        CreditNote,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentProperties {
    #[serde(rename = "paymentType", skip_serializing)]
    pub payment_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Amount>,
    #[serde(skip_serializing)]
    pub date: Option<String>,
    #[serde(rename = "paymentMethodFamily", skip_serializing_if = "Option::is_none")]
    pub payment_method_family: Option<payment_properties::PaymentMethodFamily>,
    #[serde(rename = "paymentMethodType", skip_serializing)]
    pub payment_method_type: Option<String>,
}
pub mod payment_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PaymentMethodFamily {
        Credits,
        CheckWire,
        CreditCard,
        None,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RebillDetails {
    #[serde(rename = "creditNoteDocumentId", skip_serializing)]
    pub credit_note_document_id: Option<String>,
    #[serde(rename = "invoiceDocumentId", skip_serializing)]
    pub invoice_document_id: Option<String>,
    #[serde(rename = "rebillDetails", skip_serializing)]
    pub rebill_details: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Document {
    #[serde(skip_serializing)]
    pub kind: Option<document::Kind>,
    #[serde(skip_serializing)]
    pub url: Option<String>,
    #[serde(skip_serializing)]
    pub source: Option<document::Source>,
}
pub mod document {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        Invoice,
        VoidNote,
        TaxReceipt,
        CreditNote,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Source {
        #[serde(rename = "DRS")]
        Drs,
        #[serde(rename = "ENF")]
        Enf,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Product>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Product {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductProperties {
    #[serde(rename = "autoRenew", skip_serializing_if = "Option::is_none")]
    pub auto_renew: Option<product_properties::AutoRenew>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "purchaseDate", skip_serializing)]
    pub purchase_date: Option<String>,
    #[serde(rename = "productTypeId", skip_serializing)]
    pub product_type_id: Option<String>,
    #[serde(rename = "productType", skip_serializing)]
    pub product_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<product_properties::Status>,
    #[serde(rename = "endDate", skip_serializing)]
    pub end_date: Option<String>,
    #[serde(rename = "billingFrequency", skip_serializing_if = "Option::is_none")]
    pub billing_frequency: Option<product_properties::BillingFrequency>,
    #[serde(rename = "lastCharge", skip_serializing_if = "Option::is_none")]
    pub last_charge: Option<Amount>,
    #[serde(rename = "lastChargeDate", skip_serializing)]
    pub last_charge_date: Option<String>,
    #[serde(skip_serializing)]
    pub quantity: Option<f64>,
    #[serde(rename = "skuId", skip_serializing)]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
    #[serde(rename = "tenantId", skip_serializing)]
    pub tenant_id: Option<String>,
    #[serde(rename = "availabilityId", skip_serializing)]
    pub availability_id: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionDisplayName", skip_serializing)]
    pub invoice_section_display_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "customerId", skip_serializing)]
    pub customer_id: Option<String>,
    #[serde(rename = "customerDisplayName", skip_serializing)]
    pub customer_display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reseller: Option<Reseller>,
}
pub mod product_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AutoRenew {
        Off,
        On,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Active,
        Inactive,
        PastDue,
        Expiring,
        Expired,
        Disabled,
        Cancelled,
        AutoRenew,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingFrequency {
        OneTime,
        Monthly,
        UsageBased,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateProductTransferEligibilityResult {
    #[serde(rename = "isMoveEligible", skip_serializing)]
    pub is_move_eligible: Option<bool>,
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<ValidateProductTransferEligibilityError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateProductTransferEligibilityError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<ProductTransferValidationErrorCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ProductTransferValidationErrorCode {
    InvalidSource,
    ProductNotActive,
    InsufficientPermissionOnSource,
    InsufficientPermissionOnDestination,
    DestinationBillingProfilePastDue,
    ProductTypeNotSupported,
    CrossBillingAccountNotAllowed,
    NotAvailableForDestinationMarket,
    OneTimePurchaseProductTransferNotAllowed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscriptionsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingSubscription>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscription {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingSubscriptionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingSubscriptionProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
    #[serde(rename = "subscriptionBillingStatus", skip_serializing_if = "Option::is_none")]
    pub subscription_billing_status: Option<billing_subscription_properties::SubscriptionBillingStatus>,
    #[serde(rename = "lastMonthCharges", skip_serializing_if = "Option::is_none")]
    pub last_month_charges: Option<Amount>,
    #[serde(rename = "monthToDateCharges", skip_serializing_if = "Option::is_none")]
    pub month_to_date_charges: Option<Amount>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "customerId", skip_serializing)]
    pub customer_id: Option<String>,
    #[serde(rename = "customerDisplayName", skip_serializing)]
    pub customer_display_name: Option<String>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionDisplayName", skip_serializing)]
    pub invoice_section_display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reseller: Option<Reseller>,
    #[serde(rename = "skuId", skip_serializing_if = "Option::is_none")]
    pub sku_id: Option<String>,
    #[serde(rename = "skuDescription", skip_serializing)]
    pub sku_description: Option<String>,
}
pub mod billing_subscription_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SubscriptionBillingStatus {
        Active,
        Inactive,
        Abandoned,
        Deleted,
        Warning,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountContext {
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "enrollmentAccountName", skip_serializing_if = "Option::is_none")]
    pub enrollment_account_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum TargetCloud {
    #[serde(rename = "USGov")]
    UsGov,
    #[serde(rename = "USNat")]
    UsNat,
    #[serde(rename = "USSec")]
    UsSec,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Transaction>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransactionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<transaction_properties::Kind>,
    #[serde(skip_serializing)]
    pub date: Option<String>,
    #[serde(skip_serializing)]
    pub invoice: Option<String>,
    #[serde(rename = "invoiceId", skip_serializing)]
    pub invoice_id: Option<String>,
    #[serde(rename = "orderId", skip_serializing)]
    pub order_id: Option<String>,
    #[serde(rename = "orderName", skip_serializing)]
    pub order_name: Option<String>,
    #[serde(rename = "productFamily", skip_serializing)]
    pub product_family: Option<String>,
    #[serde(rename = "productTypeId", skip_serializing)]
    pub product_type_id: Option<String>,
    #[serde(rename = "productType", skip_serializing)]
    pub product_type: Option<String>,
    #[serde(rename = "productDescription", skip_serializing)]
    pub product_description: Option<String>,
    #[serde(rename = "transactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<transaction_properties::TransactionType>,
    #[serde(rename = "transactionAmount", skip_serializing_if = "Option::is_none")]
    pub transaction_amount: Option<Amount>,
    #[serde(skip_serializing)]
    pub quantity: Option<i32>,
    #[serde(rename = "invoiceSectionId", skip_serializing)]
    pub invoice_section_id: Option<String>,
    #[serde(rename = "invoiceSectionDisplayName", skip_serializing)]
    pub invoice_section_display_name: Option<String>,
    #[serde(rename = "billingProfileId", skip_serializing)]
    pub billing_profile_id: Option<String>,
    #[serde(rename = "billingProfileDisplayName", skip_serializing)]
    pub billing_profile_display_name: Option<String>,
    #[serde(rename = "customerId", skip_serializing)]
    pub customer_id: Option<String>,
    #[serde(rename = "customerDisplayName", skip_serializing)]
    pub customer_display_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
    #[serde(rename = "subscriptionName", skip_serializing)]
    pub subscription_name: Option<String>,
    #[serde(rename = "azurePlan", skip_serializing)]
    pub azure_plan: Option<String>,
    #[serde(rename = "azureCreditApplied", skip_serializing_if = "Option::is_none")]
    pub azure_credit_applied: Option<Amount>,
    #[serde(rename = "billingCurrency", skip_serializing)]
    pub billing_currency: Option<String>,
    #[serde(skip_serializing)]
    pub discount: Option<f64>,
    #[serde(rename = "effectivePrice", skip_serializing_if = "Option::is_none")]
    pub effective_price: Option<Amount>,
    #[serde(rename = "exchangeRate", skip_serializing)]
    pub exchange_rate: Option<f64>,
    #[serde(rename = "marketPrice", skip_serializing_if = "Option::is_none")]
    pub market_price: Option<Amount>,
    #[serde(rename = "pricingCurrency", skip_serializing)]
    pub pricing_currency: Option<String>,
    #[serde(rename = "servicePeriodStartDate", skip_serializing)]
    pub service_period_start_date: Option<String>,
    #[serde(rename = "servicePeriodEndDate", skip_serializing)]
    pub service_period_end_date: Option<String>,
    #[serde(rename = "subTotal", skip_serializing_if = "Option::is_none")]
    pub sub_total: Option<Amount>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tax: Option<Amount>,
    #[serde(rename = "unitOfMeasure", skip_serializing)]
    pub unit_of_measure: Option<String>,
    #[serde(skip_serializing)]
    pub units: Option<f64>,
    #[serde(rename = "unitType", skip_serializing)]
    pub unit_type: Option<String>,
}
pub mod transaction_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "all")]
        All,
        #[serde(rename = "reservation")]
        Reservation,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransactionType {
        Purchase,
        #[serde(rename = "Usage Charge")]
        UsageCharge,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Policy {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PolicyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProperties {
    #[serde(rename = "marketplacePurchases", skip_serializing_if = "Option::is_none")]
    pub marketplace_purchases: Option<policy_properties::MarketplacePurchases>,
    #[serde(rename = "reservationPurchases", skip_serializing_if = "Option::is_none")]
    pub reservation_purchases: Option<policy_properties::ReservationPurchases>,
    #[serde(rename = "viewCharges", skip_serializing_if = "Option::is_none")]
    pub view_charges: Option<policy_properties::ViewCharges>,
}
pub mod policy_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MarketplacePurchases {
        AllAllowed,
        OnlyFreeAllowed,
        NotAllowed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ReservationPurchases {
        Allowed,
        NotAllowed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ViewCharges {
        Allowed,
        NotAllowed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerPolicy {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CustomerPolicyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerPolicyProperties {
    #[serde(rename = "viewCharges", skip_serializing_if = "Option::is_none")]
    pub view_charges: Option<customer_policy_properties::ViewCharges>,
}
pub mod customer_policy_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ViewCharges {
        Allowed,
        NotAllowed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableBalance {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AvailableBalanceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableBalanceProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Amount>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Amount {
    #[serde(skip_serializing)]
    pub currency: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing)]
        pub provider: Option<String>,
        #[serde(skip_serializing)]
        pub resource: Option<String>,
        #[serde(skip_serializing)]
        pub operation: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignmentListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingRoleAssignment>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignment {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingRoleAssignmentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleAssignmentProperties {
    #[serde(rename = "createdOn", skip_serializing)]
    pub created_on: Option<String>,
    #[serde(rename = "createdByPrincipalTenantId", skip_serializing)]
    pub created_by_principal_tenant_id: Option<String>,
    #[serde(rename = "createdByPrincipalId", skip_serializing)]
    pub created_by_principal_id: Option<String>,
    #[serde(rename = "createdByUserEmailAddress", skip_serializing)]
    pub created_by_user_email_address: Option<String>,
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "principalTenantId", skip_serializing_if = "Option::is_none")]
    pub principal_tenant_id: Option<String>,
    #[serde(rename = "roleDefinitionId", skip_serializing_if = "Option::is_none")]
    pub role_definition_id: Option<String>,
    #[serde(skip_serializing)]
    pub scope: Option<String>,
    #[serde(rename = "userAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub user_authentication_type: Option<String>,
    #[serde(rename = "userEmailAddress", skip_serializing_if = "Option::is_none")]
    pub user_email_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinitionListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingRoleDefinition>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinition {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingRoleDefinitionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingRoleDefinitionProperties {
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub permissions: Vec<BillingPermissionsProperties>,
    #[serde(rename = "roleName", skip_serializing)]
    pub role_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPermissionsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingPermissionsProperties>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPermissionsProperties {
    #[serde(skip_serializing)]
    pub actions: Vec<Action>,
    #[serde(rename = "notActions", skip_serializing)]
    pub not_actions: Vec<NotAction>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgreementListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Agreement>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Agreement {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AgreementProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgreementProperties {
    #[serde(rename = "agreementLink", skip_serializing)]
    pub agreement_link: Option<String>,
    #[serde(skip_serializing)]
    pub category: Option<agreement_properties::Category>,
    #[serde(rename = "acceptanceMode", skip_serializing)]
    pub acceptance_mode: Option<agreement_properties::AcceptanceMode>,
    #[serde(rename = "effectiveDate", skip_serializing)]
    pub effective_date: Option<String>,
    #[serde(rename = "expirationDate", skip_serializing)]
    pub expiration_date: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<Participants>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
pub mod agreement_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Category {
        MicrosoftCustomerAgreement,
        AffiliatePurchaseTerms,
        Other,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AcceptanceMode {
        ClickToAccept,
        ESignEmbedded,
        ESignOffline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Participants {
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "statusDate", skip_serializing)]
    pub status_date: Option<String>,
    #[serde(skip_serializing)]
    pub email: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Action {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotAction {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountSummary {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EnrollmentAccountSummaryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountListResult {
    #[serde(skip_serializing)]
    pub value: Vec<EnrollmentAccountSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnrollmentAccountSummaryProperties {
    #[serde(rename = "principalName", skip_serializing)]
    pub principal_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPeriod {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<BillingPeriodProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPeriodsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<BillingPeriod>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingPeriodProperties {
    #[serde(rename = "billingPeriodStartDate", skip_serializing)]
    pub billing_period_start_date: Option<String>,
    #[serde(rename = "billingPeriodEndDate", skip_serializing)]
    pub billing_period_end_date: Option<String>,
    #[serde(rename = "invoiceIds", skip_serializing)]
    pub invoice_ids: Vec<String>,
}
