#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use crate::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Account {
    #[serde(flatten)]
    pub default_dto: DefaultDto,
    pub identity: Identity,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<Account>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountProperties {
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<account_properties::ProvisioningState>,
    #[serde(rename = "userEmail", skip_serializing)]
    pub user_email: Option<String>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod account_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountUpdateParameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen1FileDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: AdlsGen1FileProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen1FileProperties {
    #[serde(rename = "accountName")]
    pub account_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "fileName")]
    pub file_name: String,
    #[serde(rename = "folderPath")]
    pub folder_path: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen1FolderDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: AdlsGen1FolderProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen1FolderProperties {
    #[serde(rename = "accountName")]
    pub account_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "folderPath")]
    pub folder_path: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: AdlsGen2FileProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: AdlsGen2FileDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<adls_gen2_file_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "filePath")]
    pub file_path: String,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "outputType", skip_serializing_if = "Option::is_none")]
    pub output_type: Option<adls_gen2_file_data_set_mapping_properties::OutputType>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<adls_gen2_file_data_set_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod adls_gen2_file_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OutputType {
        Csv,
        Parquet,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "filePath")]
    pub file_path: String,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileSystemDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: AdlsGen2FileSystemProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileSystemDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: AdlsGen2FileSystemDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileSystemDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<adls_gen2_file_system_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<adls_gen2_file_system_data_set_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod adls_gen2_file_system_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FileSystemProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FolderDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: AdlsGen2FolderProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FolderDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: AdlsGen2FolderDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FolderDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<adls_gen2_folder_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "folderPath")]
    pub folder_path: String,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<adls_gen2_folder_data_set_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod adls_gen2_folder_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdlsGen2FolderProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "fileSystem")]
    pub file_system: String,
    #[serde(rename = "folderPath")]
    pub folder_path: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobContainerDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: BlobContainerProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobContainerDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: BlobContainerMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobContainerMappingProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<blob_container_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<blob_container_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod blob_container_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobContainerProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: BlobProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: BlobMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobFolderDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: BlobFolderProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobFolderDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: BlobFolderMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobFolderMappingProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<blob_folder_mapping_properties::DataSetMappingStatus>,
    pub prefix: String,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<blob_folder_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod blob_folder_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobFolderProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    pub prefix: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobMappingProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<blob_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "filePath")]
    pub file_path: String,
    #[serde(rename = "outputType", skip_serializing_if = "Option::is_none")]
    pub output_type: Option<blob_mapping_properties::OutputType>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<blob_mapping_properties::ProvisioningState>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
mod blob_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OutputType {
        Csv,
        Parquet,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlobProperties {
    #[serde(rename = "containerName")]
    pub container_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "filePath")]
    pub file_path: String,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(rename = "storageAccountName")]
    pub storage_account_name: String,
    #[serde(rename = "subscriptionId")]
    pub subscription_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerInvitation {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub properties: ConsumerInvitationProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerInvitationList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ConsumerInvitation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerInvitationProperties {
    #[serde(rename = "dataSetCount", skip_serializing)]
    pub data_set_count: Option<i32>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(rename = "invitationId")]
    pub invitation_id: String,
    #[serde(rename = "invitationStatus", skip_serializing)]
    pub invitation_status: Option<consumer_invitation_properties::InvitationStatus>,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "providerEmail", skip_serializing)]
    pub provider_email: Option<String>,
    #[serde(rename = "providerName", skip_serializing)]
    pub provider_name: Option<String>,
    #[serde(rename = "providerTenantName", skip_serializing)]
    pub provider_tenant_name: Option<String>,
    #[serde(rename = "respondedAt", skip_serializing)]
    pub responded_at: Option<String>,
    #[serde(rename = "sentAt", skip_serializing)]
    pub sent_at: Option<String>,
    #[serde(rename = "shareName", skip_serializing)]
    pub share_name: Option<String>,
    #[serde(rename = "termsOfUse", skip_serializing)]
    pub terms_of_use: Option<String>,
    #[serde(rename = "userEmail", skip_serializing)]
    pub user_email: Option<String>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod consumer_invitation_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InvitationStatus {
        Pending,
        Accepted,
        Rejected,
        Withdrawn,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerSourceDataSet {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ConsumerSourceDataSetProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerSourceDataSetList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ConsumerSourceDataSet>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerSourceDataSetProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "dataSetLocation", skip_serializing)]
    pub data_set_location: Option<String>,
    #[serde(rename = "dataSetName", skip_serializing)]
    pub data_set_name: Option<String>,
    #[serde(rename = "dataSetPath", skip_serializing)]
    pub data_set_path: Option<String>,
    #[serde(rename = "dataSetType", skip_serializing)]
    pub data_set_type: Option<consumer_source_data_set_properties::DataSetType>,
}
mod consumer_source_data_set_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetType {
        Blob,
        Container,
        BlobFolder,
        AdlsGen2FileSystem,
        AdlsGen2Folder,
        AdlsGen2File,
        AdlsGen1Folder,
        AdlsGen1File,
        KustoCluster,
        KustoDatabase,
        #[serde(rename = "SqlDBTable")]
        SqlDbTable,
        #[serde(rename = "SqlDWTable")]
        SqlDwTable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSet {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub kind: data_set::Kind,
}
mod data_set {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        Blob,
        Container,
        BlobFolder,
        AdlsGen2FileSystem,
        AdlsGen2Folder,
        AdlsGen2File,
        AdlsGen1Folder,
        AdlsGen1File,
        KustoCluster,
        KustoDatabase,
        #[serde(rename = "SqlDBTable")]
        SqlDbTable,
        #[serde(rename = "SqlDWTable")]
        SqlDwTable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSetList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<DataSet>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSetMapping {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub kind: data_set_mapping::Kind,
}
mod data_set_mapping {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        Blob,
        Container,
        BlobFolder,
        AdlsGen2FileSystem,
        AdlsGen2Folder,
        AdlsGen2File,
        KustoCluster,
        KustoDatabase,
        #[serde(rename = "SqlDBTable")]
        SqlDbTable,
        #[serde(rename = "SqlDWTable")]
        SqlDwTable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSetMappingList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<DataSetMapping>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataShareError {
    pub error: DataShareErrorInfo,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataShareErrorInfo {
    pub code: String,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<DataShareErrorInfo>,
    pub message: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefaultDto {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DimensionProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Identity {
    #[serde(rename = "principalId", skip_serializing)]
    pub principal_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing)]
    pub tenant_id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<identity::Type>,
}
mod identity {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        SystemAssigned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invitation {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<InvitationProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvitationList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<Invitation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvitationProperties {
    #[serde(rename = "invitationId", skip_serializing)]
    pub invitation_id: Option<String>,
    #[serde(rename = "invitationStatus", skip_serializing)]
    pub invitation_status: Option<invitation_properties::InvitationStatus>,
    #[serde(rename = "respondedAt", skip_serializing)]
    pub responded_at: Option<String>,
    #[serde(rename = "sentAt", skip_serializing)]
    pub sent_at: Option<String>,
    #[serde(rename = "targetActiveDirectoryId", skip_serializing_if = "Option::is_none")]
    pub target_active_directory_id: Option<String>,
    #[serde(rename = "targetEmail", skip_serializing_if = "Option::is_none")]
    pub target_email: Option<String>,
    #[serde(rename = "targetObjectId", skip_serializing_if = "Option::is_none")]
    pub target_object_id: Option<String>,
    #[serde(rename = "userEmail", skip_serializing)]
    pub user_email: Option<String>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod invitation_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InvitationStatus {
        Pending,
        Accepted,
        Rejected,
        Withdrawn,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoClusterDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: KustoClusterDataSetProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoClusterDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: KustoClusterDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoClusterDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<kusto_cluster_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "kustoClusterResourceId")]
    pub kusto_cluster_resource_id: String,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<kusto_cluster_data_set_mapping_properties::ProvisioningState>,
}
mod kusto_cluster_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoClusterDataSetProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "kustoClusterResourceId")]
    pub kusto_cluster_resource_id: String,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<kusto_cluster_data_set_properties::ProvisioningState>,
}
mod kusto_cluster_data_set_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoDatabaseDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    pub properties: KustoDatabaseDataSetProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoDatabaseDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: KustoDatabaseDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoDatabaseDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<kusto_database_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "kustoClusterResourceId")]
    pub kusto_cluster_resource_id: String,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<kusto_database_data_set_mapping_properties::ProvisioningState>,
}
mod kusto_database_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KustoDatabaseDataSetProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "kustoDatabaseResourceId")]
    pub kusto_database_resource_id: String,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<kusto_database_data_set_properties::ProvisioningState>,
}
mod kusto_database_data_set_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<OperationModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetaLogSpecification {
    #[serde(rename = "blobDuration", skip_serializing_if = "Option::is_none")]
    pub blob_duration: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetaMetricSpecification {
    #[serde(rename = "aggregationType", skip_serializing_if = "Option::is_none")]
    pub aggregation_type: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub dimensions: Vec<DimensionProperties>,
    #[serde(rename = "displayDescription", skip_serializing_if = "Option::is_none")]
    pub display_description: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "enableRegionalMdmAccount", skip_serializing_if = "Option::is_none")]
    pub enable_regional_mdm_account: Option<String>,
    #[serde(rename = "internalMetricName", skip_serializing_if = "Option::is_none")]
    pub internal_metric_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "resourceIdDimensionNameOverride", skip_serializing_if = "Option::is_none")]
    pub resource_id_dimension_name_override: Option<String>,
    #[serde(rename = "supportedAggregationTypes", skip_serializing_if = "Vec::is_empty")]
    pub supported_aggregation_types: Vec<String>,
    #[serde(rename = "supportedTimeGrainTypes", skip_serializing_if = "Vec::is_empty")]
    pub supported_time_grain_types: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetaPropertyInfo {
    #[serde(rename = "serviceSpecification", skip_serializing_if = "Option::is_none")]
    pub service_specification: Option<OperationMetaServiceSpecification>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetaServiceSpecification {
    #[serde(rename = "logSpecifications", skip_serializing_if = "Vec::is_empty")]
    pub log_specifications: Vec<OperationMetaLogSpecification>,
    #[serde(rename = "metricSpecifications", skip_serializing_if = "Vec::is_empty")]
    pub metric_specifications: Vec<OperationMetaMetricSpecification>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationModel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<OperationModelProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OperationMetaPropertyInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationModelProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResponse {
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<DataShareErrorInfo>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    pub status: operation_response::Status,
}
mod operation_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Accepted,
        InProgress,
        TransientFailure,
        Succeeded,
        Failed,
        Canceled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderShareSubscription {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProviderShareSubscriptionProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderShareSubscriptionList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ProviderShareSubscription>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderShareSubscriptionProperties {
    #[serde(rename = "consumerEmail", skip_serializing)]
    pub consumer_email: Option<String>,
    #[serde(rename = "consumerName", skip_serializing)]
    pub consumer_name: Option<String>,
    #[serde(rename = "consumerTenantName", skip_serializing)]
    pub consumer_tenant_name: Option<String>,
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "providerEmail", skip_serializing)]
    pub provider_email: Option<String>,
    #[serde(rename = "providerName", skip_serializing)]
    pub provider_name: Option<String>,
    #[serde(rename = "sharedAt", skip_serializing)]
    pub shared_at: Option<String>,
    #[serde(rename = "shareSubscriptionObjectId", skip_serializing)]
    pub share_subscription_object_id: Option<String>,
    #[serde(rename = "shareSubscriptionStatus", skip_serializing)]
    pub share_subscription_status: Option<provider_share_subscription_properties::ShareSubscriptionStatus>,
}
mod provider_share_subscription_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareSubscriptionStatus {
        Active,
        Revoked,
        SourceDeleted,
        Revoking,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProxyDto {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledSourceShareSynchronizationSettingProperties {
    #[serde(rename = "recurrenceInterval", skip_serializing_if = "Option::is_none")]
    pub recurrence_interval: Option<scheduled_source_share_synchronization_setting_properties::RecurrenceInterval>,
    #[serde(rename = "synchronizationTime", skip_serializing_if = "Option::is_none")]
    pub synchronization_time: Option<String>,
}
mod scheduled_source_share_synchronization_setting_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecurrenceInterval {
        Hour,
        Day,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledSourceSynchronizationSetting {
    #[serde(flatten)]
    pub source_share_synchronization_setting: SourceShareSynchronizationSetting,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScheduledSourceShareSynchronizationSettingProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledSynchronizationSetting {
    #[serde(flatten)]
    pub synchronization_setting: SynchronizationSetting,
    pub properties: ScheduledSynchronizationSettingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledSynchronizationSettingProperties {
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<scheduled_synchronization_setting_properties::ProvisioningState>,
    #[serde(rename = "recurrenceInterval")]
    pub recurrence_interval: scheduled_synchronization_setting_properties::RecurrenceInterval,
    #[serde(rename = "synchronizationTime")]
    pub synchronization_time: String,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod scheduled_synchronization_setting_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecurrenceInterval {
        Hour,
        Day,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledTrigger {
    #[serde(flatten)]
    pub trigger: Trigger,
    pub properties: ScheduledTriggerProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledTriggerProperties {
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<scheduled_trigger_properties::ProvisioningState>,
    #[serde(rename = "recurrenceInterval")]
    pub recurrence_interval: scheduled_trigger_properties::RecurrenceInterval,
    #[serde(rename = "synchronizationMode", skip_serializing_if = "Option::is_none")]
    pub synchronization_mode: Option<scheduled_trigger_properties::SynchronizationMode>,
    #[serde(rename = "synchronizationTime")]
    pub synchronization_time: String,
    #[serde(rename = "triggerStatus", skip_serializing)]
    pub trigger_status: Option<scheduled_trigger_properties::TriggerStatus>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod scheduled_trigger_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecurrenceInterval {
        Hour,
        Day,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SynchronizationMode {
        Incremental,
        FullSync,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TriggerStatus {
        Active,
        Inactive,
        SourceSynchronizationSettingDeleted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Share {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ShareProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<Share>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareProperties {
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<share_properties::ProvisioningState>,
    #[serde(rename = "shareKind", skip_serializing_if = "Option::is_none")]
    pub share_kind: Option<share_properties::ShareKind>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub terms: Option<String>,
    #[serde(rename = "userEmail", skip_serializing)]
    pub user_email: Option<String>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod share_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareKind {
        CopyBased,
        InPlace,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSubscription {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub properties: ShareSubscriptionProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSubscriptionList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ShareSubscription>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSubscriptionProperties {
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "invitationId")]
    pub invitation_id: String,
    #[serde(rename = "providerEmail", skip_serializing)]
    pub provider_email: Option<String>,
    #[serde(rename = "providerName", skip_serializing)]
    pub provider_name: Option<String>,
    #[serde(rename = "providerTenantName", skip_serializing)]
    pub provider_tenant_name: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<share_subscription_properties::ProvisioningState>,
    #[serde(rename = "shareDescription", skip_serializing)]
    pub share_description: Option<String>,
    #[serde(rename = "shareKind", skip_serializing)]
    pub share_kind: Option<share_subscription_properties::ShareKind>,
    #[serde(rename = "shareName", skip_serializing)]
    pub share_name: Option<String>,
    #[serde(rename = "shareSubscriptionStatus", skip_serializing)]
    pub share_subscription_status: Option<share_subscription_properties::ShareSubscriptionStatus>,
    #[serde(rename = "shareTerms", skip_serializing)]
    pub share_terms: Option<String>,
    #[serde(rename = "sourceShareLocation")]
    pub source_share_location: String,
    #[serde(rename = "userEmail", skip_serializing)]
    pub user_email: Option<String>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
}
mod share_subscription_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareKind {
        CopyBased,
        InPlace,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareSubscriptionStatus {
        Active,
        Revoked,
        SourceDeleted,
        Revoking,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSubscriptionSynchronization {
    #[serde(rename = "durationMs", skip_serializing)]
    pub duration_ms: Option<i32>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "synchronizationId")]
    pub synchronization_id: String,
    #[serde(rename = "synchronizationMode", skip_serializing)]
    pub synchronization_mode: Option<share_subscription_synchronization::SynchronizationMode>,
}
mod share_subscription_synchronization {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SynchronizationMode {
        Incremental,
        FullSync,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSubscriptionSynchronizationList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ShareSubscriptionSynchronization>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSynchronization {
    #[serde(rename = "consumerEmail", skip_serializing_if = "Option::is_none")]
    pub consumer_email: Option<String>,
    #[serde(rename = "consumerName", skip_serializing_if = "Option::is_none")]
    pub consumer_name: Option<String>,
    #[serde(rename = "consumerTenantName", skip_serializing_if = "Option::is_none")]
    pub consumer_tenant_name: Option<String>,
    #[serde(rename = "durationMs", skip_serializing_if = "Option::is_none")]
    pub duration_ms: Option<i32>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "synchronizationId", skip_serializing_if = "Option::is_none")]
    pub synchronization_id: Option<String>,
    #[serde(rename = "synchronizationMode", skip_serializing)]
    pub synchronization_mode: Option<share_synchronization::SynchronizationMode>,
}
mod share_synchronization {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SynchronizationMode {
        Incremental,
        FullSync,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareSynchronizationList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<ShareSynchronization>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceShareSynchronizationSetting {
    pub kind: source_share_synchronization_setting::Kind,
}
mod source_share_synchronization_setting {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        ScheduleBased,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceShareSynchronizationSettingList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<SourceShareSynchronizationSetting>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDbTableDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SqlDbTableProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDbTableDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: SqlDbTableDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDbTableDataSetMappingProperties {
    #[serde(rename = "databaseName")]
    pub database_name: String,
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<sql_db_table_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<sql_db_table_data_set_mapping_properties::ProvisioningState>,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
    #[serde(rename = "sqlServerResourceId")]
    pub sql_server_resource_id: String,
    #[serde(rename = "tableName")]
    pub table_name: String,
}
mod sql_db_table_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDbTableProperties {
    #[serde(rename = "databaseName")]
    pub database_name: String,
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
    #[serde(rename = "sqlServerResourceId")]
    pub sql_server_resource_id: String,
    #[serde(rename = "tableName")]
    pub table_name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDwTableDataSet {
    #[serde(flatten)]
    pub data_set: DataSet,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SqlDwTableProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDwTableDataSetMapping {
    #[serde(flatten)]
    pub data_set_mapping: DataSetMapping,
    pub properties: SqlDwTableDataSetMappingProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDwTableDataSetMappingProperties {
    #[serde(rename = "dataSetId")]
    pub data_set_id: String,
    #[serde(rename = "dataSetMappingStatus", skip_serializing)]
    pub data_set_mapping_status: Option<sql_dw_table_data_set_mapping_properties::DataSetMappingStatus>,
    #[serde(rename = "dataWarehouseName")]
    pub data_warehouse_name: String,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<sql_dw_table_data_set_mapping_properties::ProvisioningState>,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
    #[serde(rename = "sqlServerResourceId")]
    pub sql_server_resource_id: String,
    #[serde(rename = "tableName")]
    pub table_name: String,
}
mod sql_dw_table_data_set_mapping_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetMappingStatus {
        Ok,
        Broken,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProvisioningState {
        Succeeded,
        Creating,
        Deleting,
        Moving,
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlDwTableProperties {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "dataWarehouseName")]
    pub data_warehouse_name: String,
    #[serde(rename = "schemaName")]
    pub schema_name: String,
    #[serde(rename = "sqlServerResourceId")]
    pub sql_server_resource_id: String,
    #[serde(rename = "tableName")]
    pub table_name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SynchronizationDetails {
    #[serde(rename = "dataSetId", skip_serializing)]
    pub data_set_id: Option<String>,
    #[serde(rename = "dataSetType", skip_serializing)]
    pub data_set_type: Option<synchronization_details::DataSetType>,
    #[serde(rename = "durationMs", skip_serializing)]
    pub duration_ms: Option<i32>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(rename = "filesRead", skip_serializing)]
    pub files_read: Option<i64>,
    #[serde(rename = "filesWritten", skip_serializing)]
    pub files_written: Option<i64>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "rowsCopied", skip_serializing)]
    pub rows_copied: Option<i64>,
    #[serde(rename = "rowsRead", skip_serializing)]
    pub rows_read: Option<i64>,
    #[serde(rename = "sizeRead", skip_serializing)]
    pub size_read: Option<i64>,
    #[serde(rename = "sizeWritten", skip_serializing)]
    pub size_written: Option<i64>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "vCore", skip_serializing)]
    pub v_core: Option<i64>,
}
mod synchronization_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSetType {
        Blob,
        Container,
        BlobFolder,
        AdlsGen2FileSystem,
        AdlsGen2Folder,
        AdlsGen2File,
        AdlsGen1Folder,
        AdlsGen1File,
        KustoCluster,
        KustoDatabase,
        #[serde(rename = "SqlDBTable")]
        SqlDbTable,
        #[serde(rename = "SqlDWTable")]
        SqlDwTable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SynchronizationDetailsList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<SynchronizationDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SynchronizationSetting {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub kind: synchronization_setting::Kind,
}
mod synchronization_setting {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        ScheduleBased,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SynchronizationSettingList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<SynchronizationSetting>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Synchronize {
    #[serde(rename = "synchronizationMode", skip_serializing_if = "Option::is_none")]
    pub synchronization_mode: Option<synchronize::SynchronizationMode>,
}
mod synchronize {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SynchronizationMode {
        Incremental,
        FullSync,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trigger {
    #[serde(flatten)]
    pub proxy_dto: ProxyDto,
    pub kind: trigger::Kind,
}
mod trigger {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        ScheduleBased,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TriggerList {
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    pub value: Vec<Trigger>,
}
