#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod accounts {
    use crate::{models::*, *};
    pub async fn list_by_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        skip_token: Option<&str>,
    ) -> Result<AccountList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DataShare/accounts",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        account: &Account,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(account);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        account_update_parameters: &AccountUpdateParameters,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(account_update_parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<OperationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        skip_token: Option<&str>,
    ) -> Result<AccountList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod consumer_invitations {
    use crate::{models::*, *};
    pub async fn list_invitations(configuration: &Configuration, skip_token: Option<&str>) -> Result<ConsumerInvitationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.DataShare/ListInvitations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, location: &str, invitation_id: &str) -> Result<ConsumerInvitation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.DataShare/locations/{}/consumerInvitations/{}",
            &configuration.base_path, location, invitation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn reject_invitation(
        configuration: &Configuration,
        location: &str,
        invitation: &ConsumerInvitation,
    ) -> Result<ConsumerInvitation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.DataShare/locations/{}/RejectInvitation",
            &configuration.base_path, location
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(invitation);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod data_sets {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        data_set_name: &str,
    ) -> Result<DataSet> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/dataSets/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, data_set_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        data_set_name: &str,
        data_set: &DataSet,
    ) -> Result<DataSet> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/dataSets/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, data_set_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(data_set);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        data_set_name: &str,
    ) -> Result<DataShareError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/dataSets/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, data_set_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<DataSetList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/dataSets",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod data_set_mappings {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        data_set_mapping_name: &str,
    ) -> Result<DataSetMapping> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/dataSetMappings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, data_set_mapping_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        data_set_mapping_name: &str,
        data_set_mapping: &DataSetMapping,
    ) -> Result<DataSetMapping> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/dataSetMappings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, data_set_mapping_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(data_set_mapping);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        data_set_mapping_name: &str,
    ) -> Result<DataShareError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/dataSetMappings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, data_set_mapping_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<DataSetMappingList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/dataSetMappings",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod invitations {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        invitation_name: &str,
    ) -> Result<Invitation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/invitations/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, invitation_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        invitation_name: &str,
        invitation: &Invitation,
    ) -> Result<Invitation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/invitations/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, invitation_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(invitation);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        invitation_name: &str,
    ) -> Result<DataShareError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/invitations/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, invitation_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<InvitationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/invitations",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.DataShare/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod shares {
    use crate::{models::*, *};
    pub async fn list_synchronization_details(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        share_synchronization: &ShareSynchronization,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<SynchronizationDetailsList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/listSynchronizationDetails",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(share_synchronization);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_synchronizations(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<ShareSynchronizationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/listSynchronizations",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
    ) -> Result<Share> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        share: &Share,
    ) -> Result<Share> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(share);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
    ) -> Result<OperationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_account(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<ShareList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod provider_share_subscriptions {
    use crate::{models::*, *};
    pub async fn reinstate(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        provider_share_subscription_id: &str,
    ) -> Result<ProviderShareSubscription> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/providerShareSubscriptions/{}/reinstate" , & configuration . base_path , subscription_id , resource_group_name , account_name , share_name , provider_share_subscription_id) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn revoke(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        provider_share_subscription_id: &str,
    ) -> Result<ProviderShareSubscription> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/providerShareSubscriptions/{}/revoke" , & configuration . base_path , subscription_id , resource_group_name , account_name , share_name , provider_share_subscription_id) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_by_share(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        provider_share_subscription_id: &str,
    ) -> Result<ProviderShareSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/providerShareSubscriptions/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, provider_share_subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        skip_token: Option<&str>,
    ) -> Result<ProviderShareSubscriptionList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/providerShareSubscriptions",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod share_subscriptions {
    use crate::{models::*, *};
    pub async fn cancel_synchronization(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        share_subscription_synchronization: &ShareSubscriptionSynchronization,
    ) -> Result<ShareSubscriptionSynchronization> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/cancelSynchronization",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(share_subscription_synchronization);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_source_share_synchronization_settings(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        skip_token: Option<&str>,
    ) -> Result<SourceShareSynchronizationSettingList> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/listSourceShareSynchronizationSettings" , & configuration . base_path , subscription_id , resource_group_name , account_name , share_subscription_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_synchronization_details(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        share_subscription_synchronization: &ShareSubscriptionSynchronization,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<SynchronizationDetailsList> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/listSynchronizationDetails" , & configuration . base_path , subscription_id , resource_group_name , account_name , share_subscription_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(share_subscription_synchronization);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_synchronizations(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<ShareSubscriptionSynchronizationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/listSynchronizations",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn synchronize(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        synchronize: &Synchronize,
    ) -> Result<ShareSubscriptionSynchronization> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/Synchronize",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(synchronize);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
    ) -> Result<ShareSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        share_subscription: &ShareSubscription,
    ) -> Result<ShareSubscription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(share_subscription);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
    ) -> Result<OperationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_account(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        skip_token: Option<&str>,
        filter: Option<&str>,
        orderby: Option<&str>,
    ) -> Result<ShareSubscriptionList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod consumer_source_data_sets {
    use crate::{models::*, *};
    pub async fn list_by_share_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        skip_token: Option<&str>,
    ) -> Result<ConsumerSourceDataSetList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/ConsumerSourceDataSets",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod synchronization_settings {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        synchronization_setting_name: &str,
    ) -> Result<SynchronizationSetting> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/synchronizationSettings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, synchronization_setting_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        synchronization_setting_name: &str,
        synchronization_setting: &SynchronizationSetting,
    ) -> Result<SynchronizationSetting> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/synchronizationSettings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, synchronization_setting_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(synchronization_setting);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        synchronization_setting_name: &str,
    ) -> Result<OperationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/synchronizationSettings/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name, synchronization_setting_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_name: &str,
        skip_token: Option<&str>,
    ) -> Result<SynchronizationSettingList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shares/{}/synchronizationSettings",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod triggers {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        trigger_name: &str,
    ) -> Result<Trigger> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/triggers/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, trigger_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        trigger_name: &str,
        trigger: &Trigger,
    ) -> Result<Trigger> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/triggers/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, trigger_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(trigger);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        trigger_name: &str,
    ) -> Result<OperationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/triggers/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name, trigger_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_share_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        share_subscription_name: &str,
        skip_token: Option<&str>,
    ) -> Result<TriggerList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DataShare/accounts/{}/shareSubscriptions/{}/triggers",
            &configuration.base_path, subscription_id, resource_group_name, account_name, share_subscription_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
