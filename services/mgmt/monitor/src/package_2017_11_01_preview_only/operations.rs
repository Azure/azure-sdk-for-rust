#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
use reqwest::StatusCode;
use snafu::{ResultExt, Snafu};
pub mod metric_baseline {
    use crate::models::*;
    use reqwest::StatusCode;
    use snafu::{ResultExt, Snafu};
    pub async fn get(
        operation_config: &crate::OperationConfig,
        resource_uri: &str,
        metric_name: &str,
        timespan: Option<&str>,
        interval: Option<&str>,
        aggregation: Option<&str>,
        sensitivities: Option<&str>,
        result_type: Option<&str>,
    ) -> std::result::Result<BaselineResponse, get::Error> {
        let client = &operation_config.client;
        let uri_str = &format!(
            "{}/{}/providers/microsoft.insights/baseline/{}",
            &operation_config.base_path, resource_uri, metric_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token_credential) = &operation_config.token_credential {
            let token_response = token_credential
                .get_token(&operation_config.token_credential_resource)
                .await
                .context(get::GetTokenError)?;
            req_builder = req_builder.bearer_auth(token_response.token.secret());
        }
        req_builder = req_builder.query(&[("api-version", &operation_config.api_version)]);
        if let Some(timespan) = timespan {
            req_builder = req_builder.query(&[("timespan", timespan)]);
        }
        if let Some(interval) = interval {
            req_builder = req_builder.query(&[("interval", interval)]);
        }
        if let Some(aggregation) = aggregation {
            req_builder = req_builder.query(&[("aggregation", aggregation)]);
        }
        if let Some(sensitivities) = sensitivities {
            req_builder = req_builder.query(&[("sensitivities", sensitivities)]);
        }
        if let Some(result_type) = result_type {
            req_builder = req_builder.query(&[("resultType", result_type)]);
        }
        let req = req_builder.build().context(get::BuildRequestError)?;
        let rsp = client.execute(req).await.context(get::ExecuteRequestError)?;
        match rsp.status() {
            StatusCode::OK => {
                let body: bytes::Bytes = rsp.bytes().await.context(get::ResponseBytesError)?;
                let rsp_value: BaselineResponse = serde_json::from_slice(&body).context(get::DeserializeError { body })?;
                Ok(rsp_value)
            }
            status_code => {
                let body: bytes::Bytes = rsp.bytes().await.context(get::ResponseBytesError)?;
                let rsp_value: ErrorResponse = serde_json::from_slice(&body).context(get::DeserializeError { body })?;
                get::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get {
        use crate::{models, models::*};
        use reqwest::StatusCode;
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: StatusCode,
                value: models::ErrorResponse,
            },
            BuildRequestError {
                source: reqwest::Error,
            },
            ExecuteRequestError {
                source: reqwest::Error,
            },
            ResponseBytesError {
                source: reqwest::Error,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn calculate_baseline(
        operation_config: &crate::OperationConfig,
        resource_uri: &str,
        time_series_information: &TimeSeriesInformation,
    ) -> std::result::Result<CalculateBaselineResponse, calculate_baseline::Error> {
        let client = &operation_config.client;
        let uri_str = &format!(
            "{}/{}/providers/microsoft.insights/calculatebaseline",
            &operation_config.base_path, resource_uri
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token_credential) = &operation_config.token_credential {
            let token_response = token_credential
                .get_token(&operation_config.token_credential_resource)
                .await
                .context(calculate_baseline::GetTokenError)?;
            req_builder = req_builder.bearer_auth(token_response.token.secret());
        }
        req_builder = req_builder.query(&[("api-version", &operation_config.api_version)]);
        req_builder = req_builder.json(time_series_information);
        let req = req_builder.build().context(calculate_baseline::BuildRequestError)?;
        let rsp = client.execute(req).await.context(calculate_baseline::ExecuteRequestError)?;
        match rsp.status() {
            StatusCode::OK => {
                let body: bytes::Bytes = rsp.bytes().await.context(calculate_baseline::ResponseBytesError)?;
                let rsp_value: CalculateBaselineResponse =
                    serde_json::from_slice(&body).context(calculate_baseline::DeserializeError { body })?;
                Ok(rsp_value)
            }
            status_code => {
                let body: bytes::Bytes = rsp.bytes().await.context(calculate_baseline::ResponseBytesError)?;
                let rsp_value: ErrorResponse = serde_json::from_slice(&body).context(calculate_baseline::DeserializeError { body })?;
                calculate_baseline::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod calculate_baseline {
        use crate::{models, models::*};
        use reqwest::StatusCode;
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: StatusCode,
                value: models::ErrorResponse,
            },
            BuildRequestError {
                source: reqwest::Error,
            },
            ExecuteRequestError {
                source: reqwest::Error,
            },
            ResponseBytesError {
                source: reqwest::Error,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
}
