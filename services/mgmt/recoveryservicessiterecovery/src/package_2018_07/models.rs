#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aAddDisksInput {
    #[serde(flatten)]
    pub add_disks_provider_specific_input: AddDisksProviderSpecificInput,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aVmDiskInputDetails>,
    #[serde(rename = "vmManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks: Vec<A2aVmManagedDiskInputDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aApplyRecoveryPointInput {
    #[serde(flatten)]
    pub apply_recovery_point_provider_specific_input: ApplyRecoveryPointProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aContainerCreationInput {
    #[serde(flatten)]
    pub replication_provider_specific_container_creation_input: ReplicationProviderSpecificContainerCreationInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aContainerMappingInput {
    #[serde(flatten)]
    pub replication_provider_specific_container_mapping_input: ReplicationProviderSpecificContainerMappingInput,
    #[serde(rename = "agentAutoUpdateStatus", skip_serializing_if = "Option::is_none")]
    pub agent_auto_update_status: Option<a2a_container_mapping_input::AgentAutoUpdateStatus>,
    #[serde(rename = "automationAccountArmId", skip_serializing_if = "Option::is_none")]
    pub automation_account_arm_id: Option<String>,
}
pub mod a2a_container_mapping_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgentAutoUpdateStatus {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aCreateProtectionIntentInput {
    #[serde(flatten)]
    pub create_protection_intent_provider_specific_details: CreateProtectionIntentProviderSpecificDetails,
    #[serde(rename = "fabricObjectId")]
    pub fabric_object_id: String,
    #[serde(rename = "primaryLocation")]
    pub primary_location: String,
    #[serde(rename = "recoveryLocation")]
    pub recovery_location: String,
    #[serde(rename = "recoverySubscriptionId")]
    pub recovery_subscription_id: String,
    #[serde(rename = "recoveryAvailabilityType")]
    pub recovery_availability_type: a2a_create_protection_intent_input::RecoveryAvailabilityType,
    #[serde(rename = "protectionProfileCustomInput", skip_serializing_if = "Option::is_none")]
    pub protection_profile_custom_input: Option<ProtectionProfileCustomDetails>,
    #[serde(rename = "recoveryResourceGroupId")]
    pub recovery_resource_group_id: String,
    #[serde(rename = "primaryStagingStorageAccountCustomInput", skip_serializing_if = "Option::is_none")]
    pub primary_staging_storage_account_custom_input: Option<StorageAccountCustomDetails>,
    #[serde(rename = "recoveryAvailabilitySetCustomInput", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_custom_input: Option<RecoveryAvailabilitySetCustomDetails>,
    #[serde(rename = "recoveryVirtualNetworkCustomInput", skip_serializing_if = "Option::is_none")]
    pub recovery_virtual_network_custom_input: Option<RecoveryVirtualNetworkCustomDetails>,
    #[serde(rename = "recoveryProximityPlacementGroupCustomInput", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_custom_input: Option<RecoveryProximityPlacementGroupCustomDetails>,
    #[serde(rename = "autoProtectionOfDataDisk", skip_serializing_if = "Option::is_none")]
    pub auto_protection_of_data_disk: Option<a2a_create_protection_intent_input::AutoProtectionOfDataDisk>,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aProtectionIntentDiskInputDetails>,
    #[serde(rename = "vmManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks: Vec<A2aProtectionIntentManagedDiskInputDetails>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "recoveryBootDiagStorageAccount", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account: Option<StorageAccountCustomDetails>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
    #[serde(rename = "recoveryAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_zone: Option<String>,
}
pub mod a2a_create_protection_intent_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryAvailabilityType {
        Single,
        AvailabilitySet,
        AvailabilityZone,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AutoProtectionOfDataDisk {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aEnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
    #[serde(rename = "fabricObjectId", skip_serializing_if = "Option::is_none")]
    pub fabric_object_id: Option<String>,
    #[serde(rename = "recoveryContainerId", skip_serializing_if = "Option::is_none")]
    pub recovery_container_id: Option<String>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryCloudServiceId", skip_serializing_if = "Option::is_none")]
    pub recovery_cloud_service_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aVmDiskInputDetails>,
    #[serde(rename = "vmManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks: Vec<A2aVmManagedDiskInputDetails>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "recoveryBootDiagStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
    #[serde(rename = "recoveryAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_zone: Option<String>,
    #[serde(rename = "recoveryAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_network_id: Option<String>,
    #[serde(rename = "recoverySubnetName", skip_serializing_if = "Option::is_none")]
    pub recovery_subnet_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aEventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "protectedItemName", skip_serializing_if = "Option::is_none")]
    pub protected_item_name: Option<String>,
    #[serde(rename = "fabricObjectId", skip_serializing_if = "Option::is_none")]
    pub fabric_object_id: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "fabricLocation", skip_serializing_if = "Option::is_none")]
    pub fabric_location: Option<String>,
    #[serde(rename = "remoteFabricName", skip_serializing_if = "Option::is_none")]
    pub remote_fabric_name: Option<String>,
    #[serde(rename = "remoteFabricLocation", skip_serializing_if = "Option::is_none")]
    pub remote_fabric_location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aFailoverProviderInput {
    #[serde(flatten)]
    pub provider_specific_failover_input: ProviderSpecificFailoverInput,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
    #[serde(rename = "cloudServiceCreationOption", skip_serializing_if = "Option::is_none")]
    pub cloud_service_creation_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aPolicyCreationInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus")]
    pub multi_vm_sync_status: a2a_policy_creation_input::MultiVmSyncStatus,
}
pub mod a2a_policy_creation_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncStatus {
        Enable,
        Disable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aPolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aProtectedDiskDetails {
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "recoveryAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account_id: Option<String>,
    #[serde(rename = "primaryDiskAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_disk_azure_storage_account_id: Option<String>,
    #[serde(rename = "recoveryDiskUri", skip_serializing_if = "Option::is_none")]
    pub recovery_disk_uri: Option<String>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "diskCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub disk_capacity_in_bytes: Option<i64>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<String>,
    #[serde(rename = "resyncRequired", skip_serializing_if = "Option::is_none")]
    pub resync_required: Option<bool>,
    #[serde(rename = "monitoringPercentageCompletion", skip_serializing_if = "Option::is_none")]
    pub monitoring_percentage_completion: Option<i32>,
    #[serde(rename = "monitoringJobType", skip_serializing_if = "Option::is_none")]
    pub monitoring_job_type: Option<String>,
    #[serde(rename = "dataPendingInStagingStorageAccountInMB", skip_serializing_if = "Option::is_none")]
    pub data_pending_in_staging_storage_account_in_mb: Option<f64>,
    #[serde(rename = "dataPendingAtSourceAgentInMB", skip_serializing_if = "Option::is_none")]
    pub data_pending_at_source_agent_in_mb: Option<f64>,
    #[serde(rename = "diskState", skip_serializing_if = "Option::is_none")]
    pub disk_state: Option<String>,
    #[serde(rename = "allowedDiskLevelOperation", skip_serializing_if = "Vec::is_empty")]
    pub allowed_disk_level_operation: Vec<String>,
    #[serde(rename = "isDiskEncrypted", skip_serializing_if = "Option::is_none")]
    pub is_disk_encrypted: Option<bool>,
    #[serde(rename = "secretIdentifier", skip_serializing_if = "Option::is_none")]
    pub secret_identifier: Option<String>,
    #[serde(rename = "dekKeyVaultArmId", skip_serializing_if = "Option::is_none")]
    pub dek_key_vault_arm_id: Option<String>,
    #[serde(rename = "isDiskKeyEncrypted", skip_serializing_if = "Option::is_none")]
    pub is_disk_key_encrypted: Option<bool>,
    #[serde(rename = "keyIdentifier", skip_serializing_if = "Option::is_none")]
    pub key_identifier: Option<String>,
    #[serde(rename = "kekKeyVaultArmId", skip_serializing_if = "Option::is_none")]
    pub kek_key_vault_arm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aProtectedManagedDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryTargetDiskId", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_id: Option<String>,
    #[serde(rename = "recoveryReplicaDiskId", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_id: Option<String>,
    #[serde(rename = "recoveryReplicaDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_account_type: Option<String>,
    #[serde(rename = "recoveryTargetDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_account_type: Option<String>,
    #[serde(rename = "recoveryDiskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub recovery_disk_encryption_set_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "diskCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub disk_capacity_in_bytes: Option<i64>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<String>,
    #[serde(rename = "resyncRequired", skip_serializing_if = "Option::is_none")]
    pub resync_required: Option<bool>,
    #[serde(rename = "monitoringPercentageCompletion", skip_serializing_if = "Option::is_none")]
    pub monitoring_percentage_completion: Option<i32>,
    #[serde(rename = "monitoringJobType", skip_serializing_if = "Option::is_none")]
    pub monitoring_job_type: Option<String>,
    #[serde(rename = "dataPendingInStagingStorageAccountInMB", skip_serializing_if = "Option::is_none")]
    pub data_pending_in_staging_storage_account_in_mb: Option<f64>,
    #[serde(rename = "dataPendingAtSourceAgentInMB", skip_serializing_if = "Option::is_none")]
    pub data_pending_at_source_agent_in_mb: Option<f64>,
    #[serde(rename = "diskState", skip_serializing_if = "Option::is_none")]
    pub disk_state: Option<String>,
    #[serde(rename = "allowedDiskLevelOperation", skip_serializing_if = "Vec::is_empty")]
    pub allowed_disk_level_operation: Vec<String>,
    #[serde(rename = "isDiskEncrypted", skip_serializing_if = "Option::is_none")]
    pub is_disk_encrypted: Option<bool>,
    #[serde(rename = "secretIdentifier", skip_serializing_if = "Option::is_none")]
    pub secret_identifier: Option<String>,
    #[serde(rename = "dekKeyVaultArmId", skip_serializing_if = "Option::is_none")]
    pub dek_key_vault_arm_id: Option<String>,
    #[serde(rename = "isDiskKeyEncrypted", skip_serializing_if = "Option::is_none")]
    pub is_disk_key_encrypted: Option<bool>,
    #[serde(rename = "keyIdentifier", skip_serializing_if = "Option::is_none")]
    pub key_identifier: Option<String>,
    #[serde(rename = "kekKeyVaultArmId", skip_serializing_if = "Option::is_none")]
    pub kek_key_vault_arm_id: Option<String>,
    #[serde(rename = "failoverDiskName", skip_serializing_if = "Option::is_none")]
    pub failover_disk_name: Option<String>,
    #[serde(rename = "tfoDiskName", skip_serializing_if = "Option::is_none")]
    pub tfo_disk_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aProtectionContainerMappingDetails {
    #[serde(flatten)]
    pub protection_container_mapping_provider_specific_details: ProtectionContainerMappingProviderSpecificDetails,
    #[serde(rename = "agentAutoUpdateStatus", skip_serializing_if = "Option::is_none")]
    pub agent_auto_update_status: Option<a2a_protection_container_mapping_details::AgentAutoUpdateStatus>,
    #[serde(rename = "automationAccountArmId", skip_serializing_if = "Option::is_none")]
    pub automation_account_arm_id: Option<String>,
    #[serde(rename = "scheduleName", skip_serializing_if = "Option::is_none")]
    pub schedule_name: Option<String>,
    #[serde(rename = "jobScheduleName", skip_serializing_if = "Option::is_none")]
    pub job_schedule_name: Option<String>,
}
pub mod a2a_protection_container_mapping_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgentAutoUpdateStatus {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aProtectionIntentDiskInputDetails {
    #[serde(rename = "diskUri")]
    pub disk_uri: String,
    #[serde(rename = "recoveryAzureStorageAccountCustomInput", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account_custom_input: Option<StorageAccountCustomDetails>,
    #[serde(rename = "primaryStagingStorageAccountCustomInput", skip_serializing_if = "Option::is_none")]
    pub primary_staging_storage_account_custom_input: Option<StorageAccountCustomDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aProtectionIntentManagedDiskInputDetails {
    #[serde(rename = "diskId")]
    pub disk_id: String,
    #[serde(rename = "primaryStagingStorageAccountCustomInput", skip_serializing_if = "Option::is_none")]
    pub primary_staging_storage_account_custom_input: Option<StorageAccountCustomDetails>,
    #[serde(rename = "recoveryResourceGroupCustomInput", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_custom_input: Option<RecoveryResourceGroupCustomDetails>,
    #[serde(rename = "recoveryReplicaDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_account_type: Option<String>,
    #[serde(rename = "recoveryTargetDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_account_type: Option<String>,
    #[serde(rename = "recoveryDiskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub recovery_disk_encryption_set_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aRecoveryPointDetails {
    #[serde(flatten)]
    pub provider_specific_recovery_point_details: ProviderSpecificRecoveryPointDetails,
    #[serde(rename = "recoveryPointSyncType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_sync_type: Option<a2a_recovery_point_details::RecoveryPointSyncType>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub disks: Vec<String>,
}
pub mod a2a_recovery_point_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointSyncType {
        MultiVmSyncRecoveryPoint,
        PerVmRecoveryPoint,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aRemoveDisksInput {
    #[serde(flatten)]
    pub remove_disks_provider_specific_input: RemoveDisksProviderSpecificInput,
    #[serde(rename = "vmDisksUris", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks_uris: Vec<String>,
    #[serde(rename = "vmManagedDisksIds", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "fabricObjectId", skip_serializing_if = "Option::is_none")]
    pub fabric_object_id: Option<String>,
    #[serde(rename = "initialPrimaryFabricLocation", skip_serializing)]
    pub initial_primary_fabric_location: Option<String>,
    #[serde(rename = "initialRecoveryFabricLocation", skip_serializing)]
    pub initial_recovery_fabric_location: Option<String>,
    #[serde(rename = "initialPrimaryZone", skip_serializing)]
    pub initial_primary_zone: Option<String>,
    #[serde(rename = "initialRecoveryZone", skip_serializing)]
    pub initial_recovery_zone: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "multiVmGroupCreateOption", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_create_option: Option<a2a_replication_details::MultiVmGroupCreateOption>,
    #[serde(rename = "managementId", skip_serializing_if = "Option::is_none")]
    pub management_id: Option<String>,
    #[serde(rename = "protectedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_disks: Vec<A2aProtectedDiskDetails>,
    #[serde(rename = "unprotectedDisks", skip_serializing_if = "Vec::is_empty")]
    pub unprotected_disks: Vec<A2aUnprotectedDiskDetails>,
    #[serde(rename = "protectedManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_managed_disks: Vec<A2aProtectedManagedDiskDetails>,
    #[serde(rename = "recoveryBootDiagStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account_id: Option<String>,
    #[serde(rename = "primaryFabricLocation", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_location: Option<String>,
    #[serde(rename = "recoveryFabricLocation", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_location: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "recoveryAzureVMSize", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_size: Option<String>,
    #[serde(rename = "recoveryAzureVMName", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_name: Option<String>,
    #[serde(rename = "recoveryAzureResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_resource_group_id: Option<String>,
    #[serde(rename = "recoveryCloudService", skip_serializing_if = "Option::is_none")]
    pub recovery_cloud_service: Option<String>,
    #[serde(rename = "recoveryAvailabilitySet", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set: Option<String>,
    #[serde(rename = "selectedRecoveryAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_recovery_azure_network_id: Option<String>,
    #[serde(rename = "selectedTfoAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_tfo_azure_network_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "vmSyncedConfigDetails", skip_serializing_if = "Option::is_none")]
    pub vm_synced_config_details: Option<AzureToAzureVmSyncedConfigDetails>,
    #[serde(rename = "monitoringPercentageCompletion", skip_serializing_if = "Option::is_none")]
    pub monitoring_percentage_completion: Option<i32>,
    #[serde(rename = "monitoringJobType", skip_serializing_if = "Option::is_none")]
    pub monitoring_job_type: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "isReplicationAgentUpdateRequired", skip_serializing_if = "Option::is_none")]
    pub is_replication_agent_update_required: Option<bool>,
    #[serde(rename = "recoveryFabricObjectId", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_object_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "lifecycleId", skip_serializing_if = "Option::is_none")]
    pub lifecycle_id: Option<String>,
    #[serde(rename = "testFailoverRecoveryFabricObjectId", skip_serializing_if = "Option::is_none")]
    pub test_failover_recovery_fabric_object_id: Option<String>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
    #[serde(rename = "recoveryAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_zone: Option<String>,
    #[serde(rename = "vmEncryptionType", skip_serializing)]
    pub vm_encryption_type: Option<a2a_replication_details::VmEncryptionType>,
    #[serde(rename = "tfoAzureVMName", skip_serializing_if = "Option::is_none")]
    pub tfo_azure_vm_name: Option<String>,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
}
pub mod a2a_replication_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmGroupCreateOption {
        AutoCreated,
        UserSpecified,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VmEncryptionType {
        NotEncrypted,
        OnePassEncrypted,
        TwoPassEncrypted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aReplicationIntentDetails {
    #[serde(flatten)]
    pub replication_protection_intent_provider_specific_settings: ReplicationProtectionIntentProviderSpecificSettings,
    #[serde(rename = "fabricObjectId", skip_serializing_if = "Option::is_none")]
    pub fabric_object_id: Option<String>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "primaryLocation", skip_serializing_if = "Option::is_none")]
    pub primary_location: Option<String>,
    #[serde(rename = "recoveryLocation", skip_serializing_if = "Option::is_none")]
    pub recovery_location: Option<String>,
    #[serde(rename = "recoverySubscriptionId", skip_serializing_if = "Option::is_none")]
    pub recovery_subscription_id: Option<String>,
    #[serde(rename = "primaryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_friendly_name: Option<String>,
    #[serde(rename = "recoveryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_friendly_name: Option<String>,
    #[serde(rename = "primaryContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_container_friendly_name: Option<String>,
    #[serde(rename = "recoveryContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_container_friendly_name: Option<String>,
    #[serde(rename = "recoveryAvailabilityType", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_type: Option<String>,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aVmDiskDetails>,
    #[serde(rename = "vmManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks: Vec<A2aVmManagedDiskDetails>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "recoveryVirtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_virtual_network_id: Option<String>,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
    #[serde(rename = "autoProtectionOfDataDiskStatus", skip_serializing_if = "Option::is_none")]
    pub auto_protection_of_data_disk_status: Option<a2a_replication_intent_details::AutoProtectionOfDataDiskStatus>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "recoveryBootDiagStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
    #[serde(rename = "recoveryAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_zone: Option<String>,
}
pub mod a2a_replication_intent_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AutoProtectionOfDataDiskStatus {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aReprotectInput {
    #[serde(flatten)]
    pub reverse_replication_provider_specific_input: ReverseReplicationProviderSpecificInput,
    #[serde(rename = "recoveryContainerId", skip_serializing_if = "Option::is_none")]
    pub recovery_container_id: Option<String>,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aVmDiskInputDetails>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryCloudServiceId", skip_serializing_if = "Option::is_none")]
    pub recovery_cloud_service_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aSwitchProtectionInput {
    #[serde(flatten)]
    pub switch_protection_provider_specific_input: SwitchProtectionProviderSpecificInput,
    #[serde(rename = "recoveryContainerId", skip_serializing_if = "Option::is_none")]
    pub recovery_container_id: Option<String>,
    #[serde(rename = "vmDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_disks: Vec<A2aVmDiskInputDetails>,
    #[serde(rename = "vmManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub vm_managed_disks: Vec<A2aVmManagedDiskInputDetails>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryCloudServiceId", skip_serializing_if = "Option::is_none")]
    pub recovery_cloud_service_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "recoveryBootDiagStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aTestFailoverInput {
    #[serde(flatten)]
    pub test_failover_provider_specific_input: TestFailoverProviderSpecificInput,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
    #[serde(rename = "cloudServiceCreationOption", skip_serializing_if = "Option::is_none")]
    pub cloud_service_creation_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aUnplannedFailoverInput {
    #[serde(flatten)]
    pub unplanned_failover_provider_specific_input: UnplannedFailoverProviderSpecificInput,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
    #[serde(rename = "cloudServiceCreationOption", skip_serializing_if = "Option::is_none")]
    pub cloud_service_creation_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aUnprotectedDiskDetails {
    #[serde(rename = "diskLunId", skip_serializing_if = "Option::is_none")]
    pub disk_lun_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aUpdateContainerMappingInput {
    #[serde(flatten)]
    pub replication_provider_specific_update_container_mapping_input: ReplicationProviderSpecificUpdateContainerMappingInput,
    #[serde(rename = "agentAutoUpdateStatus", skip_serializing_if = "Option::is_none")]
    pub agent_auto_update_status: Option<a2a_update_container_mapping_input::AgentAutoUpdateStatus>,
    #[serde(rename = "automationAccountArmId", skip_serializing_if = "Option::is_none")]
    pub automation_account_arm_id: Option<String>,
}
pub mod a2a_update_container_mapping_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgentAutoUpdateStatus {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aUpdateReplicationProtectedItemInput {
    #[serde(flatten)]
    pub update_replication_protected_item_provider_input: UpdateReplicationProtectedItemProviderInput,
    #[serde(rename = "recoveryCloudServiceId", skip_serializing_if = "Option::is_none")]
    pub recovery_cloud_service_id: Option<String>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "managedDiskUpdateDetails", skip_serializing_if = "Vec::is_empty")]
    pub managed_disk_update_details: Vec<A2aVmManagedDiskUpdateDetails>,
    #[serde(rename = "recoveryBootDiagStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_boot_diag_storage_account_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
    #[serde(rename = "tfoAzureVMName", skip_serializing_if = "Option::is_none")]
    pub tfo_azure_vm_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aVmDiskDetails {
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "recoveryAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account_id: Option<String>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aVmDiskInputDetails {
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "recoveryAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account_id: Option<String>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aVmManagedDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryReplicaDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_account_type: Option<String>,
    #[serde(rename = "recoveryTargetDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_account_type: Option<String>,
    #[serde(rename = "recoveryDiskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub recovery_disk_encryption_set_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aVmManagedDiskInputDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "primaryStagingAzureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub primary_staging_azure_storage_account_id: Option<String>,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
    #[serde(rename = "recoveryReplicaDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_account_type: Option<String>,
    #[serde(rename = "recoveryTargetDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_account_type: Option<String>,
    #[serde(rename = "recoveryDiskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub recovery_disk_encryption_set_id: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct A2aVmManagedDiskUpdateDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "recoveryTargetDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_target_disk_account_type: Option<String>,
    #[serde(rename = "recoveryReplicaDiskAccountType", skip_serializing_if = "Option::is_none")]
    pub recovery_replica_disk_account_type: Option<String>,
    #[serde(rename = "diskEncryptionInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_info: Option<DiskEncryptionInfo>,
    #[serde(rename = "failoverDiskName", skip_serializing_if = "Option::is_none")]
    pub failover_disk_name: Option<String>,
    #[serde(rename = "tfoDiskName", skip_serializing_if = "Option::is_none")]
    pub tfo_disk_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddDisksInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AddDisksInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddDisksInputProperties {
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<AddDisksProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddDisksProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddRecoveryServicesProviderInput {
    pub properties: AddRecoveryServicesProviderInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddRecoveryServicesProviderInputProperties {
    #[serde(rename = "machineName")]
    pub machine_name: String,
    #[serde(rename = "machineId", skip_serializing_if = "Option::is_none")]
    pub machine_id: Option<String>,
    #[serde(rename = "authenticationIdentityInput")]
    pub authentication_identity_input: IdentityProviderInput,
    #[serde(rename = "resourceAccessIdentityInput")]
    pub resource_access_identity_input: IdentityProviderInput,
    #[serde(rename = "dataPlaneAuthenticationIdentityInput", skip_serializing_if = "Option::is_none")]
    pub data_plane_authentication_identity_input: Option<IdentityProviderInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddVCenterRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AddVCenterRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddVCenterRequestProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentDetails {
    #[serde(rename = "agentId", skip_serializing)]
    pub agent_id: Option<String>,
    #[serde(rename = "machineId", skip_serializing)]
    pub machine_id: Option<String>,
    #[serde(rename = "biosId", skip_serializing)]
    pub bios_id: Option<String>,
    #[serde(skip_serializing)]
    pub fqdn: Option<String>,
    #[serde(skip_serializing)]
    pub disks: Vec<AgentDiskDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentDiskDetails {
    #[serde(rename = "diskId", skip_serializing)]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing)]
    pub disk_name: Option<String>,
    #[serde(rename = "isOSDisk", skip_serializing)]
    pub is_os_disk: Option<String>,
    #[serde(rename = "capacityInBytes", skip_serializing)]
    pub capacity_in_bytes: Option<i64>,
    #[serde(rename = "lunId", skip_serializing)]
    pub lun_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alert {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AlertProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Alert>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertProperties {
    #[serde(rename = "sendToOwners", skip_serializing_if = "Option::is_none")]
    pub send_to_owners: Option<String>,
    #[serde(rename = "customEmailAddresses", skip_serializing_if = "Vec::is_empty")]
    pub custom_email_addresses: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyRecoveryPointInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApplyRecoveryPointInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyRecoveryPointInputProperties {
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ApplyRecoveryPointProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyRecoveryPointProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsrJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsrTask {
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "allowedActions", skip_serializing_if = "Vec::is_empty")]
    pub allowed_actions: Vec<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "stateDescription", skip_serializing_if = "Option::is_none")]
    pub state_description: Option<String>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "customDetails", skip_serializing_if = "Option::is_none")]
    pub custom_details: Option<TaskTypeDetails>,
    #[serde(rename = "groupTaskCustomDetails", skip_serializing_if = "Option::is_none")]
    pub group_task_custom_details: Option<GroupTaskDetails>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<JobErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutomationRunbookTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "cloudServiceName", skip_serializing_if = "Option::is_none")]
    pub cloud_service_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "runbookId", skip_serializing_if = "Option::is_none")]
    pub runbook_id: Option<String>,
    #[serde(rename = "runbookName", skip_serializing_if = "Option::is_none")]
    pub runbook_name: Option<String>,
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "jobOutput", skip_serializing_if = "Option::is_none")]
    pub job_output: Option<String>,
    #[serde(rename = "isPrimarySideScript", skip_serializing_if = "Option::is_none")]
    pub is_primary_side_script: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureFabricCreationInput {
    #[serde(flatten)]
    pub fabric_specific_creation_input: FabricSpecificCreationInput,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureFabricSpecificDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "containerIds", skip_serializing_if = "Vec::is_empty")]
    pub container_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureToAzureCreateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_create_network_mapping_input: FabricSpecificCreateNetworkMappingInput,
    #[serde(rename = "primaryNetworkId", skip_serializing_if = "Option::is_none")]
    pub primary_network_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureToAzureNetworkMappingSettings {
    #[serde(flatten)]
    pub network_mapping_fabric_specific_settings: NetworkMappingFabricSpecificSettings,
    #[serde(rename = "primaryFabricLocation", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_location: Option<String>,
    #[serde(rename = "recoveryFabricLocation", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureToAzureUpdateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_update_network_mapping_input: FabricSpecificUpdateNetworkMappingInput,
    #[serde(rename = "primaryNetworkId", skip_serializing_if = "Option::is_none")]
    pub primary_network_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureToAzureVmSyncedConfigDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "inputEndpoints", skip_serializing_if = "Vec::is_empty")]
    pub input_endpoints: Vec<InputEndpoint>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureVmDiskDetails {
    #[serde(rename = "vhdType", skip_serializing_if = "Option::is_none")]
    pub vhd_type: Option<String>,
    #[serde(rename = "vhdId", skip_serializing_if = "Option::is_none")]
    pub vhd_id: Option<String>,
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "vhdName", skip_serializing_if = "Option::is_none")]
    pub vhd_name: Option<String>,
    #[serde(rename = "maxSizeMB", skip_serializing_if = "Option::is_none")]
    pub max_size_mb: Option<String>,
    #[serde(rename = "targetDiskLocation", skip_serializing_if = "Option::is_none")]
    pub target_disk_location: Option<String>,
    #[serde(rename = "targetDiskName", skip_serializing_if = "Option::is_none")]
    pub target_disk_name: Option<String>,
    #[serde(rename = "lunId", skip_serializing_if = "Option::is_none")]
    pub lun_id: Option<String>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_set_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeSizeErrorDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationSettings {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigureAlertRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ConfigureAlertRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigureAlertRequestProperties {
    #[serde(rename = "sendToOwners", skip_serializing_if = "Option::is_none")]
    pub send_to_owners: Option<String>,
    #[serde(rename = "customEmailAddresses", skip_serializing_if = "Vec::is_empty")]
    pub custom_email_addresses: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsistencyCheckTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(rename = "vmDetails", skip_serializing_if = "Vec::is_empty")]
    pub vm_details: Vec<InconsistentVmDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateNetworkMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CreateNetworkMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateNetworkMappingInputProperties {
    #[serde(rename = "recoveryFabricName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_name: Option<String>,
    #[serde(rename = "recoveryNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_network_id: Option<String>,
    #[serde(rename = "fabricSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub fabric_specific_details: Option<FabricSpecificCreateNetworkMappingInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePolicyInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CreatePolicyInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePolicyInputProperties {
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Option::is_none")]
    pub provider_specific_input: Option<PolicyProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionContainerInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CreateProtectionContainerInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionContainerInputProperties {
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Vec::is_empty")]
    pub provider_specific_input: Vec<ReplicationProviderSpecificContainerCreationInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionContainerMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CreateProtectionContainerMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionContainerMappingInputProperties {
    #[serde(rename = "targetProtectionContainerId", skip_serializing_if = "Option::is_none")]
    pub target_protection_container_id: Option<String>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Option::is_none")]
    pub provider_specific_input: Option<ReplicationProviderSpecificContainerMappingInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionIntentInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CreateProtectionIntentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionIntentProperties {
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<CreateProtectionIntentProviderSpecificDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateProtectionIntentProviderSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateRecoveryPlanInput {
    pub properties: CreateRecoveryPlanInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateRecoveryPlanInputProperties {
    #[serde(rename = "primaryFabricId")]
    pub primary_fabric_id: String,
    #[serde(rename = "recoveryFabricId")]
    pub recovery_fabric_id: String,
    #[serde(rename = "failoverDeploymentModel", skip_serializing_if = "Option::is_none")]
    pub failover_deployment_model: Option<create_recovery_plan_input_properties::FailoverDeploymentModel>,
    pub groups: Vec<RecoveryPlanGroup>,
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Vec::is_empty")]
    pub provider_specific_input: Vec<RecoveryPlanProviderSpecificInput>,
}
pub mod create_recovery_plan_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FailoverDeploymentModel {
        NotApplicable,
        Classic,
        ResourceManager,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CurrentJobDetails {
    #[serde(rename = "jobName", skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CurrentScenarioDetails {
    #[serde(rename = "scenarioName", skip_serializing_if = "Option::is_none")]
    pub scenario_name: Option<String>,
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataStore {
    #[serde(rename = "symbolicName", skip_serializing_if = "Option::is_none")]
    pub symbolic_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<String>,
    #[serde(rename = "freeSpace", skip_serializing_if = "Option::is_none")]
    pub free_space: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DisableProtectionInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DisableProtectionInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DisableProtectionInputProperties {
    #[serde(rename = "disableProtectionReason", skip_serializing_if = "Option::is_none")]
    pub disable_protection_reason: Option<disable_protection_input_properties::DisableProtectionReason>,
    #[serde(rename = "replicationProviderInput", skip_serializing_if = "Option::is_none")]
    pub replication_provider_input: Option<DisableProtectionProviderSpecificInput>,
}
pub mod disable_protection_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DisableProtectionReason {
        NotSpecified,
        MigrationComplete,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DisableProtectionProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscoverProtectableItemRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DiscoverProtectableItemRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscoverProtectableItemRequestProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskDetails {
    #[serde(rename = "maxSizeMB", skip_serializing_if = "Option::is_none")]
    pub max_size_mb: Option<i64>,
    #[serde(rename = "vhdType", skip_serializing_if = "Option::is_none")]
    pub vhd_type: Option<String>,
    #[serde(rename = "vhdId", skip_serializing_if = "Option::is_none")]
    pub vhd_id: Option<String>,
    #[serde(rename = "vhdName", skip_serializing_if = "Option::is_none")]
    pub vhd_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskEncryptionInfo {
    #[serde(rename = "diskEncryptionKeyInfo", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_key_info: Option<DiskEncryptionKeyInfo>,
    #[serde(rename = "keyEncryptionKeyInfo", skip_serializing_if = "Option::is_none")]
    pub key_encryption_key_info: Option<KeyEncryptionKeyInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskEncryptionKeyInfo {
    #[serde(rename = "secretIdentifier", skip_serializing_if = "Option::is_none")]
    pub secret_identifier: Option<String>,
    #[serde(rename = "keyVaultResourceArmId", skip_serializing_if = "Option::is_none")]
    pub key_vault_resource_arm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskVolumeDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Display {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DraDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<dra_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
}
pub mod dra_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableMigrationInput {
    pub properties: EnableMigrationInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableMigrationInputProperties {
    #[serde(rename = "policyId")]
    pub policy_id: String,
    #[serde(rename = "providerSpecificDetails")]
    pub provider_specific_details: EnableMigrationProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableMigrationProviderSpecificInput {
    #[serde(rename = "instanceType")]
    pub instance_type: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableProtectionInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EnableProtectionInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableProtectionInputProperties {
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "protectableItemId", skip_serializing_if = "Option::is_none")]
    pub protectable_item_id: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<EnableProtectionProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnableProtectionProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EncryptionDetails {
    #[serde(rename = "kekState", skip_serializing_if = "Option::is_none")]
    pub kek_state: Option<String>,
    #[serde(rename = "kekCertThumbprint", skip_serializing_if = "Option::is_none")]
    pub kek_cert_thumbprint: Option<String>,
    #[serde(rename = "kekCertExpiryDate", skip_serializing_if = "Option::is_none")]
    pub kek_cert_expiry_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EventProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Event>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventProperties {
    #[serde(rename = "eventCode", skip_serializing_if = "Option::is_none")]
    pub event_code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(rename = "affectedObjectFriendlyName", skip_serializing_if = "Option::is_none")]
    pub affected_object_friendly_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    #[serde(rename = "timeOfOccurrence", skip_serializing_if = "Option::is_none")]
    pub time_of_occurrence: Option<String>,
    #[serde(rename = "fabricId", skip_serializing_if = "Option::is_none")]
    pub fabric_id: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<EventProviderSpecificDetails>,
    #[serde(rename = "eventSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub event_specific_details: Option<EventSpecificDetails>,
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<HealthError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventProviderSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventQueryParameter {
    #[serde(rename = "eventCode", skip_serializing_if = "Option::is_none")]
    pub event_code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "affectedObjectFriendlyName", skip_serializing_if = "Option::is_none")]
    pub affected_object_friendly_name: Option<String>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingProtectionProfile {
    #[serde(flatten)]
    pub protection_profile_custom_details: ProtectionProfileCustomDetails,
    #[serde(rename = "protectionProfileId")]
    pub protection_profile_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingRecoveryAvailabilitySet {
    #[serde(flatten)]
    pub recovery_availability_set_custom_details: RecoveryAvailabilitySetCustomDetails,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingRecoveryProximityPlacementGroup {
    #[serde(flatten)]
    pub recovery_proximity_placement_group_custom_details: RecoveryProximityPlacementGroupCustomDetails,
    #[serde(rename = "recoveryProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_proximity_placement_group_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingRecoveryRecoveryResourceGroup {
    #[serde(flatten)]
    pub recovery_resource_group_custom_details: RecoveryResourceGroupCustomDetails,
    #[serde(rename = "recoveryResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_resource_group_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingRecoveryVirtualNetwork {
    #[serde(flatten)]
    pub recovery_virtual_network_custom_details: RecoveryVirtualNetworkCustomDetails,
    #[serde(rename = "recoveryVirtualNetworkId")]
    pub recovery_virtual_network_id: String,
    #[serde(rename = "recoverySubnetName", skip_serializing_if = "Option::is_none")]
    pub recovery_subnet_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExistingStorageAccount {
    #[serde(flatten)]
    pub storage_account_custom_details: StorageAccountCustomDetails,
    #[serde(rename = "azureStorageAccountId")]
    pub azure_storage_account_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExportJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "blobUri", skip_serializing_if = "Option::is_none")]
    pub blob_uri: Option<String>,
    #[serde(rename = "sasToken", skip_serializing_if = "Option::is_none")]
    pub sas_token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Fabric {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FabricProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Fabric>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricCreationInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FabricCreationInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricCreationInputProperties {
    #[serde(rename = "customDetails", skip_serializing_if = "Option::is_none")]
    pub custom_details: Option<FabricSpecificCreationInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "encryptionDetails", skip_serializing_if = "Option::is_none")]
    pub encryption_details: Option<EncryptionDetails>,
    #[serde(rename = "rolloverEncryptionDetails", skip_serializing_if = "Option::is_none")]
    pub rollover_encryption_details: Option<EncryptionDetails>,
    #[serde(rename = "internalIdentifier", skip_serializing_if = "Option::is_none")]
    pub internal_identifier: Option<String>,
    #[serde(rename = "bcdrState", skip_serializing_if = "Option::is_none")]
    pub bcdr_state: Option<String>,
    #[serde(rename = "customDetails", skip_serializing_if = "Option::is_none")]
    pub custom_details: Option<FabricSpecificDetails>,
    #[serde(rename = "healthErrorDetails", skip_serializing_if = "Vec::is_empty")]
    pub health_error_details: Vec<HealthError>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricReplicationGroupTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(rename = "skippedReason", skip_serializing_if = "Option::is_none")]
    pub skipped_reason: Option<String>,
    #[serde(rename = "skippedReasonString", skip_serializing_if = "Option::is_none")]
    pub skipped_reason_string: Option<String>,
    #[serde(rename = "jobTask", skip_serializing_if = "Option::is_none")]
    pub job_task: Option<JobEntity>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricSpecificCreateNetworkMappingInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricSpecificCreationInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FabricSpecificUpdateNetworkMappingInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailoverJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "protectedItemDetails", skip_serializing_if = "Vec::is_empty")]
    pub protected_item_details: Vec<FailoverReplicationProtectedItemDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailoverProcessServerRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FailoverProcessServerRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailoverProcessServerRequestProperties {
    #[serde(rename = "containerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "sourceProcessServerId", skip_serializing_if = "Option::is_none")]
    pub source_process_server_id: Option<String>,
    #[serde(rename = "targetProcessServerId", skip_serializing_if = "Option::is_none")]
    pub target_process_server_id: Option<String>,
    #[serde(rename = "vmsToMigrate", skip_serializing_if = "Vec::is_empty")]
    pub vms_to_migrate: Vec<String>,
    #[serde(rename = "updateType", skip_serializing_if = "Option::is_none")]
    pub update_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailoverReplicationProtectedItemDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "testVmName", skip_serializing_if = "Option::is_none")]
    pub test_vm_name: Option<String>,
    #[serde(rename = "testVmFriendlyName", skip_serializing_if = "Option::is_none")]
    pub test_vm_friendly_name: Option<String>,
    #[serde(rename = "networkConnectionStatus", skip_serializing_if = "Option::is_none")]
    pub network_connection_status: Option<String>,
    #[serde(rename = "networkFriendlyName", skip_serializing_if = "Option::is_none")]
    pub network_friendly_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
    #[serde(rename = "recoveryPointTime", skip_serializing_if = "Option::is_none")]
    pub recovery_point_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupTaskDetails {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "childTasks", skip_serializing_if = "Vec::is_empty")]
    pub child_tasks: Vec<AsrTask>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthError {
    #[serde(rename = "innerHealthErrors", skip_serializing_if = "Vec::is_empty")]
    pub inner_health_errors: Vec<InnerHealthError>,
    #[serde(rename = "errorSource", skip_serializing_if = "Option::is_none")]
    pub error_source: Option<String>,
    #[serde(rename = "errorType", skip_serializing_if = "Option::is_none")]
    pub error_type: Option<String>,
    #[serde(rename = "errorLevel", skip_serializing_if = "Option::is_none")]
    pub error_level: Option<String>,
    #[serde(rename = "errorCategory", skip_serializing_if = "Option::is_none")]
    pub error_category: Option<String>,
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(rename = "summaryMessage", skip_serializing_if = "Option::is_none")]
    pub summary_message: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing_if = "Option::is_none")]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing_if = "Option::is_none")]
    pub recommended_action: Option<String>,
    #[serde(rename = "creationTimeUtc", skip_serializing_if = "Option::is_none")]
    pub creation_time_utc: Option<String>,
    #[serde(rename = "recoveryProviderErrorMessage", skip_serializing_if = "Option::is_none")]
    pub recovery_provider_error_message: Option<String>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    #[serde(rename = "errorId", skip_serializing_if = "Option::is_none")]
    pub error_id: Option<String>,
    #[serde(rename = "customerResolvability", skip_serializing_if = "Option::is_none")]
    pub customer_resolvability: Option<health_error::CustomerResolvability>,
}
pub mod health_error {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CustomerResolvability {
        Allowed,
        NotAllowed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthErrorSummary {
    #[serde(rename = "summaryCode", skip_serializing_if = "Option::is_none")]
    pub summary_code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<health_error_summary::Category>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<health_error_summary::Severity>,
    #[serde(rename = "summaryMessage", skip_serializing_if = "Option::is_none")]
    pub summary_message: Option<String>,
    #[serde(rename = "affectedResourceType", skip_serializing_if = "Option::is_none")]
    pub affected_resource_type: Option<String>,
    #[serde(rename = "affectedResourceSubtype", skip_serializing_if = "Option::is_none")]
    pub affected_resource_subtype: Option<String>,
    #[serde(rename = "affectedResourceCorrelationIds", skip_serializing_if = "Vec::is_empty")]
    pub affected_resource_correlation_ids: Vec<String>,
}
pub mod health_error_summary {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Category {
        None,
        Replication,
        TestFailover,
        Configuration,
        FabricInfrastructure,
        VersionExpiry,
        AgentAutoUpdate,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Severity {
        #[serde(rename = "NONE")]
        None,
        Warning,
        Error,
        Info,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplica2012EventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "containerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "remoteContainerName", skip_serializing_if = "Option::is_none")]
    pub remote_container_name: Option<String>,
    #[serde(rename = "remoteFabricName", skip_serializing_if = "Option::is_none")]
    pub remote_fabric_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplica2012R2EventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "containerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "remoteContainerName", skip_serializing_if = "Option::is_none")]
    pub remote_container_name: Option<String>,
    #[serde(rename = "remoteFabricName", skip_serializing_if = "Option::is_none")]
    pub remote_fabric_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureApplyRecoveryPointInput {
    #[serde(flatten)]
    pub apply_recovery_point_provider_specific_input: ApplyRecoveryPointProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "primaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub primary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "secondaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub secondary_kek_certificate_pfx: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureEnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
    #[serde(rename = "hvHostVmId", skip_serializing_if = "Option::is_none")]
    pub hv_host_vm_id: Option<String>,
    #[serde(rename = "vmName", skip_serializing_if = "Option::is_none")]
    pub vm_name: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vhdId", skip_serializing_if = "Option::is_none")]
    pub vhd_id: Option<String>,
    #[serde(rename = "targetStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_storage_account_id: Option<String>,
    #[serde(rename = "targetAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_azure_network_id: Option<String>,
    #[serde(rename = "targetAzureSubnetId", skip_serializing_if = "Option::is_none")]
    pub target_azure_subnet_id: Option<String>,
    #[serde(rename = "enableRdpOnTargetOption", skip_serializing_if = "Option::is_none")]
    pub enable_rdp_on_target_option: Option<String>,
    #[serde(rename = "targetAzureVmName", skip_serializing_if = "Option::is_none")]
    pub target_azure_vm_name: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<String>,
    #[serde(rename = "targetAzureV1ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_azure_v1_resource_group_id: Option<String>,
    #[serde(rename = "targetAzureV2ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_azure_v2_resource_group_id: Option<String>,
    #[serde(rename = "useManagedDisks", skip_serializing_if = "Option::is_none")]
    pub use_managed_disks: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureEventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "containerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "remoteContainerName", skip_serializing_if = "Option::is_none")]
    pub remote_container_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureFailbackProviderInput {
    #[serde(flatten)]
    pub provider_specific_failover_input: ProviderSpecificFailoverInput,
    #[serde(rename = "dataSyncOption", skip_serializing_if = "Option::is_none")]
    pub data_sync_option: Option<String>,
    #[serde(rename = "recoveryVmCreationOption", skip_serializing_if = "Option::is_none")]
    pub recovery_vm_creation_option: Option<String>,
    #[serde(rename = "providerIdForAlternateRecovery", skip_serializing_if = "Option::is_none")]
    pub provider_id_for_alternate_recovery: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureFailoverProviderInput {
    #[serde(flatten)]
    pub provider_specific_failover_input: ProviderSpecificFailoverInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "primaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub primary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "secondaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub secondary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzurePolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointHistoryDurationInHours", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history_duration_in_hours: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(rename = "replicationInterval", skip_serializing_if = "Option::is_none")]
    pub replication_interval: Option<i32>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encryption: Option<String>,
    #[serde(rename = "activeStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub active_storage_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzurePolicyInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointHistoryDuration", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history_duration: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(rename = "replicationInterval", skip_serializing_if = "Option::is_none")]
    pub replication_interval: Option<i32>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "storageAccounts", skip_serializing_if = "Vec::is_empty")]
    pub storage_accounts: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "azureVmDiskDetails", skip_serializing_if = "Vec::is_empty")]
    pub azure_vm_disk_details: Vec<AzureVmDiskDetails>,
    #[serde(rename = "recoveryAzureVmName", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_name: Option<String>,
    #[serde(rename = "recoveryAzureVMSize", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_size: Option<String>,
    #[serde(rename = "recoveryAzureStorageAccount", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account: Option<String>,
    #[serde(rename = "recoveryAzureLogStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_log_storage_account_id: Option<String>,
    #[serde(rename = "lastReplicatedTime", skip_serializing_if = "Option::is_none")]
    pub last_replicated_time: Option<String>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "initialReplicationDetails", skip_serializing_if = "Option::is_none")]
    pub initial_replication_details: Option<InitialReplicationDetails>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "selectedRecoveryAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_recovery_azure_network_id: Option<String>,
    #[serde(rename = "selectedSourceNicId", skip_serializing_if = "Option::is_none")]
    pub selected_source_nic_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encryption: Option<String>,
    #[serde(rename = "oSDetails", skip_serializing_if = "Option::is_none")]
    pub o_s_details: Option<OsDetails>,
    #[serde(rename = "sourceVmRamSizeInMB", skip_serializing_if = "Option::is_none")]
    pub source_vm_ram_size_in_mb: Option<i32>,
    #[serde(rename = "sourceVmCpuCount", skip_serializing_if = "Option::is_none")]
    pub source_vm_cpu_count: Option<i32>,
    #[serde(rename = "enableRdpOnTargetOption", skip_serializing_if = "Option::is_none")]
    pub enable_rdp_on_target_option: Option<String>,
    #[serde(rename = "recoveryAzureResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_resource_group_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "useManagedDisks", skip_serializing_if = "Option::is_none")]
    pub use_managed_disks: Option<String>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureReprotectInput {
    #[serde(flatten)]
    pub reverse_replication_provider_specific_input: ReverseReplicationProviderSpecificInput,
    #[serde(rename = "hvHostVmId", skip_serializing_if = "Option::is_none")]
    pub hv_host_vm_id: Option<String>,
    #[serde(rename = "vmName", skip_serializing_if = "Option::is_none")]
    pub vm_name: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vHDId", skip_serializing_if = "Option::is_none")]
    pub v_hd_id: Option<String>,
    #[serde(rename = "storageAccountId", skip_serializing_if = "Option::is_none")]
    pub storage_account_id: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureTestFailoverInput {
    #[serde(flatten)]
    pub test_failover_provider_specific_input: TestFailoverProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "primaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub primary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "secondaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub secondary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureUnplannedFailoverInput {
    #[serde(flatten)]
    pub unplanned_failover_provider_specific_input: UnplannedFailoverProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "primaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub primary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "secondaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub secondary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaAzureUpdateReplicationProtectedItemInput {
    #[serde(flatten)]
    pub update_replication_protected_item_provider_input: UpdateReplicationProtectedItemProviderInput,
    #[serde(rename = "recoveryAzureV1ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_v1_resource_group_id: Option<String>,
    #[serde(rename = "recoveryAzureV2ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_v2_resource_group_id: Option<String>,
    #[serde(rename = "useManagedDisks", skip_serializing_if = "Option::is_none")]
    pub use_managed_disks: Option<String>,
    #[serde(rename = "diskIdToDiskEncryptionMap", skip_serializing_if = "Option::is_none")]
    pub disk_id_to_disk_encryption_map: Option<serde_json::Value>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBaseEventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "containerName", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "fabricName", skip_serializing_if = "Option::is_none")]
    pub fabric_name: Option<String>,
    #[serde(rename = "remoteContainerName", skip_serializing_if = "Option::is_none")]
    pub remote_container_name: Option<String>,
    #[serde(rename = "remoteFabricName", skip_serializing_if = "Option::is_none")]
    pub remote_fabric_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBasePolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPoints", skip_serializing_if = "Option::is_none")]
    pub recovery_points: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "initialReplicationMethod", skip_serializing_if = "Option::is_none")]
    pub initial_replication_method: Option<String>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "offlineReplicationImportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_import_path: Option<String>,
    #[serde(rename = "offlineReplicationExportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_export_path: Option<String>,
    #[serde(rename = "replicationPort", skip_serializing_if = "Option::is_none")]
    pub replication_port: Option<i32>,
    #[serde(rename = "allowedAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub allowed_authentication_type: Option<i32>,
    #[serde(rename = "replicaDeletionOption", skip_serializing_if = "Option::is_none")]
    pub replica_deletion_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBaseReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "lastReplicatedTime", skip_serializing_if = "Option::is_none")]
    pub last_replicated_time: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "initialReplicationDetails", skip_serializing_if = "Option::is_none")]
    pub initial_replication_details: Option<InitialReplicationDetails>,
    #[serde(rename = "vMDiskDetails", skip_serializing_if = "Vec::is_empty")]
    pub v_m_disk_details: Vec<DiskDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBluePolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "replicationFrequencyInSeconds", skip_serializing_if = "Option::is_none")]
    pub replication_frequency_in_seconds: Option<i32>,
    #[serde(rename = "recoveryPoints", skip_serializing_if = "Option::is_none")]
    pub recovery_points: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "initialReplicationMethod", skip_serializing_if = "Option::is_none")]
    pub initial_replication_method: Option<String>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "offlineReplicationImportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_import_path: Option<String>,
    #[serde(rename = "offlineReplicationExportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_export_path: Option<String>,
    #[serde(rename = "replicationPort", skip_serializing_if = "Option::is_none")]
    pub replication_port: Option<i32>,
    #[serde(rename = "allowedAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub allowed_authentication_type: Option<i32>,
    #[serde(rename = "replicaDeletionOption", skip_serializing_if = "Option::is_none")]
    pub replica_deletion_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBluePolicyInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "replicationFrequencyInSeconds", skip_serializing_if = "Option::is_none")]
    pub replication_frequency_in_seconds: Option<i32>,
    #[serde(rename = "recoveryPoints", skip_serializing_if = "Option::is_none")]
    pub recovery_points: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "initialReplicationMethod", skip_serializing_if = "Option::is_none")]
    pub initial_replication_method: Option<String>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "offlineReplicationImportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_import_path: Option<String>,
    #[serde(rename = "offlineReplicationExportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_export_path: Option<String>,
    #[serde(rename = "replicationPort", skip_serializing_if = "Option::is_none")]
    pub replication_port: Option<i32>,
    #[serde(rename = "allowedAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub allowed_authentication_type: Option<i32>,
    #[serde(rename = "replicaDeletion", skip_serializing_if = "Option::is_none")]
    pub replica_deletion: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaBlueReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "lastReplicatedTime", skip_serializing_if = "Option::is_none")]
    pub last_replicated_time: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "initialReplicationDetails", skip_serializing_if = "Option::is_none")]
    pub initial_replication_details: Option<InitialReplicationDetails>,
    #[serde(rename = "vMDiskDetails", skip_serializing_if = "Vec::is_empty")]
    pub v_m_disk_details: Vec<DiskDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaPolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPoints", skip_serializing_if = "Option::is_none")]
    pub recovery_points: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "initialReplicationMethod", skip_serializing_if = "Option::is_none")]
    pub initial_replication_method: Option<String>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "offlineReplicationImportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_import_path: Option<String>,
    #[serde(rename = "offlineReplicationExportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_export_path: Option<String>,
    #[serde(rename = "replicationPort", skip_serializing_if = "Option::is_none")]
    pub replication_port: Option<i32>,
    #[serde(rename = "allowedAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub allowed_authentication_type: Option<i32>,
    #[serde(rename = "replicaDeletionOption", skip_serializing_if = "Option::is_none")]
    pub replica_deletion_option: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaPolicyInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPoints", skip_serializing_if = "Option::is_none")]
    pub recovery_points: Option<i32>,
    #[serde(rename = "applicationConsistentSnapshotFrequencyInHours", skip_serializing_if = "Option::is_none")]
    pub application_consistent_snapshot_frequency_in_hours: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "initialReplicationMethod", skip_serializing_if = "Option::is_none")]
    pub initial_replication_method: Option<String>,
    #[serde(rename = "onlineReplicationStartTime", skip_serializing_if = "Option::is_none")]
    pub online_replication_start_time: Option<String>,
    #[serde(rename = "offlineReplicationImportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_import_path: Option<String>,
    #[serde(rename = "offlineReplicationExportPath", skip_serializing_if = "Option::is_none")]
    pub offline_replication_export_path: Option<String>,
    #[serde(rename = "replicationPort", skip_serializing_if = "Option::is_none")]
    pub replication_port: Option<i32>,
    #[serde(rename = "allowedAuthenticationType", skip_serializing_if = "Option::is_none")]
    pub allowed_authentication_type: Option<i32>,
    #[serde(rename = "replicaDeletion", skip_serializing_if = "Option::is_none")]
    pub replica_deletion: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVReplicaReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "lastReplicatedTime", skip_serializing_if = "Option::is_none")]
    pub last_replicated_time: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "initialReplicationDetails", skip_serializing_if = "Option::is_none")]
    pub initial_replication_details: Option<InitialReplicationDetails>,
    #[serde(rename = "vMDiskDetails", skip_serializing_if = "Vec::is_empty")]
    pub v_m_disk_details: Vec<DiskDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVSiteDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVVirtualMachineDetails {
    #[serde(flatten)]
    pub configuration_settings: ConfigurationSettings,
    #[serde(rename = "sourceItemId", skip_serializing_if = "Option::is_none")]
    pub source_item_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub generation: Option<String>,
    #[serde(rename = "osDetails", skip_serializing_if = "Option::is_none")]
    pub os_details: Option<OsDetails>,
    #[serde(rename = "diskDetails", skip_serializing_if = "Vec::is_empty")]
    pub disk_details: Vec<DiskDetails>,
    #[serde(rename = "hasPhysicalDisk", skip_serializing_if = "Option::is_none")]
    pub has_physical_disk: Option<hyper_v_virtual_machine_details::HasPhysicalDisk>,
    #[serde(rename = "hasFibreChannelAdapter", skip_serializing_if = "Option::is_none")]
    pub has_fibre_channel_adapter: Option<hyper_v_virtual_machine_details::HasFibreChannelAdapter>,
    #[serde(rename = "hasSharedVhd", skip_serializing_if = "Option::is_none")]
    pub has_shared_vhd: Option<hyper_v_virtual_machine_details::HasSharedVhd>,
}
pub mod hyper_v_virtual_machine_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasPhysicalDisk {
        Unknown,
        Present,
        NotPresent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasFibreChannelAdapter {
        Unknown,
        Present,
        NotPresent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasSharedVhd {
        Unknown,
        Present,
        NotPresent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityProviderDetails {
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "applicationId", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<String>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(rename = "aadAuthority", skip_serializing_if = "Option::is_none")]
    pub aad_authority: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityProviderInput {
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "applicationId")]
    pub application_id: String,
    #[serde(rename = "objectId")]
    pub object_id: String,
    pub audience: String,
    #[serde(rename = "aadAuthority")]
    pub aad_authority: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InconsistentVmDetails {
    #[serde(rename = "vmName", skip_serializing_if = "Option::is_none")]
    pub vm_name: Option<String>,
    #[serde(rename = "cloudName", skip_serializing_if = "Option::is_none")]
    pub cloud_name: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<String>,
    #[serde(rename = "errorIds", skip_serializing_if = "Vec::is_empty")]
    pub error_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InitialReplicationDetails {
    #[serde(rename = "initialReplicationType", skip_serializing_if = "Option::is_none")]
    pub initial_replication_type: Option<String>,
    #[serde(rename = "initialReplicationProgressPercentage", skip_serializing_if = "Option::is_none")]
    pub initial_replication_progress_percentage: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineWorkflowTaskDetails {
    #[serde(flatten)]
    pub group_task_details: GroupTaskDetails,
    #[serde(rename = "workflowIds", skip_serializing_if = "Vec::is_empty")]
    pub workflow_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAgentDetails {
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "agentUpdateStatus", skip_serializing_if = "Option::is_none")]
    pub agent_update_status: Option<String>,
    #[serde(rename = "postUpdateRebootStatus", skip_serializing_if = "Option::is_none")]
    pub post_update_reboot_status: Option<String>,
    #[serde(rename = "agentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub agent_expiry_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAgentVersionDetails {
    #[serde(rename = "postUpdateRebootStatus", skip_serializing_if = "Option::is_none")]
    pub post_update_reboot_status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "expiryDate", skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<in_mage_agent_version_details::Status>,
}
pub mod in_mage_agent_version_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Supported,
        NotSupported,
        Deprecated,
        UpdateRequired,
        SecurityUpdateRequired,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2ApplyRecoveryPointInput {
    #[serde(flatten)]
    pub apply_recovery_point_provider_specific_input: ApplyRecoveryPointProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2DiskInputDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<in_mage_azure_v2_disk_input_details::DiskType>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_set_id: Option<String>,
}
pub mod in_mage_azure_v2_disk_input_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2EnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
    #[serde(rename = "masterTargetId", skip_serializing_if = "Option::is_none")]
    pub master_target_id: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "storageAccountId", skip_serializing_if = "Option::is_none")]
    pub storage_account_id: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<InMageAzureV2DiskInputDetails>,
    #[serde(rename = "targetAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_azure_network_id: Option<String>,
    #[serde(rename = "targetAzureSubnetId", skip_serializing_if = "Option::is_none")]
    pub target_azure_subnet_id: Option<String>,
    #[serde(rename = "enableRdpOnTargetOption", skip_serializing_if = "Option::is_none")]
    pub enable_rdp_on_target_option: Option<String>,
    #[serde(rename = "targetAzureVmName", skip_serializing_if = "Option::is_none")]
    pub target_azure_vm_name: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "targetAzureV1ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_azure_v1_resource_group_id: Option<String>,
    #[serde(rename = "targetAzureV2ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_azure_v2_resource_group_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<in_mage_azure_v2_enable_protection_input::DiskType>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
}
pub mod in_mage_azure_v2_enable_protection_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2EventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    #[serde(rename = "correctiveAction", skip_serializing_if = "Option::is_none")]
    pub corrective_action: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[serde(rename = "siteName", skip_serializing_if = "Option::is_none")]
    pub site_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2FailoverProviderInput {
    #[serde(flatten)]
    pub provider_specific_failover_input: ProviderSpecificFailoverInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2ManagedDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "seedManagedDiskId", skip_serializing_if = "Option::is_none")]
    pub seed_managed_disk_id: Option<String>,
    #[serde(rename = "replicaDiskType", skip_serializing_if = "Option::is_none")]
    pub replica_disk_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2PolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2PolicyInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus")]
    pub multi_vm_sync_status: in_mage_azure_v2_policy_input::MultiVmSyncStatus,
}
pub mod in_mage_azure_v2_policy_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncStatus {
        Enable,
        Disable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2ProtectedDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "protectionStage", skip_serializing_if = "Option::is_none")]
    pub protection_stage: Option<String>,
    #[serde(rename = "healthErrorCode", skip_serializing_if = "Option::is_none")]
    pub health_error_code: Option<String>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "resyncRequired", skip_serializing_if = "Option::is_none")]
    pub resync_required: Option<String>,
    #[serde(rename = "resyncProgressPercentage", skip_serializing_if = "Option::is_none")]
    pub resync_progress_percentage: Option<i32>,
    #[serde(rename = "resyncDurationInSeconds", skip_serializing_if = "Option::is_none")]
    pub resync_duration_in_seconds: Option<i64>,
    #[serde(rename = "diskCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub disk_capacity_in_bytes: Option<i64>,
    #[serde(rename = "fileSystemCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub file_system_capacity_in_bytes: Option<i64>,
    #[serde(rename = "sourceDataInMegaBytes", skip_serializing_if = "Option::is_none")]
    pub source_data_in_mega_bytes: Option<f64>,
    #[serde(rename = "psDataInMegaBytes", skip_serializing_if = "Option::is_none")]
    pub ps_data_in_mega_bytes: Option<f64>,
    #[serde(rename = "targetDataInMegaBytes", skip_serializing_if = "Option::is_none")]
    pub target_data_in_mega_bytes: Option<f64>,
    #[serde(rename = "diskResized", skip_serializing_if = "Option::is_none")]
    pub disk_resized: Option<String>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2RecoveryPointDetails {
    #[serde(flatten)]
    pub provider_specific_recovery_point_details: ProviderSpecificRecoveryPointDetails,
    #[serde(rename = "isMultiVmSyncPoint", skip_serializing_if = "Option::is_none")]
    pub is_multi_vm_sync_point: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2ReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "infrastructureVmId", skip_serializing_if = "Option::is_none")]
    pub infrastructure_vm_id: Option<String>,
    #[serde(rename = "vCenterInfrastructureId", skip_serializing_if = "Option::is_none")]
    pub v_center_infrastructure_id: Option<String>,
    #[serde(rename = "protectionStage", skip_serializing_if = "Option::is_none")]
    pub protection_stage: Option<String>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "resyncProgressPercentage", skip_serializing_if = "Option::is_none")]
    pub resync_progress_percentage: Option<i32>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "compressedDataRateInMB", skip_serializing_if = "Option::is_none")]
    pub compressed_data_rate_in_mb: Option<f64>,
    #[serde(rename = "uncompressedDataRateInMB", skip_serializing_if = "Option::is_none")]
    pub uncompressed_data_rate_in_mb: Option<f64>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "agentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub agent_expiry_date: Option<String>,
    #[serde(rename = "isAgentUpdateRequired", skip_serializing_if = "Option::is_none")]
    pub is_agent_update_required: Option<String>,
    #[serde(rename = "isRebootAfterUpdateRequired", skip_serializing_if = "Option::is_none")]
    pub is_reboot_after_update_required: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "processServerName", skip_serializing)]
    pub process_server_name: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
    #[serde(rename = "protectedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_disks: Vec<InMageAzureV2ProtectedDiskDetails>,
    #[serde(rename = "diskResized", skip_serializing_if = "Option::is_none")]
    pub disk_resized: Option<String>,
    #[serde(rename = "masterTargetId", skip_serializing_if = "Option::is_none")]
    pub master_target_id: Option<String>,
    #[serde(rename = "sourceVmCpuCount", skip_serializing_if = "Option::is_none")]
    pub source_vm_cpu_count: Option<i32>,
    #[serde(rename = "sourceVmRamSizeInMB", skip_serializing_if = "Option::is_none")]
    pub source_vm_ram_size_in_mb: Option<i32>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vhdName", skip_serializing_if = "Option::is_none")]
    pub vhd_name: Option<String>,
    #[serde(rename = "osDiskId", skip_serializing_if = "Option::is_none")]
    pub os_disk_id: Option<String>,
    #[serde(rename = "azureVMDiskDetails", skip_serializing_if = "Vec::is_empty")]
    pub azure_vm_disk_details: Vec<AzureVmDiskDetails>,
    #[serde(rename = "recoveryAzureVMName", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_name: Option<String>,
    #[serde(rename = "recoveryAzureVMSize", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_size: Option<String>,
    #[serde(rename = "recoveryAzureStorageAccount", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_storage_account: Option<String>,
    #[serde(rename = "recoveryAzureLogStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_log_storage_account_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "selectedRecoveryAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_recovery_azure_network_id: Option<String>,
    #[serde(rename = "selectedTfoAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_tfo_azure_network_id: Option<String>,
    #[serde(rename = "selectedSourceNicId", skip_serializing_if = "Option::is_none")]
    pub selected_source_nic_id: Option<String>,
    #[serde(rename = "discoveryType", skip_serializing_if = "Option::is_none")]
    pub discovery_type: Option<String>,
    #[serde(rename = "enableRdpOnTargetOption", skip_serializing_if = "Option::is_none")]
    pub enable_rdp_on_target_option: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub datastores: Vec<String>,
    #[serde(rename = "targetVmId", skip_serializing_if = "Option::is_none")]
    pub target_vm_id: Option<String>,
    #[serde(rename = "recoveryAzureResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_resource_group_id: Option<String>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "useManagedDisks", skip_serializing_if = "Option::is_none")]
    pub use_managed_disks: Option<String>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<String>,
    #[serde(rename = "validationErrors", skip_serializing_if = "Vec::is_empty")]
    pub validation_errors: Vec<HealthError>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
    #[serde(rename = "lastUpdateReceivedTime", skip_serializing_if = "Option::is_none")]
    pub last_update_received_time: Option<String>,
    #[serde(rename = "replicaId", skip_serializing_if = "Option::is_none")]
    pub replica_id: Option<String>,
    #[serde(rename = "osVersion", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    #[serde(rename = "protectedManagedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_managed_disks: Vec<InMageAzureV2ManagedDiskDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2ReprotectInput {
    #[serde(flatten)]
    pub reverse_replication_provider_specific_input: ReverseReplicationProviderSpecificInput,
    #[serde(rename = "masterTargetId", skip_serializing_if = "Option::is_none")]
    pub master_target_id: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "storageAccountId", skip_serializing_if = "Option::is_none")]
    pub storage_account_id: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2TestFailoverInput {
    #[serde(flatten)]
    pub test_failover_provider_specific_input: TestFailoverProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2UnplannedFailoverInput {
    #[serde(flatten)]
    pub unplanned_failover_provider_specific_input: UnplannedFailoverProviderSpecificInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageAzureV2UpdateReplicationProtectedItemInput {
    #[serde(flatten)]
    pub update_replication_protected_item_provider_input: UpdateReplicationProtectedItemProviderInput,
    #[serde(rename = "recoveryAzureV1ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_v1_resource_group_id: Option<String>,
    #[serde(rename = "recoveryAzureV2ResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_v2_resource_group_id: Option<String>,
    #[serde(rename = "useManagedDisks", skip_serializing_if = "Option::is_none")]
    pub use_managed_disks: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageBasePolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageDisableProtectionProviderSpecificInput {
    #[serde(flatten)]
    pub disable_protection_provider_specific_input: DisableProtectionProviderSpecificInput,
    #[serde(rename = "replicaVmDeletionStatus", skip_serializing_if = "Option::is_none")]
    pub replica_vm_deletion_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "diskSizeInMB", skip_serializing_if = "Option::is_none")]
    pub disk_size_in_mb: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<String>,
    #[serde(rename = "diskConfiguration", skip_serializing_if = "Option::is_none")]
    pub disk_configuration: Option<String>,
    #[serde(rename = "volumeList", skip_serializing_if = "Vec::is_empty")]
    pub volume_list: Vec<DiskVolumeDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageDiskExclusionInput {
    #[serde(rename = "volumeOptions", skip_serializing_if = "Vec::is_empty")]
    pub volume_options: Vec<InMageVolumeExclusionOptions>,
    #[serde(rename = "diskSignatureOptions", skip_serializing_if = "Vec::is_empty")]
    pub disk_signature_options: Vec<InMageDiskSignatureExclusionOptions>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageDiskSignatureExclusionOptions {
    #[serde(rename = "diskSignature", skip_serializing_if = "Option::is_none")]
    pub disk_signature: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageEnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
    #[serde(rename = "vmFriendlyName", skip_serializing_if = "Option::is_none")]
    pub vm_friendly_name: Option<String>,
    #[serde(rename = "masterTargetId")]
    pub master_target_id: String,
    #[serde(rename = "processServerId")]
    pub process_server_id: String,
    #[serde(rename = "retentionDrive")]
    pub retention_drive: String,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "multiVmGroupId")]
    pub multi_vm_group_id: String,
    #[serde(rename = "multiVmGroupName")]
    pub multi_vm_group_name: String,
    #[serde(rename = "datastoreName", skip_serializing_if = "Option::is_none")]
    pub datastore_name: Option<String>,
    #[serde(rename = "diskExclusionInput", skip_serializing_if = "Option::is_none")]
    pub disk_exclusion_input: Option<InMageDiskExclusionInput>,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageFailoverProviderInput {
    #[serde(flatten)]
    pub provider_specific_failover_input: ProviderSpecificFailoverInput,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<in_mage_failover_provider_input::RecoveryPointType>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
pub mod in_mage_failover_provider_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        LatestTime,
        LatestTag,
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMagePolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMagePolicyInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus")]
    pub multi_vm_sync_status: in_mage_policy_input::MultiVmSyncStatus,
}
pub mod in_mage_policy_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncStatus {
        Enable,
        Disable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageProtectedDiskDetails {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "protectionStage", skip_serializing_if = "Option::is_none")]
    pub protection_stage: Option<String>,
    #[serde(rename = "healthErrorCode", skip_serializing_if = "Option::is_none")]
    pub health_error_code: Option<String>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "resyncRequired", skip_serializing_if = "Option::is_none")]
    pub resync_required: Option<String>,
    #[serde(rename = "resyncProgressPercentage", skip_serializing_if = "Option::is_none")]
    pub resync_progress_percentage: Option<i32>,
    #[serde(rename = "resyncDurationInSeconds", skip_serializing_if = "Option::is_none")]
    pub resync_duration_in_seconds: Option<i64>,
    #[serde(rename = "diskCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub disk_capacity_in_bytes: Option<i64>,
    #[serde(rename = "fileSystemCapacityInBytes", skip_serializing_if = "Option::is_none")]
    pub file_system_capacity_in_bytes: Option<i64>,
    #[serde(rename = "sourceDataInMB", skip_serializing_if = "Option::is_none")]
    pub source_data_in_mb: Option<f64>,
    #[serde(rename = "psDataInMB", skip_serializing_if = "Option::is_none")]
    pub ps_data_in_mb: Option<f64>,
    #[serde(rename = "targetDataInMB", skip_serializing_if = "Option::is_none")]
    pub target_data_in_mb: Option<f64>,
    #[serde(rename = "diskResized", skip_serializing_if = "Option::is_none")]
    pub disk_resized: Option<String>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmAgentUpgradeBlockingErrorDetails {
    #[serde(rename = "errorCode", skip_serializing)]
    pub error_code: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing)]
    pub error_message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing)]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(rename = "errorMessageParameters", skip_serializing)]
    pub error_message_parameters: Option<serde_json::Value>,
    #[serde(rename = "errorTags", skip_serializing)]
    pub error_tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmApplyRecoveryPointInput {
    #[serde(flatten)]
    pub apply_recovery_point_provider_specific_input: ApplyRecoveryPointProviderSpecificInput,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmDiskInput {
    #[serde(rename = "diskId", skip_serializing_if = "Option::is_none")]
    pub disk_id: Option<String>,
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<in_mage_rcm_disk_input::DiskType>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_set_id: Option<String>,
}
pub mod in_mage_rcm_disk_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmDisksDefaultInput {
    #[serde(rename = "logStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<in_mage_rcm_disks_default_input::DiskType>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_set_id: Option<String>,
}
pub mod in_mage_rcm_disks_default_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmEnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
    #[serde(rename = "fabricDiscoveryMachineId", skip_serializing_if = "Option::is_none")]
    pub fabric_discovery_machine_id: Option<String>,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<InMageRcmDiskInput>,
    #[serde(rename = "disksDefault", skip_serializing_if = "Option::is_none")]
    pub disks_default: Option<InMageRcmDisksDefaultInput>,
    #[serde(rename = "targetResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_resource_group_id: Option<String>,
    #[serde(rename = "targetNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_network_id: Option<String>,
    #[serde(rename = "testNetworkId", skip_serializing_if = "Option::is_none")]
    pub test_network_id: Option<String>,
    #[serde(rename = "targetSubnetName", skip_serializing_if = "Option::is_none")]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "testSubnetName", skip_serializing_if = "Option::is_none")]
    pub test_subnet_name: Option<String>,
    #[serde(rename = "targetVmName", skip_serializing_if = "Option::is_none")]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<in_mage_rcm_enable_protection_input::LicenseType>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
}
pub mod in_mage_rcm_enable_protection_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        NotSpecified,
        NoLicenseType,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmEventDetails {
    #[serde(flatten)]
    pub event_provider_specific_details: EventProviderSpecificDetails,
    #[serde(rename = "protectedItemName", skip_serializing)]
    pub protected_item_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmFabricCreationInput {
    #[serde(flatten)]
    pub fabric_specific_creation_input: FabricSpecificCreationInput,
    #[serde(rename = "vmwareSiteId", skip_serializing_if = "Option::is_none")]
    pub vmware_site_id: Option<String>,
    #[serde(rename = "physicalSiteId", skip_serializing_if = "Option::is_none")]
    pub physical_site_id: Option<String>,
    #[serde(rename = "sourceAgentIdentity", skip_serializing_if = "Option::is_none")]
    pub source_agent_identity: Option<IdentityProviderInput>,
    #[serde(rename = "authCertificate", skip_serializing_if = "Option::is_none")]
    pub auth_certificate: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmFabricSpecificDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
    #[serde(rename = "vmwareSiteId", skip_serializing)]
    pub vmware_site_id: Option<String>,
    #[serde(rename = "physicalSiteId", skip_serializing)]
    pub physical_site_id: Option<String>,
    #[serde(rename = "serviceEndpoint", skip_serializing)]
    pub service_endpoint: Option<String>,
    #[serde(rename = "serviceResourceId", skip_serializing)]
    pub service_resource_id: Option<String>,
    #[serde(rename = "serviceContainerId", skip_serializing)]
    pub service_container_id: Option<String>,
    #[serde(rename = "dataPlaneUri", skip_serializing)]
    pub data_plane_uri: Option<String>,
    #[serde(rename = "controlPlaneUri", skip_serializing)]
    pub control_plane_uri: Option<String>,
    #[serde(rename = "processServers", skip_serializing)]
    pub process_servers: Vec<ProcessServerDetails>,
    #[serde(rename = "rcmProxies", skip_serializing)]
    pub rcm_proxies: Vec<RcmProxyDetails>,
    #[serde(rename = "pushInstallers", skip_serializing)]
    pub push_installers: Vec<PushInstallerDetails>,
    #[serde(rename = "replicationAgents", skip_serializing)]
    pub replication_agents: Vec<ReplicationAgentDetails>,
    #[serde(rename = "reprotectAgents", skip_serializing)]
    pub reprotect_agents: Vec<ReprotectAgentDetails>,
    #[serde(skip_serializing)]
    pub dras: Vec<DraDetails>,
    #[serde(rename = "agentDetails", skip_serializing)]
    pub agent_details: Vec<AgentDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmLastAgentUpgradeErrorDetails {
    #[serde(rename = "errorCode", skip_serializing)]
    pub error_code: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing)]
    pub error_message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing)]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(rename = "errorMessageParameters", skip_serializing)]
    pub error_message_parameters: Option<serde_json::Value>,
    #[serde(rename = "errorTags", skip_serializing)]
    pub error_tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmMobilityAgentDetails {
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "latestVersion", skip_serializing)]
    pub latest_version: Option<String>,
    #[serde(rename = "driverVersion", skip_serializing)]
    pub driver_version: Option<String>,
    #[serde(rename = "latestUpgradableVersionWithoutReboot", skip_serializing)]
    pub latest_upgradable_version_without_reboot: Option<String>,
    #[serde(rename = "agentVersionExpiryDate", skip_serializing)]
    pub agent_version_expiry_date: Option<String>,
    #[serde(rename = "driverVersionExpiryDate", skip_serializing)]
    pub driver_version_expiry_date: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(rename = "reasonsBlockingUpgrade", skip_serializing)]
    pub reasons_blocking_upgrade: Vec<String>,
    #[serde(rename = "isUpgradeable", skip_serializing)]
    pub is_upgradeable: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmNicDetails {
    #[serde(rename = "nicId", skip_serializing)]
    pub nic_id: Option<String>,
    #[serde(rename = "isPrimaryNic", skip_serializing)]
    pub is_primary_nic: Option<String>,
    #[serde(rename = "isSelectedForFailover", skip_serializing)]
    pub is_selected_for_failover: Option<String>,
    #[serde(rename = "sourceIPAddress", skip_serializing)]
    pub source_ip_address: Option<String>,
    #[serde(rename = "sourceIPAddressType", skip_serializing)]
    pub source_ip_address_type: Option<in_mage_rcm_nic_details::SourceIpAddressType>,
    #[serde(rename = "sourceNetworkId", skip_serializing)]
    pub source_network_id: Option<String>,
    #[serde(rename = "sourceSubnetName", skip_serializing)]
    pub source_subnet_name: Option<String>,
    #[serde(rename = "targetIPAddress", skip_serializing)]
    pub target_ip_address: Option<String>,
    #[serde(rename = "targetIPAddressType", skip_serializing)]
    pub target_ip_address_type: Option<in_mage_rcm_nic_details::TargetIpAddressType>,
    #[serde(rename = "targetSubnetName", skip_serializing)]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "testSubnetName", skip_serializing)]
    pub test_subnet_name: Option<String>,
    #[serde(rename = "testIPAddress", skip_serializing)]
    pub test_ip_address: Option<String>,
    #[serde(rename = "testIPAddressType", skip_serializing)]
    pub test_ip_address_type: Option<in_mage_rcm_nic_details::TestIpAddressType>,
}
pub mod in_mage_rcm_nic_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceIpAddressType {
        Dynamic,
        Static,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetIpAddressType {
        Dynamic,
        Static,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TestIpAddressType {
        Dynamic,
        Static,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmNicInput {
    #[serde(rename = "nicId", skip_serializing_if = "Option::is_none")]
    pub nic_id: Option<String>,
    #[serde(rename = "isPrimaryNic", skip_serializing_if = "Option::is_none")]
    pub is_primary_nic: Option<String>,
    #[serde(rename = "isSelectedForFailover", skip_serializing_if = "Option::is_none")]
    pub is_selected_for_failover: Option<String>,
    #[serde(rename = "targetSubnetName", skip_serializing_if = "Option::is_none")]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "targetStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub target_static_ip_address: Option<String>,
    #[serde(rename = "testSubnetName", skip_serializing_if = "Option::is_none")]
    pub test_subnet_name: Option<String>,
    #[serde(rename = "testStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub test_static_ip_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmPolicyCreationInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointHistoryInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history_in_minutes: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "enableMultiVmSync", skip_serializing_if = "Option::is_none")]
    pub enable_multi_vm_sync: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmPolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointHistoryInMinutes", skip_serializing)]
    pub recovery_point_history_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing)]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing)]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "enableMultiVmSync", skip_serializing)]
    pub enable_multi_vm_sync: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmProtectedDiskDetails {
    #[serde(rename = "diskId", skip_serializing)]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing)]
    pub disk_name: Option<String>,
    #[serde(rename = "isOSDisk", skip_serializing)]
    pub is_os_disk: Option<String>,
    #[serde(rename = "capacityInBytes", skip_serializing)]
    pub capacity_in_bytes: Option<i64>,
    #[serde(rename = "logStorageAccountId", skip_serializing)]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "diskEncryptionSetId", skip_serializing)]
    pub disk_encryption_set_id: Option<String>,
    #[serde(rename = "seedManagedDiskId", skip_serializing)]
    pub seed_managed_disk_id: Option<String>,
    #[serde(rename = "targetManagedDiskId", skip_serializing)]
    pub target_managed_disk_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing)]
    pub disk_type: Option<in_mage_rcm_protected_disk_details::DiskType>,
}
pub mod in_mage_rcm_protected_disk_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmRecoveryPointDetails {
    #[serde(flatten)]
    pub provider_specific_recovery_point_details: ProviderSpecificRecoveryPointDetails,
    #[serde(rename = "isMultiVmSyncPoint", skip_serializing)]
    pub is_multi_vm_sync_point: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "internalIdentifier", skip_serializing)]
    pub internal_identifier: Option<String>,
    #[serde(rename = "fabricDiscoveryMachineId", skip_serializing)]
    pub fabric_discovery_machine_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing)]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "discoveryType", skip_serializing)]
    pub discovery_type: Option<String>,
    #[serde(rename = "processServerId", skip_serializing)]
    pub process_server_id: Option<String>,
    #[serde(rename = "processorCoreCount", skip_serializing)]
    pub processor_core_count: Option<i32>,
    #[serde(rename = "allocatedMemoryInMB", skip_serializing)]
    pub allocated_memory_in_mb: Option<f64>,
    #[serde(rename = "processServerName", skip_serializing)]
    pub process_server_name: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing)]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "osType", skip_serializing)]
    pub os_type: Option<String>,
    #[serde(rename = "firmwareType", skip_serializing)]
    pub firmware_type: Option<String>,
    #[serde(rename = "targetGeneration", skip_serializing)]
    pub target_generation: Option<String>,
    #[serde(rename = "licenseType", skip_serializing)]
    pub license_type: Option<String>,
    #[serde(rename = "targetVmName", skip_serializing)]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing)]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetResourceGroupId", skip_serializing)]
    pub target_resource_group_id: Option<String>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing)]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing)]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing)]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing)]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
    #[serde(rename = "targetNetworkId", skip_serializing)]
    pub target_network_id: Option<String>,
    #[serde(rename = "testNetworkId", skip_serializing)]
    pub test_network_id: Option<String>,
    #[serde(rename = "failoverRecoveryPointId", skip_serializing)]
    pub failover_recovery_point_id: Option<String>,
    #[serde(rename = "lastRecoveryPointReceived", skip_serializing)]
    pub last_recovery_point_received: Option<String>,
    #[serde(rename = "lastRpoInSeconds", skip_serializing)]
    pub last_rpo_in_seconds: Option<i64>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing)]
    pub last_rpo_calculated_time: Option<String>,
    #[serde(rename = "lastRecoveryPointId", skip_serializing)]
    pub last_recovery_point_id: Option<String>,
    #[serde(rename = "initialReplicationProgressPercentage", skip_serializing)]
    pub initial_replication_progress_percentage: Option<i32>,
    #[serde(rename = "initialReplicationProcessedBytes", skip_serializing)]
    pub initial_replication_processed_bytes: Option<i64>,
    #[serde(rename = "initialReplicationTransferredBytes", skip_serializing)]
    pub initial_replication_transferred_bytes: Option<i64>,
    #[serde(rename = "resyncProgressPercentage", skip_serializing)]
    pub resync_progress_percentage: Option<i32>,
    #[serde(rename = "resyncProcessedBytes", skip_serializing)]
    pub resync_processed_bytes: Option<i64>,
    #[serde(rename = "resyncTransferredBytes", skip_serializing)]
    pub resync_transferred_bytes: Option<i64>,
    #[serde(rename = "resyncRequired", skip_serializing)]
    pub resync_required: Option<String>,
    #[serde(rename = "resyncState", skip_serializing)]
    pub resync_state: Option<in_mage_rcm_replication_details::ResyncState>,
    #[serde(rename = "agentUpgradeState", skip_serializing)]
    pub agent_upgrade_state: Option<in_mage_rcm_replication_details::AgentUpgradeState>,
    #[serde(rename = "lastAgentUpgradeType", skip_serializing)]
    pub last_agent_upgrade_type: Option<String>,
    #[serde(rename = "lastAgentUpgradeFailedJobId", skip_serializing)]
    pub last_agent_upgrade_failed_job_id: Option<String>,
    #[serde(rename = "protectedDisks", skip_serializing)]
    pub protected_disks: Vec<InMageRcmProtectedDiskDetails>,
    #[serde(rename = "isLastUpgradeSuccessful", skip_serializing)]
    pub is_last_upgrade_successful: Option<String>,
    #[serde(rename = "mobilityAgentDetails", skip_serializing_if = "Option::is_none")]
    pub mobility_agent_details: Option<InMageRcmMobilityAgentDetails>,
    #[serde(rename = "lastAgentUpgradeErrorDetails", skip_serializing)]
    pub last_agent_upgrade_error_details: Vec<InMageRcmLastAgentUpgradeErrorDetails>,
    #[serde(rename = "agentUpgradeBlockingErrorDetails", skip_serializing)]
    pub agent_upgrade_blocking_error_details: Vec<InMageRcmAgentUpgradeBlockingErrorDetails>,
    #[serde(rename = "vmNics", skip_serializing)]
    pub vm_nics: Vec<InMageRcmNicDetails>,
}
pub mod in_mage_rcm_replication_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResyncState {
        None,
        PreparedForResynchronization,
        StartedResynchronization,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgentUpgradeState {
        None,
        Started,
        Completed,
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmTestFailoverInput {
    #[serde(flatten)]
    pub test_failover_provider_specific_input: TestFailoverProviderSpecificInput,
    #[serde(rename = "networkId", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmUnplannedFailoverInput {
    #[serde(flatten)]
    pub unplanned_failover_provider_specific_input: UnplannedFailoverProviderSpecificInput,
    #[serde(rename = "performShutdown", skip_serializing_if = "Option::is_none")]
    pub perform_shutdown: Option<String>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageRcmUpdateReplicationProtectedItemInput {
    #[serde(flatten)]
    pub update_replication_protected_item_provider_input: UpdateReplicationProtectedItemProviderInput,
    #[serde(rename = "targetVmName", skip_serializing_if = "Option::is_none")]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_resource_group_id: Option<String>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetAvailabilityZone", skip_serializing_if = "Option::is_none")]
    pub target_availability_zone: Option<String>,
    #[serde(rename = "targetProximityPlacementGroupId", skip_serializing_if = "Option::is_none")]
    pub target_proximity_placement_group_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
    #[serde(rename = "targetNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_network_id: Option<String>,
    #[serde(rename = "testNetworkId", skip_serializing_if = "Option::is_none")]
    pub test_network_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<InMageRcmNicInput>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<in_mage_rcm_update_replication_protected_item_input::LicenseType>,
}
pub mod in_mage_rcm_update_replication_protected_item_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        NotSpecified,
        NoLicenseType,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageReplicationDetails {
    #[serde(flatten)]
    pub replication_provider_specific_settings: ReplicationProviderSpecificSettings,
    #[serde(rename = "activeSiteType", skip_serializing_if = "Option::is_none")]
    pub active_site_type: Option<String>,
    #[serde(rename = "sourceVmCpuCount", skip_serializing_if = "Option::is_none")]
    pub source_vm_cpu_count: Option<i32>,
    #[serde(rename = "sourceVmRamSizeInMB", skip_serializing_if = "Option::is_none")]
    pub source_vm_ram_size_in_mb: Option<i32>,
    #[serde(rename = "osDetails", skip_serializing_if = "Option::is_none")]
    pub os_details: Option<OsDiskDetails>,
    #[serde(rename = "protectionStage", skip_serializing_if = "Option::is_none")]
    pub protection_stage: Option<String>,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "vmProtectionState", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state: Option<String>,
    #[serde(rename = "vmProtectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub vm_protection_state_description: Option<String>,
    #[serde(rename = "resyncDetails", skip_serializing_if = "Option::is_none")]
    pub resync_details: Option<InitialReplicationDetails>,
    #[serde(rename = "retentionWindowStart", skip_serializing_if = "Option::is_none")]
    pub retention_window_start: Option<String>,
    #[serde(rename = "retentionWindowEnd", skip_serializing_if = "Option::is_none")]
    pub retention_window_end: Option<String>,
    #[serde(rename = "compressedDataRateInMB", skip_serializing_if = "Option::is_none")]
    pub compressed_data_rate_in_mb: Option<f64>,
    #[serde(rename = "uncompressedDataRateInMB", skip_serializing_if = "Option::is_none")]
    pub uncompressed_data_rate_in_mb: Option<f64>,
    #[serde(rename = "rpoInSeconds", skip_serializing_if = "Option::is_none")]
    pub rpo_in_seconds: Option<i64>,
    #[serde(rename = "protectedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_disks: Vec<InMageProtectedDiskDetails>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "masterTargetId", skip_serializing_if = "Option::is_none")]
    pub master_target_id: Option<String>,
    #[serde(rename = "consistencyPoints", skip_serializing_if = "Option::is_none")]
    pub consistency_points: Option<serde_json::Value>,
    #[serde(rename = "diskResized", skip_serializing_if = "Option::is_none")]
    pub disk_resized: Option<String>,
    #[serde(rename = "rebootAfterUpdateStatus", skip_serializing_if = "Option::is_none")]
    pub reboot_after_update_status: Option<String>,
    #[serde(rename = "multiVmGroupId", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_id: Option<String>,
    #[serde(rename = "multiVmGroupName", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_name: Option<String>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<String>,
    #[serde(rename = "agentDetails", skip_serializing_if = "Option::is_none")]
    pub agent_details: Option<InMageAgentDetails>,
    #[serde(rename = "vCenterInfrastructureId", skip_serializing_if = "Option::is_none")]
    pub v_center_infrastructure_id: Option<String>,
    #[serde(rename = "infrastructureVmId", skip_serializing_if = "Option::is_none")]
    pub infrastructure_vm_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicDetails>,
    #[serde(rename = "discoveryType", skip_serializing_if = "Option::is_none")]
    pub discovery_type: Option<String>,
    #[serde(rename = "azureStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub azure_storage_account_id: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub datastores: Vec<String>,
    #[serde(rename = "validationErrors", skip_serializing_if = "Vec::is_empty")]
    pub validation_errors: Vec<HealthError>,
    #[serde(rename = "lastRpoCalculatedTime", skip_serializing_if = "Option::is_none")]
    pub last_rpo_calculated_time: Option<String>,
    #[serde(rename = "lastUpdateReceivedTime", skip_serializing_if = "Option::is_none")]
    pub last_update_received_time: Option<String>,
    #[serde(rename = "replicaId", skip_serializing_if = "Option::is_none")]
    pub replica_id: Option<String>,
    #[serde(rename = "osVersion", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageReprotectInput {
    #[serde(flatten)]
    pub reverse_replication_provider_specific_input: ReverseReplicationProviderSpecificInput,
    #[serde(rename = "masterTargetId")]
    pub master_target_id: String,
    #[serde(rename = "processServerId")]
    pub process_server_id: String,
    #[serde(rename = "retentionDrive")]
    pub retention_drive: String,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "datastoreName", skip_serializing_if = "Option::is_none")]
    pub datastore_name: Option<String>,
    #[serde(rename = "diskExclusionInput", skip_serializing_if = "Option::is_none")]
    pub disk_exclusion_input: Option<InMageDiskExclusionInput>,
    #[serde(rename = "profileId")]
    pub profile_id: String,
    #[serde(rename = "disksToInclude", skip_serializing_if = "Vec::is_empty")]
    pub disks_to_include: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageTestFailoverInput {
    #[serde(flatten)]
    pub test_failover_provider_specific_input: TestFailoverProviderSpecificInput,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<in_mage_test_failover_input::RecoveryPointType>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
pub mod in_mage_test_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        LatestTime,
        LatestTag,
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageUnplannedFailoverInput {
    #[serde(flatten)]
    pub unplanned_failover_provider_specific_input: UnplannedFailoverProviderSpecificInput,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<in_mage_unplanned_failover_input::RecoveryPointType>,
    #[serde(rename = "recoveryPointId", skip_serializing_if = "Option::is_none")]
    pub recovery_point_id: Option<String>,
}
pub mod in_mage_unplanned_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        LatestTime,
        LatestTag,
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InMageVolumeExclusionOptions {
    #[serde(rename = "volumeLabel", skip_serializing_if = "Option::is_none")]
    pub volume_label: Option<String>,
    #[serde(rename = "onlyExcludeIfSingleVolume", skip_serializing_if = "Option::is_none")]
    pub only_exclude_if_single_volume: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InnerHealthError {
    #[serde(rename = "errorSource", skip_serializing_if = "Option::is_none")]
    pub error_source: Option<String>,
    #[serde(rename = "errorType", skip_serializing_if = "Option::is_none")]
    pub error_type: Option<String>,
    #[serde(rename = "errorLevel", skip_serializing_if = "Option::is_none")]
    pub error_level: Option<String>,
    #[serde(rename = "errorCategory", skip_serializing_if = "Option::is_none")]
    pub error_category: Option<String>,
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(rename = "summaryMessage", skip_serializing_if = "Option::is_none")]
    pub summary_message: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing_if = "Option::is_none")]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing_if = "Option::is_none")]
    pub recommended_action: Option<String>,
    #[serde(rename = "creationTimeUtc", skip_serializing_if = "Option::is_none")]
    pub creation_time_utc: Option<String>,
    #[serde(rename = "recoveryProviderErrorMessage", skip_serializing_if = "Option::is_none")]
    pub recovery_provider_error_message: Option<String>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputEndpoint {
    #[serde(rename = "endpointName", skip_serializing_if = "Option::is_none")]
    pub endpoint_name: Option<String>,
    #[serde(rename = "privatePort", skip_serializing_if = "Option::is_none")]
    pub private_port: Option<i32>,
    #[serde(rename = "publicPort", skip_serializing_if = "Option::is_none")]
    pub public_port: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpConfig {
    #[serde(rename = "staticIPAddress", skip_serializing_if = "Option::is_none")]
    pub static_ip_address: Option<String>,
    #[serde(rename = "publicIpAddressId", skip_serializing_if = "Option::is_none")]
    pub public_ip_address_id: Option<String>,
    #[serde(rename = "lBBackendAddressPoolIds", skip_serializing_if = "Vec::is_empty")]
    pub l_b_backend_address_pool_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Job>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
    #[serde(rename = "affectedObjectDetails", skip_serializing_if = "Option::is_none")]
    pub affected_object_details: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobEntity {
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "jobFriendlyName", skip_serializing_if = "Option::is_none")]
    pub job_friendly_name: Option<String>,
    #[serde(rename = "targetObjectId", skip_serializing_if = "Option::is_none")]
    pub target_object_id: Option<String>,
    #[serde(rename = "targetObjectName", skip_serializing_if = "Option::is_none")]
    pub target_object_name: Option<String>,
    #[serde(rename = "targetInstanceType", skip_serializing_if = "Option::is_none")]
    pub target_instance_type: Option<String>,
    #[serde(rename = "jobScenarioName", skip_serializing_if = "Option::is_none")]
    pub job_scenario_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobErrorDetails {
    #[serde(rename = "serviceErrorDetails", skip_serializing_if = "Option::is_none")]
    pub service_error_details: Option<ServiceError>,
    #[serde(rename = "providerErrorDetails", skip_serializing_if = "Option::is_none")]
    pub provider_error_details: Option<ProviderError>,
    #[serde(rename = "errorLevel", skip_serializing_if = "Option::is_none")]
    pub error_level: Option<String>,
    #[serde(rename = "creationTime", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[serde(rename = "activityId", skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
    #[serde(rename = "scenarioName", skip_serializing_if = "Option::is_none")]
    pub scenario_name: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "stateDescription", skip_serializing_if = "Option::is_none")]
    pub state_description: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<AsrTask>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<JobErrorDetails>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "allowedActions", skip_serializing_if = "Vec::is_empty")]
    pub allowed_actions: Vec<String>,
    #[serde(rename = "targetObjectId", skip_serializing_if = "Option::is_none")]
    pub target_object_id: Option<String>,
    #[serde(rename = "targetObjectName", skip_serializing_if = "Option::is_none")]
    pub target_object_name: Option<String>,
    #[serde(rename = "targetInstanceType", skip_serializing_if = "Option::is_none")]
    pub target_instance_type: Option<String>,
    #[serde(rename = "customDetails", skip_serializing_if = "Option::is_none")]
    pub custom_details: Option<JobDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobQueryParameter {
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "fabricId", skip_serializing_if = "Option::is_none")]
    pub fabric_id: Option<String>,
    #[serde(rename = "affectedObjectTypes", skip_serializing_if = "Option::is_none")]
    pub affected_object_types: Option<String>,
    #[serde(rename = "jobStatus", skip_serializing_if = "Option::is_none")]
    pub job_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobStatusEventDetails {
    #[serde(flatten)]
    pub event_specific_details: EventSpecificDetails,
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "jobFriendlyName", skip_serializing_if = "Option::is_none")]
    pub job_friendly_name: Option<String>,
    #[serde(rename = "jobStatus", skip_serializing_if = "Option::is_none")]
    pub job_status: Option<String>,
    #[serde(rename = "affectedObjectType", skip_serializing_if = "Option::is_none")]
    pub affected_object_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(rename = "jobTask", skip_serializing_if = "Option::is_none")]
    pub job_task: Option<JobEntity>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyEncryptionKeyInfo {
    #[serde(rename = "keyIdentifier", skip_serializing_if = "Option::is_none")]
    pub key_identifier: Option<String>,
    #[serde(rename = "keyVaultResourceArmId", skip_serializing_if = "Option::is_none")]
    pub key_vault_resource_arm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogicalNetwork {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LogicalNetworkProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogicalNetworkCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LogicalNetwork>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogicalNetworkProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "networkVirtualizationStatus", skip_serializing_if = "Option::is_none")]
    pub network_virtualization_status: Option<String>,
    #[serde(rename = "logicalNetworkUsage", skip_serializing_if = "Option::is_none")]
    pub logical_network_usage: Option<String>,
    #[serde(rename = "logicalNetworkDefinitionsStatus", skip_serializing_if = "Option::is_none")]
    pub logical_network_definitions_status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualActionTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instructions: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub observation: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MasterTargetServer {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "versionStatus", skip_serializing_if = "Option::is_none")]
    pub version_status: Option<String>,
    #[serde(rename = "retentionVolumes", skip_serializing_if = "Vec::is_empty")]
    pub retention_volumes: Vec<RetentionVolume>,
    #[serde(rename = "dataStores", skip_serializing_if = "Vec::is_empty")]
    pub data_stores: Vec<DataStore>,
    #[serde(rename = "validationErrors", skip_serializing_if = "Vec::is_empty")]
    pub validation_errors: Vec<HealthError>,
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<HealthError>,
    #[serde(rename = "diskCount", skip_serializing_if = "Option::is_none")]
    pub disk_count: Option<i32>,
    #[serde(rename = "osVersion", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    #[serde(rename = "agentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub agent_expiry_date: Option<String>,
    #[serde(rename = "marsAgentVersion", skip_serializing_if = "Option::is_none")]
    pub mars_agent_version: Option<String>,
    #[serde(rename = "marsAgentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub mars_agent_expiry_date: Option<String>,
    #[serde(rename = "agentVersionDetails", skip_serializing_if = "Option::is_none")]
    pub agent_version_details: Option<VersionDetails>,
    #[serde(rename = "marsAgentVersionDetails", skip_serializing_if = "Option::is_none")]
    pub mars_agent_version_details: Option<VersionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateInput {
    pub properties: MigrateInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateInputProperties {
    #[serde(rename = "providerSpecificDetails")]
    pub provider_specific_details: MigrateProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateProviderSpecificInput {
    #[serde(rename = "instanceType")]
    pub instance_type: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationItem {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MigrationItemProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationItemCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<MigrationItem>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationItemProperties {
    #[serde(rename = "machineName", skip_serializing)]
    pub machine_name: Option<String>,
    #[serde(rename = "policyId", skip_serializing)]
    pub policy_id: Option<String>,
    #[serde(rename = "policyFriendlyName", skip_serializing)]
    pub policy_friendly_name: Option<String>,
    #[serde(rename = "recoveryServicesProviderId", skip_serializing)]
    pub recovery_services_provider_id: Option<String>,
    #[serde(rename = "migrationState", skip_serializing)]
    pub migration_state: Option<migration_item_properties::MigrationState>,
    #[serde(rename = "migrationStateDescription", skip_serializing)]
    pub migration_state_description: Option<String>,
    #[serde(rename = "testMigrateState", skip_serializing)]
    pub test_migrate_state: Option<migration_item_properties::TestMigrateState>,
    #[serde(rename = "testMigrateStateDescription", skip_serializing)]
    pub test_migrate_state_description: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<String>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
    #[serde(rename = "allowedOperations", skip_serializing)]
    pub allowed_operations: Vec<String>,
    #[serde(rename = "currentJob", skip_serializing_if = "Option::is_none")]
    pub current_job: Option<CurrentJobDetails>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<MigrationProviderSpecificSettings>,
}
pub mod migration_item_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MigrationState {
        None,
        EnableMigrationInProgress,
        EnableMigrationFailed,
        DisableMigrationInProgress,
        DisableMigrationFailed,
        InitialSeedingInProgress,
        InitialSeedingFailed,
        Replicating,
        MigrationInProgress,
        MigrationSucceeded,
        MigrationFailed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TestMigrateState {
        None,
        TestMigrationInProgress,
        TestMigrationSucceeded,
        TestMigrationFailed,
        TestMigrationCleanupInProgress,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationItemsQueryParameter {
    #[serde(rename = "sourceFabricName", skip_serializing_if = "Option::is_none")]
    pub source_fabric_name: Option<String>,
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationProviderSpecificSettings {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationRecoveryPoint {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MigrationRecoveryPointProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationRecoveryPointCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<MigrationRecoveryPoint>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrationRecoveryPointProperties {
    #[serde(rename = "recoveryPointTime", skip_serializing)]
    pub recovery_point_time: Option<String>,
    #[serde(rename = "recoveryPointType", skip_serializing)]
    pub recovery_point_type: Option<migration_recovery_point_properties::RecoveryPointType>,
}
pub mod migration_recovery_point_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        NotSpecified,
        ApplicationConsistent,
        CrashConsistent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MobilityServiceUpdate {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "rebootStatus", skip_serializing_if = "Option::is_none")]
    pub reboot_status: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Network {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<NetworkProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Network>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkMapping {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<NetworkMappingProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkMappingCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<NetworkMapping>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkMappingFabricSpecificSettings {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkMappingProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "primaryNetworkFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_network_friendly_name: Option<String>,
    #[serde(rename = "primaryNetworkId", skip_serializing_if = "Option::is_none")]
    pub primary_network_id: Option<String>,
    #[serde(rename = "primaryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_friendly_name: Option<String>,
    #[serde(rename = "recoveryNetworkFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_network_friendly_name: Option<String>,
    #[serde(rename = "recoveryNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_network_id: Option<String>,
    #[serde(rename = "recoveryFabricArmId", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_arm_id: Option<String>,
    #[serde(rename = "recoveryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_friendly_name: Option<String>,
    #[serde(rename = "fabricSpecificSettings", skip_serializing_if = "Option::is_none")]
    pub fabric_specific_settings: Option<NetworkMappingFabricSpecificSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkProperties {
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub subnets: Vec<Subnet>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "networkType", skip_serializing_if = "Option::is_none")]
    pub network_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewProtectionProfile {
    #[serde(flatten)]
    pub protection_profile_custom_details: ProtectionProfileCustomDetails,
    #[serde(rename = "policyName")]
    pub policy_name: String,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus")]
    pub multi_vm_sync_status: new_protection_profile::MultiVmSyncStatus,
}
pub mod new_protection_profile {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncStatus {
        Enable,
        Disable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewRecoveryVirtualNetwork {
    #[serde(flatten)]
    pub recovery_virtual_network_custom_details: RecoveryVirtualNetworkCustomDetails,
    #[serde(rename = "recoveryVirtualNetworkResourceGroupName", skip_serializing_if = "Option::is_none")]
    pub recovery_virtual_network_resource_group_name: Option<String>,
    #[serde(rename = "recoveryVirtualNetworkName", skip_serializing_if = "Option::is_none")]
    pub recovery_virtual_network_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Object {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationsDiscovery {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<Display>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OperationsDiscoveryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationsDiscoveryCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<OperationsDiscovery>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationsDiscoveryProperties {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OsDetails {
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "productType", skip_serializing_if = "Option::is_none")]
    pub product_type: Option<String>,
    #[serde(rename = "osEdition", skip_serializing_if = "Option::is_none")]
    pub os_edition: Option<String>,
    #[serde(rename = "oSVersion", skip_serializing_if = "Option::is_none")]
    pub o_s_version: Option<String>,
    #[serde(rename = "oSMajorVersion", skip_serializing_if = "Option::is_none")]
    pub o_s_major_version: Option<String>,
    #[serde(rename = "oSMinorVersion", skip_serializing_if = "Option::is_none")]
    pub o_s_minor_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OsDiskDetails {
    #[serde(rename = "osVhdId", skip_serializing_if = "Option::is_none")]
    pub os_vhd_id: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vhdName", skip_serializing_if = "Option::is_none")]
    pub vhd_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OsVersionWrapper {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "servicePack", skip_serializing_if = "Option::is_none")]
    pub service_pack: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlannedFailoverInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PlannedFailoverInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlannedFailoverInputProperties {
    #[serde(rename = "failoverDirection", skip_serializing_if = "Option::is_none")]
    pub failover_direction: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ProviderSpecificFailoverInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Policy {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PolicyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Policy>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<PolicyProviderSpecificDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProviderSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessServer {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "versionStatus", skip_serializing_if = "Option::is_none")]
    pub version_status: Option<String>,
    #[serde(rename = "mobilityServiceUpdates", skip_serializing_if = "Vec::is_empty")]
    pub mobility_service_updates: Vec<MobilityServiceUpdate>,
    #[serde(rename = "hostId", skip_serializing_if = "Option::is_none")]
    pub host_id: Option<String>,
    #[serde(rename = "machineCount", skip_serializing_if = "Option::is_none")]
    pub machine_count: Option<String>,
    #[serde(rename = "replicationPairCount", skip_serializing_if = "Option::is_none")]
    pub replication_pair_count: Option<String>,
    #[serde(rename = "systemLoad", skip_serializing_if = "Option::is_none")]
    pub system_load: Option<String>,
    #[serde(rename = "systemLoadStatus", skip_serializing_if = "Option::is_none")]
    pub system_load_status: Option<String>,
    #[serde(rename = "cpuLoad", skip_serializing_if = "Option::is_none")]
    pub cpu_load: Option<String>,
    #[serde(rename = "cpuLoadStatus", skip_serializing_if = "Option::is_none")]
    pub cpu_load_status: Option<String>,
    #[serde(rename = "totalMemoryInBytes", skip_serializing_if = "Option::is_none")]
    pub total_memory_in_bytes: Option<i64>,
    #[serde(rename = "availableMemoryInBytes", skip_serializing_if = "Option::is_none")]
    pub available_memory_in_bytes: Option<i64>,
    #[serde(rename = "memoryUsageStatus", skip_serializing_if = "Option::is_none")]
    pub memory_usage_status: Option<String>,
    #[serde(rename = "totalSpaceInBytes", skip_serializing_if = "Option::is_none")]
    pub total_space_in_bytes: Option<i64>,
    #[serde(rename = "availableSpaceInBytes", skip_serializing_if = "Option::is_none")]
    pub available_space_in_bytes: Option<i64>,
    #[serde(rename = "spaceUsageStatus", skip_serializing_if = "Option::is_none")]
    pub space_usage_status: Option<String>,
    #[serde(rename = "psServiceStatus", skip_serializing_if = "Option::is_none")]
    pub ps_service_status: Option<String>,
    #[serde(rename = "sslCertExpiryDate", skip_serializing_if = "Option::is_none")]
    pub ssl_cert_expiry_date: Option<String>,
    #[serde(rename = "sslCertExpiryRemainingDays", skip_serializing_if = "Option::is_none")]
    pub ssl_cert_expiry_remaining_days: Option<i32>,
    #[serde(rename = "osVersion", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<HealthError>,
    #[serde(rename = "agentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub agent_expiry_date: Option<String>,
    #[serde(rename = "agentVersionDetails", skip_serializing_if = "Option::is_none")]
    pub agent_version_details: Option<VersionDetails>,
    #[serde(skip_serializing)]
    pub health: Option<process_server::Health>,
    #[serde(rename = "psStatsRefreshTime", skip_serializing)]
    pub ps_stats_refresh_time: Option<String>,
    #[serde(rename = "throughputUploadPendingDataInBytes", skip_serializing)]
    pub throughput_upload_pending_data_in_bytes: Option<i64>,
    #[serde(rename = "throughputInMBps", skip_serializing)]
    pub throughput_in_m_bps: Option<i64>,
    #[serde(rename = "throughputInBytes", skip_serializing)]
    pub throughput_in_bytes: Option<i64>,
    #[serde(rename = "throughputStatus", skip_serializing)]
    pub throughput_status: Option<String>,
    #[serde(rename = "marsCommunicationStatus", skip_serializing)]
    pub mars_communication_status: Option<String>,
    #[serde(rename = "marsRegistrationStatus", skip_serializing)]
    pub mars_registration_status: Option<String>,
}
pub mod process_server {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessServerDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(rename = "totalMemoryInBytes", skip_serializing)]
    pub total_memory_in_bytes: Option<i64>,
    #[serde(rename = "availableMemoryInBytes", skip_serializing)]
    pub available_memory_in_bytes: Option<i64>,
    #[serde(rename = "usedMemoryInBytes", skip_serializing)]
    pub used_memory_in_bytes: Option<i64>,
    #[serde(rename = "memoryUsagePercentage", skip_serializing)]
    pub memory_usage_percentage: Option<f64>,
    #[serde(rename = "totalSpaceInBytes", skip_serializing)]
    pub total_space_in_bytes: Option<i64>,
    #[serde(rename = "availableSpaceInBytes", skip_serializing)]
    pub available_space_in_bytes: Option<i64>,
    #[serde(rename = "usedSpaceInBytes", skip_serializing)]
    pub used_space_in_bytes: Option<i64>,
    #[serde(rename = "freeSpacePercentage", skip_serializing)]
    pub free_space_percentage: Option<f64>,
    #[serde(rename = "throughputUploadPendingDataInBytes", skip_serializing)]
    pub throughput_upload_pending_data_in_bytes: Option<i64>,
    #[serde(rename = "throughputInBytes", skip_serializing)]
    pub throughput_in_bytes: Option<i64>,
    #[serde(rename = "processorUsagePercentage", skip_serializing)]
    pub processor_usage_percentage: Option<f64>,
    #[serde(skip_serializing)]
    pub health: Option<process_server_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
    #[serde(rename = "historicHealth", skip_serializing)]
    pub historic_health: Option<process_server_details::HistoricHealth>,
}
pub mod process_server_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HistoricHealth {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectableItem {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProtectableItemProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectableItemCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ProtectableItem>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectableItemProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "protectionStatus", skip_serializing_if = "Option::is_none")]
    pub protection_status: Option<String>,
    #[serde(rename = "replicationProtectedItemId", skip_serializing_if = "Option::is_none")]
    pub replication_protected_item_id: Option<String>,
    #[serde(rename = "recoveryServicesProviderId", skip_serializing_if = "Option::is_none")]
    pub recovery_services_provider_id: Option<String>,
    #[serde(rename = "protectionReadinessErrors", skip_serializing_if = "Vec::is_empty")]
    pub protection_readiness_errors: Vec<String>,
    #[serde(rename = "supportedReplicationProviders", skip_serializing_if = "Vec::is_empty")]
    pub supported_replication_providers: Vec<String>,
    #[serde(rename = "customDetails", skip_serializing_if = "Option::is_none")]
    pub custom_details: Option<ConfigurationSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectableItemQueryParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectedItemsQueryParameter {
    #[serde(rename = "sourceFabricName", skip_serializing_if = "Option::is_none")]
    pub source_fabric_name: Option<String>,
    #[serde(rename = "recoveryPlanName", skip_serializing_if = "Option::is_none")]
    pub recovery_plan_name: Option<String>,
    #[serde(rename = "vCenterName", skip_serializing_if = "Option::is_none")]
    pub v_center_name: Option<String>,
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "multiVmGroupCreateOption", skip_serializing_if = "Option::is_none")]
    pub multi_vm_group_create_option: Option<protected_items_query_parameter::MultiVmGroupCreateOption>,
}
pub mod protected_items_query_parameter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmGroupCreateOption {
        AutoCreated,
        UserSpecified,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainer {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProtectionContainerProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ProtectionContainer>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerFabricSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerMapping {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProtectionContainerMappingProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerMappingCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ProtectionContainerMapping>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerMappingProperties {
    #[serde(rename = "targetProtectionContainerId", skip_serializing_if = "Option::is_none")]
    pub target_protection_container_id: Option<String>,
    #[serde(rename = "targetProtectionContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub target_protection_container_friendly_name: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ProtectionContainerMappingProviderSpecificDetails>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(rename = "healthErrorDetails", skip_serializing_if = "Vec::is_empty")]
    pub health_error_details: Vec<HealthError>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "sourceProtectionContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub source_protection_container_friendly_name: Option<String>,
    #[serde(rename = "sourceFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub source_fabric_friendly_name: Option<String>,
    #[serde(rename = "targetFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub target_fabric_friendly_name: Option<String>,
    #[serde(rename = "policyFriendlyName", skip_serializing_if = "Option::is_none")]
    pub policy_friendly_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerMappingProviderSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionContainerProperties {
    #[serde(rename = "fabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub fabric_friendly_name: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(rename = "protectedItemCount", skip_serializing_if = "Option::is_none")]
    pub protected_item_count: Option<i32>,
    #[serde(rename = "pairingStatus", skip_serializing_if = "Option::is_none")]
    pub pairing_status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(rename = "fabricSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub fabric_specific_details: Option<ProtectionContainerFabricSpecificDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProtectionProfileCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderError {
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<i32>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "errorId", skip_serializing_if = "Option::is_none")]
    pub error_id: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing_if = "Option::is_none")]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing_if = "Option::is_none")]
    pub recommended_action: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderSpecificFailoverInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderSpecificRecoveryPointDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RcmAzureMigrationPolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointThresholdInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_threshold_in_minutes: Option<i32>,
    #[serde(rename = "recoveryPointHistory", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "multiVmSyncStatus", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_status: Option<rcm_azure_migration_policy_details::MultiVmSyncStatus>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
}
pub mod rcm_azure_migration_policy_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncStatus {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PushInstallerDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<push_installer_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
}
pub mod push_installer_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RcmProxyDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<rcm_proxy_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
}
pub mod rcm_proxy_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryAvailabilitySetCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlan {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RecoveryPlanProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanA2aFailoverInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "recoveryPointType")]
    pub recovery_point_type: recovery_plan_a2a_failover_input::RecoveryPointType,
    #[serde(rename = "cloudServiceCreationOption", skip_serializing_if = "Option::is_none")]
    pub cloud_service_creation_option: Option<String>,
    #[serde(rename = "multiVmSyncPointOption", skip_serializing_if = "Option::is_none")]
    pub multi_vm_sync_point_option: Option<recovery_plan_a2a_failover_input::MultiVmSyncPointOption>,
}
pub mod recovery_plan_a2a_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        Latest,
        LatestApplicationConsistent,
        LatestCrashConsistent,
        LatestProcessed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MultiVmSyncPointOption {
        UseMultiVmSyncRecoveryPoint,
        UsePerVmRecoveryPoint,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanA2aDetails {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_details: RecoveryPlanProviderSpecificDetails,
    #[serde(rename = "primaryZone", skip_serializing_if = "Option::is_none")]
    pub primary_zone: Option<String>,
    #[serde(rename = "recoveryZone", skip_serializing_if = "Option::is_none")]
    pub recovery_zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanA2aInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_input: RecoveryPlanProviderSpecificInput,
    #[serde(rename = "primaryZone", skip_serializing_if = "Option::is_none")]
    pub primary_zone: Option<String>,
    #[serde(rename = "recoveryZone", skip_serializing_if = "Option::is_none")]
    pub recovery_zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanAction {
    #[serde(rename = "actionName")]
    pub action_name: String,
    #[serde(rename = "failoverTypes")]
    pub failover_types: Vec<String>,
    #[serde(rename = "failoverDirections")]
    pub failover_directions: Vec<String>,
    #[serde(rename = "customDetails")]
    pub custom_details: RecoveryPlanActionDetails,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanActionDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanAutomationRunbookActionDetails {
    #[serde(flatten)]
    pub recovery_plan_action_details: RecoveryPlanActionDetails,
    #[serde(rename = "runbookId", skip_serializing_if = "Option::is_none")]
    pub runbook_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(rename = "fabricLocation")]
    pub fabric_location: recovery_plan_automation_runbook_action_details::FabricLocation,
}
pub mod recovery_plan_automation_runbook_action_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FabricLocation {
        Primary,
        Recovery,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RecoveryPlan>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanGroup {
    #[serde(rename = "groupType")]
    pub group_type: recovery_plan_group::GroupType,
    #[serde(rename = "replicationProtectedItems", skip_serializing_if = "Vec::is_empty")]
    pub replication_protected_items: Vec<RecoveryPlanProtectedItem>,
    #[serde(rename = "startGroupActions", skip_serializing_if = "Vec::is_empty")]
    pub start_group_actions: Vec<RecoveryPlanAction>,
    #[serde(rename = "endGroupActions", skip_serializing_if = "Vec::is_empty")]
    pub end_group_actions: Vec<RecoveryPlanAction>,
}
pub mod recovery_plan_group {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum GroupType {
        Shutdown,
        Boot,
        Failover,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanGroupTaskDetails {
    #[serde(flatten)]
    pub group_task_details: GroupTaskDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "rpGroupType", skip_serializing_if = "Option::is_none")]
    pub rp_group_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanHyperVReplicaAzureFailbackInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "dataSyncOption")]
    pub data_sync_option: recovery_plan_hyper_v_replica_azure_failback_input::DataSyncOption,
    #[serde(rename = "recoveryVmCreationOption")]
    pub recovery_vm_creation_option: recovery_plan_hyper_v_replica_azure_failback_input::RecoveryVmCreationOption,
}
pub mod recovery_plan_hyper_v_replica_azure_failback_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataSyncOption {
        ForDownTime,
        ForSynchronization,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryVmCreationOption {
        CreateVmIfNotFound,
        NoAction,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanHyperVReplicaAzureFailoverInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "vaultLocation", skip_serializing_if = "Option::is_none")]
    pub vault_location: Option<String>,
    #[serde(rename = "primaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub primary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "secondaryKekCertificatePfx", skip_serializing_if = "Option::is_none")]
    pub secondary_kek_certificate_pfx: Option<String>,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<recovery_plan_hyper_v_replica_azure_failover_input::RecoveryPointType>,
}
pub mod recovery_plan_hyper_v_replica_azure_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        Latest,
        LatestApplicationConsistent,
        LatestProcessed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanInMageAzureV2FailoverInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "vaultLocation")]
    pub vault_location: String,
    #[serde(rename = "recoveryPointType")]
    pub recovery_point_type: recovery_plan_in_mage_azure_v2_failover_input::RecoveryPointType,
    #[serde(rename = "useMultiVmSyncPoint", skip_serializing_if = "Option::is_none")]
    pub use_multi_vm_sync_point: Option<String>,
}
pub mod recovery_plan_in_mage_azure_v2_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        Latest,
        LatestApplicationConsistent,
        LatestCrashConsistent,
        LatestProcessed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanInMageFailoverInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "recoveryPointType")]
    pub recovery_point_type: recovery_plan_in_mage_failover_input::RecoveryPointType,
}
pub mod recovery_plan_in_mage_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        LatestTime,
        LatestTag,
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanInMageRcmFailoverInput {
    #[serde(flatten)]
    pub recovery_plan_provider_specific_failover_input: RecoveryPlanProviderSpecificFailoverInput,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<recovery_plan_in_mage_rcm_failover_input::RecoveryPointType>,
    #[serde(rename = "useMultiVmSyncPoint", skip_serializing_if = "Option::is_none")]
    pub use_multi_vm_sync_point: Option<String>,
}
pub mod recovery_plan_in_mage_rcm_failover_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecoveryPointType {
        Latest,
        LatestApplicationConsistent,
        LatestCrashConsistent,
        LatestProcessed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanManualActionDetails {
    #[serde(flatten)]
    pub recovery_plan_action_details: RecoveryPlanActionDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanPlannedFailoverInput {
    pub properties: RecoveryPlanPlannedFailoverInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanPlannedFailoverInputProperties {
    #[serde(rename = "failoverDirection")]
    pub failover_direction: recovery_plan_planned_failover_input_properties::FailoverDirection,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Vec::is_empty")]
    pub provider_specific_details: Vec<RecoveryPlanProviderSpecificFailoverInput>,
}
pub mod recovery_plan_planned_failover_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FailoverDirection {
        PrimaryToRecovery,
        RecoveryToPrimary,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "primaryFabricId", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_id: Option<String>,
    #[serde(rename = "primaryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_friendly_name: Option<String>,
    #[serde(rename = "recoveryFabricId", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_id: Option<String>,
    #[serde(rename = "recoveryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_friendly_name: Option<String>,
    #[serde(rename = "failoverDeploymentModel", skip_serializing_if = "Option::is_none")]
    pub failover_deployment_model: Option<String>,
    #[serde(rename = "replicationProviders", skip_serializing_if = "Vec::is_empty")]
    pub replication_providers: Vec<String>,
    #[serde(rename = "allowedOperations", skip_serializing_if = "Vec::is_empty")]
    pub allowed_operations: Vec<String>,
    #[serde(rename = "lastPlannedFailoverTime", skip_serializing_if = "Option::is_none")]
    pub last_planned_failover_time: Option<String>,
    #[serde(rename = "lastUnplannedFailoverTime", skip_serializing_if = "Option::is_none")]
    pub last_unplanned_failover_time: Option<String>,
    #[serde(rename = "lastTestFailoverTime", skip_serializing_if = "Option::is_none")]
    pub last_test_failover_time: Option<String>,
    #[serde(rename = "currentScenario", skip_serializing_if = "Option::is_none")]
    pub current_scenario: Option<CurrentScenarioDetails>,
    #[serde(rename = "currentScenarioStatus", skip_serializing_if = "Option::is_none")]
    pub current_scenario_status: Option<String>,
    #[serde(rename = "currentScenarioStatusDescription", skip_serializing_if = "Option::is_none")]
    pub current_scenario_status_description: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub groups: Vec<RecoveryPlanGroup>,
    #[serde(rename = "providerSpecificDetails", skip_serializing)]
    pub provider_specific_details: Vec<RecoveryPlanProviderSpecificDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanProtectedItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "virtualMachineId", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanProviderSpecificDetails {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanProviderSpecificFailoverInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanScriptActionDetails {
    #[serde(flatten)]
    pub recovery_plan_action_details: RecoveryPlanActionDetails,
    pub path: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(rename = "fabricLocation")]
    pub fabric_location: recovery_plan_script_action_details::FabricLocation,
}
pub mod recovery_plan_script_action_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FabricLocation {
        Primary,
        Recovery,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanShutdownGroupTaskDetails {
    #[serde(flatten)]
    pub group_task_details: GroupTaskDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "rpGroupType", skip_serializing_if = "Option::is_none")]
    pub rp_group_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanTestFailoverCleanupInput {
    pub properties: RecoveryPlanTestFailoverCleanupInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanTestFailoverCleanupInputProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanTestFailoverInput {
    pub properties: RecoveryPlanTestFailoverInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanTestFailoverInputProperties {
    #[serde(rename = "failoverDirection")]
    pub failover_direction: recovery_plan_test_failover_input_properties::FailoverDirection,
    #[serde(rename = "networkType")]
    pub network_type: String,
    #[serde(rename = "networkId", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    #[serde(rename = "skipTestFailoverCleanup", skip_serializing_if = "Option::is_none")]
    pub skip_test_failover_cleanup: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Vec::is_empty")]
    pub provider_specific_details: Vec<RecoveryPlanProviderSpecificFailoverInput>,
}
pub mod recovery_plan_test_failover_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FailoverDirection {
        PrimaryToRecovery,
        RecoveryToPrimary,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanUnplannedFailoverInput {
    pub properties: RecoveryPlanUnplannedFailoverInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPlanUnplannedFailoverInputProperties {
    #[serde(rename = "failoverDirection")]
    pub failover_direction: recovery_plan_unplanned_failover_input_properties::FailoverDirection,
    #[serde(rename = "sourceSiteOperations")]
    pub source_site_operations: recovery_plan_unplanned_failover_input_properties::SourceSiteOperations,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Vec::is_empty")]
    pub provider_specific_details: Vec<RecoveryPlanProviderSpecificFailoverInput>,
}
pub mod recovery_plan_unplanned_failover_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FailoverDirection {
        PrimaryToRecovery,
        RecoveryToPrimary,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceSiteOperations {
        Required,
        NotRequired,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPoint {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RecoveryPointProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPointCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RecoveryPoint>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryPointProperties {
    #[serde(rename = "recoveryPointTime", skip_serializing_if = "Option::is_none")]
    pub recovery_point_time: Option<String>,
    #[serde(rename = "recoveryPointType", skip_serializing_if = "Option::is_none")]
    pub recovery_point_type: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ProviderSpecificRecoveryPointDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryProximityPlacementGroupCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryResourceGroupCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryServicesProvider {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RecoveryServicesProviderProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryServicesProviderCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RecoveryServicesProvider>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryServicesProviderProperties {
    #[serde(rename = "fabricType", skip_serializing_if = "Option::is_none")]
    pub fabric_type: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "providerVersion", skip_serializing_if = "Option::is_none")]
    pub provider_version: Option<String>,
    #[serde(rename = "serverVersion", skip_serializing_if = "Option::is_none")]
    pub server_version: Option<String>,
    #[serde(rename = "providerVersionState", skip_serializing_if = "Option::is_none")]
    pub provider_version_state: Option<String>,
    #[serde(rename = "providerVersionExpiryDate", skip_serializing_if = "Option::is_none")]
    pub provider_version_expiry_date: Option<String>,
    #[serde(rename = "fabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub fabric_friendly_name: Option<String>,
    #[serde(rename = "lastHeartBeat", skip_serializing_if = "Option::is_none")]
    pub last_heart_beat: Option<String>,
    #[serde(rename = "connectionStatus", skip_serializing_if = "Option::is_none")]
    pub connection_status: Option<String>,
    #[serde(rename = "protectedItemCount", skip_serializing_if = "Option::is_none")]
    pub protected_item_count: Option<i32>,
    #[serde(rename = "allowedScenarios", skip_serializing_if = "Vec::is_empty")]
    pub allowed_scenarios: Vec<String>,
    #[serde(rename = "healthErrorDetails", skip_serializing_if = "Vec::is_empty")]
    pub health_error_details: Vec<HealthError>,
    #[serde(rename = "draIdentifier", skip_serializing_if = "Option::is_none")]
    pub dra_identifier: Option<String>,
    #[serde(rename = "authenticationIdentityDetails", skip_serializing_if = "Option::is_none")]
    pub authentication_identity_details: Option<IdentityProviderDetails>,
    #[serde(rename = "resourceAccessIdentityDetails", skip_serializing_if = "Option::is_none")]
    pub resource_access_identity_details: Option<IdentityProviderDetails>,
    #[serde(rename = "providerVersionDetails", skip_serializing_if = "Option::is_none")]
    pub provider_version_details: Option<VersionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryVirtualNetworkCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoveDisksInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RemoveDisksInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoveDisksInputProperties {
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<RemoveDisksProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoveDisksProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoveProtectionContainerMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RemoveProtectionContainerMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoveProtectionContainerMappingInputProperties {
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Option::is_none")]
    pub provider_specific_input: Option<ReplicationProviderContainerUnmappingInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RenewCertificateInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RenewCertificateInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RenewCertificateInputProperties {
    #[serde(rename = "renewCertificateType", skip_serializing_if = "Option::is_none")]
    pub renew_certificate_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationAgentDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<replication_agent_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
}
pub mod replication_agent_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationEligibilityResults {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ReplicationEligibilityResultsProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationEligibilityResultsCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReplicationEligibilityResults>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationEligibilityResultsErrorInfo {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing)]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationEligibilityResultsProperties {
    #[serde(rename = "clientRequestId", skip_serializing)]
    pub client_request_id: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<ReplicationEligibilityResultsErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationGroupDetails {
    #[serde(flatten)]
    pub configuration_settings: ConfigurationSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectedItem {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ReplicationProtectedItemProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectedItemCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReplicationProtectedItem>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectedItemProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "protectedItemType", skip_serializing_if = "Option::is_none")]
    pub protected_item_type: Option<String>,
    #[serde(rename = "protectableItemId", skip_serializing_if = "Option::is_none")]
    pub protectable_item_id: Option<String>,
    #[serde(rename = "recoveryServicesProviderId", skip_serializing_if = "Option::is_none")]
    pub recovery_services_provider_id: Option<String>,
    #[serde(rename = "primaryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_friendly_name: Option<String>,
    #[serde(rename = "primaryFabricProvider", skip_serializing_if = "Option::is_none")]
    pub primary_fabric_provider: Option<String>,
    #[serde(rename = "recoveryFabricFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_friendly_name: Option<String>,
    #[serde(rename = "recoveryFabricId", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_id: Option<String>,
    #[serde(rename = "primaryProtectionContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub primary_protection_container_friendly_name: Option<String>,
    #[serde(rename = "recoveryProtectionContainerFriendlyName", skip_serializing_if = "Option::is_none")]
    pub recovery_protection_container_friendly_name: Option<String>,
    #[serde(rename = "protectionState", skip_serializing_if = "Option::is_none")]
    pub protection_state: Option<String>,
    #[serde(rename = "protectionStateDescription", skip_serializing_if = "Option::is_none")]
    pub protection_state_description: Option<String>,
    #[serde(rename = "activeLocation", skip_serializing_if = "Option::is_none")]
    pub active_location: Option<String>,
    #[serde(rename = "testFailoverState", skip_serializing_if = "Option::is_none")]
    pub test_failover_state: Option<String>,
    #[serde(rename = "testFailoverStateDescription", skip_serializing_if = "Option::is_none")]
    pub test_failover_state_description: Option<String>,
    #[serde(rename = "allowedOperations", skip_serializing_if = "Vec::is_empty")]
    pub allowed_operations: Vec<String>,
    #[serde(rename = "replicationHealth", skip_serializing_if = "Option::is_none")]
    pub replication_health: Option<String>,
    #[serde(rename = "failoverHealth", skip_serializing_if = "Option::is_none")]
    pub failover_health: Option<String>,
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<HealthError>,
    #[serde(rename = "policyId", skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[serde(rename = "policyFriendlyName", skip_serializing_if = "Option::is_none")]
    pub policy_friendly_name: Option<String>,
    #[serde(rename = "lastSuccessfulFailoverTime", skip_serializing_if = "Option::is_none")]
    pub last_successful_failover_time: Option<String>,
    #[serde(rename = "lastSuccessfulTestFailoverTime", skip_serializing_if = "Option::is_none")]
    pub last_successful_test_failover_time: Option<String>,
    #[serde(rename = "currentScenario", skip_serializing_if = "Option::is_none")]
    pub current_scenario: Option<CurrentScenarioDetails>,
    #[serde(rename = "failoverRecoveryPointId", skip_serializing_if = "Option::is_none")]
    pub failover_recovery_point_id: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ReplicationProviderSpecificSettings>,
    #[serde(rename = "recoveryContainerId", skip_serializing_if = "Option::is_none")]
    pub recovery_container_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectionIntent {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ReplicationProtectionIntentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectionIntentCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReplicationProtectionIntent>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectionIntentProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "jobId", skip_serializing)]
    pub job_id: Option<String>,
    #[serde(rename = "jobState", skip_serializing)]
    pub job_state: Option<String>,
    #[serde(rename = "isActive", skip_serializing)]
    pub is_active: Option<bool>,
    #[serde(rename = "creationTimeUTC", skip_serializing)]
    pub creation_time_utc: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ReplicationProtectionIntentProviderSpecificSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProtectionIntentProviderSpecificSettings {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProviderContainerUnmappingInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProviderSpecificContainerCreationInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProviderSpecificContainerMappingInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProviderSpecificSettings {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReplicationProviderSpecificUpdateContainerMappingInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReprotectAgentDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartbeatUtc", skip_serializing)]
    pub last_heartbeat_utc: Option<String>,
    #[serde(skip_serializing)]
    pub health: Option<reprotect_agent_details::Health>,
    #[serde(rename = "healthErrors", skip_serializing)]
    pub health_errors: Vec<HealthError>,
}
pub mod reprotect_agent_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Health {
        None,
        Normal,
        Warning,
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveHealthError {
    #[serde(rename = "healthErrorId", skip_serializing_if = "Option::is_none")]
    pub health_error_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveHealthInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ResolveHealthInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveHealthInputProperties {
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<ResolveHealthError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceHealthSummary {
    #[serde(rename = "resourceCount", skip_serializing_if = "Option::is_none")]
    pub resource_count: Option<i32>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<HealthErrorSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResumeJobParams {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ResumeJobParamsProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResumeJobParamsProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionVolume {
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
    #[serde(rename = "capacityInBytes", skip_serializing_if = "Option::is_none")]
    pub capacity_in_bytes: Option<i64>,
    #[serde(rename = "freeSpaceInBytes", skip_serializing_if = "Option::is_none")]
    pub free_space_in_bytes: Option<i64>,
    #[serde(rename = "thresholdPercentage", skip_serializing_if = "Option::is_none")]
    pub threshold_percentage: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReverseReplicationInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ReverseReplicationInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReverseReplicationInputProperties {
    #[serde(rename = "failoverDirection", skip_serializing_if = "Option::is_none")]
    pub failover_direction: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<ReverseReplicationProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReverseReplicationProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RoleAssignment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "roleDefinitionId", skip_serializing_if = "Option::is_none")]
    pub role_definition_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunAsAccount {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SanEnableProtectionInput {
    #[serde(flatten)]
    pub enable_protection_provider_specific_input: EnableProtectionProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScriptActionTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(rename = "isPrimarySideScript", skip_serializing_if = "Option::is_none")]
    pub is_primary_side_script: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing_if = "Option::is_none")]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing_if = "Option::is_none")]
    pub recommended_action: Option<String>,
    #[serde(rename = "activityId", skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccountCustomDetails {
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassification {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<StorageClassificationProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<StorageClassification>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationMapping {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<StorageClassificationMappingProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationMappingCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<StorageClassificationMapping>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<StorageMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationMappingProperties {
    #[serde(rename = "targetStorageClassificationId", skip_serializing_if = "Option::is_none")]
    pub target_storage_classification_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageClassificationProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageMappingInputProperties {
    #[serde(rename = "targetStorageClassificationId", skip_serializing_if = "Option::is_none")]
    pub target_storage_classification_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subnet {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "addressList", skip_serializing_if = "Vec::is_empty")]
    pub address_list: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedOperatingSystems {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SupportedOsProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedOsDetails {
    #[serde(rename = "osName", skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "osVersions", skip_serializing_if = "Vec::is_empty")]
    pub os_versions: Vec<OsVersionWrapper>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedOsProperties {
    #[serde(rename = "supportedOsList", skip_serializing_if = "Vec::is_empty")]
    pub supported_os_list: Vec<SupportedOsProperty>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedOsProperty {
    #[serde(rename = "instanceType", skip_serializing)]
    pub instance_type: Option<String>,
    #[serde(rename = "supportedOs", skip_serializing_if = "Vec::is_empty")]
    pub supported_os: Vec<SupportedOsDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchProtectionInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SwitchProtectionInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchProtectionInputProperties {
    #[serde(rename = "replicationProtectedItemName", skip_serializing_if = "Option::is_none")]
    pub replication_protected_item_name: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<SwitchProtectionProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchProtectionJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "newReplicationProtectedItemId", skip_serializing_if = "Option::is_none")]
    pub new_replication_protected_item_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwitchProtectionProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetComputeSize {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TargetComputeSizeProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetComputeSizeCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TargetComputeSize>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetComputeSizeProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "cpuCoresCount", skip_serializing_if = "Option::is_none")]
    pub cpu_cores_count: Option<i32>,
    #[serde(rename = "vCPUsAvailable", skip_serializing)]
    pub v_cp_us_available: Option<i32>,
    #[serde(rename = "memoryInGB", skip_serializing_if = "Option::is_none")]
    pub memory_in_gb: Option<f64>,
    #[serde(rename = "maxDataDiskCount", skip_serializing_if = "Option::is_none")]
    pub max_data_disk_count: Option<i32>,
    #[serde(rename = "maxNicsCount", skip_serializing_if = "Option::is_none")]
    pub max_nics_count: Option<i32>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<ComputeSizeErrorDetails>,
    #[serde(rename = "highIopsSupported", skip_serializing_if = "Option::is_none")]
    pub high_iops_supported: Option<String>,
    #[serde(rename = "hyperVGenerations", skip_serializing)]
    pub hyper_v_generations: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskTypeDetails {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverCleanupInput {
    pub properties: TestFailoverCleanupInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverCleanupInputProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<TestFailoverInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverInputProperties {
    #[serde(rename = "failoverDirection", skip_serializing_if = "Option::is_none")]
    pub failover_direction: Option<String>,
    #[serde(rename = "networkType", skip_serializing_if = "Option::is_none")]
    pub network_type: Option<String>,
    #[serde(rename = "networkId", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    #[serde(rename = "skipTestFailoverCleanup", skip_serializing_if = "Option::is_none")]
    pub skip_test_failover_cleanup: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<TestFailoverProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "testFailoverStatus", skip_serializing_if = "Option::is_none")]
    pub test_failover_status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "networkName", skip_serializing_if = "Option::is_none")]
    pub network_name: Option<String>,
    #[serde(rename = "networkFriendlyName", skip_serializing_if = "Option::is_none")]
    pub network_friendly_name: Option<String>,
    #[serde(rename = "networkType", skip_serializing_if = "Option::is_none")]
    pub network_type: Option<String>,
    #[serde(rename = "protectedItemDetails", skip_serializing_if = "Vec::is_empty")]
    pub protected_item_details: Vec<FailoverReplicationProtectedItemDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailoverProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMigrateCleanupInput {
    pub properties: TestMigrateCleanupInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMigrateCleanupInputProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMigrateInput {
    pub properties: TestMigrateInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMigrateInputProperties {
    #[serde(rename = "providerSpecificDetails")]
    pub provider_specific_details: TestMigrateProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMigrateProviderSpecificInput {
    #[serde(rename = "instanceType")]
    pub instance_type: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnplannedFailoverInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UnplannedFailoverInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnplannedFailoverInputProperties {
    #[serde(rename = "failoverDirection", skip_serializing_if = "Option::is_none")]
    pub failover_direction: Option<String>,
    #[serde(rename = "sourceSiteOperations", skip_serializing_if = "Option::is_none")]
    pub source_site_operations: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<UnplannedFailoverProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnplannedFailoverProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMigrationItemInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateMigrationItemInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMigrationItemInputProperties {
    #[serde(rename = "providerSpecificDetails")]
    pub provider_specific_details: UpdateMigrationItemProviderSpecificInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMigrationItemProviderSpecificInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMobilityServiceRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateMobilityServiceRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMobilityServiceRequestProperties {
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateNetworkMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateNetworkMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateNetworkMappingInputProperties {
    #[serde(rename = "recoveryFabricName", skip_serializing_if = "Option::is_none")]
    pub recovery_fabric_name: Option<String>,
    #[serde(rename = "recoveryNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_network_id: Option<String>,
    #[serde(rename = "fabricSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub fabric_specific_details: Option<FabricSpecificUpdateNetworkMappingInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatePolicyInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdatePolicyInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatePolicyInputProperties {
    #[serde(rename = "replicationProviderSettings", skip_serializing_if = "Option::is_none")]
    pub replication_provider_settings: Option<PolicyProviderSpecificInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateProtectionContainerMappingInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateProtectionContainerMappingInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateProtectionContainerMappingInputProperties {
    #[serde(rename = "providerSpecificInput", skip_serializing_if = "Option::is_none")]
    pub provider_specific_input: Option<ReplicationProviderSpecificUpdateContainerMappingInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateRecoveryPlanInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateRecoveryPlanInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateRecoveryPlanInputProperties {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub groups: Vec<RecoveryPlanGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateReplicationProtectedItemInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateReplicationProtectedItemInputProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateReplicationProtectedItemInputProperties {
    #[serde(rename = "recoveryAzureVMName", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_name: Option<String>,
    #[serde(rename = "recoveryAzureVMSize", skip_serializing_if = "Option::is_none")]
    pub recovery_azure_vm_size: Option<String>,
    #[serde(rename = "selectedRecoveryAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_recovery_azure_network_id: Option<String>,
    #[serde(rename = "selectedTfoAzureNetworkId", skip_serializing_if = "Option::is_none")]
    pub selected_tfo_azure_network_id: Option<String>,
    #[serde(rename = "selectedSourceNicId", skip_serializing_if = "Option::is_none")]
    pub selected_source_nic_id: Option<String>,
    #[serde(rename = "enableRdpOnTargetOption", skip_serializing_if = "Option::is_none")]
    pub enable_rdp_on_target_option: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VmNicInputDetails>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<update_replication_protected_item_input_properties::LicenseType>,
    #[serde(rename = "recoveryAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub recovery_availability_set_id: Option<String>,
    #[serde(rename = "providerSpecificDetails", skip_serializing_if = "Option::is_none")]
    pub provider_specific_details: Option<UpdateReplicationProtectedItemProviderInput>,
}
pub mod update_replication_protected_item_input_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        NotSpecified,
        NoLicenseType,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateReplicationProtectedItemProviderInput {
    #[serde(rename = "instanceType", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateVCenterRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateVCenterRequestProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateVCenterRequestProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultHealthDetails {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VaultHealthProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultHealthProperties {
    #[serde(rename = "vaultErrors", skip_serializing_if = "Vec::is_empty")]
    pub vault_errors: Vec<HealthError>,
    #[serde(rename = "protectedItemsHealth", skip_serializing_if = "Option::is_none")]
    pub protected_items_health: Option<ResourceHealthSummary>,
    #[serde(rename = "fabricsHealth", skip_serializing_if = "Option::is_none")]
    pub fabrics_health: Option<ResourceHealthSummary>,
    #[serde(rename = "containersHealth", skip_serializing_if = "Option::is_none")]
    pub containers_health: Option<ResourceHealthSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultSetting {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VaultSettingProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultSettingCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<VaultSetting>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultSettingCreationInput {
    pub properties: VaultSettingCreationInputProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultSettingCreationInputProperties {
    #[serde(rename = "migrationSolutionId")]
    pub migration_solution_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultSettingProperties {
    #[serde(rename = "migrationSolutionId", skip_serializing_if = "Option::is_none")]
    pub migration_solution_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenter {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VCenterProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenterCollection {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<VCenter>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenterProperties {
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(rename = "internalId", skip_serializing_if = "Option::is_none")]
    pub internal_id: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "discoveryStatus", skip_serializing_if = "Option::is_none")]
    pub discovery_status: Option<String>,
    #[serde(rename = "processServerId", skip_serializing_if = "Option::is_none")]
    pub process_server_id: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "infrastructureId", skip_serializing_if = "Option::is_none")]
    pub infrastructure_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "fabricArmResourceName", skip_serializing_if = "Option::is_none")]
    pub fabric_arm_resource_name: Option<String>,
    #[serde(rename = "healthErrors", skip_serializing_if = "Vec::is_empty")]
    pub health_errors: Vec<HealthError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersionDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "expiryDate", skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<version_details::Status>,
}
pub mod version_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Supported,
        NotSupported,
        Deprecated,
        UpdateRequired,
        SecurityUpdateRequired,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(rename = "skippedReason", skip_serializing_if = "Option::is_none")]
    pub skipped_reason: Option<String>,
    #[serde(rename = "skippedReasonString", skip_serializing_if = "Option::is_none")]
    pub skipped_reason_string: Option<String>,
    #[serde(rename = "jobTask", skip_serializing_if = "Option::is_none")]
    pub job_task: Option<JobEntity>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToAzureCreateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_create_network_mapping_input: FabricSpecificCreateNetworkMappingInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToAzureNetworkMappingSettings {
    #[serde(flatten)]
    pub network_mapping_fabric_specific_settings: NetworkMappingFabricSpecificSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToAzureUpdateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_update_network_mapping_input: FabricSpecificUpdateNetworkMappingInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToVmmCreateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_create_network_mapping_input: FabricSpecificCreateNetworkMappingInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToVmmNetworkMappingSettings {
    #[serde(flatten)]
    pub network_mapping_fabric_specific_settings: NetworkMappingFabricSpecificSettings,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmToVmmUpdateNetworkMappingInput {
    #[serde(flatten)]
    pub fabric_specific_update_network_mapping_input: FabricSpecificUpdateNetworkMappingInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmmVirtualMachineDetails {
    #[serde(flatten)]
    pub configuration_settings: ConfigurationSettings,
    #[serde(rename = "sourceItemId", skip_serializing_if = "Option::is_none")]
    pub source_item_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub generation: Option<String>,
    #[serde(rename = "osDetails", skip_serializing_if = "Option::is_none")]
    pub os_details: Option<OsDetails>,
    #[serde(rename = "diskDetails", skip_serializing_if = "Vec::is_empty")]
    pub disk_details: Vec<DiskDetails>,
    #[serde(rename = "hasPhysicalDisk", skip_serializing_if = "Option::is_none")]
    pub has_physical_disk: Option<vmm_virtual_machine_details::HasPhysicalDisk>,
    #[serde(rename = "hasFibreChannelAdapter", skip_serializing_if = "Option::is_none")]
    pub has_fibre_channel_adapter: Option<vmm_virtual_machine_details::HasFibreChannelAdapter>,
    #[serde(rename = "hasSharedVhd", skip_serializing_if = "Option::is_none")]
    pub has_shared_vhd: Option<vmm_virtual_machine_details::HasSharedVhd>,
}
pub mod vmm_virtual_machine_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasPhysicalDisk {
        Unknown,
        Present,
        NotPresent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasFibreChannelAdapter {
        Unknown,
        Present,
        NotPresent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HasSharedVhd {
        Unknown,
        Present,
        NotPresent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmNicDetails {
    #[serde(rename = "nicId", skip_serializing_if = "Option::is_none")]
    pub nic_id: Option<String>,
    #[serde(rename = "replicaNicId", skip_serializing_if = "Option::is_none")]
    pub replica_nic_id: Option<String>,
    #[serde(rename = "sourceNicArmId", skip_serializing_if = "Option::is_none")]
    pub source_nic_arm_id: Option<String>,
    #[serde(rename = "vMSubnetName", skip_serializing_if = "Option::is_none")]
    pub v_m_subnet_name: Option<String>,
    #[serde(rename = "vMNetworkName", skip_serializing_if = "Option::is_none")]
    pub v_m_network_name: Option<String>,
    #[serde(rename = "recoveryVMNetworkId", skip_serializing_if = "Option::is_none")]
    pub recovery_vm_network_id: Option<String>,
    #[serde(rename = "recoveryVMSubnetName", skip_serializing_if = "Option::is_none")]
    pub recovery_vm_subnet_name: Option<String>,
    #[serde(rename = "ipAddressType", skip_serializing_if = "Option::is_none")]
    pub ip_address_type: Option<String>,
    #[serde(rename = "primaryNicStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub primary_nic_static_ip_address: Option<String>,
    #[serde(rename = "replicaNicStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub replica_nic_static_ip_address: Option<String>,
    #[serde(rename = "selectionType", skip_serializing_if = "Option::is_none")]
    pub selection_type: Option<String>,
    #[serde(rename = "recoveryNicIpAddressType", skip_serializing_if = "Option::is_none")]
    pub recovery_nic_ip_address_type: Option<String>,
    #[serde(rename = "recoveryPublicIpAddressId", skip_serializing_if = "Option::is_none")]
    pub recovery_public_ip_address_id: Option<String>,
    #[serde(rename = "recoveryNetworkSecurityGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_network_security_group_id: Option<String>,
    #[serde(rename = "recoveryLBBackendAddressPoolIds", skip_serializing_if = "Vec::is_empty")]
    pub recovery_lb_backend_address_pool_ids: Vec<String>,
    #[serde(rename = "enableAcceleratedNetworkingOnRecovery", skip_serializing_if = "Option::is_none")]
    pub enable_accelerated_networking_on_recovery: Option<bool>,
    #[serde(rename = "tfoVMNetworkId", skip_serializing_if = "Option::is_none")]
    pub tfo_vm_network_id: Option<String>,
    #[serde(rename = "tfoVMSubnetName", skip_serializing_if = "Option::is_none")]
    pub tfo_vm_subnet_name: Option<String>,
    #[serde(rename = "tfoNetworkSecurityGroupId", skip_serializing_if = "Option::is_none")]
    pub tfo_network_security_group_id: Option<String>,
    #[serde(rename = "enableAcceleratedNetworkingOnTfo", skip_serializing_if = "Option::is_none")]
    pub enable_accelerated_networking_on_tfo: Option<bool>,
    #[serde(rename = "tfoIPConfigs", skip_serializing_if = "Vec::is_empty")]
    pub tfo_ip_configs: Vec<IpConfig>,
    #[serde(rename = "recoveryNicName", skip_serializing_if = "Option::is_none")]
    pub recovery_nic_name: Option<String>,
    #[serde(rename = "recoveryNicResourceGroupName", skip_serializing_if = "Option::is_none")]
    pub recovery_nic_resource_group_name: Option<String>,
    #[serde(rename = "reuseExistingNic", skip_serializing_if = "Option::is_none")]
    pub reuse_existing_nic: Option<bool>,
    #[serde(rename = "tfoRecoveryNicName", skip_serializing_if = "Option::is_none")]
    pub tfo_recovery_nic_name: Option<String>,
    #[serde(rename = "tfoRecoveryNicResourceGroupName", skip_serializing_if = "Option::is_none")]
    pub tfo_recovery_nic_resource_group_name: Option<String>,
    #[serde(rename = "tfoReuseExistingNic", skip_serializing_if = "Option::is_none")]
    pub tfo_reuse_existing_nic: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmNicInputDetails {
    #[serde(rename = "nicId", skip_serializing_if = "Option::is_none")]
    pub nic_id: Option<String>,
    #[serde(rename = "recoveryVMSubnetName", skip_serializing_if = "Option::is_none")]
    pub recovery_vm_subnet_name: Option<String>,
    #[serde(rename = "replicaNicStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub replica_nic_static_ip_address: Option<String>,
    #[serde(rename = "selectionType", skip_serializing_if = "Option::is_none")]
    pub selection_type: Option<String>,
    #[serde(rename = "recoveryPublicIpAddressId", skip_serializing_if = "Option::is_none")]
    pub recovery_public_ip_address_id: Option<String>,
    #[serde(rename = "recoveryNetworkSecurityGroupId", skip_serializing_if = "Option::is_none")]
    pub recovery_network_security_group_id: Option<String>,
    #[serde(rename = "recoveryLBBackendAddressPoolIds", skip_serializing_if = "Vec::is_empty")]
    pub recovery_lb_backend_address_pool_ids: Vec<String>,
    #[serde(rename = "enableAcceleratedNetworkingOnRecovery", skip_serializing_if = "Option::is_none")]
    pub enable_accelerated_networking_on_recovery: Option<bool>,
    #[serde(rename = "tfoVMSubnetName", skip_serializing_if = "Option::is_none")]
    pub tfo_vm_subnet_name: Option<String>,
    #[serde(rename = "tfoNetworkSecurityGroupId", skip_serializing_if = "Option::is_none")]
    pub tfo_network_security_group_id: Option<String>,
    #[serde(rename = "enableAcceleratedNetworkingOnTfo", skip_serializing_if = "Option::is_none")]
    pub enable_accelerated_networking_on_tfo: Option<bool>,
    #[serde(rename = "tfoIPConfigs", skip_serializing_if = "Vec::is_empty")]
    pub tfo_ip_configs: Vec<IpConfig>,
    #[serde(rename = "recoveryNicName", skip_serializing_if = "Option::is_none")]
    pub recovery_nic_name: Option<String>,
    #[serde(rename = "recoveryNicResourceGroupName", skip_serializing_if = "Option::is_none")]
    pub recovery_nic_resource_group_name: Option<String>,
    #[serde(rename = "reuseExistingNic", skip_serializing_if = "Option::is_none")]
    pub reuse_existing_nic: Option<bool>,
    #[serde(rename = "tfoNicName", skip_serializing_if = "Option::is_none")]
    pub tfo_nic_name: Option<String>,
    #[serde(rename = "tfoNicResourceGroupName", skip_serializing_if = "Option::is_none")]
    pub tfo_nic_resource_group_name: Option<String>,
    #[serde(rename = "tfoReuseExistingNic", skip_serializing_if = "Option::is_none")]
    pub tfo_reuse_existing_nic: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmNicUpdatesTaskDetails {
    #[serde(flatten)]
    pub task_type_details: TaskTypeDetails,
    #[serde(rename = "vmId", skip_serializing_if = "Option::is_none")]
    pub vm_id: Option<String>,
    #[serde(rename = "nicId", skip_serializing_if = "Option::is_none")]
    pub nic_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtContainerCreationInput {
    #[serde(flatten)]
    pub replication_provider_specific_container_creation_input: ReplicationProviderSpecificContainerCreationInput,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtContainerMappingInput {
    #[serde(flatten)]
    pub replication_provider_specific_container_mapping_input: ReplicationProviderSpecificContainerMappingInput,
    #[serde(rename = "keyVaultId")]
    pub key_vault_id: String,
    #[serde(rename = "keyVaultUri")]
    pub key_vault_uri: String,
    #[serde(rename = "storageAccountId")]
    pub storage_account_id: String,
    #[serde(rename = "storageAccountSasSecretName")]
    pub storage_account_sas_secret_name: String,
    #[serde(rename = "serviceBusConnectionStringSecretName")]
    pub service_bus_connection_string_secret_name: String,
    #[serde(rename = "targetLocation")]
    pub target_location: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtDiskInput {
    #[serde(rename = "diskId")]
    pub disk_id: String,
    #[serde(rename = "isOSDisk")]
    pub is_os_disk: String,
    #[serde(rename = "logStorageAccountId")]
    pub log_storage_account_id: String,
    #[serde(rename = "logStorageAccountSasSecretName")]
    pub log_storage_account_sas_secret_name: String,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<v_mware_cbt_disk_input::DiskType>,
}
pub mod v_mware_cbt_disk_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtEnableMigrationInput {
    #[serde(flatten)]
    pub enable_migration_provider_specific_input: EnableMigrationProviderSpecificInput,
    #[serde(rename = "vmwareMachineId")]
    pub vmware_machine_id: String,
    #[serde(rename = "disksToInclude")]
    pub disks_to_include: Vec<VMwareCbtDiskInput>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<v_mware_cbt_enable_migration_input::LicenseType>,
    #[serde(rename = "dataMoverRunAsAccountId")]
    pub data_mover_run_as_account_id: String,
    #[serde(rename = "snapshotRunAsAccountId")]
    pub snapshot_run_as_account_id: String,
    #[serde(rename = "targetVmName", skip_serializing_if = "Option::is_none")]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetResourceGroupId")]
    pub target_resource_group_id: String,
    #[serde(rename = "targetNetworkId")]
    pub target_network_id: String,
    #[serde(rename = "targetSubnetName", skip_serializing_if = "Option::is_none")]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
}
pub mod v_mware_cbt_enable_migration_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        NotSpecified,
        NoLicenseType,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtMigrateInput {
    #[serde(flatten)]
    pub migrate_provider_specific_input: MigrateProviderSpecificInput,
    #[serde(rename = "performShutdown")]
    pub perform_shutdown: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtMigrationDetails {
    #[serde(flatten)]
    pub migration_provider_specific_settings: MigrationProviderSpecificSettings,
    #[serde(rename = "vmwareMachineId", skip_serializing)]
    pub vmware_machine_id: Option<String>,
    #[serde(rename = "osType", skip_serializing)]
    pub os_type: Option<String>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<String>,
    #[serde(rename = "dataMoverRunAsAccountId", skip_serializing)]
    pub data_mover_run_as_account_id: Option<String>,
    #[serde(rename = "snapshotRunAsAccountId", skip_serializing)]
    pub snapshot_run_as_account_id: Option<String>,
    #[serde(rename = "targetVmName", skip_serializing_if = "Option::is_none")]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetLocation", skip_serializing)]
    pub target_location: Option<String>,
    #[serde(rename = "targetResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_resource_group_id: Option<String>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
    #[serde(rename = "protectedDisks", skip_serializing_if = "Vec::is_empty")]
    pub protected_disks: Vec<VMwareCbtProtectedDiskDetails>,
    #[serde(rename = "targetNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_network_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VMwareCbtNicDetails>,
    #[serde(rename = "migrationRecoveryPointId", skip_serializing)]
    pub migration_recovery_point_id: Option<String>,
    #[serde(rename = "lastRecoveryPointReceived", skip_serializing)]
    pub last_recovery_point_received: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtNicDetails {
    #[serde(rename = "nicId", skip_serializing)]
    pub nic_id: Option<String>,
    #[serde(rename = "isPrimaryNic", skip_serializing_if = "Option::is_none")]
    pub is_primary_nic: Option<String>,
    #[serde(rename = "sourceIPAddress", skip_serializing)]
    pub source_ip_address: Option<String>,
    #[serde(rename = "sourceIPAddressType", skip_serializing)]
    pub source_ip_address_type: Option<v_mware_cbt_nic_details::SourceIpAddressType>,
    #[serde(rename = "sourceNetworkId", skip_serializing)]
    pub source_network_id: Option<String>,
    #[serde(rename = "targetIPAddress", skip_serializing_if = "Option::is_none")]
    pub target_ip_address: Option<String>,
    #[serde(rename = "targetIPAddressType", skip_serializing_if = "Option::is_none")]
    pub target_ip_address_type: Option<v_mware_cbt_nic_details::TargetIpAddressType>,
    #[serde(rename = "targetSubnetName", skip_serializing_if = "Option::is_none")]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "isSelectedForMigration", skip_serializing_if = "Option::is_none")]
    pub is_selected_for_migration: Option<String>,
}
pub mod v_mware_cbt_nic_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceIpAddressType {
        Dynamic,
        Static,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetIpAddressType {
        Dynamic,
        Static,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtNicInput {
    #[serde(rename = "nicId")]
    pub nic_id: String,
    #[serde(rename = "isPrimaryNic")]
    pub is_primary_nic: String,
    #[serde(rename = "targetSubnetName", skip_serializing_if = "Option::is_none")]
    pub target_subnet_name: Option<String>,
    #[serde(rename = "targetStaticIPAddress", skip_serializing_if = "Option::is_none")]
    pub target_static_ip_address: Option<String>,
    #[serde(rename = "isSelectedForMigration", skip_serializing_if = "Option::is_none")]
    pub is_selected_for_migration: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtPolicyCreationInput {
    #[serde(flatten)]
    pub policy_provider_specific_input: PolicyProviderSpecificInput,
    #[serde(rename = "recoveryPointHistoryInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history_in_minutes: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VmwareCbtPolicyDetails {
    #[serde(flatten)]
    pub policy_provider_specific_details: PolicyProviderSpecificDetails,
    #[serde(rename = "recoveryPointHistoryInMinutes", skip_serializing_if = "Option::is_none")]
    pub recovery_point_history_in_minutes: Option<i32>,
    #[serde(rename = "appConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub app_consistent_frequency_in_minutes: Option<i32>,
    #[serde(rename = "crashConsistentFrequencyInMinutes", skip_serializing_if = "Option::is_none")]
    pub crash_consistent_frequency_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtProtectedDiskDetails {
    #[serde(rename = "diskId", skip_serializing)]
    pub disk_id: Option<String>,
    #[serde(rename = "diskName", skip_serializing)]
    pub disk_name: Option<String>,
    #[serde(rename = "diskPath", skip_serializing)]
    pub disk_path: Option<String>,
    #[serde(rename = "isOSDisk", skip_serializing)]
    pub is_os_disk: Option<String>,
    #[serde(rename = "capacityInBytes", skip_serializing)]
    pub capacity_in_bytes: Option<i64>,
    #[serde(rename = "logStorageAccountId", skip_serializing)]
    pub log_storage_account_id: Option<String>,
    #[serde(rename = "logStorageAccountSasSecretName", skip_serializing)]
    pub log_storage_account_sas_secret_name: Option<String>,
    #[serde(rename = "seedManagedDiskId", skip_serializing)]
    pub seed_managed_disk_id: Option<String>,
    #[serde(rename = "targetManagedDiskId", skip_serializing)]
    pub target_managed_disk_id: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<v_mware_cbt_protected_disk_details::DiskType>,
}
pub mod v_mware_cbt_protected_disk_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        #[serde(rename = "Standard_LRS")]
        StandardLrs,
        #[serde(rename = "Premium_LRS")]
        PremiumLrs,
        #[serde(rename = "StandardSSD_LRS")]
        StandardSsdLrs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtProtectionContainerMappingDetails {
    #[serde(flatten)]
    pub protection_container_mapping_provider_specific_details: ProtectionContainerMappingProviderSpecificDetails,
    #[serde(rename = "keyVaultId", skip_serializing)]
    pub key_vault_id: Option<String>,
    #[serde(rename = "keyVaultUri", skip_serializing)]
    pub key_vault_uri: Option<String>,
    #[serde(rename = "storageAccountId", skip_serializing)]
    pub storage_account_id: Option<String>,
    #[serde(rename = "storageAccountSasSecretName", skip_serializing)]
    pub storage_account_sas_secret_name: Option<String>,
    #[serde(rename = "serviceBusConnectionStringSecretName", skip_serializing)]
    pub service_bus_connection_string_secret_name: Option<String>,
    #[serde(rename = "targetLocation", skip_serializing)]
    pub target_location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtTestMigrateInput {
    #[serde(flatten)]
    pub test_migrate_provider_specific_input: TestMigrateProviderSpecificInput,
    #[serde(rename = "recoveryPointId")]
    pub recovery_point_id: String,
    #[serde(rename = "networkId")]
    pub network_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareCbtUpdateMigrationItemInput {
    #[serde(flatten)]
    pub update_migration_item_provider_specific_input: UpdateMigrationItemProviderSpecificInput,
    #[serde(rename = "targetVmName", skip_serializing_if = "Option::is_none")]
    pub target_vm_name: Option<String>,
    #[serde(rename = "targetVmSize", skip_serializing_if = "Option::is_none")]
    pub target_vm_size: Option<String>,
    #[serde(rename = "targetResourceGroupId", skip_serializing_if = "Option::is_none")]
    pub target_resource_group_id: Option<String>,
    #[serde(rename = "targetAvailabilitySetId", skip_serializing_if = "Option::is_none")]
    pub target_availability_set_id: Option<String>,
    #[serde(rename = "targetBootDiagnosticsStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub target_boot_diagnostics_storage_account_id: Option<String>,
    #[serde(rename = "targetNetworkId", skip_serializing_if = "Option::is_none")]
    pub target_network_id: Option<String>,
    #[serde(rename = "vmNics", skip_serializing_if = "Vec::is_empty")]
    pub vm_nics: Vec<VMwareCbtNicInput>,
    #[serde(rename = "licenseType", skip_serializing_if = "Option::is_none")]
    pub license_type: Option<v_mware_cbt_update_migration_item_input::LicenseType>,
}
pub mod v_mware_cbt_update_migration_item_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        NotSpecified,
        NoLicenseType,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
    #[serde(rename = "processServers", skip_serializing_if = "Vec::is_empty")]
    pub process_servers: Vec<ProcessServer>,
    #[serde(rename = "masterTargetServers", skip_serializing_if = "Vec::is_empty")]
    pub master_target_servers: Vec<MasterTargetServer>,
    #[serde(rename = "runAsAccounts", skip_serializing_if = "Vec::is_empty")]
    pub run_as_accounts: Vec<RunAsAccount>,
    #[serde(rename = "replicationPairCount", skip_serializing_if = "Option::is_none")]
    pub replication_pair_count: Option<String>,
    #[serde(rename = "processServerCount", skip_serializing_if = "Option::is_none")]
    pub process_server_count: Option<String>,
    #[serde(rename = "agentCount", skip_serializing_if = "Option::is_none")]
    pub agent_count: Option<String>,
    #[serde(rename = "protectedServers", skip_serializing_if = "Option::is_none")]
    pub protected_servers: Option<String>,
    #[serde(rename = "systemLoad", skip_serializing_if = "Option::is_none")]
    pub system_load: Option<String>,
    #[serde(rename = "systemLoadStatus", skip_serializing_if = "Option::is_none")]
    pub system_load_status: Option<String>,
    #[serde(rename = "cpuLoad", skip_serializing_if = "Option::is_none")]
    pub cpu_load: Option<String>,
    #[serde(rename = "cpuLoadStatus", skip_serializing_if = "Option::is_none")]
    pub cpu_load_status: Option<String>,
    #[serde(rename = "totalMemoryInBytes", skip_serializing_if = "Option::is_none")]
    pub total_memory_in_bytes: Option<i64>,
    #[serde(rename = "availableMemoryInBytes", skip_serializing_if = "Option::is_none")]
    pub available_memory_in_bytes: Option<i64>,
    #[serde(rename = "memoryUsageStatus", skip_serializing_if = "Option::is_none")]
    pub memory_usage_status: Option<String>,
    #[serde(rename = "totalSpaceInBytes", skip_serializing_if = "Option::is_none")]
    pub total_space_in_bytes: Option<i64>,
    #[serde(rename = "availableSpaceInBytes", skip_serializing_if = "Option::is_none")]
    pub available_space_in_bytes: Option<i64>,
    #[serde(rename = "spaceUsageStatus", skip_serializing_if = "Option::is_none")]
    pub space_usage_status: Option<String>,
    #[serde(rename = "webLoad", skip_serializing_if = "Option::is_none")]
    pub web_load: Option<String>,
    #[serde(rename = "webLoadStatus", skip_serializing_if = "Option::is_none")]
    pub web_load_status: Option<String>,
    #[serde(rename = "databaseServerLoad", skip_serializing_if = "Option::is_none")]
    pub database_server_load: Option<String>,
    #[serde(rename = "databaseServerLoadStatus", skip_serializing_if = "Option::is_none")]
    pub database_server_load_status: Option<String>,
    #[serde(rename = "csServiceStatus", skip_serializing_if = "Option::is_none")]
    pub cs_service_status: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "hostName", skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    #[serde(rename = "lastHeartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<String>,
    #[serde(rename = "versionStatus", skip_serializing_if = "Option::is_none")]
    pub version_status: Option<String>,
    #[serde(rename = "sslCertExpiryDate", skip_serializing_if = "Option::is_none")]
    pub ssl_cert_expiry_date: Option<String>,
    #[serde(rename = "sslCertExpiryRemainingDays", skip_serializing_if = "Option::is_none")]
    pub ssl_cert_expiry_remaining_days: Option<i32>,
    #[serde(rename = "psTemplateVersion", skip_serializing_if = "Option::is_none")]
    pub ps_template_version: Option<String>,
    #[serde(rename = "agentExpiryDate", skip_serializing_if = "Option::is_none")]
    pub agent_expiry_date: Option<String>,
    #[serde(rename = "agentVersionDetails", skip_serializing_if = "Option::is_none")]
    pub agent_version_details: Option<VersionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareV2FabricCreationInput {
    #[serde(flatten)]
    pub fabric_specific_creation_input: FabricSpecificCreationInput,
    #[serde(rename = "vmwareSiteId")]
    pub vmware_site_id: String,
    #[serde(rename = "migrationSolutionId")]
    pub migration_solution_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareV2FabricSpecificDetails {
    #[serde(flatten)]
    pub fabric_specific_details: FabricSpecificDetails,
    #[serde(rename = "vmwareSiteId", skip_serializing)]
    pub vmware_site_id: Option<String>,
    #[serde(rename = "migrationSolutionId", skip_serializing)]
    pub migration_solution_id: Option<String>,
    #[serde(rename = "serviceEndpoint", skip_serializing)]
    pub service_endpoint: Option<String>,
    #[serde(rename = "serviceResourceId", skip_serializing)]
    pub service_resource_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareVirtualMachineDetails {
    #[serde(flatten)]
    pub configuration_settings: ConfigurationSettings,
    #[serde(rename = "agentGeneratedId", skip_serializing_if = "Option::is_none")]
    pub agent_generated_id: Option<String>,
    #[serde(rename = "agentInstalled", skip_serializing_if = "Option::is_none")]
    pub agent_installed: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "agentVersion", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "poweredOn", skip_serializing_if = "Option::is_none")]
    pub powered_on: Option<String>,
    #[serde(rename = "vCenterInfrastructureId", skip_serializing_if = "Option::is_none")]
    pub v_center_infrastructure_id: Option<String>,
    #[serde(rename = "discoveryType", skip_serializing_if = "Option::is_none")]
    pub discovery_type: Option<String>,
    #[serde(rename = "diskDetails", skip_serializing_if = "Vec::is_empty")]
    pub disk_details: Vec<InMageDiskDetails>,
    #[serde(rename = "validationErrors", skip_serializing_if = "Vec::is_empty")]
    pub validation_errors: Vec<HealthError>,
}
