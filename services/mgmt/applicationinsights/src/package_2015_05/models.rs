#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Annotation {
    #[serde(rename = "AnnotationName", skip_serializing_if = "Option::is_none")]
    pub annotation_name: Option<String>,
    #[serde(rename = "Category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(rename = "EventTime", skip_serializing_if = "Option::is_none")]
    pub event_time: Option<String>,
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "Properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<String>,
    #[serde(rename = "RelatedAnnotation", skip_serializing_if = "Option::is_none")]
    pub related_annotation: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnnotationsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Annotation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InnerError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosticcontext: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnnotationError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub innererror: Option<InnerError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiKeyRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "linkedReadProperties", skip_serializing_if = "Vec::is_empty")]
    pub linked_read_properties: Vec<String>,
    #[serde(rename = "linkedWriteProperties", skip_serializing_if = "Vec::is_empty")]
    pub linked_write_properties: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentApiKeyListResult {
    pub value: Vec<ApplicationInsightsComponentApiKey>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentApiKey {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(rename = "apiKey", skip_serializing)]
    pub api_key: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "linkedReadProperties", skip_serializing_if = "Vec::is_empty")]
    pub linked_read_properties: Vec<String>,
    #[serde(rename = "linkedWriteProperties", skip_serializing_if = "Vec::is_empty")]
    pub linked_write_properties: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentExportRequest {
    #[serde(rename = "RecordTypes", skip_serializing_if = "Option::is_none")]
    pub record_types: Option<String>,
    #[serde(rename = "DestinationType", skip_serializing_if = "Option::is_none")]
    pub destination_type: Option<String>,
    #[serde(rename = "DestinationAddress", skip_serializing_if = "Option::is_none")]
    pub destination_address: Option<String>,
    #[serde(rename = "IsEnabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<String>,
    #[serde(rename = "NotificationQueueEnabled", skip_serializing_if = "Option::is_none")]
    pub notification_queue_enabled: Option<String>,
    #[serde(rename = "NotificationQueueUri", skip_serializing_if = "Option::is_none")]
    pub notification_queue_uri: Option<String>,
    #[serde(rename = "DestinationStorageSubscriptionId", skip_serializing_if = "Option::is_none")]
    pub destination_storage_subscription_id: Option<String>,
    #[serde(rename = "DestinationStorageLocationId", skip_serializing_if = "Option::is_none")]
    pub destination_storage_location_id: Option<String>,
    #[serde(rename = "DestinationAccountId", skip_serializing_if = "Option::is_none")]
    pub destination_account_id: Option<String>,
}
pub type ApplicationInsightsComponentExportConfigurationListResult = Vec<ApplicationInsightsComponentExportConfiguration>;
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentExportConfiguration {
    #[serde(rename = "ExportId", skip_serializing)]
    pub export_id: Option<String>,
    #[serde(rename = "InstrumentationKey", skip_serializing)]
    pub instrumentation_key: Option<String>,
    #[serde(rename = "RecordTypes", skip_serializing_if = "Option::is_none")]
    pub record_types: Option<String>,
    #[serde(rename = "ApplicationName", skip_serializing)]
    pub application_name: Option<String>,
    #[serde(rename = "SubscriptionId", skip_serializing)]
    pub subscription_id: Option<String>,
    #[serde(rename = "ResourceGroup", skip_serializing)]
    pub resource_group: Option<String>,
    #[serde(rename = "DestinationStorageSubscriptionId", skip_serializing)]
    pub destination_storage_subscription_id: Option<String>,
    #[serde(rename = "DestinationStorageLocationId", skip_serializing)]
    pub destination_storage_location_id: Option<String>,
    #[serde(rename = "DestinationAccountId", skip_serializing)]
    pub destination_account_id: Option<String>,
    #[serde(rename = "DestinationType", skip_serializing)]
    pub destination_type: Option<String>,
    #[serde(rename = "IsUserEnabled", skip_serializing)]
    pub is_user_enabled: Option<String>,
    #[serde(rename = "LastUserUpdate", skip_serializing)]
    pub last_user_update: Option<String>,
    #[serde(rename = "NotificationQueueEnabled", skip_serializing_if = "Option::is_none")]
    pub notification_queue_enabled: Option<String>,
    #[serde(rename = "ExportStatus", skip_serializing)]
    pub export_status: Option<String>,
    #[serde(rename = "LastSuccessTime", skip_serializing)]
    pub last_success_time: Option<String>,
    #[serde(rename = "LastGapTime", skip_serializing)]
    pub last_gap_time: Option<String>,
    #[serde(rename = "PermanentErrorReason", skip_serializing)]
    pub permanent_error_reason: Option<String>,
    #[serde(rename = "StorageName", skip_serializing)]
    pub storage_name: Option<String>,
    #[serde(rename = "ContainerName", skip_serializing)]
    pub container_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentBillingFeatures {
    #[serde(rename = "DataVolumeCap", skip_serializing_if = "Option::is_none")]
    pub data_volume_cap: Option<ApplicationInsightsComponentDataVolumeCap>,
    #[serde(rename = "CurrentBillingFeatures", skip_serializing_if = "Vec::is_empty")]
    pub current_billing_features: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentDataVolumeCap {
    #[serde(rename = "Cap", skip_serializing_if = "Option::is_none")]
    pub cap: Option<f64>,
    #[serde(rename = "ResetTime", skip_serializing)]
    pub reset_time: Option<i64>,
    #[serde(rename = "WarningThreshold", skip_serializing_if = "Option::is_none")]
    pub warning_threshold: Option<i64>,
    #[serde(rename = "StopSendNotificationWhenHitThreshold", skip_serializing_if = "Option::is_none")]
    pub stop_send_notification_when_hit_threshold: Option<bool>,
    #[serde(rename = "StopSendNotificationWhenHitCap", skip_serializing_if = "Option::is_none")]
    pub stop_send_notification_when_hit_cap: Option<bool>,
    #[serde(rename = "MaxHistoryCap", skip_serializing)]
    pub max_history_cap: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentQuotaStatus {
    #[serde(rename = "AppId", skip_serializing)]
    pub app_id: Option<String>,
    #[serde(rename = "ShouldBeThrottled", skip_serializing)]
    pub should_be_throttled: Option<bool>,
    #[serde(rename = "ExpirationTime", skip_serializing)]
    pub expiration_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentFeatureCapabilities {
    #[serde(rename = "SupportExportData", skip_serializing)]
    pub support_export_data: Option<bool>,
    #[serde(rename = "BurstThrottlePolicy", skip_serializing)]
    pub burst_throttle_policy: Option<String>,
    #[serde(rename = "MetadataClass", skip_serializing)]
    pub metadata_class: Option<String>,
    #[serde(rename = "LiveStreamMetrics", skip_serializing)]
    pub live_stream_metrics: Option<bool>,
    #[serde(rename = "ApplicationMap", skip_serializing)]
    pub application_map: Option<bool>,
    #[serde(rename = "WorkItemIntegration", skip_serializing)]
    pub work_item_integration: Option<bool>,
    #[serde(rename = "PowerBIIntegration", skip_serializing)]
    pub power_bi_integration: Option<bool>,
    #[serde(rename = "OpenSchema", skip_serializing)]
    pub open_schema: Option<bool>,
    #[serde(rename = "ProactiveDetection", skip_serializing)]
    pub proactive_detection: Option<bool>,
    #[serde(rename = "AnalyticsIntegration", skip_serializing)]
    pub analytics_integration: Option<bool>,
    #[serde(rename = "MultipleStepWebTest", skip_serializing)]
    pub multiple_step_web_test: Option<bool>,
    #[serde(rename = "ApiAccessLevel", skip_serializing)]
    pub api_access_level: Option<String>,
    #[serde(rename = "TrackingType", skip_serializing)]
    pub tracking_type: Option<String>,
    #[serde(rename = "DailyCap", skip_serializing)]
    pub daily_cap: Option<f64>,
    #[serde(rename = "DailyCapResetTime", skip_serializing)]
    pub daily_cap_reset_time: Option<f64>,
    #[serde(rename = "ThrottleRate", skip_serializing)]
    pub throttle_rate: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentAvailableFeatures {
    #[serde(rename = "Result", skip_serializing)]
    pub result: Vec<ApplicationInsightsComponentFeature>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentFeature {
    #[serde(rename = "FeatureName", skip_serializing)]
    pub feature_name: Option<String>,
    #[serde(rename = "MeterId", skip_serializing)]
    pub meter_id: Option<String>,
    #[serde(rename = "MeterRateFrequency", skip_serializing)]
    pub meter_rate_frequency: Option<String>,
    #[serde(rename = "ResouceId", skip_serializing)]
    pub resouce_id: Option<String>,
    #[serde(rename = "IsHidden", skip_serializing)]
    pub is_hidden: Option<bool>,
    #[serde(rename = "Capabilities", skip_serializing)]
    pub capabilities: Vec<ApplicationInsightsComponentFeatureCapability>,
    #[serde(rename = "Title", skip_serializing)]
    pub title: Option<String>,
    #[serde(rename = "IsMainFeature", skip_serializing)]
    pub is_main_feature: Option<bool>,
    #[serde(rename = "SupportedAddonFeatures", skip_serializing)]
    pub supported_addon_features: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentFeatureCapability {
    #[serde(rename = "Name", skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "Description", skip_serializing)]
    pub description: Option<String>,
    #[serde(rename = "Value", skip_serializing)]
    pub value: Option<String>,
    #[serde(rename = "Unit", skip_serializing)]
    pub unit: Option<String>,
    #[serde(rename = "MeterId", skip_serializing)]
    pub meter_id: Option<String>,
    #[serde(rename = "MeterRateFrequency", skip_serializing)]
    pub meter_rate_frequency: Option<String>,
}
pub type ApplicationInsightsComponentProactiveDetectionConfigurationListResult =
    Vec<ApplicationInsightsComponentProactiveDetectionConfiguration>;
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentProactiveDetectionConfiguration {
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "SendEmailsToSubscriptionOwners", skip_serializing_if = "Option::is_none")]
    pub send_emails_to_subscription_owners: Option<bool>,
    #[serde(rename = "CustomEmails", skip_serializing_if = "Vec::is_empty")]
    pub custom_emails: Vec<String>,
    #[serde(rename = "LastUpdatedTime", skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<String>,
    #[serde(rename = "RuleDefinitions", skip_serializing_if = "Option::is_none")]
    pub rule_definitions: Option<application_insights_component_proactive_detection_configuration::RuleDefinitions>,
}
pub mod application_insights_component_proactive_detection_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct RuleDefinitions {
        #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
        pub name: Option<String>,
        #[serde(rename = "DisplayName", skip_serializing_if = "Option::is_none")]
        pub display_name: Option<String>,
        #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(rename = "HelpUrl", skip_serializing_if = "Option::is_none")]
        pub help_url: Option<String>,
        #[serde(rename = "IsHidden", skip_serializing_if = "Option::is_none")]
        pub is_hidden: Option<bool>,
        #[serde(rename = "IsEnabledByDefault", skip_serializing_if = "Option::is_none")]
        pub is_enabled_by_default: Option<bool>,
        #[serde(rename = "IsInPreview", skip_serializing_if = "Option::is_none")]
        pub is_in_preview: Option<bool>,
        #[serde(rename = "SupportsEmailNotifications", skip_serializing_if = "Option::is_none")]
        pub supports_email_notifications: Option<bool>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentsResource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    pub location: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TagsResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponent {
    #[serde(flatten)]
    pub components_resource: ComponentsResource,
    pub kind: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApplicationInsightsComponentProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentProperties {
    #[serde(rename = "ApplicationId", skip_serializing)]
    pub application_id: Option<String>,
    #[serde(rename = "AppId", skip_serializing)]
    pub app_id: Option<String>,
    #[serde(rename = "Application_Type")]
    pub application_type: application_insights_component_properties::ApplicationType,
    #[serde(rename = "Flow_Type", skip_serializing_if = "Option::is_none")]
    pub flow_type: Option<application_insights_component_properties::FlowType>,
    #[serde(rename = "Request_Source", skip_serializing_if = "Option::is_none")]
    pub request_source: Option<application_insights_component_properties::RequestSource>,
    #[serde(rename = "InstrumentationKey", skip_serializing)]
    pub instrumentation_key: Option<String>,
    #[serde(rename = "CreationDate", skip_serializing)]
    pub creation_date: Option<String>,
    #[serde(rename = "TenantId", skip_serializing)]
    pub tenant_id: Option<String>,
    #[serde(rename = "HockeyAppId", skip_serializing_if = "Option::is_none")]
    pub hockey_app_id: Option<String>,
    #[serde(rename = "HockeyAppToken", skip_serializing)]
    pub hockey_app_token: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "SamplingPercentage", skip_serializing_if = "Option::is_none")]
    pub sampling_percentage: Option<f64>,
    #[serde(rename = "ConnectionString", skip_serializing)]
    pub connection_string: Option<String>,
    #[serde(rename = "RetentionInDays", skip_serializing_if = "Option::is_none")]
    pub retention_in_days: Option<i64>,
    #[serde(rename = "DisableIpMasking", skip_serializing_if = "Option::is_none")]
    pub disable_ip_masking: Option<bool>,
    #[serde(rename = "ImmediatePurgeDataOn30Days", skip_serializing_if = "Option::is_none")]
    pub immediate_purge_data_on30_days: Option<bool>,
    #[serde(rename = "PrivateLinkScopedResources", skip_serializing)]
    pub private_link_scoped_resources: Vec<PrivateLinkScopedResource>,
    #[serde(rename = "IngestionMode", skip_serializing_if = "Option::is_none")]
    pub ingestion_mode: Option<application_insights_component_properties::IngestionMode>,
}
pub mod application_insights_component_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ApplicationType {
        #[serde(rename = "web")]
        Web,
        #[serde(rename = "other")]
        Other,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FlowType {
        Bluefield,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RequestSource {
        #[serde(rename = "rest")]
        Rest,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum IngestionMode {
        ApplicationInsights,
        ApplicationInsightsWithDiagnosticSettings,
        LogAnalytics,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateLinkScopedResource {
    #[serde(rename = "ResourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "ScopeId", skip_serializing_if = "Option::is_none")]
    pub scope_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentListResult {
    pub value: Vec<ApplicationInsightsComponent>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentPurgeBody {
    pub table: String,
    pub filters: Vec<ComponentPurgeBodyFilters>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentPurgeBodyFilters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub column: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentPurgeResponse {
    #[serde(rename = "operationId")]
    pub operation_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentPurgeStatusResponse {
    pub status: component_purge_status_response::Status,
}
pub mod component_purge_status_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemConfiguration {
    #[serde(rename = "ConnectorId", skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,
    #[serde(rename = "ConfigDisplayName", skip_serializing_if = "Option::is_none")]
    pub config_display_name: Option<String>,
    #[serde(rename = "IsDefault", skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "ConfigProperties", skip_serializing_if = "Option::is_none")]
    pub config_properties: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemConfigurationsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<WorkItemConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemCreateConfiguration {
    #[serde(rename = "ConnectorId", skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,
    #[serde(rename = "ConnectorDataConfiguration", skip_serializing_if = "Option::is_none")]
    pub connector_data_configuration: Option<String>,
    #[serde(rename = "ValidateOnly", skip_serializing_if = "Option::is_none")]
    pub validate_only: Option<bool>,
    #[serde(rename = "WorkItemProperties", skip_serializing_if = "Option::is_none")]
    pub work_item_properties: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemConfigurationError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub innererror: Option<InnerError>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentFavorite {
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "Config", skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "FavoriteId", skip_serializing)]
    pub favorite_id: Option<String>,
    #[serde(rename = "FavoriteType", skip_serializing_if = "Option::is_none")]
    pub favorite_type: Option<application_insights_component_favorite::FavoriteType>,
    #[serde(rename = "SourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<String>,
    #[serde(rename = "TimeModified", skip_serializing)]
    pub time_modified: Option<String>,
    #[serde(rename = "Tags", skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(rename = "Category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(rename = "IsGeneratedFromTemplate", skip_serializing_if = "Option::is_none")]
    pub is_generated_from_template: Option<bool>,
    #[serde(rename = "UserId", skip_serializing)]
    pub user_id: Option<String>,
}
pub mod application_insights_component_favorite {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FavoriteType {
        #[serde(rename = "shared")]
        Shared,
        #[serde(rename = "user")]
        User,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsWebTestLocationsListResult {
    pub value: Vec<ApplicationInsightsComponentWebTestLocation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentWebTestLocation {
    #[serde(rename = "DisplayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "Tag", skip_serializing)]
    pub tag: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebtestsResource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    pub location: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebTestListResult {
    pub value: Vec<WebTest>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebTest {
    #[serde(flatten)]
    pub webtests_resource: WebtestsResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<web_test::Kind>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WebTestProperties>,
}
pub mod web_test {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "ping")]
        Ping,
        #[serde(rename = "multistep")]
        Multistep,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebTestProperties {
    #[serde(rename = "SyntheticMonitorId")]
    pub synthetic_monitor_id: String,
    #[serde(rename = "Name")]
    pub name: String,
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "Enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "Frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<i32>,
    #[serde(rename = "Timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i32>,
    #[serde(rename = "Kind")]
    pub kind: web_test_properties::Kind,
    #[serde(rename = "RetryEnabled", skip_serializing_if = "Option::is_none")]
    pub retry_enabled: Option<bool>,
    #[serde(rename = "Locations")]
    pub locations: Vec<WebTestGeolocation>,
    #[serde(rename = "Configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<web_test_properties::Configuration>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
}
pub mod web_test_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "ping")]
        Ping,
        #[serde(rename = "multistep")]
        Multistep,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Configuration {
        #[serde(rename = "WebTest", skip_serializing_if = "Option::is_none")]
        pub web_test: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebTestGeolocation {
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentAnalyticsItem {
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "Content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "Version", skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "Scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<application_insights_component_analytics_item::Scope>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<application_insights_component_analytics_item::Type>,
    #[serde(rename = "TimeCreated", skip_serializing)]
    pub time_created: Option<String>,
    #[serde(rename = "TimeModified", skip_serializing)]
    pub time_modified: Option<String>,
    #[serde(rename = "Properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApplicationInsightsComponentAnalyticsItemProperties>,
}
pub mod application_insights_component_analytics_item {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        #[serde(rename = "shared")]
        Shared,
        #[serde(rename = "user")]
        User,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "query")]
        Query,
        #[serde(rename = "function")]
        Function,
        #[serde(rename = "folder")]
        Folder,
        #[serde(rename = "recent")]
        Recent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationInsightsComponentAnalyticsItemProperties {
    #[serde(rename = "functionAlias", skip_serializing_if = "Option::is_none")]
    pub function_alias: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkbookResource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkbooksListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Workbook>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Workbook {
    #[serde(flatten)]
    pub workbook_resource: WorkbookResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<workbook::Kind>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkbookProperties>,
}
pub mod workbook {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "user")]
        User,
        #[serde(rename = "shared")]
        Shared,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinkProperties {
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkbookProperties {
    pub name: String,
    #[serde(rename = "serializedData")]
    pub serialized_data: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "workbookId")]
    pub workbook_id: String,
    pub kind: workbook_properties::Kind,
    #[serde(rename = "timeModified", skip_serializing)]
    pub time_modified: Option<String>,
    pub category: String,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "sourceResourceId", skip_serializing_if = "Option::is_none")]
    pub source_resource_id: Option<String>,
}
pub mod workbook_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "shared")]
        Shared,
        #[serde(rename = "user")]
        User,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorFieldContract {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkbookError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ErrorFieldContract>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyWorkbookResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyWorkbooksListResult {
    #[serde(skip_serializing)]
    pub value: Vec<MyWorkbook>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyWorkbook {
    #[serde(flatten)]
    pub my_workbook_resource: MyWorkbookResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<my_workbook::Kind>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<MyWorkbookProperties>,
}
pub mod my_workbook {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "user")]
        User,
        #[serde(rename = "shared")]
        Shared,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyWorkbookProperties {
    #[serde(rename = "displayName")]
    pub display_name: String,
    #[serde(rename = "serializedData")]
    pub serialized_data: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "timeModified", skip_serializing)]
    pub time_modified: Option<String>,
    pub category: String,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(rename = "userId", skip_serializing)]
    pub user_id: Option<String>,
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyWorkbookError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ErrorFieldContract>,
}
