#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod subscriptions {
    use crate::{models::*, *};
    pub async fn list_locations(configuration: &Configuration, subscription_id: &str) -> Result<LocationListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/subscriptions/{}/locations", &configuration.base_path, subscription_id);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, subscription_id: &str) -> Result<Subscription> {
        let client = &configuration.client;
        let uri_str = &format!("{}/subscriptions/{}", &configuration.base_path, subscription_id);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration) -> Result<SubscriptionListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/subscriptions", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod tenants {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<TenantListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/tenants", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub async fn check_resource_name(
    configuration: &Configuration,
    resource_name_definition: Option<&ResourceName>,
) -> Result<CheckResourceNameResult> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.Resources/checkResourceName", &configuration.base_path,);
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    if let Some(resource_name_definition) = resource_name_definition {
        req_builder = req_builder.json(resource_name_definition);
    }
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
