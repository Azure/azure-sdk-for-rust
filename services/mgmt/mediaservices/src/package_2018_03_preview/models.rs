#![doc = "generated by AutoRust"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[doc = "Describes Advanced Audio Codec (AAC) audio encoding settings."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AacAudio {
    #[serde(flatten)]
    pub audio: Audio,
    #[doc = "The encoding profile to be used when encoding audio with AAC."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<aac_audio::Profile>,
}
impl AacAudio {
    pub fn new(audio: Audio) -> Self {
        Self { audio, profile: None }
    }
}
pub mod aac_audio {
    use super::*;
    #[doc = "The encoding profile to be used when encoding audio with AAC."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Profile {
        AacLc,
        HeAacV1,
        HeAacV2,
    }
}
#[doc = "Akamai access control"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AkamaiAccessControl {
    #[doc = "authentication key list"]
    #[serde(
        rename = "akamaiSignatureHeaderAuthenticationKeyList",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub akamai_signature_header_authentication_key_list: Vec<AkamaiSignatureHeaderAuthenticationKey>,
}
impl AkamaiAccessControl {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Akamai Signature Header authentication key."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AkamaiSignatureHeaderAuthenticationKey {
    #[doc = "identifier of the key"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[doc = "authentication key"]
    #[serde(rename = "base64Key", default, skip_serializing_if = "Option::is_none")]
    pub base64_key: Option<String>,
    #[doc = "The exact time the authentication key."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
}
impl AkamaiSignatureHeaderAuthenticationKey {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The API error."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ApiError {
    #[doc = "Information about an error."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<ODataError>,
}
impl ApiError {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "An Asset."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Asset {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "The Asset properties."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<AssetProperties>,
}
impl Asset {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of Asset items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AssetCollection {
    #[doc = "A collection of Asset items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Asset>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl AssetCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Asset Storage container SAS URLs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AssetContainerSas {
    #[doc = "The list of Asset container SAS URLs."]
    #[serde(rename = "assetContainerSasUrls", default, skip_serializing_if = "Vec::is_empty")]
    pub asset_container_sas_urls: Vec<String>,
}
impl AssetContainerSas {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Asset properties."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AssetProperties {
    #[doc = "The Asset ID."]
    #[serde(rename = "assetId", default, skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<String>,
    #[doc = "The creation date of the Asset."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The last modified date of the Asset."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[doc = "The alternate ID of the Asset."]
    #[serde(rename = "alternateId", default, skip_serializing_if = "Option::is_none")]
    pub alternate_id: Option<String>,
    #[doc = "The Asset description."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The name of the asset blob container."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[doc = "The name of the storage account."]
    #[serde(rename = "storageAccountName", default, skip_serializing_if = "Option::is_none")]
    pub storage_account_name: Option<String>,
    #[doc = "The Asset encryption format. One of None or MediaStorageEncryption."]
    #[serde(rename = "storageEncryptionFormat", default, skip_serializing_if = "Option::is_none")]
    pub storage_encryption_format: Option<asset_properties::StorageEncryptionFormat>,
}
impl AssetProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod asset_properties {
    use super::*;
    #[doc = "The Asset encryption format. One of None or MediaStorageEncryption."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StorageEncryptionFormat {
        None,
        MediaStorageClientEncryption,
    }
}
#[doc = "The Asset Storage encryption key."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct AssetStorageEncryptionKey {
    #[doc = "The Asset storage encryption key."]
    #[serde(rename = "storageEncryptionKey", default, skip_serializing_if = "Option::is_none")]
    pub storage_encryption_key: Option<String>,
}
impl AssetStorageEncryptionKey {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Defines the common properties for all audio codecs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Audio {
    #[serde(flatten)]
    pub codec: Codec,
    #[doc = "The number of channels in the audio."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channels: Option<i32>,
    #[doc = "The sampling rate to use for encoding in hertz."]
    #[serde(rename = "samplingRate", default, skip_serializing_if = "Option::is_none")]
    pub sampling_rate: Option<i32>,
    #[doc = "The bitrate, in bits per second, of the output encoded audio."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<i32>,
}
impl Audio {
    pub fn new(codec: Codec) -> Self {
        Self {
            codec,
            channels: None,
            sampling_rate: None,
            bitrate: None,
        }
    }
}
#[doc = "The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudioAnalyzerPreset {
    #[serde(flatten)]
    pub preset: Preset,
    #[doc = "The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are, 'en-US', 'en-GB', 'es-ES', 'es-MX', 'fr-FR', 'it-IT', 'ja-JP', 'pt-BR', 'zh-CN'."]
    #[serde(rename = "audioLanguage", default, skip_serializing_if = "Option::is_none")]
    pub audio_language: Option<String>,
}
impl AudioAnalyzerPreset {
    pub fn new(preset: Preset) -> Self {
        Self {
            preset,
            audio_language: None,
        }
    }
}
#[doc = "Describes the properties of an audio overlay."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudioOverlay {
    #[serde(flatten)]
    pub overlay: Overlay,
}
impl AudioOverlay {
    pub fn new(overlay: Overlay) -> Self {
        Self { overlay }
    }
}
#[doc = "Describes a built-in preset for encoding the input video with the Standard Encoder."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuiltInStandardEncoderPreset {
    #[serde(flatten)]
    pub preset: Preset,
    #[doc = "The built-in preset to be used for encoding videos."]
    #[serde(rename = "presetName")]
    pub preset_name: built_in_standard_encoder_preset::PresetName,
}
impl BuiltInStandardEncoderPreset {
    pub fn new(preset: Preset, preset_name: built_in_standard_encoder_preset::PresetName) -> Self {
        Self { preset, preset_name }
    }
}
pub mod built_in_standard_encoder_preset {
    use super::*;
    #[doc = "The built-in preset to be used for encoding videos."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PresetName {
        AdaptiveStreaming,
        #[serde(rename = "AACGoodQualityAudio")]
        AacGoodQualityAudio,
        H264MultipleBitrate1080p,
        H264MultipleBitrate720p,
        #[serde(rename = "H264MultipleBitrateSD")]
        H264MultipleBitrateSd,
    }
}
#[doc = "Class to specify drm configurations of CommonEncryptionCbcs scheme in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CbcsDrmConfiguration {
    #[doc = "Class to specify configurations of FairPlay in Streaming Policy"]
    #[serde(rename = "fairPlay", default, skip_serializing_if = "Option::is_none")]
    pub fair_play: Option<StreamingPolicyFairPlayConfiguration>,
    #[doc = "Class to specify configurations of PlayReady in Streaming Policy"]
    #[serde(rename = "playReady", default, skip_serializing_if = "Option::is_none")]
    pub play_ready: Option<StreamingPolicyPlayReadyConfiguration>,
    #[doc = "Class to specify configurations of Widevine in Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub widevine: Option<StreamingPolicyWidevineConfiguration>,
}
impl CbcsDrmConfiguration {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify drm configurations of CommonEncryptionCenc scheme in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CencDrmConfiguration {
    #[doc = "Class to specify configurations of PlayReady in Streaming Policy"]
    #[serde(rename = "playReady", default, skip_serializing_if = "Option::is_none")]
    pub play_ready: Option<StreamingPolicyPlayReadyConfiguration>,
    #[doc = "Class to specify configurations of Widevine in Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub widevine: Option<StreamingPolicyWidevineConfiguration>,
}
impl CencDrmConfiguration {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The input to the check name availability request."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CheckNameAvailabilityInput {
    #[doc = "The account name."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "The account type. For a Media Services account, this should be 'MediaServices'."]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
impl CheckNameAvailabilityInput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the basic properties of all codecs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Codec {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "An optional label for the codec. The label can be used to control muxing behavior."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}
impl Codec {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type, label: None }
    }
}
#[doc = "Class for CommonEncryptionCbcs encryption scheme"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CommonEncryptionCbcs {
    #[doc = "Class to specify which protocols are enabled"]
    #[serde(rename = "enabledProtocols", default, skip_serializing_if = "Option::is_none")]
    pub enabled_protocols: Option<EnabledProtocols>,
    #[doc = "Representing which tracks should not be encrypted"]
    #[serde(rename = "clearTracks", default, skip_serializing_if = "Vec::is_empty")]
    pub clear_tracks: Vec<TrackSelection>,
    #[doc = "Class to specify properties of all content keys in Streaming Policy"]
    #[serde(rename = "contentKeys", default, skip_serializing_if = "Option::is_none")]
    pub content_keys: Option<StreamingPolicyContentKeys>,
    #[doc = "Class to specify drm configurations of CommonEncryptionCbcs scheme in Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drm: Option<CbcsDrmConfiguration>,
}
impl CommonEncryptionCbcs {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class for envelope encryption scheme"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CommonEncryptionCenc {
    #[doc = "Class to specify which protocols are enabled"]
    #[serde(rename = "enabledProtocols", default, skip_serializing_if = "Option::is_none")]
    pub enabled_protocols: Option<EnabledProtocols>,
    #[doc = "Representing which tracks should not be encrypted"]
    #[serde(rename = "clearTracks", default, skip_serializing_if = "Vec::is_empty")]
    pub clear_tracks: Vec<TrackSelection>,
    #[doc = "Class to specify properties of all content keys in Streaming Policy"]
    #[serde(rename = "contentKeys", default, skip_serializing_if = "Option::is_none")]
    pub content_keys: Option<StreamingPolicyContentKeys>,
    #[doc = "Class to specify drm configurations of CommonEncryptionCenc scheme in Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drm: Option<CencDrmConfiguration>,
}
impl CommonEncryptionCenc {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A Content Key Policy resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ContentKeyPolicy {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "The properties of the Content Key Policy."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<ContentKeyPolicyProperties>,
}
impl ContentKeyPolicy {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Represents a configuration for non-DRM keys."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyClearKeyConfiguration {
    #[serde(flatten)]
    pub content_key_policy_configuration: ContentKeyPolicyConfiguration,
}
impl ContentKeyPolicyClearKeyConfiguration {
    pub fn new(content_key_policy_configuration: ContentKeyPolicyConfiguration) -> Self {
        Self {
            content_key_policy_configuration,
        }
    }
}
#[doc = "A collection of ContentKeyPolicy items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ContentKeyPolicyCollection {
    #[doc = "A collection of ContentKeyPolicy items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ContentKeyPolicy>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl ContentKeyPolicyCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Base class for Content Key Policy configuration. A derived class must be used to create a configuration."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyConfiguration {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
}
impl ContentKeyPolicyConfiguration {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type }
    }
}
#[doc = "Specifies a configuration for FairPlay licenses."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyFairPlayConfiguration {
    #[serde(flatten)]
    pub content_key_policy_configuration: ContentKeyPolicyConfiguration,
    #[doc = "The key that must be used as FairPlay ASk."]
    pub ask: String,
    #[doc = "The password encrypting FairPlay certificate in PKCS 12 (pfx) format."]
    #[serde(rename = "fairPlayPfxPassword")]
    pub fair_play_pfx_password: String,
    #[doc = "The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key)."]
    #[serde(rename = "fairPlayPfx")]
    pub fair_play_pfx: String,
    #[doc = "The rental and lease key type."]
    #[serde(rename = "rentalAndLeaseKeyType")]
    pub rental_and_lease_key_type: content_key_policy_fair_play_configuration::RentalAndLeaseKeyType,
    #[doc = "The rental duration. Must be greater than or equal to 0."]
    #[serde(rename = "rentalDuration")]
    pub rental_duration: i64,
}
impl ContentKeyPolicyFairPlayConfiguration {
    pub fn new(
        content_key_policy_configuration: ContentKeyPolicyConfiguration,
        ask: String,
        fair_play_pfx_password: String,
        fair_play_pfx: String,
        rental_and_lease_key_type: content_key_policy_fair_play_configuration::RentalAndLeaseKeyType,
        rental_duration: i64,
    ) -> Self {
        Self {
            content_key_policy_configuration,
            ask,
            fair_play_pfx_password,
            fair_play_pfx,
            rental_and_lease_key_type,
            rental_duration,
        }
    }
}
pub mod content_key_policy_fair_play_configuration {
    use super::*;
    #[doc = "The rental and lease key type."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RentalAndLeaseKeyType {
        Unknown,
        Undefined,
        PersistentUnlimited,
        PersistentLimited,
    }
}
#[doc = "Represents an open restriction. License or key will be delivered on every request."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyOpenRestriction {
    #[serde(flatten)]
    pub content_key_policy_restriction: ContentKeyPolicyRestriction,
}
impl ContentKeyPolicyOpenRestriction {
    pub fn new(content_key_policy_restriction: ContentKeyPolicyRestriction) -> Self {
        Self {
            content_key_policy_restriction,
        }
    }
}
#[doc = "Represents a policy option."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyOption {
    #[doc = "The legacy Policy Option ID."]
    #[serde(rename = "policyOptionId", default, skip_serializing_if = "Option::is_none")]
    pub policy_option_id: Option<String>,
    #[doc = "The Policy Option description."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "Base class for Content Key Policy configuration. A derived class must be used to create a configuration."]
    pub configuration: ContentKeyPolicyConfiguration,
    #[doc = "Base class for Content Key Policy restrictions. A derived class must be used to create a restriction."]
    pub restriction: ContentKeyPolicyRestriction,
}
impl ContentKeyPolicyOption {
    pub fn new(configuration: ContentKeyPolicyConfiguration, restriction: ContentKeyPolicyRestriction) -> Self {
        Self {
            policy_option_id: None,
            name: None,
            configuration,
            restriction,
        }
    }
}
#[doc = "Specifies a configuration for PlayReady licenses."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyConfiguration {
    #[serde(flatten)]
    pub content_key_policy_configuration: ContentKeyPolicyConfiguration,
    #[doc = "The PlayReady licenses."]
    pub licenses: Vec<ContentKeyPolicyPlayReadyLicense>,
    #[doc = "The custom response data."]
    #[serde(rename = "responseCustomData", default, skip_serializing_if = "Option::is_none")]
    pub response_custom_data: Option<String>,
}
impl ContentKeyPolicyPlayReadyConfiguration {
    pub fn new(content_key_policy_configuration: ContentKeyPolicyConfiguration, licenses: Vec<ContentKeyPolicyPlayReadyLicense>) -> Self {
        Self {
            content_key_policy_configuration,
            licenses,
            response_custom_data: None,
        }
    }
}
#[doc = "Specifies that the content key ID is in the PlayReady header."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader {
    #[serde(flatten)]
    pub content_key_policy_play_ready_content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation,
}
impl ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader {
    pub fn new(content_key_policy_play_ready_content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation) -> Self {
        Self {
            content_key_policy_play_ready_content_key_location,
        }
    }
}
#[doc = "Specifies that the content key ID is specified in the PlayReady configuration."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier {
    #[serde(flatten)]
    pub content_key_policy_play_ready_content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation,
    #[doc = "The content key ID."]
    #[serde(rename = "keyId")]
    pub key_id: String,
}
impl ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier {
    pub fn new(content_key_policy_play_ready_content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation, key_id: String) -> Self {
        Self {
            content_key_policy_play_ready_content_key_location,
            key_id,
        }
    }
}
#[doc = "Base class for content key ID location. A derived class must be used to represent the location."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyContentKeyLocation {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
}
impl ContentKeyPolicyPlayReadyContentKeyLocation {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type }
    }
}
#[doc = "Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
    #[doc = "Indicates whether this restriction is enforced on a Best Effort basis."]
    #[serde(rename = "bestEffort")]
    pub best_effort: bool,
    #[doc = "Configures the restriction control bits. Must be between 0 and 3 inclusive."]
    #[serde(rename = "configurationData")]
    pub configuration_data: i32,
}
impl ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
    pub fn new(best_effort: bool, configuration_data: i32) -> Self {
        Self {
            best_effort,
            configuration_data,
        }
    }
}
#[doc = "The PlayReady license"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyLicense {
    #[doc = "A flag indicating whether test devices can use the license."]
    #[serde(rename = "allowTestDevices")]
    pub allow_test_devices: bool,
    #[doc = "The begin date of license"]
    #[serde(rename = "beginDate", default, skip_serializing_if = "Option::is_none")]
    pub begin_date: Option<String>,
    #[doc = "The expiration date of license."]
    #[serde(rename = "expirationDate", default, skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[doc = "The relative begin date of license."]
    #[serde(rename = "relativeBeginDate", default, skip_serializing_if = "Option::is_none")]
    pub relative_begin_date: Option<String>,
    #[doc = "The relative expiration date of license."]
    #[serde(rename = "relativeExpirationDate", default, skip_serializing_if = "Option::is_none")]
    pub relative_expiration_date: Option<String>,
    #[doc = "The grace period of license."]
    #[serde(rename = "gracePeriod", default, skip_serializing_if = "Option::is_none")]
    pub grace_period: Option<String>,
    #[doc = "Configures the Play Right in the PlayReady license."]
    #[serde(rename = "playRight", default, skip_serializing_if = "Option::is_none")]
    pub play_right: Option<ContentKeyPolicyPlayReadyPlayRight>,
    #[doc = "The license type."]
    #[serde(rename = "licenseType")]
    pub license_type: content_key_policy_play_ready_license::LicenseType,
    #[doc = "Base class for content key ID location. A derived class must be used to represent the location."]
    #[serde(rename = "contentKeyLocation")]
    pub content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation,
    #[doc = "The PlayReady content type."]
    #[serde(rename = "contentType")]
    pub content_type: content_key_policy_play_ready_license::ContentType,
}
impl ContentKeyPolicyPlayReadyLicense {
    pub fn new(
        allow_test_devices: bool,
        license_type: content_key_policy_play_ready_license::LicenseType,
        content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation,
        content_type: content_key_policy_play_ready_license::ContentType,
    ) -> Self {
        Self {
            allow_test_devices,
            begin_date: None,
            expiration_date: None,
            relative_begin_date: None,
            relative_expiration_date: None,
            grace_period: None,
            play_right: None,
            license_type,
            content_key_location,
            content_type,
        }
    }
}
pub mod content_key_policy_play_ready_license {
    use super::*;
    #[doc = "The license type."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicenseType {
        Unknown,
        NonPersistent,
        Persistent,
    }
    #[doc = "The PlayReady content type."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContentType {
        Unknown,
        Unspecified,
        UltraVioletDownload,
        UltraVioletStreaming,
    }
}
#[doc = "Configures the Play Right in the PlayReady license."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyPlayReadyPlayRight {
    #[doc = "The amount of time that the license is valid after the license is first used to play content."]
    #[serde(rename = "firstPlayExpiration", default, skip_serializing_if = "Option::is_none")]
    pub first_play_expiration: Option<String>,
    #[doc = "Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive."]
    #[serde(rename = "scmsRestriction", default, skip_serializing_if = "Option::is_none")]
    pub scms_restriction: Option<i32>,
    #[doc = "Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive."]
    #[serde(rename = "agcAndColorStripeRestriction", default, skip_serializing_if = "Option::is_none")]
    pub agc_and_color_stripe_restriction: Option<i32>,
    #[doc = "Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules."]
    #[serde(
        rename = "explicitAnalogTelevisionOutputRestriction",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub explicit_analog_television_output_restriction: Option<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction>,
    #[doc = "Enables the Image Constraint For Analog Component Video Restriction in the license."]
    #[serde(rename = "digitalVideoOnlyContentRestriction")]
    pub digital_video_only_content_restriction: bool,
    #[doc = "Enables the Image Constraint For Analog Component Video Restriction in the license."]
    #[serde(rename = "imageConstraintForAnalogComponentVideoRestriction")]
    pub image_constraint_for_analog_component_video_restriction: bool,
    #[doc = "Enables the Image Constraint For Analog Component Video Restriction in the license."]
    #[serde(rename = "imageConstraintForAnalogComputerMonitorRestriction")]
    pub image_constraint_for_analog_computer_monitor_restriction: bool,
    #[doc = "Configures Unknown output handling settings of the license."]
    #[serde(rename = "allowPassingVideoContentToUnknownOutput")]
    pub allow_passing_video_content_to_unknown_output: content_key_policy_play_ready_play_right::AllowPassingVideoContentToUnknownOutput,
    #[doc = "Specifies the output protection level for uncompressed digital video."]
    #[serde(rename = "uncompressedDigitalVideoOpl", default, skip_serializing_if = "Option::is_none")]
    pub uncompressed_digital_video_opl: Option<i32>,
    #[doc = "Specifies the output protection level for compressed digital video."]
    #[serde(rename = "compressedDigitalVideoOpl", default, skip_serializing_if = "Option::is_none")]
    pub compressed_digital_video_opl: Option<i32>,
    #[doc = "Specifies the output protection level for compressed digital audio."]
    #[serde(rename = "analogVideoOpl", default, skip_serializing_if = "Option::is_none")]
    pub analog_video_opl: Option<i32>,
    #[doc = "Specifies the output protection level for compressed digital audio."]
    #[serde(rename = "compressedDigitalAudioOpl", default, skip_serializing_if = "Option::is_none")]
    pub compressed_digital_audio_opl: Option<i32>,
    #[doc = "Specifies the output protection level for uncompressed digital audio."]
    #[serde(rename = "uncompressedDigitalAudioOpl", default, skip_serializing_if = "Option::is_none")]
    pub uncompressed_digital_audio_opl: Option<i32>,
}
impl ContentKeyPolicyPlayReadyPlayRight {
    pub fn new(
        digital_video_only_content_restriction: bool,
        image_constraint_for_analog_component_video_restriction: bool,
        image_constraint_for_analog_computer_monitor_restriction: bool,
        allow_passing_video_content_to_unknown_output: content_key_policy_play_ready_play_right::AllowPassingVideoContentToUnknownOutput,
    ) -> Self {
        Self {
            first_play_expiration: None,
            scms_restriction: None,
            agc_and_color_stripe_restriction: None,
            explicit_analog_television_output_restriction: None,
            digital_video_only_content_restriction,
            image_constraint_for_analog_component_video_restriction,
            image_constraint_for_analog_computer_monitor_restriction,
            allow_passing_video_content_to_unknown_output,
            uncompressed_digital_video_opl: None,
            compressed_digital_video_opl: None,
            analog_video_opl: None,
            compressed_digital_audio_opl: None,
            uncompressed_digital_audio_opl: None,
        }
    }
}
pub mod content_key_policy_play_ready_play_right {
    use super::*;
    #[doc = "Configures Unknown output handling settings of the license."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AllowPassingVideoContentToUnknownOutput {
        Unknown,
        NotAllowed,
        Allowed,
        AllowedWithVideoConstriction,
    }
}
#[doc = "The properties of the Content Key Policy."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyProperties {
    #[doc = "The legacy Policy ID."]
    #[serde(rename = "policyId", default, skip_serializing_if = "Option::is_none")]
    pub policy_id: Option<String>,
    #[doc = "The creation date of the Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The last modified date of the Policy"]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[doc = "A description for the Policy."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The Key Policy options."]
    pub options: Vec<ContentKeyPolicyOption>,
}
impl ContentKeyPolicyProperties {
    pub fn new(options: Vec<ContentKeyPolicyOption>) -> Self {
        Self {
            policy_id: None,
            created: None,
            last_modified: None,
            description: None,
            options,
        }
    }
}
#[doc = "Base class for Content Key Policy restrictions. A derived class must be used to create a restriction."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyRestriction {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
}
impl ContentKeyPolicyRestriction {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type }
    }
}
#[doc = "Base class for Content Key Policy key for token validation. A derived class must be used to create a token key."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyRestrictionTokenKey {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
}
impl ContentKeyPolicyRestrictionTokenKey {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type }
    }
}
#[doc = "Specifies a RSA key for token validation"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyRsaTokenKey {
    #[serde(flatten)]
    pub content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey,
    #[doc = "The RSA Parameter exponent"]
    pub exponent: String,
    #[doc = "The RSA Parameter modulus"]
    pub modulus: String,
}
impl ContentKeyPolicyRsaTokenKey {
    pub fn new(content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey, exponent: String, modulus: String) -> Self {
        Self {
            content_key_policy_restriction_token_key,
            exponent,
            modulus,
        }
    }
}
#[doc = "Specifies a symmetric key for token validation."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicySymmetricTokenKey {
    #[serde(flatten)]
    pub content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey,
    #[doc = "The key value of the key"]
    #[serde(rename = "keyValue")]
    pub key_value: String,
}
impl ContentKeyPolicySymmetricTokenKey {
    pub fn new(content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey, key_value: String) -> Self {
        Self {
            content_key_policy_restriction_token_key,
            key_value,
        }
    }
}
#[doc = "Represents a token claim."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ContentKeyPolicyTokenClaim {
    #[doc = "Token claim type."]
    #[serde(rename = "claimType", default, skip_serializing_if = "Option::is_none")]
    pub claim_type: Option<String>,
    #[doc = "Token claim value."]
    #[serde(rename = "claimValue", default, skip_serializing_if = "Option::is_none")]
    pub claim_value: Option<String>,
}
impl ContentKeyPolicyTokenClaim {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Represents a token restriction. Provided token must match these requirements for successful license or key delivery."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyTokenRestriction {
    #[serde(flatten)]
    pub content_key_policy_restriction: ContentKeyPolicyRestriction,
    #[doc = "The token issuer."]
    pub issuer: String,
    #[doc = "The audience for the token."]
    pub audience: String,
    #[doc = "Base class for Content Key Policy key for token validation. A derived class must be used to create a token key."]
    #[serde(rename = "primaryVerificationKey")]
    pub primary_verification_key: ContentKeyPolicyRestrictionTokenKey,
    #[doc = "A list of alternative verification keys."]
    #[serde(rename = "alternateVerificationKeys", default, skip_serializing_if = "Vec::is_empty")]
    pub alternate_verification_keys: Vec<ContentKeyPolicyRestrictionTokenKey>,
    #[doc = "A list of required token claims."]
    #[serde(rename = "requiredClaims", default, skip_serializing_if = "Vec::is_empty")]
    pub required_claims: Vec<ContentKeyPolicyTokenClaim>,
    #[doc = "The type of token."]
    #[serde(rename = "restrictionTokenType")]
    pub restriction_token_type: content_key_policy_token_restriction::RestrictionTokenType,
    #[doc = "The OpenID connect discovery document."]
    #[serde(rename = "openIdConnectDiscoveryDocument", default, skip_serializing_if = "Option::is_none")]
    pub open_id_connect_discovery_document: Option<String>,
}
impl ContentKeyPolicyTokenRestriction {
    pub fn new(
        content_key_policy_restriction: ContentKeyPolicyRestriction,
        issuer: String,
        audience: String,
        primary_verification_key: ContentKeyPolicyRestrictionTokenKey,
        restriction_token_type: content_key_policy_token_restriction::RestrictionTokenType,
    ) -> Self {
        Self {
            content_key_policy_restriction,
            issuer,
            audience,
            primary_verification_key,
            alternate_verification_keys: Vec::new(),
            required_claims: Vec::new(),
            restriction_token_type,
            open_id_connect_discovery_document: None,
        }
    }
}
pub mod content_key_policy_token_restriction {
    use super::*;
    #[doc = "The type of token."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RestrictionTokenType {
        Unknown,
        Swt,
        Jwt,
    }
}
#[doc = "Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyUnknownConfiguration {
    #[serde(flatten)]
    pub content_key_policy_configuration: ContentKeyPolicyConfiguration,
}
impl ContentKeyPolicyUnknownConfiguration {
    pub fn new(content_key_policy_configuration: ContentKeyPolicyConfiguration) -> Self {
        Self {
            content_key_policy_configuration,
        }
    }
}
#[doc = "Represents a ContentKeyPolicyRestriction that is unavailable in the current API version."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyUnknownRestriction {
    #[serde(flatten)]
    pub content_key_policy_restriction: ContentKeyPolicyRestriction,
}
impl ContentKeyPolicyUnknownRestriction {
    pub fn new(content_key_policy_restriction: ContentKeyPolicyRestriction) -> Self {
        Self {
            content_key_policy_restriction,
        }
    }
}
#[doc = "Specifies a configuration for Widevine licenses."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyWidevineConfiguration {
    #[serde(flatten)]
    pub content_key_policy_configuration: ContentKeyPolicyConfiguration,
    #[doc = "The Widevine template."]
    #[serde(rename = "widevineTemplate")]
    pub widevine_template: String,
}
impl ContentKeyPolicyWidevineConfiguration {
    pub fn new(content_key_policy_configuration: ContentKeyPolicyConfiguration, widevine_template: String) -> Self {
        Self {
            content_key_policy_configuration,
            widevine_template,
        }
    }
}
#[doc = "Specifies a certificate for token validation."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentKeyPolicyX509CertificateTokenKey {
    #[serde(flatten)]
    pub content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey,
    #[doc = "The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)"]
    #[serde(rename = "rawBody")]
    pub raw_body: String,
}
impl ContentKeyPolicyX509CertificateTokenKey {
    pub fn new(content_key_policy_restriction_token_key: ContentKeyPolicyRestrictionTokenKey, raw_body: String) -> Self {
        Self {
            content_key_policy_restriction_token_key,
            raw_body,
        }
    }
}
#[doc = "A codec flag, which tells the encoder to copy the input audio bitstream."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyAudio {
    #[serde(flatten)]
    pub codec: Codec,
}
impl CopyAudio {
    pub fn new(codec: Codec) -> Self {
        Self { codec }
    }
}
#[doc = "A codec flag, which tells the encoder to copy the input video bitstream without re-encoding."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyVideo {
    #[serde(flatten)]
    pub codec: Codec,
}
impl CopyVideo {
    pub fn new(codec: Codec) -> Self {
        Self { codec }
    }
}
#[doc = "The client access policy."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CrossSiteAccessPolicies {
    #[doc = "The content of clientaccesspolicy.xml used by Silverlight."]
    #[serde(rename = "clientAccessPolicy", default, skip_serializing_if = "Option::is_none")]
    pub client_access_policy: Option<String>,
    #[doc = "The content of crossdomain.xml used by Silverlight."]
    #[serde(rename = "crossDomainPolicy", default, skip_serializing_if = "Option::is_none")]
    pub cross_domain_policy: Option<String>,
}
impl CrossSiteAccessPolicies {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify properties of default content key for each encryption scheme"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct DefaultKey {
    #[doc = "Label can be used to specify Content Key when creating Streaming Locator"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = "Policy used by Default Key"]
    #[serde(rename = "policyName", default, skip_serializing_if = "Option::is_none")]
    pub policy_name: Option<String>,
}
impl DefaultKey {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the de-interlacing settings."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Deinterlace {
    #[doc = "The field parity for de-interlacing, defaults to Auto."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parity: Option<deinterlace::Parity>,
    #[doc = "The deinterlacing mode. Defaults to AutoPixelAdaptive."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<deinterlace::Mode>,
}
impl Deinterlace {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod deinterlace {
    use super::*;
    #[doc = "The field parity for de-interlacing, defaults to Auto."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Parity {
        Auto,
        TopFieldFirst,
        BottomFieldFirst,
    }
    #[doc = "The deinterlacing mode. Defaults to AutoPixelAdaptive."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Mode {
        Off,
        AutoPixelAdaptive,
    }
}
#[doc = "Class to specify which protocols are enabled"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnabledProtocols {
    #[doc = "Enable Download protocol or not"]
    pub download: bool,
    #[doc = "Enable Dash protocol or not"]
    pub dash: bool,
    #[doc = "Enable Hls protocol or not"]
    pub hls: bool,
    #[doc = "Enable SmoothStreaming protocol or not"]
    #[serde(rename = "smoothStreaming")]
    pub smooth_streaming: bool,
}
impl EnabledProtocols {
    pub fn new(download: bool, dash: bool, hls: bool, smooth_streaming: bool) -> Self {
        Self {
            download,
            dash,
            hls,
            smooth_streaming,
        }
    }
}
#[doc = "The response from the check name availability request."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EntityNameAvailabilityCheckOutput {
    #[doc = "Specifies if the name is available."]
    #[serde(rename = "nameAvailable")]
    pub name_available: bool,
    #[doc = "Specifies the reason if the name is not available."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[doc = "Specifies the detailed reason if the name is not available."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl EntityNameAvailabilityCheckOutput {
    pub fn new(name_available: bool) -> Self {
        Self {
            name_available,
            reason: None,
            message: None,
        }
    }
}
#[doc = "Class for EnvelopeEncryption encryption scheme"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct EnvelopeEncryption {
    #[doc = "Class to specify which protocols are enabled"]
    #[serde(rename = "enabledProtocols", default, skip_serializing_if = "Option::is_none")]
    pub enabled_protocols: Option<EnabledProtocols>,
    #[doc = "Representing which tracks should not be encrypted"]
    #[serde(rename = "clearTracks", default, skip_serializing_if = "Vec::is_empty")]
    pub clear_tracks: Vec<TrackSelection>,
    #[doc = "Class to specify properties of all content keys in Streaming Policy"]
    #[serde(rename = "contentKeys", default, skip_serializing_if = "Option::is_none")]
    pub content_keys: Option<StreamingPolicyContentKeys>,
    #[doc = "LicenseAcquisitionUrlTemplate is used to point to user specified service to delivery content keys"]
    #[serde(rename = "customLicenseAcquisitionUrlTemplate", default, skip_serializing_if = "Option::is_none")]
    pub custom_license_acquisition_url_template: Option<String>,
}
impl EnvelopeEncryption {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Filters {
    #[doc = "Describes the de-interlacing settings."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deinterlace: Option<Deinterlace>,
    #[doc = "The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rotation: Option<filters::Rotation>,
    #[doc = "Describes the properties of a rectangular window applied to the input media before processing it."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub crop: Option<Rectangle>,
    #[doc = "The properties of overlays to be applied to the input video. These could be audio, image or video overlays."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub overlays: Vec<Overlay>,
}
impl Filters {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod filters {
    use super::*;
    #[doc = "The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Rotation {
        Auto,
        None,
        Rotate0,
        Rotate90,
        Rotate180,
        Rotate270,
    }
}
#[doc = "Base class for output."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Format {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename."]
    #[serde(rename = "filenamePattern", default, skip_serializing_if = "Option::is_none")]
    pub filename_pattern: Option<String>,
}
impl Format {
    pub fn new(odata_type: String) -> Self {
        Self {
            odata_type,
            filename_pattern: None,
        }
    }
}
#[doc = "Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct H264Layer {
    #[serde(flatten)]
    pub video_layer: VideoLayer,
    #[doc = "Which profile of the H.264 standard should be used when encoding this layer. Default is Auto."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<h264_layer::Profile>,
    #[doc = "Which level of the H.264 standard should be used when encoding this layer. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[doc = "The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S)."]
    #[serde(rename = "bufferWindow", default, skip_serializing_if = "Option::is_none")]
    pub buffer_window: Option<String>,
    #[doc = "The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting."]
    #[serde(rename = "referenceFrames", default, skip_serializing_if = "Option::is_none")]
    pub reference_frames: Option<i32>,
    #[doc = "The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level."]
    #[serde(rename = "entropyMode", default, skip_serializing_if = "Option::is_none")]
    pub entropy_mode: Option<h264_layer::EntropyMode>,
}
impl H264Layer {
    pub fn new(video_layer: VideoLayer) -> Self {
        Self {
            video_layer,
            profile: None,
            level: None,
            buffer_window: None,
            reference_frames: None,
            entropy_mode: None,
        }
    }
}
pub mod h264_layer {
    use super::*;
    #[doc = "Which profile of the H.264 standard should be used when encoding this layer. Default is Auto."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Profile {
        Auto,
        Baseline,
        Main,
        High,
        High422,
        High444,
    }
    #[doc = "The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EntropyMode {
        Cabac,
        Cavlc,
    }
}
#[doc = "Describes all the properties for encoding a video with the H.264 codec."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct H264Video {
    #[serde(flatten)]
    pub video: Video,
    #[doc = "Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video."]
    #[serde(rename = "sceneChangeDetection", default, skip_serializing_if = "Option::is_none")]
    pub scene_change_detection: Option<bool>,
    #[doc = "Tells the encoder how to choose its encoding settings. The default value is Balanced."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complexity: Option<h264_video::Complexity>,
    #[doc = "The collection of output H.264 layers to be produced by the encoder."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub layers: Vec<H264Layer>,
}
impl H264Video {
    pub fn new(video: Video) -> Self {
        Self {
            video,
            scene_change_detection: None,
            complexity: None,
            layers: Vec::new(),
        }
    }
}
pub mod h264_video {
    use super::*;
    #[doc = "Tells the encoder how to choose its encoding settings. The default value is Balanced."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Complexity {
        Speed,
        Balanced,
        Quality,
    }
}
#[doc = "The HLS configuration."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Hls {
    #[doc = "The amount of fragments per HTTP Live Streaming (HLS) segment."]
    #[serde(rename = "fragmentsPerTsSegment", default, skip_serializing_if = "Option::is_none")]
    pub fragments_per_ts_segment: Option<i32>,
}
impl Hls {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The IP access control."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct IpAccessControl {
    #[doc = "The IP allow list."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub allow: Vec<IpRange>,
}
impl IpAccessControl {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The IP address range in the CIDR scheme."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct IpRange {
    #[doc = "The friendly name for the IP address range."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "The IP address."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[doc = "The subnet mask prefix length (see CIDR notation)."]
    #[serde(rename = "subnetPrefixLength", default, skip_serializing_if = "Option::is_none")]
    pub subnet_prefix_length: Option<i32>,
}
impl IpRange {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the basic properties for generating thumbnails from the input video"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Image {
    #[serde(flatten)]
    pub video: Video,
    #[doc = "The position in the input video from where to start generating thumbnails. The value can be in absolute timestamp (ISO 8601, e.g: PT05S), or a frame count (For example, 10 for the 10th frame), or a relative value (For example, 1%). Also supports a macro {Best}, which tells the encoder to select the best thumbnail from the first few seconds of the video."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    #[doc = "The intervals at which thumbnails are generated. The value can be in absolute timestamp (ISO 8601, e.g: PT05S for one image every 5 seconds), or a frame count (For example, 30 for every 30 frames), or a relative value (For example, 1%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub step: Option<String>,
    #[doc = "The position in the input video at which to stop generating thumbnails. The value can be in absolute timestamp (ISO 8601, e.g: PT5M30S to stop at 5 minutes and 30 seconds), or a frame count (For example, 300 to stop at the 300th frame), or a relative value (For example, 100%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<String>,
}
impl Image {
    pub fn new(video: Video) -> Self {
        Self {
            video,
            start: None,
            step: None,
            range: None,
        }
    }
}
#[doc = "Describes the properties for an output image file."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageFormat {
    #[serde(flatten)]
    pub format: Format,
}
impl ImageFormat {
    pub fn new(format: Format) -> Self {
        Self { format }
    }
}
#[doc = "A Job resource type. The progress and state can be obtained by polling a Job or subscribing to events using EventGrid."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Job {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "Properties of the Job."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
impl Job {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of Job items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct JobCollection {
    #[doc = "A collection of Job items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Job>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl JobCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Details of JobOutput errors."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct JobError {
    #[doc = "Error code describing the error."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<job_error::Code>,
    #[doc = "A human-readable language-dependent representation of the error."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[doc = "Helps with categorization of errors."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<job_error::Category>,
    #[doc = "Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<job_error::Retry>,
    #[doc = "An array of details about specific errors that led to this reported error."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<JobErrorDetail>,
}
impl JobError {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod job_error {
    use super::*;
    #[doc = "Error code describing the error."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Code {
        ServiceError,
        ServiceTransientError,
        DownloadNotAccessible,
        DownloadTransientError,
        UploadNotAccessible,
        UploadTransientError,
        ConfigurationUnsupported,
        ContentMalformed,
        ContentUnsupported,
    }
    #[doc = "Helps with categorization of errors."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Category {
        Service,
        Download,
        Upload,
        Configuration,
        Content,
    }
    #[doc = "Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Retry {
        DoNotRetry,
        MayRetry,
    }
}
#[doc = "Details of JobOutput errors."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct JobErrorDetail {
    #[doc = "Code describing the error detail."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[doc = "A human-readable representation of the error."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl JobErrorDetail {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Base class for inputs to a Job."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobInput {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "A label that is assigned to a JobInput, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}
impl JobInput {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type, label: None }
    }
}
#[doc = "Represents an Asset for input into a Job."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobInputAsset {
    #[serde(flatten)]
    pub job_input_clip: JobInputClip,
    #[doc = "The name of the input Asset."]
    #[serde(rename = "assetName")]
    pub asset_name: String,
}
impl JobInputAsset {
    pub fn new(job_input_clip: JobInputClip, asset_name: String) -> Self {
        Self {
            job_input_clip,
            asset_name,
        }
    }
}
#[doc = "Represents input files for a Job."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobInputClip {
    #[serde(flatten)]
    pub job_input: JobInput,
    #[doc = "List of files. Required for JobInputHttp."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<String>,
}
impl JobInputClip {
    pub fn new(job_input: JobInput) -> Self {
        Self {
            job_input,
            files: Vec::new(),
        }
    }
}
#[doc = "Represents HTTPS job input."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobInputHttp {
    #[serde(flatten)]
    pub job_input_clip: JobInputClip,
    #[doc = "Base URI for HTTPS job input. It will be concatenated with provided file names.   If no base uri is given, then the provided file list is assumed to be fully qualified uris."]
    #[serde(rename = "baseUri", default, skip_serializing_if = "Option::is_none")]
    pub base_uri: Option<String>,
}
impl JobInputHttp {
    pub fn new(job_input_clip: JobInputClip) -> Self {
        Self {
            job_input_clip,
            base_uri: None,
        }
    }
}
#[doc = "Describes a list of inputs to a Job."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobInputs {
    #[serde(flatten)]
    pub job_input: JobInput,
    #[doc = "List of inputs to a Job."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<JobInput>,
}
impl JobInputs {
    pub fn new(job_input: JobInput) -> Self {
        Self {
            job_input,
            inputs: Vec::new(),
        }
    }
}
#[doc = "Describes all the properties of a JobOutput."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobOutput {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "Details of JobOutput errors."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<JobError>,
    #[doc = "Describes the state of the JobOutput."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<job_output::State>,
    #[doc = "If the JobOutput is in a Processing state, this contains the job completion percentage.  The value is an estimate and not intended to be used to predict job completion times. To determine if the JobOutput is complete, use the State property."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<i32>,
}
impl JobOutput {
    pub fn new(odata_type: String) -> Self {
        Self {
            odata_type,
            error: None,
            state: None,
            progress: None,
        }
    }
}
pub mod job_output {
    use super::*;
    #[doc = "Describes the state of the JobOutput."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Canceled,
        Canceling,
        Error,
        Finished,
        Processing,
        Queued,
        Scheduled,
    }
}
#[doc = "Represents an Asset used as a JobOutput."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobOutputAsset {
    #[serde(flatten)]
    pub job_output: JobOutput,
    #[doc = "The name of the output Asset."]
    #[serde(rename = "assetName")]
    pub asset_name: String,
}
impl JobOutputAsset {
    pub fn new(job_output: JobOutput, asset_name: String) -> Self {
        Self { job_output, asset_name }
    }
}
#[doc = "Properties of the Job."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[doc = "The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The current state of the job."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<job_properties::State>,
    #[doc = "Optional customer supplied description of the Job."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "Base class for inputs to a Job."]
    pub input: JobInput,
    #[doc = "The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[doc = "The outputs for the Job."]
    pub outputs: Vec<JobOutput>,
    #[doc = "Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<job_properties::Priority>,
}
impl JobProperties {
    pub fn new(input: JobInput, outputs: Vec<JobOutput>) -> Self {
        Self {
            created: None,
            state: None,
            description: None,
            input,
            last_modified: None,
            outputs,
            priority: None,
        }
    }
}
pub mod job_properties {
    use super::*;
    #[doc = "The current state of the job."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        Canceled,
        Canceling,
        Error,
        Finished,
        Processing,
        Queued,
        Scheduled,
    }
    #[doc = "Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Priority {
        Low,
        Normal,
        High,
    }
}
#[doc = "Describes the settings for producing JPEG thumbnails."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JpgFormat {
    #[serde(flatten)]
    pub image_format: ImageFormat,
}
impl JpgFormat {
    pub fn new(image_format: ImageFormat) -> Self {
        Self { image_format }
    }
}
#[doc = "Describes the properties for producing a series of JPEG images from the input video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JpgImage {
    #[serde(flatten)]
    pub image: Image,
    #[doc = "A collection of output JPEG image layers to be produced by the encoder."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub layers: Vec<JpgLayer>,
}
impl JpgImage {
    pub fn new(image: Image) -> Self {
        Self { image, layers: Vec::new() }
    }
}
#[doc = "Describes the settings to produce a JPEG image from the input video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JpgLayer {
    #[serde(flatten)]
    pub layer: Layer,
    #[doc = "The compression quality of the JPEG output. Range is from 0-100 and the default is 70."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<i32>,
}
impl JpgLayer {
    pub fn new(layer: Layer) -> Self {
        Self { layer, quality: None }
    }
}
#[doc = "The encoder can be configured to produce video and/or images (thumbnails) at different resolutions, by specifying a layer for each desired resolution. A layer represents the properties for the video or image at a resolution."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Layer {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<String>,
    #[doc = "The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub height: Option<String>,
    #[doc = "The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}
impl Layer {
    pub fn new(odata_type: String) -> Self {
        Self {
            odata_type,
            width: None,
            height: None,
            label: None,
        }
    }
}
#[doc = "The parameters to the list SAS request."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ListContainerSasInput {
    #[doc = "The permissions to set on the SAS URL."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<list_container_sas_input::Permissions>,
    #[doc = "The SAS URL expiration time.  This must be less than 24 hours from the current time."]
    #[serde(rename = "expiryTime", default, skip_serializing_if = "Option::is_none")]
    pub expiry_time: Option<String>,
}
impl ListContainerSasInput {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod list_container_sas_input {
    use super::*;
    #[doc = "The permissions to set on the SAS URL."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Permissions {
        Read,
        ReadWrite,
        ReadWriteDelete,
    }
}
#[doc = "Class of response for listContentKeys action"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ListContentKeysResponse {
    #[doc = "ContentKeys used by current Streaming Locator"]
    #[serde(rename = "contentKeys", default, skip_serializing_if = "Vec::is_empty")]
    pub content_keys: Vec<StreamingLocatorContentKey>,
}
impl ListContentKeysResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class of response for listPaths action"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ListPathsResponse {
    #[doc = "Streaming Paths supported by current Streaming Locator"]
    #[serde(rename = "streamingPaths", default, skip_serializing_if = "Vec::is_empty")]
    pub streaming_paths: Vec<StreamingPath>,
    #[doc = "Download Paths supported by current Streaming Locator"]
    #[serde(rename = "downloadPaths", default, skip_serializing_if = "Vec::is_empty")]
    pub download_paths: Vec<String>,
}
impl ListPathsResponse {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Live Event."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEvent {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[doc = "The Live Event properties."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<LiveEventProperties>,
}
impl LiveEvent {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The LiveEvent action input parameter definition."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventActionInput {
    #[doc = "The flag indicates if remove LiveOutputs on Stop."]
    #[serde(rename = "removeOutputsOnStop", default, skip_serializing_if = "Option::is_none")]
    pub remove_outputs_on_stop: Option<bool>,
}
impl LiveEventActionInput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Live Event encoding."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventEncoding {
    #[doc = "The encoding type for Live Event."]
    #[serde(rename = "encodingType", default, skip_serializing_if = "Option::is_none")]
    pub encoding_type: Option<live_event_encoding::EncodingType>,
    #[doc = "The encoding preset name."]
    #[serde(rename = "presetName", default, skip_serializing_if = "Option::is_none")]
    pub preset_name: Option<String>,
}
impl LiveEventEncoding {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod live_event_encoding {
    use super::*;
    #[doc = "The encoding type for Live Event."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncodingType {
        None,
        Basic,
    }
}
#[doc = "The Live Event endpoint."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventEndpoint {
    #[doc = "The endpoint protocol."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[doc = "The endpoint URL."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl LiveEventEndpoint {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Live Event input."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LiveEventInput {
    #[doc = "The streaming protocol for the Live Event."]
    #[serde(rename = "streamingProtocol")]
    pub streaming_protocol: live_event_input::StreamingProtocol,
    #[doc = "ISO 8601 timespan duration of the key frame interval duration."]
    #[serde(rename = "keyFrameIntervalDuration", default, skip_serializing_if = "Option::is_none")]
    pub key_frame_interval_duration: Option<String>,
    #[doc = "The access token."]
    #[serde(rename = "accessToken", default, skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    #[doc = "The input endpoints for the Live Event."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<LiveEventEndpoint>,
}
impl LiveEventInput {
    pub fn new(streaming_protocol: live_event_input::StreamingProtocol) -> Self {
        Self {
            streaming_protocol,
            key_frame_interval_duration: None,
            access_token: None,
            endpoints: Vec::new(),
        }
    }
}
pub mod live_event_input {
    use super::*;
    #[doc = "The streaming protocol for the Live Event."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StreamingProtocol {
        #[serde(rename = "FragmentedMP4")]
        FragmentedMp4,
        #[serde(rename = "RTMP")]
        Rtmp,
    }
}
#[doc = "The LiveEvent list result."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventListResult {
    #[doc = "The result of the List Live Event operation."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LiveEvent>,
    #[doc = "The number of result."]
    #[serde(rename = "@odata.count", default, skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[doc = "Th link to the next set of results. Not empty if value contains incomplete list of Live Outputs."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl LiveEventListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Live Event preview."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventPreview {
    #[doc = "The endpoints for preview."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<LiveEventEndpoint>,
    #[doc = "The IP access control for Live Event preview."]
    #[serde(rename = "accessControl", default, skip_serializing_if = "Option::is_none")]
    pub access_control: Option<LiveEventPreviewAccessControl>,
    #[doc = "The preview locator Guid."]
    #[serde(rename = "previewLocator", default, skip_serializing_if = "Option::is_none")]
    pub preview_locator: Option<String>,
    #[doc = "The name of streaming policy used for LiveEvent preview"]
    #[serde(rename = "streamingPolicyName", default, skip_serializing_if = "Option::is_none")]
    pub streaming_policy_name: Option<String>,
}
impl LiveEventPreview {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The IP access control for Live Event preview."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveEventPreviewAccessControl {
    #[doc = "The IP access control."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<IpAccessControl>,
}
impl LiveEventPreviewAccessControl {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Live Event properties."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LiveEventProperties {
    #[doc = "The Live Event description."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The Live Event input."]
    pub input: LiveEventInput,
    #[doc = "The Live Event preview."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview: Option<LiveEventPreview>,
    #[doc = "The Live Event encoding."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<LiveEventEncoding>,
    #[doc = "The provisioning state of the Live Event."]
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[doc = "The resource state of the Live Event."]
    #[serde(rename = "resourceState", default, skip_serializing_if = "Option::is_none")]
    pub resource_state: Option<live_event_properties::ResourceState>,
    #[doc = "The client access policy."]
    #[serde(rename = "crossSiteAccessPolicies", default, skip_serializing_if = "Option::is_none")]
    pub cross_site_access_policies: Option<CrossSiteAccessPolicies>,
    #[doc = "The Live Event vanity URL flag."]
    #[serde(rename = "vanityUrl", default, skip_serializing_if = "Option::is_none")]
    pub vanity_url: Option<bool>,
    #[doc = "The stream options."]
    #[serde(rename = "streamOptions", default, skip_serializing_if = "Vec::is_empty")]
    pub stream_options: Vec<String>,
    #[doc = "The exact time the Live Event was created."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The exact time the Live Event was last modified."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
}
impl LiveEventProperties {
    pub fn new(input: LiveEventInput) -> Self {
        Self {
            description: None,
            input,
            preview: None,
            encoding: None,
            provisioning_state: None,
            resource_state: None,
            cross_site_access_policies: None,
            vanity_url: None,
            stream_options: Vec::new(),
            created: None,
            last_modified: None,
        }
    }
}
pub mod live_event_properties {
    use super::*;
    #[doc = "The resource state of the Live Event."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResourceState {
        Stopped,
        Starting,
        Running,
        Stopping,
        Deleting,
    }
}
#[doc = "The Live Output."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveOutput {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "The JSON object that contains the properties required to create a Live Output."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<LiveOutputProperties>,
}
impl LiveOutput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The LiveOutput list result."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct LiveOutputListResult {
    #[doc = "The result of the List Live Output operation."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LiveOutput>,
    #[doc = "The number of result."]
    #[serde(rename = "@odata.count", default, skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[doc = "Th link to the next set of results. Not empty if value contains incomplete list of Live Outputs."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl LiveOutputListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The JSON object that contains the properties required to create a Live Output."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LiveOutputProperties {
    #[doc = "The description of the Live Output."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The asset name."]
    #[serde(rename = "assetName")]
    pub asset_name: String,
    #[doc = "ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content."]
    #[serde(rename = "archiveWindowLength")]
    pub archive_window_length: String,
    #[doc = "The manifest file name."]
    #[serde(rename = "manifestName", default, skip_serializing_if = "Option::is_none")]
    pub manifest_name: Option<String>,
    #[doc = "The HLS configuration."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hls: Option<Hls>,
    #[doc = "The output snapshot time."]
    #[serde(rename = "outputSnapTime", default, skip_serializing_if = "Option::is_none")]
    pub output_snap_time: Option<i64>,
    #[doc = "The exact time the Live Output was created."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The exact time the Live Output was last modified."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[doc = "The provisioning state of the Live Output."]
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[doc = "The resource state of the Live Output."]
    #[serde(rename = "resourceState", default, skip_serializing_if = "Option::is_none")]
    pub resource_state: Option<live_output_properties::ResourceState>,
}
impl LiveOutputProperties {
    pub fn new(asset_name: String, archive_window_length: String) -> Self {
        Self {
            description: None,
            asset_name,
            archive_window_length,
            manifest_name: None,
            hls: None,
            output_snap_time: None,
            created: None,
            last_modified: None,
            provisioning_state: None,
            resource_state: None,
        }
    }
}
pub mod live_output_properties {
    use super::*;
    #[doc = "The resource state of the Live Output."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResourceState {
        Creating,
        Running,
        Deleting,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Location {
    pub name: String,
}
impl Location {
    pub fn new(name: String) -> Self {
        Self { name }
    }
}
#[doc = "A Media Services account."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaService {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[doc = "Properties of the Media Services account."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<MediaServiceProperties>,
}
impl MediaService {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of MediaService items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaServiceCollection {
    #[doc = "A collection of MediaService items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<MediaService>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl MediaServiceCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Properties of the Media Services account."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaServiceProperties {
    #[doc = "The Media Services account ID."]
    #[serde(rename = "mediaServiceId", default, skip_serializing_if = "Option::is_none")]
    pub media_service_id: Option<String>,
    #[doc = "The storage accounts for this resource."]
    #[serde(rename = "storageAccounts", default, skip_serializing_if = "Vec::is_empty")]
    pub storage_accounts: Vec<StorageAccount>,
}
impl MediaServiceProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the properties for an output ISO MP4 file."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Mp4Format {
    #[serde(flatten)]
    pub multi_bitrate_format: MultiBitrateFormat,
}
impl Mp4Format {
    pub fn new(multi_bitrate_format: MultiBitrateFormat) -> Self {
        Self { multi_bitrate_format }
    }
}
#[doc = "Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultiBitrateFormat {
    #[serde(flatten)]
    pub format: Format,
    #[doc = "The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together ."]
    #[serde(rename = "outputFiles", default, skip_serializing_if = "Vec::is_empty")]
    pub output_files: Vec<OutputFile>,
}
impl MultiBitrateFormat {
    pub fn new(format: Format) -> Self {
        Self {
            format,
            output_files: Vec::new(),
        }
    }
}
#[doc = "Class for NoEncryption scheme"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct NoEncryption {
    #[doc = "Class to specify which protocols are enabled"]
    #[serde(rename = "enabledProtocols", default, skip_serializing_if = "Option::is_none")]
    pub enabled_protocols: Option<EnabledProtocols>,
}
impl NoEncryption {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Information about an error."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ODataError {
    #[doc = "A language-independent error name."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[doc = "The error message."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[doc = "The target of the error (for example, the name of the property in error)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[doc = "The error details."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ODataError>,
}
impl ODataError {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "An operation."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[doc = "The operation name."]
    pub name: String,
    #[doc = "Operation details."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<OperationDisplay>,
}
impl Operation {
    pub fn new(name: String) -> Self {
        Self { name, display: None }
    }
}
#[doc = "A collection of Operation items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationCollection {
    #[doc = "A collection of Operation items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl OperationCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Operation details."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationDisplay {
    #[doc = "The service provider."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[doc = "Resource on which the operation is performed."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[doc = "The operation type."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[doc = "The operation description."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
impl OperationDisplay {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Represents an output file produced."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OutputFile {
    #[doc = "The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<String>,
}
impl OutputFile {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Base type for all overlays - image, audio or video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Overlay {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
    #[doc = "The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats."]
    #[serde(rename = "inputLabel", default, skip_serializing_if = "Option::is_none")]
    pub input_label: Option<String>,
    #[doc = "The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds in to the input video. If not specified the overlay starts from the beginning of the input video."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    #[doc = "The position in the input video at which the overlay ends. The value should be in ISO 8601 duration format. For example, PT30S to end the overlay at 30 seconds in to the input video. If not specified the overlay will be applied until the end of the input video if inputLoop is true. Else, if inputLoop is false, then overlay will last as long as the duration of the overlay media."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
    #[doc = "The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S)."]
    #[serde(rename = "fadeInDuration", default, skip_serializing_if = "Option::is_none")]
    pub fade_in_duration: Option<String>,
    #[doc = "The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S)."]
    #[serde(rename = "fadeOutDuration", default, skip_serializing_if = "Option::is_none")]
    pub fade_out_duration: Option<String>,
    #[doc = "The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0."]
    #[serde(rename = "audioGainLevel", default, skip_serializing_if = "Option::is_none")]
    pub audio_gain_level: Option<f64>,
}
impl Overlay {
    pub fn new(odata_type: String) -> Self {
        Self {
            odata_type,
            input_label: None,
            start: None,
            end: None,
            fade_in_duration: None,
            fade_out_duration: None,
            audio_gain_level: None,
        }
    }
}
#[doc = "Describes the settings for producing PNG thumbnails."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PngFormat {
    #[serde(flatten)]
    pub image_format: ImageFormat,
}
impl PngFormat {
    pub fn new(image_format: ImageFormat) -> Self {
        Self { image_format }
    }
}
#[doc = "Describes the properties for producing a series of PNG images from the input video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PngImage {
    #[serde(flatten)]
    pub image: Image,
    #[doc = "A collection of output PNG image layers to be produced by the encoder."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub layers: Vec<PngLayer>,
}
impl PngImage {
    pub fn new(image: Image) -> Self {
        Self { image, layers: Vec::new() }
    }
}
#[doc = "Describes the settings to produce a PNG image from the input video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PngLayer {
    #[serde(flatten)]
    pub layer: Layer,
}
impl PngLayer {
    pub fn new(layer: Layer) -> Self {
        Self { layer }
    }
}
#[doc = "Base type for all Presets, which define the recipe or instructions on how the input media files should be processed."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Preset {
    #[doc = "The discriminator for derived types."]
    #[serde(rename = "@odata.type")]
    pub odata_type: String,
}
impl Preset {
    pub fn new(odata_type: String) -> Self {
        Self { odata_type }
    }
}
#[doc = "A resource provider."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Provider {
    #[doc = "The provider name."]
    #[serde(rename = "providerName")]
    pub provider_name: String,
}
impl Provider {
    pub fn new(provider_name: String) -> Self {
        Self { provider_name }
    }
}
#[doc = "The resource model definition for a ARM proxy resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ProxyResource {
    #[serde(flatten)]
    pub resource: Resource,
}
impl ProxyResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the properties of a rectangular window applied to the input media before processing it."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Rectangle {
    #[doc = "The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub left: Option<String>,
    #[doc = "The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub top: Option<String>,
    #[doc = "The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<String>,
    #[doc = "The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub height: Option<String>,
}
impl Rectangle {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The core properties of ARM resources."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Resource {
    #[doc = "Fully qualified resource ID for the resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = "The name of the resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "The type of the resource."]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
impl Resource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes all the settings to be used when encoding the input video with the Standard Encoder."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StandardEncoderPreset {
    #[serde(flatten)]
    pub preset: Preset,
    #[doc = "Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Filters>,
    #[doc = "The list of codecs to be used when encoding the input video."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub codecs: Vec<Codec>,
    #[doc = "The list of outputs to be produced by the encoder."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub formats: Vec<Format>,
}
impl StandardEncoderPreset {
    pub fn new(preset: Preset) -> Self {
        Self {
            preset,
            filters: None,
            codecs: Vec::new(),
            formats: Vec::new(),
        }
    }
}
#[doc = "The storage account details."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccount {
    #[doc = "The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = "The type of the storage account."]
    #[serde(rename = "type")]
    pub type_: storage_account::Type,
}
impl StorageAccount {
    pub fn new(type_: storage_account::Type) -> Self {
        Self { id: None, type_ }
    }
}
pub mod storage_account {
    use super::*;
    #[doc = "The type of the storage account."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        Primary,
        Secondary,
    }
}
#[doc = "The StreamingEndpoint."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingEndpoint {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[doc = "The StreamingEndpoint properties."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<StreamingEndpointProperties>,
}
impl StreamingEndpoint {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "StreamingEndpoint access control definition."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingEndpointAccessControl {
    #[doc = "Akamai access control"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub akamai: Option<AkamaiAccessControl>,
    #[doc = "The IP access control."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<IpAccessControl>,
}
impl StreamingEndpointAccessControl {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The StreamingEndpoint list result."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingEndpointListResult {
    #[doc = "The result of the List StreamingEndpoint operation."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<StreamingEndpoint>,
    #[doc = "The number of result."]
    #[serde(rename = "@odata.count", default, skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[doc = "Th link to the next set of results. Not empty if value contains incomplete list of StreamingEndpoints."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl StreamingEndpointListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The StreamingEndpoint properties."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingEndpointProperties {
    #[doc = "The StreamingEndpoint description."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The number of scale units."]
    #[serde(rename = "scaleUnits", default, skip_serializing_if = "Option::is_none")]
    pub scale_units: Option<i32>,
    #[doc = "AvailabilitySet name"]
    #[serde(rename = "availabilitySetName", default, skip_serializing_if = "Option::is_none")]
    pub availability_set_name: Option<String>,
    #[doc = "StreamingEndpoint access control definition."]
    #[serde(rename = "accessControl", default, skip_serializing_if = "Option::is_none")]
    pub access_control: Option<StreamingEndpointAccessControl>,
    #[doc = "Max cache age"]
    #[serde(rename = "maxCacheAge", default, skip_serializing_if = "Option::is_none")]
    pub max_cache_age: Option<i64>,
    #[doc = "The custom host names of the StreamingEndpoint"]
    #[serde(rename = "customHostNames", default, skip_serializing_if = "Vec::is_empty")]
    pub custom_host_names: Vec<String>,
    #[doc = "The StreamingEndpoint host name."]
    #[serde(rename = "hostName", default, skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    #[doc = "The CDN enabled flag."]
    #[serde(rename = "cdnEnabled", default, skip_serializing_if = "Option::is_none")]
    pub cdn_enabled: Option<bool>,
    #[doc = "The CDN provider name."]
    #[serde(rename = "cdnProvider", default, skip_serializing_if = "Option::is_none")]
    pub cdn_provider: Option<String>,
    #[doc = "The CDN profile name."]
    #[serde(rename = "cdnProfile", default, skip_serializing_if = "Option::is_none")]
    pub cdn_profile: Option<String>,
    #[doc = "The provisioning state of the StreamingEndpoint."]
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[doc = "The resource state of the StreamingEndpoint."]
    #[serde(rename = "resourceState", default, skip_serializing_if = "Option::is_none")]
    pub resource_state: Option<streaming_endpoint_properties::ResourceState>,
    #[doc = "The client access policy."]
    #[serde(rename = "crossSiteAccessPolicies", default, skip_serializing_if = "Option::is_none")]
    pub cross_site_access_policies: Option<CrossSiteAccessPolicies>,
    #[doc = "The free trial expiration time."]
    #[serde(rename = "freeTrialEndTime", default, skip_serializing_if = "Option::is_none")]
    pub free_trial_end_time: Option<String>,
    #[doc = "The exact time the StreamingEndpoint was created."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "The exact time the StreamingEndpoint was last modified."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
}
impl StreamingEndpointProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod streaming_endpoint_properties {
    use super::*;
    #[doc = "The resource state of the StreamingEndpoint."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResourceState {
        Stopped,
        Starting,
        Running,
        Stopping,
        Deleting,
        Scaling,
    }
}
#[doc = "scale units definition"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingEntityScaleUnit {
    #[doc = "The scale unit number of the StreamingEndpoint."]
    #[serde(rename = "scaleUnit", default, skip_serializing_if = "Option::is_none")]
    pub scale_unit: Option<i32>,
}
impl StreamingEntityScaleUnit {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A Streaming Locator resource"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingLocator {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "Class to specify properties of Streaming Locator"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<StreamingLocatorProperties>,
}
impl StreamingLocator {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of StreamingLocator items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingLocatorCollection {
    #[doc = "A collection of StreamingLocator items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<StreamingLocator>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl StreamingLocatorCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class for content key in Streaming Locator"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamingLocatorContentKey {
    #[doc = "Label of Content Key"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = "Encryption type of Content Key"]
    #[serde(rename = "type")]
    pub type_: streaming_locator_content_key::Type,
    #[doc = "ID of Content Key"]
    pub id: String,
    #[doc = "Value of Content Key"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[doc = "ContentKeyPolicy used by Content Key"]
    #[serde(rename = "policyName", default, skip_serializing_if = "Option::is_none")]
    pub policy_name: Option<String>,
    #[doc = "Tracks which use this Content Key"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracks: Vec<TrackSelection>,
}
impl StreamingLocatorContentKey {
    pub fn new(type_: streaming_locator_content_key::Type, id: String) -> Self {
        Self {
            label: None,
            type_,
            id,
            value: None,
            policy_name: None,
            tracks: Vec::new(),
        }
    }
}
pub mod streaming_locator_content_key {
    use super::*;
    #[doc = "Encryption type of Content Key"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        CommonEncryptionCenc,
        CommonEncryptionCbcs,
        EnvelopeEncryption,
    }
}
#[doc = "Class to specify properties of Streaming Locator"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamingLocatorProperties {
    #[doc = "Asset Name"]
    #[serde(rename = "assetName")]
    pub asset_name: String,
    #[doc = "Creation time of Streaming Locator"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "StartTime of Streaming Locator"]
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[doc = "EndTime of Streaming Locator"]
    #[serde(rename = "endTime", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[doc = "StreamingLocatorId of Streaming Locator"]
    #[serde(rename = "streamingLocatorId", default, skip_serializing_if = "Option::is_none")]
    pub streaming_locator_id: Option<String>,
    #[doc = "Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'"]
    #[serde(rename = "streamingPolicyName")]
    pub streaming_policy_name: String,
    #[doc = "Default ContentKeyPolicy used by this Streaming Locator"]
    #[serde(rename = "defaultContentKeyPolicyName", default, skip_serializing_if = "Option::is_none")]
    pub default_content_key_policy_name: Option<String>,
    #[doc = "ContentKeys used by this Streaming Locator"]
    #[serde(rename = "contentKeys", default, skip_serializing_if = "Vec::is_empty")]
    pub content_keys: Vec<StreamingLocatorUserDefinedContentKey>,
}
impl StreamingLocatorProperties {
    pub fn new(asset_name: String, streaming_policy_name: String) -> Self {
        Self {
            asset_name,
            created: None,
            start_time: None,
            end_time: None,
            streaming_locator_id: None,
            streaming_policy_name,
            default_content_key_policy_name: None,
            content_keys: Vec::new(),
        }
    }
}
#[doc = "Describes the properties of a user-defined content key in the Streaming Locator"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamingLocatorUserDefinedContentKey {
    #[doc = "ID of Content Key"]
    pub id: String,
    #[doc = "The Content Key description"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = "The Content Key secret"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
impl StreamingLocatorUserDefinedContentKey {
    pub fn new(id: String) -> Self {
        Self {
            id,
            label: None,
            value: None,
        }
    }
}
#[doc = "Class of paths for streaming"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamingPath {
    #[doc = "Streaming protocol"]
    #[serde(rename = "streamingProtocol")]
    pub streaming_protocol: streaming_path::StreamingProtocol,
    #[doc = "Encryption scheme"]
    #[serde(rename = "encryptionScheme")]
    pub encryption_scheme: streaming_path::EncryptionScheme,
    #[doc = "Streaming paths for each protocol and encryptionScheme pair"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub paths: Vec<String>,
}
impl StreamingPath {
    pub fn new(streaming_protocol: streaming_path::StreamingProtocol, encryption_scheme: streaming_path::EncryptionScheme) -> Self {
        Self {
            streaming_protocol,
            encryption_scheme,
            paths: Vec::new(),
        }
    }
}
pub mod streaming_path {
    use super::*;
    #[doc = "Streaming protocol"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StreamingProtocol {
        Hls,
        Dash,
        SmoothStreaming,
        Download,
    }
    #[doc = "Encryption scheme"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EncryptionScheme {
        NoEncryption,
        EnvelopeEncryption,
        CommonEncryptionCenc,
        CommonEncryptionCbcs,
    }
}
#[doc = "A Streaming Policy resource"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicy {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "Class to specify properties of Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<StreamingPolicyProperties>,
}
impl StreamingPolicy {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of StreamingPolicy items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyCollection {
    #[doc = "A collection of StreamingPolicy items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<StreamingPolicy>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl StreamingPolicyCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify properties of content key"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyContentKey {
    #[doc = "Label can be used to specify Content Key when creating Streaming Locator"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = "Policy used by Content Key"]
    #[serde(rename = "policyName", default, skip_serializing_if = "Option::is_none")]
    pub policy_name: Option<String>,
    #[doc = "Tracks which use this content key"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracks: Vec<TrackSelection>,
}
impl StreamingPolicyContentKey {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify properties of all content keys in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyContentKeys {
    #[doc = "Class to specify properties of default content key for each encryption scheme"]
    #[serde(rename = "defaultKey", default, skip_serializing_if = "Option::is_none")]
    pub default_key: Option<DefaultKey>,
    #[doc = "Representing tracks needs separate content key"]
    #[serde(rename = "keyToTrackMappings", default, skip_serializing_if = "Vec::is_empty")]
    pub key_to_track_mappings: Vec<StreamingPolicyContentKey>,
}
impl StreamingPolicyContentKeys {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify configurations of FairPlay in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamingPolicyFairPlayConfiguration {
    #[doc = "The template for a customer service to deliver keys to end users.  Not needed when using Azure Media Services for issuing keys."]
    #[serde(rename = "customLicenseAcquisitionUrlTemplate", default, skip_serializing_if = "Option::is_none")]
    pub custom_license_acquisition_url_template: Option<String>,
    #[doc = "All license to be persistent or not"]
    #[serde(rename = "allowPersistentLicense")]
    pub allow_persistent_license: bool,
}
impl StreamingPolicyFairPlayConfiguration {
    pub fn new(allow_persistent_license: bool) -> Self {
        Self {
            custom_license_acquisition_url_template: None,
            allow_persistent_license,
        }
    }
}
#[doc = "Class to specify configurations of PlayReady in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyPlayReadyConfiguration {
    #[doc = "The template for a customer service to deliver keys to end users.  Not needed when using Azure Media Services for issuing keys."]
    #[serde(rename = "customLicenseAcquisitionUrlTemplate", default, skip_serializing_if = "Option::is_none")]
    pub custom_license_acquisition_url_template: Option<String>,
    #[doc = "Custom attributes for PlayReady"]
    #[serde(rename = "playReadyCustomAttributes", default, skip_serializing_if = "Option::is_none")]
    pub play_ready_custom_attributes: Option<String>,
}
impl StreamingPolicyPlayReadyConfiguration {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify properties of Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyProperties {
    #[doc = "Creation time of Streaming Policy"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "Default ContentKey used by current Streaming Policy"]
    #[serde(rename = "defaultContentKeyPolicyName", default, skip_serializing_if = "Option::is_none")]
    pub default_content_key_policy_name: Option<String>,
    #[doc = "Class for EnvelopeEncryption encryption scheme"]
    #[serde(rename = "envelopeEncryption", default, skip_serializing_if = "Option::is_none")]
    pub envelope_encryption: Option<EnvelopeEncryption>,
    #[doc = "Class for envelope encryption scheme"]
    #[serde(rename = "commonEncryptionCenc", default, skip_serializing_if = "Option::is_none")]
    pub common_encryption_cenc: Option<CommonEncryptionCenc>,
    #[doc = "Class for CommonEncryptionCbcs encryption scheme"]
    #[serde(rename = "commonEncryptionCbcs", default, skip_serializing_if = "Option::is_none")]
    pub common_encryption_cbcs: Option<CommonEncryptionCbcs>,
    #[doc = "Class for NoEncryption scheme"]
    #[serde(rename = "noEncryption", default, skip_serializing_if = "Option::is_none")]
    pub no_encryption: Option<NoEncryption>,
}
impl StreamingPolicyProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify configurations of Widevine in Streaming Policy"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct StreamingPolicyWidevineConfiguration {
    #[doc = "The template for a customer service to deliver keys to end users.  Not needed when using Azure Media Services for issuing keys."]
    #[serde(rename = "customLicenseAcquisitionUrlTemplate", default, skip_serializing_if = "Option::is_none")]
    pub custom_license_acquisition_url_template: Option<String>,
}
impl StreamingPolicyWidevineConfiguration {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A Media Services account."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SubscriptionMediaService {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    #[doc = "Properties of the Media Services account."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<MediaServiceProperties>,
}
impl SubscriptionMediaService {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of SubscriptionMediaService items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SubscriptionMediaServiceCollection {
    #[doc = "A collection of SubscriptionMediaService items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SubscriptionMediaService>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl SubscriptionMediaServiceCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The input to the sync storage keys request."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct SyncStorageKeysInput {
    #[doc = "The ID of the storage account resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
impl SyncStorageKeysInput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Class to specify one track property condition"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackPropertyCondition {
    #[doc = "Track property type"]
    pub property: track_property_condition::Property,
    #[doc = "Track property condition operation"]
    pub operation: track_property_condition::Operation,
    #[doc = "Track property value"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
impl TrackPropertyCondition {
    pub fn new(property: track_property_condition::Property, operation: track_property_condition::Operation) -> Self {
        Self {
            property,
            operation,
            value: None,
        }
    }
}
pub mod track_property_condition {
    use super::*;
    #[doc = "Track property type"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Property {
        Unknown,
        #[serde(rename = "FourCC")]
        FourCc,
    }
    #[doc = "Track property condition operation"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Operation {
        Unknown,
        Equal,
    }
}
#[doc = "Class to select a track"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TrackSelection {
    #[doc = "TrackSelections is a track property condition list which can specify track(s)"]
    #[serde(rename = "trackSelections", default, skip_serializing_if = "Vec::is_empty")]
    pub track_selections: Vec<TrackPropertyCondition>,
}
impl TrackSelection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The resource model definition for a ARM tracked resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TrackedResource {
    #[serde(flatten)]
    pub resource: Resource,
    #[doc = "Resource tags."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[doc = "The Azure Region of the resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}
impl TrackedResource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A Transform encapsulates the rules or instructions for generating desired outputs from input media, such as by transcoding or by extracting insights. After the Transform is created, it can be applied to input media by creating Jobs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Transform {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[doc = "A Transform."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<TransformProperties>,
}
impl Transform {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A collection of Transform items."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TransformCollection {
    #[doc = "A collection of Transform items."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Transform>,
    #[doc = "A link to the next page of the collection (when the collection contains too many results to return in one response)."]
    #[serde(rename = "@odata.nextLink", default, skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
}
impl TransformCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransformOutput {
    #[doc = "A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The default is stop."]
    #[serde(rename = "onError", default, skip_serializing_if = "Option::is_none")]
    pub on_error: Option<transform_output::OnError>,
    #[doc = "Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal."]
    #[serde(rename = "relativePriority", default, skip_serializing_if = "Option::is_none")]
    pub relative_priority: Option<transform_output::RelativePriority>,
    #[doc = "Base type for all Presets, which define the recipe or instructions on how the input media files should be processed."]
    pub preset: Preset,
}
impl TransformOutput {
    pub fn new(preset: Preset) -> Self {
        Self {
            on_error: None,
            relative_priority: None,
            preset,
        }
    }
}
pub mod transform_output {
    use super::*;
    #[doc = "A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The default is stop."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OnError {
        StopProcessingJob,
        ContinueJob,
    }
    #[doc = "Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RelativePriority {
        Low,
        Normal,
        High,
    }
}
#[doc = "A Transform."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransformProperties {
    #[doc = "The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[doc = "An optional verbose description of the Transform."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format."]
    #[serde(rename = "lastModified", default, skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    #[doc = "An array of one or more TransformOutputs that the Transform should generate."]
    pub outputs: Vec<TransformOutput>,
}
impl TransformProperties {
    pub fn new(outputs: Vec<TransformOutput>) -> Self {
        Self {
            created: None,
            description: None,
            last_modified: None,
            outputs,
        }
    }
}
#[doc = "Describes the properties for generating an MPEG-2 Transport Stream (ISO/IEC 13818-1) output video file(s)."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportStreamFormat {
    #[serde(flatten)]
    pub multi_bitrate_format: MultiBitrateFormat,
}
impl TransportStreamFormat {
    pub fn new(multi_bitrate_format: MultiBitrateFormat) -> Self {
        Self { multi_bitrate_format }
    }
}
#[doc = "Describes the basic properties for encoding the input video."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Video {
    #[serde(flatten)]
    pub codec: Codec,
    #[doc = "The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S)."]
    #[serde(rename = "keyFrameInterval", default, skip_serializing_if = "Option::is_none")]
    pub key_frame_interval: Option<String>,
    #[doc = "The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize"]
    #[serde(rename = "stretchMode", default, skip_serializing_if = "Option::is_none")]
    pub stretch_mode: Option<video::StretchMode>,
}
impl Video {
    pub fn new(codec: Codec) -> Self {
        Self {
            codec,
            key_frame_interval: None,
            stretch_mode: None,
        }
    }
}
pub mod video {
    use super::*;
    #[doc = "The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize"]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StretchMode {
        None,
        AutoSize,
        AutoFit,
    }
}
#[doc = "A video analyzer preset that extracts insights (rich metadata) from both audio and video, and outputs a JSON format file."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VideoAnalyzerPreset {
    #[serde(flatten)]
    pub audio_analyzer_preset: AudioAnalyzerPreset,
    #[doc = "Whether to only extract audio insights when processing a video file."]
    #[serde(rename = "audioInsightsOnly", default, skip_serializing_if = "Option::is_none")]
    pub audio_insights_only: Option<bool>,
}
impl VideoAnalyzerPreset {
    pub fn new(audio_analyzer_preset: AudioAnalyzerPreset) -> Self {
        Self {
            audio_analyzer_preset,
            audio_insights_only: None,
        }
    }
}
#[doc = "Describes the settings to be used when encoding the input video into a desired output bitrate layer."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VideoLayer {
    #[serde(flatten)]
    pub layer: Layer,
    #[doc = "The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<i32>,
    #[doc = "The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate."]
    #[serde(rename = "maxBitrate", default, skip_serializing_if = "Option::is_none")]
    pub max_bitrate: Option<i32>,
    #[doc = "The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level."]
    #[serde(rename = "bFrames", default, skip_serializing_if = "Option::is_none")]
    pub b_frames: Option<i32>,
    #[doc = "The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video."]
    #[serde(rename = "frameRate", default, skip_serializing_if = "Option::is_none")]
    pub frame_rate: Option<String>,
    #[doc = "The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slices: Option<i32>,
    #[doc = "Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use."]
    #[serde(rename = "adaptiveBFrame", default, skip_serializing_if = "Option::is_none")]
    pub adaptive_b_frame: Option<bool>,
}
impl VideoLayer {
    pub fn new(layer: Layer) -> Self {
        Self {
            layer,
            bitrate: None,
            max_bitrate: None,
            b_frames: None,
            frame_rate: None,
            slices: None,
            adaptive_b_frame: None,
        }
    }
}
#[doc = "Describes the properties of a video overlay."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VideoOverlay {
    #[serde(flatten)]
    pub overlay: Overlay,
    #[doc = "Describes the properties of a rectangular window applied to the input media before processing it."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position: Option<Rectangle>,
    #[doc = "The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opacity: Option<f64>,
    #[doc = "Describes the properties of a rectangular window applied to the input media before processing it."]
    #[serde(rename = "cropRectangle", default, skip_serializing_if = "Option::is_none")]
    pub crop_rectangle: Option<Rectangle>,
}
impl VideoOverlay {
    pub fn new(overlay: Overlay) -> Self {
        Self {
            overlay,
            position: None,
            opacity: None,
            crop_rectangle: None,
        }
    }
}
