#![doc = "generated by AutoRust"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[doc = "The properties for a Media Services REST API endpoint."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ApiEndpoint {
    #[doc = "The Media Services REST endpoint."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[doc = "The version of Media Services REST API."]
    #[serde(rename = "majorVersion", default, skip_serializing_if = "Option::is_none")]
    pub major_version: Option<String>,
}
impl ApiEndpoint {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The error returned from a failed Media Services REST API call."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ApiError {
    #[doc = "Error code."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[doc = "Error message."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl azure_core::Continuable for ApiError {
    fn continuation(&self) -> Option<String> {
        None
    }
}
impl ApiError {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The request body for CheckNameAvailability API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CheckNameAvailabilityInput {
    #[doc = "The name of the resource. A name must be globally unique."]
    pub name: String,
    #[doc = "Type of MediaService resource."]
    #[serde(rename = "type")]
    pub type_: ResourceType,
}
impl CheckNameAvailabilityInput {
    pub fn new(name: String, type_: ResourceType) -> Self {
        Self { name, type_ }
    }
}
#[doc = "The response body for CheckNameAvailability API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CheckNameAvailabilityOutput {
    #[doc = "Specifies if the name is available."]
    #[serde(rename = "nameAvailable", default, skip_serializing_if = "Option::is_none")]
    pub name_available: Option<bool>,
    #[doc = "Specifies the reason if the name is not available."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<check_name_availability_output::Reason>,
    #[doc = "Specifies the detailed reason if the name is not available."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl CheckNameAvailabilityOutput {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod check_name_availability_output {
    use super::*;
    #[doc = "Specifies the reason if the name is not available."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        None,
        Invalid,
        AlreadyExists,
    }
}
#[doc = "The properties of a Media Service resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaService {
    #[serde(flatten)]
    pub resource: Resource,
    #[doc = "The additional properties of a Media Service resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<MediaServiceProperties>,
}
impl MediaService {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The collection of Media Service resources."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaServiceCollection {
    #[doc = "The collection of Media Service resources."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<MediaService>,
}
impl azure_core::Continuable for MediaServiceCollection {
    fn continuation(&self) -> Option<String> {
        None
    }
}
impl MediaServiceCollection {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The additional properties of a Media Service resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct MediaServiceProperties {
    #[doc = "Read-only property that lists the Media Services REST API endpoints for this resource. If supplied on a PUT or PATCH, the value will be ignored."]
    #[serde(rename = "apiEndpoints", default, skip_serializing_if = "Vec::is_empty")]
    pub api_endpoints: Vec<ApiEndpoint>,
    #[doc = "The storage accounts for this resource."]
    #[serde(rename = "storageAccounts", default, skip_serializing_if = "Vec::is_empty")]
    pub storage_accounts: Vec<StorageAccount>,
}
impl MediaServiceProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "A Media Services REST API operation"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Operation {
    #[doc = "Operation name: {provider}/{resource}/{operation}"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "The object that represents the operation."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
impl Operation {
    pub fn new() -> Self {
        Self::default()
    }
}
pub mod operation {
    use super::*;
    #[doc = "The object that represents the operation."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
    pub struct Display {
        #[doc = "Service provider: Microsoft.Media"]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[doc = "Resource on which the operation is performed: Invoice, etc."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[doc = "Operation type: Read, write, delete, etc."]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
    }
    impl Display {
        pub fn new() -> Self {
            Self::default()
        }
    }
}
#[doc = "Result of the request to list Media Services operations."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OperationListResult {
    #[doc = "List of Media Services operations supported by the Microsoft.Media resource provider."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
    #[doc = "URL to get the next set of operation list results if there are any."]
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl OperationListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The request body for a RegenerateKey API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegenerateKeyInput {
    #[doc = "The keyType indicating which key you want to regenerate, Primary or Secondary."]
    #[serde(rename = "keyType")]
    pub key_type: regenerate_key_input::KeyType,
}
impl RegenerateKeyInput {
    pub fn new(key_type: regenerate_key_input::KeyType) -> Self {
        Self { key_type }
    }
}
pub mod regenerate_key_input {
    use super::*;
    #[doc = "The keyType indicating which key you want to regenerate, Primary or Secondary."]
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum KeyType {
        Primary,
        Secondary,
    }
}
#[doc = "The response body for a RegenerateKey API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct RegenerateKeyOutput {
    #[doc = "The new value of either the primary or secondary key."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}
impl RegenerateKeyOutput {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Azure Resource Manager resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct Resource {
    #[doc = "The id of the resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = "The name of the resource."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "The type of the resource"]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = "The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth)."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[doc = "Tags to help categorize the resource in the Azure portal."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
impl Resource {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Type of MediaService resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ResourceType {
    #[serde(rename = "mediaservices")]
    Mediaservices,
}
#[doc = "The response body for a ListKeys API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct ServiceKeys {
    #[doc = "The primary authorization endpoint."]
    #[serde(rename = "primaryAuthEndpoint", default, skip_serializing_if = "Option::is_none")]
    pub primary_auth_endpoint: Option<String>,
    #[doc = "The secondary authorization endpoint."]
    #[serde(rename = "secondaryAuthEndpoint", default, skip_serializing_if = "Option::is_none")]
    pub secondary_auth_endpoint: Option<String>,
    #[doc = "The primary key for the Media Service resource."]
    #[serde(rename = "primaryKey", default, skip_serializing_if = "Option::is_none")]
    pub primary_key: Option<String>,
    #[doc = "The secondary key for the Media Service resource."]
    #[serde(rename = "secondaryKey", default, skip_serializing_if = "Option::is_none")]
    pub secondary_key: Option<String>,
    #[doc = "The authorization scope."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}
impl ServiceKeys {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The properties of a storage account associated with this resource."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccount {
    #[doc = "The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false)."]
    pub id: String,
    #[doc = "Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false."]
    #[serde(rename = "isPrimary")]
    pub is_primary: bool,
}
impl StorageAccount {
    pub fn new(id: String, is_primary: bool) -> Self {
        Self { id, is_primary }
    }
}
#[doc = "The request  body for a SyncStorageKeys API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyncStorageKeysInput {
    #[doc = "The id of the storage account resource."]
    pub id: String,
}
impl SyncStorageKeysInput {
    pub fn new(id: String) -> Self {
        Self { id }
    }
}
