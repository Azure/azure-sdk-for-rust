# ! [doc = "generated by AutoRust 0.1.0"] # ! [allow (non_camel_case_types)] # ! [allow (unused_imports)] use serde :: { Deserialize , Serialize } ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct AvailableRpOperation { # [serde (skip_serializing_if = "Option::is_none")] pub display : Option < AvailableRpOperationDisplayInfo > , # [serde (rename = "isDataAction" , skip_serializing_if = "Option::is_none")] pub is_data_action : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub name : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < OperationMetaPropertyInfo > , # [serde (skip_serializing_if = "Option::is_none")] pub origin : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationResource { # [serde (skip_serializing_if = "Option::is_none")] pub id : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub name : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub status : Option < operation_resource :: Status > , # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < serde_json :: Value > , # [serde (skip_serializing_if = "Option::is_none")] pub error : Option < ErrorResponse > , # [serde (rename = "startTime" , skip_serializing_if = "Option::is_none")] pub start_time : Option < String > , # [serde (rename = "endTime" , skip_serializing_if = "Option::is_none")] pub end_time : Option < String > , # [serde (rename = "percentComplete" , skip_serializing_if = "Option::is_none")] pub percent_complete : Option < f64 > , } pub mod operation_resource { use super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub enum Status { InProgress , Succeeded , Failed , Canceled , } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct AvailableRpOperationDisplayInfo { # [serde (skip_serializing_if = "Option::is_none")] pub description : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub resource : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub provider : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub operation : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationMetaPropertyInfo { # [serde (rename = "serviceSpecification" , skip_serializing_if = "Option::is_none")] pub service_specification : Option < OperationMetaServiceSpecification > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationMetaServiceSpecification { # [serde (rename = "metricSpecifications" , skip_serializing_if = "Vec::is_empty")] pub metric_specifications : Vec < OperationMetaMetricSpecification > , # [serde (rename = "logSpecifications" , skip_serializing_if = "Vec::is_empty")] pub log_specifications : Vec < OperationMetaLogSpecification > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationMetaMetricSpecification { # [serde (rename = "sourceMdmNamespace" , skip_serializing_if = "Option::is_none")] pub source_mdm_namespace : Option < String > , # [serde (rename = "displayName" , skip_serializing_if = "Option::is_none")] pub display_name : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub name : Option < String > , # [serde (rename = "aggregationType" , skip_serializing_if = "Option::is_none")] pub aggregation_type : Option < String > , # [serde (rename = "displayDescription" , skip_serializing_if = "Option::is_none")] pub display_description : Option < String > , # [serde (rename = "sourceMdmAccount" , skip_serializing_if = "Option::is_none")] pub source_mdm_account : Option < String > , # [serde (rename = "enableRegionalMdmAccount" , skip_serializing_if = "Option::is_none")] pub enable_regional_mdm_account : Option < bool > , # [serde (skip_serializing_if = "Option::is_none")] pub unit : Option < String > , # [serde (skip_serializing_if = "Vec::is_empty")] pub dimensions : Vec < OperationMetaMetricDimensionSpecification > , # [serde (rename = "supportsInstanceLevelAggregation" , skip_serializing_if = "Option::is_none")] pub supports_instance_level_aggregation : Option < bool > , # [serde (rename = "metricFilterPattern" , skip_serializing_if = "Option::is_none")] pub metric_filter_pattern : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationMetaLogSpecification { # [serde (rename = "displayName" , skip_serializing_if = "Option::is_none")] pub display_name : Option < String > , # [serde (rename = "blobDuration" , skip_serializing_if = "Option::is_none")] pub blob_duration : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub name : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct OperationMetaMetricDimensionSpecification { # [serde (rename = "displayName" , skip_serializing_if = "Option::is_none")] pub display_name : Option < String > , # [serde (skip_serializing_if = "Option::is_none")] pub name : Option < String > , # [serde (rename = "toBeExportedForShoebox" , skip_serializing_if = "Option::is_none")] pub to_be_exported_for_shoebox : Option < bool > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlPoolProperties { # [serde (skip_serializing)] pub status : Option < sql_pool_properties :: Status > , # [serde (rename = "sqlPoolGuid" , skip_serializing)] pub sql_pool_guid : Option < String > , # [serde (rename = "currentServiceObjectiveName" , skip_serializing)] pub current_service_objective_name : Option < String > , # [serde (rename = "requestedServiceObjectiveName" , skip_serializing)] pub requested_service_objective_name : Option < String > , } pub mod sql_pool_properties { use super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub enum Status { Invisible , Online , Offline , Creating , Inaccessible , Pausing , Paused , Resuming , Scaling , Dropping , Error , Unknown , } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlPoolV3 { # [serde (flatten)] pub tracked_resource : TrackedResource , # [serde (skip_serializing_if = "Option::is_none")] pub sku : Option < Sku > , # [serde (skip_serializing)] pub kind : Option < String > , # [serde (rename = "systemData" , skip_serializing_if = "Option::is_none")] pub system_data : Option < SystemData > , # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < SqlPoolProperties > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlPoolUpdate { # [serde (skip_serializing_if = "Option::is_none")] pub sku : Option < Sku > , # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < SqlPoolProperties > , # [serde (skip_serializing_if = "Option::is_none")] pub tags : Option < serde_json :: Value > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlPoolListResult { # [serde (skip_serializing)] pub value : Vec < SqlPoolV3 > , # [serde (rename = "nextLink" , skip_serializing)] pub next_link : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlDatabaseProperties { # [serde (skip_serializing_if = "Option::is_none")] pub collation : Option < String > , # [serde (rename = "maxSizeBytes" , skip_serializing_if = "Option::is_none")] pub max_size_bytes : Option < i64 > , # [serde (rename = "databaseGuid" , skip_serializing)] pub database_guid : Option < String > , # [serde (skip_serializing)] pub status : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlDatabase { # [serde (flatten)] pub tracked_resource : TrackedResource , # [serde (rename = "systemData" , skip_serializing_if = "Option::is_none")] pub system_data : Option < SystemData > , # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < SqlDatabaseProperties > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlDatabaseUpdate { # [serde (skip_serializing_if = "Option::is_none")] pub properties : Option < SqlDatabaseProperties > , # [serde (skip_serializing_if = "Option::is_none")] pub tags : Option < serde_json :: Value > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SqlDatabaseListResult { # [serde (skip_serializing)] pub value : Vec < SqlDatabase > , # [serde (rename = "nextLink" , skip_serializing)] pub next_link : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct ErrorContract { # [serde (skip_serializing_if = "Option::is_none")] pub error : Option < ErrorResponse > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct ErrorResponse { # [serde (skip_serializing)] pub code : Option < String > , # [serde (skip_serializing)] pub message : Option < String > , # [serde (skip_serializing)] pub target : Option < String > , # [serde (skip_serializing)] pub details : Vec < ErrorResponse > , # [serde (rename = "additionalInfo" , skip_serializing)] pub additional_info : Vec < ErrorAdditionalInfo > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct ErrorAdditionalInfo { # [serde (rename = "type" , skip_serializing)] pub type_ : Option < String > , # [serde (skip_serializing)] pub info : Option < serde_json :: Value > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Sku { pub name : String , # [serde (skip_serializing_if = "Option::is_none")] pub tier : Option < String > , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct SystemData { # [serde (rename = "createdBy" , skip_serializing)] pub created_by : Option < String > , # [serde (rename = "createdByType" , skip_serializing)] pub created_by_type : Option < system_data :: CreatedByType > , # [serde (rename = "createdAt" , skip_serializing)] pub created_at : Option < String > , # [serde (rename = "lastModifiedBy" , skip_serializing)] pub last_modified_by : Option < String > , # [serde (rename = "lastModifiedByType" , skip_serializing)] pub last_modified_by_type : Option < system_data :: LastModifiedByType > , # [serde (rename = "lastModifiedAt" , skip_serializing)] pub last_modified_at : Option < String > , } pub mod system_data { use super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub enum CreatedByType { User , Application , ManagedIdentity , Key , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub enum LastModifiedByType { User , Application , ManagedIdentity , Key , } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct TrackedResource { # [serde (flatten)] pub resource : Resource , # [serde (skip_serializing_if = "Option::is_none")] pub tags : Option < serde_json :: Value > , pub location : String , } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Resource { # [serde (skip_serializing)] pub id : Option < String > , # [serde (skip_serializing)] pub name : Option < String > , # [serde (rename = "type" , skip_serializing)] pub type_ : Option < String > , }