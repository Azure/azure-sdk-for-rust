#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod accounts {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        account: &Account,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(account);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        account_patch: &AccountPatch,
    ) -> Result<Account> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(account_patch);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, subscription_id: &str) -> Result<AccountList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.EngagementFabric/Accounts",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<AccountList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_keys(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<KeyDescriptionList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/listKeys",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn regenerate_key(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        parameter: &RegenerateKeyParameter,
    ) -> Result<KeyDescription> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/regenerateKey",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameter);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_channel_types(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<ChannelTypeDescriptionList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/listChannelTypes",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod channels {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        channel_name: &str,
    ) -> Result<Channel> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/Channels/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, channel_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        channel_name: &str,
        channel: &Channel,
    ) -> Result<Channel> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/Channels/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, channel_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(channel);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
        channel_name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/Channels/{}",
            &configuration.base_path, subscription_id, resource_group_name, account_name, channel_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_account(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        account_name: &str,
    ) -> Result<ChannelList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/Accounts/{}/Channels",
            &configuration.base_path, subscription_id, resource_group_name, account_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub async fn check_name_availability(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    parameters: &CheckNameAvailabilityParameter,
) -> Result<CheckNameAvailabilityResult> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EngagementFabric/checkNameAvailability",
        &configuration.base_path, subscription_id, resource_group_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(parameters);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.EngagementFabric/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod sk_us {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, subscription_id: &str) -> Result<SkuDescriptionList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.EngagementFabric/skus",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
