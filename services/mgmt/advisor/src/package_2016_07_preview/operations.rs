#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod recommendations {
    use crate::{models::*, *};
    pub async fn generate(configuration: &Configuration, subscription_id: &str) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Advisor/generateRecommendations",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_generate_recommendations_status(
        configuration: &Configuration,
        subscription_id: &str,
        operation_id: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Advisor/generateRecommendations/{}",
            &configuration.base_path, subscription_id, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        filter: Option<&str>,
        top: Option<i64>,
        skip_token: Option<&str>,
    ) -> Result<ResourceRecommendationBaseListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Advisor/recommendations",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(skip_token) = skip_token {
            req_builder = req_builder.query(&[("$skipToken", skip_token)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, resource_uri: &str, recommendation_id: &str) -> Result<ResourceRecommendationBase> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Advisor/recommendations/{}",
            &configuration.base_path, resource_uri, recommendation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationEntityListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Advisor/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod suppressions {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        resource_uri: &str,
        recommendation_id: &str,
        name: &str,
    ) -> Result<SuppressionContract> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Advisor/recommendations/{}/suppressions/{}",
            &configuration.base_path, resource_uri, recommendation_id, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        resource_uri: &str,
        recommendation_id: &str,
        name: &str,
        suppression_contract: &SuppressionContract,
    ) -> Result<SuppressionContract> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Advisor/recommendations/{}/suppressions/{}",
            &configuration.base_path, resource_uri, recommendation_id, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(suppression_contract);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(configuration: &Configuration, resource_uri: &str, recommendation_id: &str, name: &str) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Advisor/recommendations/{}/suppressions/{}",
            &configuration.base_path, resource_uri, recommendation_id, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, subscription_id: &str) -> Result<Vec<SuppressionContract>> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Advisor/suppressions",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
