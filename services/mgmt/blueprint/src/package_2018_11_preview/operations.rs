#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod blueprints {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, resource_scope: &str, blueprint_name: &str) -> Result<Blueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}",
            &configuration.base_path, resource_scope, blueprint_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        blueprint: &Blueprint,
    ) -> Result<Blueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}",
            &configuration.base_path, resource_scope, blueprint_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(blueprint);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(configuration: &Configuration, resource_scope: &str, blueprint_name: &str) -> Result<Blueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}",
            &configuration.base_path, resource_scope, blueprint_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, resource_scope: &str) -> Result<BlueprintList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints",
            &configuration.base_path, resource_scope
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod artifacts {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, resource_scope: &str, blueprint_name: &str, artifact_name: &str) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/artifacts/{}",
            &configuration.base_path, resource_scope, blueprint_name, artifact_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        artifact_name: &str,
        artifact: &Artifact,
    ) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/artifacts/{}",
            &configuration.base_path, resource_scope, blueprint_name, artifact_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(artifact);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        artifact_name: &str,
    ) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/artifacts/{}",
            &configuration.base_path, resource_scope, blueprint_name, artifact_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, resource_scope: &str, blueprint_name: &str) -> Result<ArtifactList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/artifacts",
            &configuration.base_path, resource_scope, blueprint_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod published_blueprints {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        version_id: &str,
    ) -> Result<PublishedBlueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions/{}",
            &configuration.base_path, resource_scope, blueprint_name, version_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        version_id: &str,
        published_blueprint: Option<&PublishedBlueprint>,
    ) -> Result<PublishedBlueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions/{}",
            &configuration.base_path, resource_scope, blueprint_name, version_id
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(published_blueprint) = published_blueprint {
            req_builder = req_builder.json(published_blueprint);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        version_id: &str,
    ) -> Result<PublishedBlueprint> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions/{}",
            &configuration.base_path, resource_scope, blueprint_name, version_id
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, resource_scope: &str, blueprint_name: &str) -> Result<PublishedBlueprintList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions",
            &configuration.base_path, resource_scope, blueprint_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod published_artifacts {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        resource_scope: &str,
        blueprint_name: &str,
        version_id: &str,
        artifact_name: &str,
    ) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions/{}/artifacts/{}",
            &configuration.base_path, resource_scope, blueprint_name, version_id, artifact_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, resource_scope: &str, blueprint_name: &str, version_id: &str) -> Result<ArtifactList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprints/{}/versions/{}/artifacts",
            &configuration.base_path, resource_scope, blueprint_name, version_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod assignments {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, resource_scope: &str, assignment_name: &str) -> Result<Assignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}",
            &configuration.base_path, resource_scope, assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        resource_scope: &str,
        assignment_name: &str,
        assignment: &Assignment,
    ) -> Result<Assignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}",
            &configuration.base_path, resource_scope, assignment_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(assignment);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        resource_scope: &str,
        assignment_name: &str,
        delete_behavior: Option<&str>,
    ) -> Result<Assignment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}",
            &configuration.base_path, resource_scope, assignment_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(delete_behavior) = delete_behavior {
            req_builder = req_builder.query(&[("deleteBehavior", delete_behavior)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn who_is_blueprint(
        configuration: &Configuration,
        resource_scope: &str,
        assignment_name: &str,
    ) -> Result<WhoIsBlueprintContract> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}/WhoIsBlueprint",
            &configuration.base_path, resource_scope, assignment_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, resource_scope: &str) -> Result<AssignmentList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments",
            &configuration.base_path, resource_scope
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod assignment_operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, resource_scope: &str, assignment_name: &str) -> Result<AssignmentOperationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}/assignmentOperations",
            &configuration.base_path, resource_scope, assignment_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        resource_scope: &str,
        assignment_name: &str,
        assignment_operation_name: &str,
    ) -> Result<AssignmentOperation> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/{}/providers/Microsoft.Blueprint/blueprintAssignments/{}/assignmentOperations/{}",
            &configuration.base_path, resource_scope, assignment_name, assignment_operation_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
