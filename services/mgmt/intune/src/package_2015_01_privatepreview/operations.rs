#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
use snafu::{ResultExt, Snafu};
pub async fn get_locations(operation_config: &crate::OperationConfig) -> std::result::Result<LocationCollection, get_locations::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/providers/Microsoft.Intune/locations", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).context(get_locations::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_locations::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_locations::BuildRequestError)?;
    let rsp = http_client.execute_request(req).await.context(get_locations::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: LocationCollection =
                serde_json::from_slice(rsp_body).context(get_locations::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error = serde_json::from_slice(rsp_body).context(get_locations::DeserializeError { body: rsp_body.clone() })?;
            get_locations::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_locations {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_location_by_host_name(
    operation_config: &crate::OperationConfig,
) -> std::result::Result<Location, get_location_by_host_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/providers/Microsoft.Intune/locations/hostName", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).context(get_location_by_host_name::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_location_by_host_name::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_location_by_host_name::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_location_by_host_name::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Location =
                serde_json::from_slice(rsp_body).context(get_location_by_host_name::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_location_by_host_name::DeserializeError { body: rsp_body.clone() })?;
            get_location_by_host_name::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_location_by_host_name {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_apps(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    filter: Option<&str>,
    top: Option<i32>,
    select: Option<&str>,
) -> std::result::Result<ApplicationCollection, get_apps::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/apps",
        operation_config.base_path(),
        host_name
    );
    let mut url = url::Url::parse(url_str).context(get_apps::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_apps::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(top) = top {
        url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
    }
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_apps::BuildRequestError)?;
    let rsp = http_client.execute_request(req).await.context(get_apps::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: ApplicationCollection =
                serde_json::from_slice(rsp_body).context(get_apps::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error = serde_json::from_slice(rsp_body).context(get_apps::DeserializeError { body: rsp_body.clone() })?;
            get_apps::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_apps {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_user_devices(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    user_name: &str,
    filter: Option<&str>,
    top: Option<i32>,
    select: Option<&str>,
) -> std::result::Result<DeviceCollection, get_mam_user_devices::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/users/{}/devices",
        operation_config.base_path(),
        host_name,
        user_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_user_devices::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_user_devices::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(top) = top {
        url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
    }
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_mam_user_devices::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_user_devices::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: DeviceCollection =
                serde_json::from_slice(rsp_body).context(get_mam_user_devices::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_mam_user_devices::DeserializeError { body: rsp_body.clone() })?;
            get_mam_user_devices::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_user_devices {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_user_device_by_device_name(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    user_name: &str,
    device_name: &str,
    select: Option<&str>,
) -> std::result::Result<Device, get_mam_user_device_by_device_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/users/{}/devices/{}",
        operation_config.base_path(),
        host_name,
        user_name,
        device_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_user_device_by_device_name::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_user_device_by_device_name::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .context(get_mam_user_device_by_device_name::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_user_device_by_device_name::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Device = serde_json::from_slice(rsp_body)
                .context(get_mam_user_device_by_device_name::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error = serde_json::from_slice(rsp_body)
                .context(get_mam_user_device_by_device_name::DeserializeError { body: rsp_body.clone() })?;
            get_mam_user_device_by_device_name::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_user_device_by_device_name {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn wipe_mam_user_device(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    user_name: &str,
    device_name: &str,
) -> std::result::Result<WipeDeviceOperationResult, wipe_mam_user_device::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/users/{}/devices/{}/wipe",
        operation_config.base_path(),
        host_name,
        user_name,
        device_name
    );
    let mut url = url::Url::parse(url_str).context(wipe_mam_user_device::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(wipe_mam_user_device::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(wipe_mam_user_device::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(wipe_mam_user_device::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: WipeDeviceOperationResult =
                serde_json::from_slice(rsp_body).context(wipe_mam_user_device::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(wipe_mam_user_device::DeserializeError { body: rsp_body.clone() })?;
            wipe_mam_user_device::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod wipe_mam_user_device {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_operation_results(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    filter: Option<&str>,
    top: Option<i32>,
    select: Option<&str>,
) -> std::result::Result<OperationResultCollection, get_operation_results::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/operationResults",
        operation_config.base_path(),
        host_name
    );
    let mut url = url::Url::parse(url_str).context(get_operation_results::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_operation_results::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(top) = top {
        url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
    }
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_operation_results::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_operation_results::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OperationResultCollection =
                serde_json::from_slice(rsp_body).context(get_operation_results::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_operation_results::DeserializeError { body: rsp_body.clone() })?;
            get_operation_results::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_operation_results {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_statuses(
    operation_config: &crate::OperationConfig,
    host_name: &str,
) -> std::result::Result<StatusesDefault, get_mam_statuses::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/statuses/default",
        operation_config.base_path(),
        host_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_statuses::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_statuses::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_mam_statuses::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_statuses::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: StatusesDefault =
                serde_json::from_slice(rsp_body).context(get_mam_statuses::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_mam_statuses::DeserializeError { body: rsp_body.clone() })?;
            get_mam_statuses::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_statuses {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_flagged_users(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    filter: Option<&str>,
    top: Option<i32>,
    select: Option<&str>,
) -> std::result::Result<FlaggedUserCollection, get_mam_flagged_users::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/flaggedUsers",
        operation_config.base_path(),
        host_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_flagged_users::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_flagged_users::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(top) = top {
        url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
    }
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).context(get_mam_flagged_users::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_flagged_users::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: FlaggedUserCollection =
                serde_json::from_slice(rsp_body).context(get_mam_flagged_users::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_mam_flagged_users::DeserializeError { body: rsp_body.clone() })?;
            get_mam_flagged_users::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_flagged_users {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_flagged_user_by_name(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    user_name: &str,
    select: Option<&str>,
) -> std::result::Result<FlaggedUser, get_mam_flagged_user_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/flaggedUsers/{}",
        operation_config.base_path(),
        host_name,
        user_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_flagged_user_by_name::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_flagged_user_by_name::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .context(get_mam_flagged_user_by_name::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_flagged_user_by_name::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: FlaggedUser =
                serde_json::from_slice(rsp_body).context(get_mam_flagged_user_by_name::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error =
                serde_json::from_slice(rsp_body).context(get_mam_flagged_user_by_name::DeserializeError { body: rsp_body.clone() })?;
            get_mam_flagged_user_by_name::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_flagged_user_by_name {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub async fn get_mam_user_flagged_enrolled_apps(
    operation_config: &crate::OperationConfig,
    host_name: &str,
    user_name: &str,
    filter: Option<&str>,
    top: Option<i32>,
    select: Option<&str>,
) -> std::result::Result<FlaggedEnrolledAppCollection, get_mam_user_flagged_enrolled_apps::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/providers/Microsoft.Intune/locations/{}/flaggedUsers/{}/flaggedEnrolledApps",
        operation_config.base_path(),
        host_name,
        user_name
    );
    let mut url = url::Url::parse(url_str).context(get_mam_user_flagged_enrolled_apps::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .context(get_mam_user_flagged_enrolled_apps::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(top) = top {
        url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
    }
    if let Some(select) = select {
        url.query_pairs_mut().append_pair("$select", select);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .context(get_mam_user_flagged_enrolled_apps::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .context(get_mam_user_flagged_enrolled_apps::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: FlaggedEnrolledAppCollection = serde_json::from_slice(rsp_body)
                .context(get_mam_user_flagged_enrolled_apps::DeserializeError { body: rsp_body.clone() })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: Error = serde_json::from_slice(rsp_body)
                .context(get_mam_user_flagged_enrolled_apps::DeserializeError { body: rsp_body.clone() })?;
            get_mam_user_flagged_enrolled_apps::DefaultResponse {
                status_code,
                value: rsp_value,
            }
            .fail()
        }
    }
}
pub mod get_mam_user_flagged_enrolled_apps {
    use crate::{models, models::*};
    use snafu::Snafu;
    #[derive(Debug, Snafu)]
    #[snafu(visibility(pub(crate)))]
    pub enum Error {
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::Error,
        },
        ParseUrlError {
            source: url::ParseError,
        },
        BuildRequestError {
            source: http::Error,
        },
        ExecuteRequestError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        SerializeError {
            source: Box<dyn std::error::Error + Sync + Send>,
        },
        DeserializeError {
            source: serde_json::Error,
            body: bytes::Bytes,
        },
        GetTokenError {
            source: azure_core::errors::AzureError,
        },
    }
}
pub mod ios {
    use crate::models::*;
    use snafu::{ResultExt, Snafu};
    pub async fn get_mam_policies(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        filter: Option<&str>,
        top: Option<i32>,
        select: Option<&str>,
    ) -> std::result::Result<IosmamPolicyCollection, get_mam_policies::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies",
            operation_config.base_path(),
            host_name
        );
        let mut url = url::Url::parse(url_str).context(get_mam_policies::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_mam_policies::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_mam_policies::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_mam_policies::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IosmamPolicyCollection =
                    serde_json::from_slice(rsp_body).context(get_mam_policies::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_mam_policies::DeserializeError { body: rsp_body.clone() })?;
                get_mam_policies::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_mam_policies {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_mam_policy_by_name(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        select: Option<&str>,
    ) -> std::result::Result<IOsmamPolicy, get_mam_policy_by_name::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_mam_policy_by_name::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_mam_policy_by_name::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_mam_policy_by_name::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_mam_policy_by_name::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IOsmamPolicy =
                    serde_json::from_slice(rsp_body).context(get_mam_policy_by_name::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_mam_policy_by_name::DeserializeError { body: rsp_body.clone() })?;
                get_mam_policy_by_name::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_mam_policy_by_name {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn create_or_update_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        parameters: &IOsmamPolicy,
    ) -> std::result::Result<IOsmamPolicy, create_or_update_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(create_or_update_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(create_or_update_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(create_or_update_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(create_or_update_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IOsmamPolicy =
                    serde_json::from_slice(rsp_body).context(create_or_update_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(create_or_update_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                create_or_update_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod create_or_update_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn patch_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        parameters: &IOsmamPolicy,
    ) -> std::result::Result<IOsmamPolicy, patch_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(patch_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PATCH);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(patch_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(patch_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(patch_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IOsmamPolicy =
                    serde_json::from_slice(rsp_body).context(patch_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(patch_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                patch_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod patch_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
    ) -> std::result::Result<delete_mam_policy::Response, delete_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(delete_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        filter: Option<&str>,
        top: Option<i32>,
        select: Option<&str>,
    ) -> std::result::Result<ApplicationCollection, get_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/apps",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: ApplicationCollection =
                    serde_json::from_slice(rsp_body).context(get_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                get_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn add_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        app_name: &str,
        parameters: &MamPolicyAppIdOrGroupIdPayload,
    ) -> std::result::Result<add_app_for_mam_policy::Response, add_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/apps/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            app_name
        );
        let mut url = url::Url::parse(url_str).context(add_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(add_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(add_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(add_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(add_app_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(add_app_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(add_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                add_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod add_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        app_name: &str,
    ) -> std::result::Result<delete_app_for_mam_policy::Response, delete_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/apps/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            app_name
        );
        let mut url = url::Url::parse(url_str).context(delete_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_app_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_app_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_groups_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
    ) -> std::result::Result<GroupsCollection, get_groups_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/groups",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_groups_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_groups_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_groups_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_groups_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: GroupsCollection =
                    serde_json::from_slice(rsp_body).context(get_groups_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_groups_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                get_groups_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_groups_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn add_group_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        group_id: &str,
        parameters: &MamPolicyAppIdOrGroupIdPayload,
    ) -> std::result::Result<add_group_for_mam_policy::Response, add_group_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/groups/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            group_id
        );
        let mut url = url::Url::parse(url_str).context(add_group_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(add_group_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(add_group_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(add_group_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(add_group_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(add_group_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(add_group_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                add_group_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod add_group_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_group_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        group_id: &str,
    ) -> std::result::Result<delete_group_for_mam_policy::Response, delete_group_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/iosPolicies/{}/groups/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            group_id
        );
        let mut url = url::Url::parse(url_str).context(delete_group_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_group_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_group_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_group_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_group_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_group_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_group_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_group_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_group_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
}
pub mod android {
    use crate::models::*;
    use snafu::{ResultExt, Snafu};
    pub async fn get_mam_policies(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        filter: Option<&str>,
        top: Option<i32>,
        select: Option<&str>,
    ) -> std::result::Result<AndroidMamPolicyCollection, get_mam_policies::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies",
            operation_config.base_path(),
            host_name
        );
        let mut url = url::Url::parse(url_str).context(get_mam_policies::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_mam_policies::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_mam_policies::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_mam_policies::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: AndroidMamPolicyCollection =
                    serde_json::from_slice(rsp_body).context(get_mam_policies::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_mam_policies::DeserializeError { body: rsp_body.clone() })?;
                get_mam_policies::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_mam_policies {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_mam_policy_by_name(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        select: Option<&str>,
    ) -> std::result::Result<AndroidMamPolicy, get_mam_policy_by_name::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_mam_policy_by_name::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_mam_policy_by_name::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_mam_policy_by_name::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_mam_policy_by_name::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: AndroidMamPolicy =
                    serde_json::from_slice(rsp_body).context(get_mam_policy_by_name::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_mam_policy_by_name::DeserializeError { body: rsp_body.clone() })?;
                get_mam_policy_by_name::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_mam_policy_by_name {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn create_or_update_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        parameters: &AndroidMamPolicy,
    ) -> std::result::Result<AndroidMamPolicy, create_or_update_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(create_or_update_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(create_or_update_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(create_or_update_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(create_or_update_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: AndroidMamPolicy =
                    serde_json::from_slice(rsp_body).context(create_or_update_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(create_or_update_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                create_or_update_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod create_or_update_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn patch_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        parameters: &AndroidMamPolicy,
    ) -> std::result::Result<AndroidMamPolicy, patch_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(patch_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PATCH);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(patch_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(patch_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(patch_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: AndroidMamPolicy =
                    serde_json::from_slice(rsp_body).context(patch_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(patch_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                patch_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod patch_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
    ) -> std::result::Result<delete_mam_policy::Response, delete_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(delete_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        filter: Option<&str>,
        top: Option<i32>,
        select: Option<&str>,
    ) -> std::result::Result<ApplicationCollection, get_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/AndroidPolicies/{}/apps",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: ApplicationCollection =
                    serde_json::from_slice(rsp_body).context(get_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                get_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn add_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        app_name: &str,
        parameters: &MamPolicyAppIdOrGroupIdPayload,
    ) -> std::result::Result<add_app_for_mam_policy::Response, add_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}/apps/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            app_name
        );
        let mut url = url::Url::parse(url_str).context(add_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(add_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(add_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(add_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(add_app_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(add_app_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(add_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                add_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod add_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_app_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        app_name: &str,
    ) -> std::result::Result<delete_app_for_mam_policy::Response, delete_app_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}/apps/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            app_name
        );
        let mut url = url::Url::parse(url_str).context(delete_app_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_app_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_app_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_app_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_app_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_app_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_app_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_app_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_app_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn get_groups_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
    ) -> std::result::Result<GroupsCollection, get_groups_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}/groups",
            operation_config.base_path(),
            host_name,
            policy_name
        );
        let mut url = url::Url::parse(url_str).context(get_groups_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(get_groups_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(get_groups_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(get_groups_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: GroupsCollection =
                    serde_json::from_slice(rsp_body).context(get_groups_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(get_groups_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                get_groups_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod get_groups_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn add_group_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        group_id: &str,
        parameters: &MamPolicyAppIdOrGroupIdPayload,
    ) -> std::result::Result<add_group_for_mam_policy::Response, add_group_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}/groups/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            group_id
        );
        let mut url = url::Url::parse(url_str).context(add_group_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(add_group_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(add_group_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(add_group_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(add_group_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(add_group_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(add_group_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                add_group_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod add_group_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
    pub async fn delete_group_for_mam_policy(
        operation_config: &crate::OperationConfig,
        host_name: &str,
        policy_name: &str,
        group_id: &str,
    ) -> std::result::Result<delete_group_for_mam_policy::Response, delete_group_for_mam_policy::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/Microsoft.Intune/locations/{}/androidPolicies/{}/groups/{}",
            operation_config.base_path(),
            host_name,
            policy_name,
            group_id
        );
        let mut url = url::Url::parse(url_str).context(delete_group_for_mam_policy::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::DELETE);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .context(delete_group_for_mam_policy::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).context(delete_group_for_mam_policy::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .context(delete_group_for_mam_policy::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(delete_group_for_mam_policy::Response::Ok200),
            http::StatusCode::NO_CONTENT => Ok(delete_group_for_mam_policy::Response::NoContent204),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: Error =
                    serde_json::from_slice(rsp_body).context(delete_group_for_mam_policy::DeserializeError { body: rsp_body.clone() })?;
                delete_group_for_mam_policy::DefaultResponse {
                    status_code,
                    value: rsp_value,
                }
                .fail()
            }
        }
    }
    pub mod delete_group_for_mam_policy {
        use crate::{models, models::*};
        use snafu::Snafu;
        #[derive(Debug)]
        pub enum Response {
            Ok200,
            NoContent204,
        }
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::Error,
            },
            ParseUrlError {
                source: url::ParseError,
            },
            BuildRequestError {
                source: http::Error,
            },
            ExecuteRequestError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            SerializeError {
                source: Box<dyn std::error::Error + Sync + Send>,
            },
            DeserializeError {
                source: serde_json::Error,
                body: bytes::Bytes,
            },
            GetTokenError {
                source: azure_core::errors::AzureError,
            },
        }
    }
}
