#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.WorkloadMonitor/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod monitors {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        resource_namespace: &str,
        resource_type: &str,
        resource_name: &str,
        filter: Option<&str>,
        expand: Option<&str>,
    ) -> Result<MonitorList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/{}/{}/{}/providers/Microsoft.WorkloadMonitor/monitors",
            &configuration.base_path, subscription_id, resource_group_name, resource_namespace, resource_type, resource_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        resource_namespace: &str,
        resource_type: &str,
        resource_name: &str,
        monitor_id: &str,
        expand: Option<&str>,
    ) -> Result<Monitor> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/{}/{}/{}/providers/Microsoft.WorkloadMonitor/monitors/{}",
            &configuration.base_path, subscription_id, resource_group_name, resource_namespace, resource_type, resource_name, monitor_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_state_changes(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        resource_namespace: &str,
        resource_type: &str,
        resource_name: &str,
        monitor_id: &str,
        filter: Option<&str>,
        expand: Option<&str>,
        start_timestamp_utc: Option<&str>,
        end_timestamp_utc: Option<&str>,
    ) -> Result<MonitorStateChangeList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/{}/{}/{}/providers/Microsoft.WorkloadMonitor/monitors/{}/history",
            &configuration.base_path, subscription_id, resource_group_name, resource_namespace, resource_type, resource_name, monitor_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(start_timestamp_utc) = start_timestamp_utc {
            req_builder = req_builder.query(&[("startTimestampUtc", start_timestamp_utc)]);
        }
        if let Some(end_timestamp_utc) = end_timestamp_utc {
            req_builder = req_builder.query(&[("endTimestampUtc", end_timestamp_utc)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_state_change(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        resource_namespace: &str,
        resource_type: &str,
        resource_name: &str,
        monitor_id: &str,
        timestamp_unix: &str,
        expand: Option<&str>,
    ) -> Result<MonitorStateChange> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/{}/{}/{}/providers/Microsoft.WorkloadMonitor/monitors/{}/history/{}",
            &configuration.base_path,
            subscription_id,
            resource_group_name,
            resource_namespace,
            resource_type,
            resource_name,
            monitor_id,
            timestamp_unix
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
