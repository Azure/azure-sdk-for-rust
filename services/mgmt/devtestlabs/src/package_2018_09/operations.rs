#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod provider_operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<ProviderOperationResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.DevTestLab/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod labs {
    use crate::{models::*, *};
    pub async fn list_by_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<LabList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DevTestLab/labs",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<LabList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab: &Lab,
    ) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab: &LabFragment,
    ) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(configuration: &Configuration, subscription_id: &str, resource_group_name: &str, name: &str) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn claim_any_vm(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/claimAnyVm",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_environment(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab_virtual_machine_creation_parameter: &LabVirtualMachineCreationParameter,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/createEnvironment",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine_creation_parameter);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn export_resource_usage(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        export_resource_usage_parameters: &ExportResourceUsageParameters,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/exportResourceUsage",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(export_resource_usage_parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn generate_upload_uri(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        generate_upload_uri_parameter: &GenerateUploadUriParameter,
    ) -> Result<GenerateUploadUriResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/generateUploadUri",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(generate_upload_uri_parameter);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn import_virtual_machine(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        import_lab_virtual_machine_request: &ImportLabVirtualMachineRequest,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/importVirtualMachine",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(import_lab_virtual_machine_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_vhds(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
    ) -> Result<LabVhdList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/listVhds",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn get(configuration: &Configuration, subscription_id: &str, location_name: &str, name: &str) -> Result<OperationResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DevTestLab/locations/{}/operations/{}",
            &configuration.base_path, subscription_id, location_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod global_schedules {
    use crate::{models::*, *};
    pub async fn list_by_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DevTestLab/schedules",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        schedule: &ScheduleFragment,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(configuration: &Configuration, subscription_id: &str, resource_group_name: &str, name: &str) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn execute(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}/execute",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn retarget(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        retarget_schedule_properties: &RetargetScheduleProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/schedules/{}/retarget",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(retarget_schedule_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod artifact_sources {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ArtifactSourceList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        artifact_source: &ArtifactSource,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(artifact_source);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        artifact_source: &ArtifactSourceFragment,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(artifact_source);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod arm_templates {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ArmTemplateList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/armtemplates",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<ArmTemplate> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/armtemplates/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod artifacts {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ArtifactList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn generate_arm_template(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        name: &str,
        generate_arm_template_request: &GenerateArmTemplateRequest,
    ) -> Result<ArmTemplateInfo> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts/{}/generateArmTemplate" , & configuration . base_path , subscription_id , resource_group_name , lab_name , artifact_source_name , name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(generate_arm_template_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod costs {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<LabCost> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costs/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        lab_cost: &LabCost,
    ) -> Result<LabCost> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costs/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_cost);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod custom_images {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<CustomImageList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<CustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        custom_image: &CustomImage,
    ) -> Result<CustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(custom_image);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        custom_image: &CustomImageFragment,
    ) -> Result<CustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(custom_image);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod formulas {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<FormulaList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Formula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        formula: &Formula,
    ) -> Result<Formula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(formula);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        formula: &FormulaFragment,
    ) -> Result<Formula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(formula);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod gallery_images {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<GalleryImageList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/galleryimages",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod notification_channels {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<NotificationChannelList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<NotificationChannel> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        notification_channel: &NotificationChannel,
    ) -> Result<NotificationChannel> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(notification_channel);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        notification_channel: &NotificationChannelFragment,
    ) -> Result<NotificationChannel> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(notification_channel);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn notify(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        notify_parameters: &NotifyParameters,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/notificationchannels/{}/notify",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(notify_parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policy_sets {
    use crate::{models::*, *};
    pub async fn evaluate_policies(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        evaluate_policies_request: &EvaluatePoliciesRequest,
    ) -> Result<EvaluatePoliciesResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/evaluatePolicies",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(evaluate_policies_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policies {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<PolicyList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
        policy: &Policy,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(policy);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
        policy: &PolicyFragment,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(policy);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod schedules {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        schedule: &ScheduleFragment,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn execute(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}/execute",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_applicable(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}/listApplicable",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod service_runners {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<ServiceRunner> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/servicerunners/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        service_runner: &ServiceRunner,
    ) -> Result<ServiceRunner> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/servicerunners/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(service_runner);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/servicerunners/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod users {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<UserList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<User> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        user: &User,
    ) -> Result<User> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(user);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        user: &UserFragment,
    ) -> Result<User> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(user);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod disks {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<DiskList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Disk> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        disk: &Disk,
    ) -> Result<Disk> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(disk);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        disk: &DiskFragment,
    ) -> Result<Disk> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(disk);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn attach(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        attach_disk_properties: &AttachDiskProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}/attach",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(attach_disk_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn detach(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        detach_disk_properties: &DetachDiskProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/disks/{}/detach",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(detach_disk_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod environments {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<DtlEnvironmentList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/environments",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<DtlEnvironment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/environments/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        dtl_environment: &DtlEnvironment,
    ) -> Result<DtlEnvironment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/environments/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(dtl_environment);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        dtl_environment: &DtlEnvironmentFragment,
    ) -> Result<DtlEnvironment> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/environments/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(dtl_environment);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/environments/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod secrets {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<SecretList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/secrets",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Secret> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/secrets/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        secret: &Secret,
    ) -> Result<Secret> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/secrets/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(secret);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        secret: &SecretFragment,
    ) -> Result<Secret> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/secrets/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(secret);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/secrets/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod service_fabrics {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ServiceFabricList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<ServiceFabric> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        service_fabric: &ServiceFabric,
    ) -> Result<ServiceFabric> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(service_fabric);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
        service_fabric: &ServiceFabricFragment,
    ) -> Result<ServiceFabric> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(service_fabric);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_applicable_schedules(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<ApplicableSchedule> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/listApplicableSchedules" , & configuration . base_path , subscription_id , resource_group_name , lab_name , user_name , name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn start(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/start",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn stop(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/stop",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod service_fabric_schedules {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        name: &str,
        schedule: &ScheduleFragment,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn execute(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        user_name: &str,
        service_fabric_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/users/{}/servicefabrics/{}/schedules/{}/execute",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, user_name, service_fabric_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod virtual_machines {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<LabVirtualMachineList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        lab_virtual_machine: &LabVirtualMachine,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        lab_virtual_machine: &LabVirtualMachineFragment,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn add_data_disk(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        data_disk_properties: &DataDiskProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/addDataDisk",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(data_disk_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn apply_artifacts(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        apply_artifacts_request: &ApplyArtifactsRequest,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/applyArtifacts",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(apply_artifacts_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn claim(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/claim",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn detach_data_disk(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        detach_data_disk_properties: &DetachDataDiskProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/detachDataDisk",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(detach_data_disk_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_rdp_file_contents(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<RdpConnection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/getRdpFileContents",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_applicable_schedules(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<ApplicableSchedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/listApplicableSchedules",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn redeploy(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/redeploy",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn resize(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        resize_lab_virtual_machine_properties: &ResizeLabVirtualMachineProperties,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/resize",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(resize_lab_virtual_machine_properties);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn restart(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/restart",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn start(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/start",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn stop(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/stop",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn transfer_disks(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/transferDisks",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn un_claim(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/unClaim",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod virtual_machine_schedules {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<ScheduleList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        name: &str,
        schedule: &ScheduleFragment,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn execute(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        virtual_machine_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/schedules/{}/execute",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, virtual_machine_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod virtual_networks {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        expand: Option<&str>,
        filter: Option<&str>,
        top: Option<i64>,
        orderby: Option<&str>,
    ) -> Result<VirtualNetworkList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(orderby) = orderby {
            req_builder = req_builder.query(&[("$orderby", orderby)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        expand: Option<&str>,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(expand) = expand {
            req_builder = req_builder.query(&[("$expand", expand)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        virtual_network: &VirtualNetwork,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(virtual_network);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        virtual_network: &VirtualNetworkFragment,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(virtual_network);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
