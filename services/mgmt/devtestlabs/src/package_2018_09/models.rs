#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicableSchedule {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ApplicableScheduleProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicableScheduleFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ApplicableSchedulePropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicableScheduleProperties {
    #[serde(rename = "labVmsShutdown", skip_serializing_if = "Option::is_none")]
    pub lab_vms_shutdown: Option<Schedule>,
    #[serde(rename = "labVmsStartup", skip_serializing_if = "Option::is_none")]
    pub lab_vms_startup: Option<Schedule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicableSchedulePropertiesFragment {
    #[serde(rename = "labVmsShutdown", skip_serializing_if = "Option::is_none")]
    pub lab_vms_shutdown: Option<ScheduleFragment>,
    #[serde(rename = "labVmsStartup", skip_serializing_if = "Option::is_none")]
    pub lab_vms_startup: Option<ScheduleFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplyArtifactsRequest {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactInstallProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplate {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ArmTemplateProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplateInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub template: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplateList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ArmTemplate>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplateParameterProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplateParameterPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmTemplateProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(skip_serializing)]
    pub publisher: Option<String>,
    #[serde(skip_serializing)]
    pub icon: Option<String>,
    #[serde(skip_serializing)]
    pub contents: Option<serde_json::Value>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "parametersValueFilesInfo", skip_serializing)]
    pub parameters_value_files_info: Vec<ParametersValueFileInfo>,
    #[serde(skip_serializing)]
    pub enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Artifact {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ArtifactProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactDeploymentStatusProperties {
    #[serde(rename = "deploymentStatus", skip_serializing_if = "Option::is_none")]
    pub deployment_status: Option<String>,
    #[serde(rename = "artifactsApplied", skip_serializing_if = "Option::is_none")]
    pub artifacts_applied: Option<i32>,
    #[serde(rename = "totalArtifacts", skip_serializing_if = "Option::is_none")]
    pub total_artifacts: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactDeploymentStatusPropertiesFragment {
    #[serde(rename = "deploymentStatus", skip_serializing_if = "Option::is_none")]
    pub deployment_status: Option<String>,
    #[serde(rename = "artifactsApplied", skip_serializing_if = "Option::is_none")]
    pub artifacts_applied: Option<i32>,
    #[serde(rename = "totalArtifacts", skip_serializing_if = "Option::is_none")]
    pub total_artifacts: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactInstallProperties {
    #[serde(rename = "artifactId", skip_serializing_if = "Option::is_none")]
    pub artifact_id: Option<String>,
    #[serde(rename = "artifactTitle", skip_serializing_if = "Option::is_none")]
    pub artifact_title: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<ArtifactParameterProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "deploymentStatusMessage", skip_serializing_if = "Option::is_none")]
    pub deployment_status_message: Option<String>,
    #[serde(rename = "vmExtensionStatusMessage", skip_serializing_if = "Option::is_none")]
    pub vm_extension_status_message: Option<String>,
    #[serde(rename = "installTime", skip_serializing_if = "Option::is_none")]
    pub install_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactInstallPropertiesFragment {
    #[serde(rename = "artifactId", skip_serializing_if = "Option::is_none")]
    pub artifact_id: Option<String>,
    #[serde(rename = "artifactTitle", skip_serializing_if = "Option::is_none")]
    pub artifact_title: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<ArtifactParameterPropertiesFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "deploymentStatusMessage", skip_serializing_if = "Option::is_none")]
    pub deployment_status_message: Option<String>,
    #[serde(rename = "vmExtensionStatusMessage", skip_serializing_if = "Option::is_none")]
    pub vm_extension_status_message: Option<String>,
    #[serde(rename = "installTime", skip_serializing_if = "Option::is_none")]
    pub install_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Artifact>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactParameterProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactParameterPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactProperties {
    #[serde(skip_serializing)]
    pub title: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(skip_serializing)]
    pub publisher: Option<String>,
    #[serde(rename = "filePath", skip_serializing)]
    pub file_path: Option<String>,
    #[serde(skip_serializing)]
    pub icon: Option<String>,
    #[serde(rename = "targetOsType", skip_serializing)]
    pub target_os_type: Option<String>,
    #[serde(skip_serializing)]
    pub parameters: Option<serde_json::Value>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSource {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ArtifactSourceProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ArtifactSourcePropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ArtifactSource>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<artifact_source_properties::SourceType>,
    #[serde(rename = "folderPath", skip_serializing_if = "Option::is_none")]
    pub folder_path: Option<String>,
    #[serde(rename = "armTemplateFolderPath", skip_serializing_if = "Option::is_none")]
    pub arm_template_folder_path: Option<String>,
    #[serde(rename = "branchRef", skip_serializing_if = "Option::is_none")]
    pub branch_ref: Option<String>,
    #[serde(rename = "securityToken", skip_serializing_if = "Option::is_none")]
    pub security_token: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<artifact_source_properties::Status>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod artifact_source_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceType {
        VsoGit,
        GitHub,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourcePropertiesFragment {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<artifact_source_properties_fragment::SourceType>,
    #[serde(rename = "folderPath", skip_serializing_if = "Option::is_none")]
    pub folder_path: Option<String>,
    #[serde(rename = "armTemplateFolderPath", skip_serializing_if = "Option::is_none")]
    pub arm_template_folder_path: Option<String>,
    #[serde(rename = "branchRef", skip_serializing_if = "Option::is_none")]
    pub branch_ref: Option<String>,
    #[serde(rename = "securityToken", skip_serializing_if = "Option::is_none")]
    pub security_token: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<artifact_source_properties_fragment::Status>,
}
mod artifact_source_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceType {
        VsoGit,
        GitHub,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachDiskProperties {
    #[serde(rename = "leasedByLabVmId", skip_serializing_if = "Option::is_none")]
    pub leased_by_lab_vm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachNewDataDiskOptions {
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<attach_new_data_disk_options::DiskType>,
}
mod attach_new_data_disk_options {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachNewDataDiskOptionsFragment {
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<attach_new_data_disk_options_fragment::DiskType>,
}
mod attach_new_data_disk_options_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BulkCreationParameters {
    #[serde(rename = "instanceCount", skip_serializing_if = "Option::is_none")]
    pub instance_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BulkCreationParametersFragment {
    #[serde(rename = "instanceCount", skip_serializing_if = "Option::is_none")]
    pub instance_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<CloudErrorBody>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudErrorBody {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<CloudErrorBody>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeDataDisk {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "managedDiskId", skip_serializing_if = "Option::is_none")]
    pub managed_disk_id: Option<String>,
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeDataDiskFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "managedDiskId", skip_serializing_if = "Option::is_none")]
    pub managed_disk_id: Option<String>,
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeVmInstanceViewStatus {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "displayStatus", skip_serializing_if = "Option::is_none")]
    pub display_status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeVmInstanceViewStatusFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "displayStatus", skip_serializing_if = "Option::is_none")]
    pub display_status: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeVmProperties {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub statuses: Vec<ComputeVmInstanceViewStatus>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vmSize", skip_serializing_if = "Option::is_none")]
    pub vm_size: Option<String>,
    #[serde(rename = "networkInterfaceId", skip_serializing_if = "Option::is_none")]
    pub network_interface_id: Option<String>,
    #[serde(rename = "osDiskId", skip_serializing_if = "Option::is_none")]
    pub os_disk_id: Option<String>,
    #[serde(rename = "dataDiskIds", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_ids: Vec<String>,
    #[serde(rename = "dataDisks", skip_serializing_if = "Vec::is_empty")]
    pub data_disks: Vec<ComputeDataDisk>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeVmPropertiesFragment {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub statuses: Vec<ComputeVmInstanceViewStatusFragment>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "vmSize", skip_serializing_if = "Option::is_none")]
    pub vm_size: Option<String>,
    #[serde(rename = "networkInterfaceId", skip_serializing_if = "Option::is_none")]
    pub network_interface_id: Option<String>,
    #[serde(rename = "osDiskId", skip_serializing_if = "Option::is_none")]
    pub os_disk_id: Option<String>,
    #[serde(rename = "dataDiskIds", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_ids: Vec<String>,
    #[serde(rename = "dataDisks", skip_serializing_if = "Vec::is_empty")]
    pub data_disks: Vec<ComputeDataDiskFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CostThresholdProperties {
    #[serde(rename = "thresholdId", skip_serializing_if = "Option::is_none")]
    pub threshold_id: Option<String>,
    #[serde(rename = "percentageThreshold", skip_serializing_if = "Option::is_none")]
    pub percentage_threshold: Option<PercentageCostThresholdProperties>,
    #[serde(rename = "displayOnChart", skip_serializing_if = "Option::is_none")]
    pub display_on_chart: Option<cost_threshold_properties::DisplayOnChart>,
    #[serde(rename = "sendNotificationWhenExceeded", skip_serializing_if = "Option::is_none")]
    pub send_notification_when_exceeded: Option<cost_threshold_properties::SendNotificationWhenExceeded>,
    #[serde(rename = "notificationSent", skip_serializing_if = "Option::is_none")]
    pub notification_sent: Option<String>,
}
mod cost_threshold_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DisplayOnChart {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SendNotificationWhenExceeded {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImage {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: CustomImageProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImageFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CustomImagePropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImageList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<CustomImage>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImageProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vm: Option<CustomImagePropertiesFromVm>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vhd: Option<CustomImagePropertiesCustom>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "creationDate", skip_serializing)]
    pub creation_date: Option<String>,
    #[serde(rename = "managedImageId", skip_serializing_if = "Option::is_none")]
    pub managed_image_id: Option<String>,
    #[serde(rename = "managedSnapshotId", skip_serializing_if = "Option::is_none")]
    pub managed_snapshot_id: Option<String>,
    #[serde(rename = "dataDiskStorageInfo", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_storage_info: Vec<DataDiskStorageTypeInfo>,
    #[serde(rename = "customImagePlan", skip_serializing_if = "Option::is_none")]
    pub custom_image_plan: Option<CustomImagePropertiesFromPlan>,
    #[serde(rename = "isPlanAuthorized", skip_serializing_if = "Option::is_none")]
    pub is_plan_authorized: Option<bool>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesCustom {
    #[serde(rename = "imageName", skip_serializing_if = "Option::is_none")]
    pub image_name: Option<String>,
    #[serde(rename = "sysPrep", skip_serializing_if = "Option::is_none")]
    pub sys_prep: Option<bool>,
    #[serde(rename = "osType")]
    pub os_type: custom_image_properties_custom::OsType,
}
mod custom_image_properties_custom {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        Windows,
        Linux,
        None,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesCustomFragment {
    #[serde(rename = "imageName", skip_serializing_if = "Option::is_none")]
    pub image_name: Option<String>,
    #[serde(rename = "sysPrep", skip_serializing_if = "Option::is_none")]
    pub sys_prep: Option<bool>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<custom_image_properties_custom_fragment::OsType>,
}
mod custom_image_properties_custom_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        Windows,
        Linux,
        None,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vm: Option<CustomImagePropertiesFromVmFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vhd: Option<CustomImagePropertiesCustomFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "managedImageId", skip_serializing_if = "Option::is_none")]
    pub managed_image_id: Option<String>,
    #[serde(rename = "managedSnapshotId", skip_serializing_if = "Option::is_none")]
    pub managed_snapshot_id: Option<String>,
    #[serde(rename = "dataDiskStorageInfo", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_storage_info: Vec<DataDiskStorageTypeInfoFragment>,
    #[serde(rename = "customImagePlan", skip_serializing_if = "Option::is_none")]
    pub custom_image_plan: Option<CustomImagePropertiesFromPlanFragment>,
    #[serde(rename = "isPlanAuthorized", skip_serializing_if = "Option::is_none")]
    pub is_plan_authorized: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesFromPlan {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offer: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesFromPlanFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offer: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesFromVm {
    #[serde(rename = "sourceVmId", skip_serializing_if = "Option::is_none")]
    pub source_vm_id: Option<String>,
    #[serde(rename = "windowsOsInfo", skip_serializing_if = "Option::is_none")]
    pub windows_os_info: Option<WindowsOsInfo>,
    #[serde(rename = "linuxOsInfo", skip_serializing_if = "Option::is_none")]
    pub linux_os_info: Option<LinuxOsInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomImagePropertiesFromVmFragment {
    #[serde(rename = "sourceVmId", skip_serializing_if = "Option::is_none")]
    pub source_vm_id: Option<String>,
    #[serde(rename = "windowsOsInfo", skip_serializing_if = "Option::is_none")]
    pub windows_os_info: Option<WindowsOsInfoFragment>,
    #[serde(rename = "linuxOsInfo", skip_serializing_if = "Option::is_none")]
    pub linux_os_info: Option<LinuxOsInfoFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDiskProperties {
    #[serde(rename = "attachNewDataDiskOptions", skip_serializing_if = "Option::is_none")]
    pub attach_new_data_disk_options: Option<AttachNewDataDiskOptions>,
    #[serde(rename = "existingLabDiskId", skip_serializing_if = "Option::is_none")]
    pub existing_lab_disk_id: Option<String>,
    #[serde(rename = "hostCaching", skip_serializing_if = "Option::is_none")]
    pub host_caching: Option<data_disk_properties::HostCaching>,
}
mod data_disk_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HostCaching {
        None,
        ReadOnly,
        ReadWrite,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDiskPropertiesFragment {
    #[serde(rename = "attachNewDataDiskOptions", skip_serializing_if = "Option::is_none")]
    pub attach_new_data_disk_options: Option<AttachNewDataDiskOptionsFragment>,
    #[serde(rename = "existingLabDiskId", skip_serializing_if = "Option::is_none")]
    pub existing_lab_disk_id: Option<String>,
    #[serde(rename = "hostCaching", skip_serializing_if = "Option::is_none")]
    pub host_caching: Option<data_disk_properties_fragment::HostCaching>,
}
mod data_disk_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HostCaching {
        None,
        ReadOnly,
        ReadWrite,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDiskStorageTypeInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lun: Option<String>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<data_disk_storage_type_info::StorageType>,
}
mod data_disk_storage_type_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StorageType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDiskStorageTypeInfoFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lun: Option<String>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<data_disk_storage_type_info_fragment::StorageType>,
}
mod data_disk_storage_type_info_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StorageType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DayDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DayDetailsFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DetachDataDiskProperties {
    #[serde(rename = "existingLabDiskId", skip_serializing_if = "Option::is_none")]
    pub existing_lab_disk_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DetachDiskProperties {
    #[serde(rename = "leasedByLabVmId", skip_serializing_if = "Option::is_none")]
    pub leased_by_lab_vm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Disk {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: DiskProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DiskPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Disk>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskProperties {
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<disk_properties::DiskType>,
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
    #[serde(rename = "leasedByLabVmId", skip_serializing_if = "Option::is_none")]
    pub leased_by_lab_vm_id: Option<String>,
    #[serde(rename = "diskBlobName", skip_serializing_if = "Option::is_none")]
    pub disk_blob_name: Option<String>,
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "hostCaching", skip_serializing_if = "Option::is_none")]
    pub host_caching: Option<String>,
    #[serde(rename = "managedDiskId", skip_serializing_if = "Option::is_none")]
    pub managed_disk_id: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod disk_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskPropertiesFragment {
    #[serde(rename = "diskType", skip_serializing_if = "Option::is_none")]
    pub disk_type: Option<disk_properties_fragment::DiskType>,
    #[serde(rename = "diskSizeGiB", skip_serializing_if = "Option::is_none")]
    pub disk_size_gi_b: Option<i32>,
    #[serde(rename = "leasedByLabVmId", skip_serializing_if = "Option::is_none")]
    pub leased_by_lab_vm_id: Option<String>,
    #[serde(rename = "diskBlobName", skip_serializing_if = "Option::is_none")]
    pub disk_blob_name: Option<String>,
    #[serde(rename = "diskUri", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    #[serde(rename = "hostCaching", skip_serializing_if = "Option::is_none")]
    pub host_caching: Option<String>,
    #[serde(rename = "managedDiskId", skip_serializing_if = "Option::is_none")]
    pub managed_disk_id: Option<String>,
}
mod disk_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DtlEnvironment {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: EnvironmentProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DtlEnvironmentFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<EnvironmentPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DtlEnvironmentList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DtlEnvironment>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentDeploymentProperties {
    #[serde(rename = "armTemplateId", skip_serializing_if = "Option::is_none")]
    pub arm_template_id: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<ArmTemplateParameterProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentDeploymentPropertiesFragment {
    #[serde(rename = "armTemplateId", skip_serializing_if = "Option::is_none")]
    pub arm_template_id: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<ArmTemplateParameterPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentProperties {
    #[serde(rename = "deploymentProperties", skip_serializing_if = "Option::is_none")]
    pub deployment_properties: Option<EnvironmentDeploymentProperties>,
    #[serde(rename = "armTemplateDisplayName", skip_serializing_if = "Option::is_none")]
    pub arm_template_display_name: Option<String>,
    #[serde(rename = "resourceGroupId", skip_serializing)]
    pub resource_group_id: Option<String>,
    #[serde(rename = "createdByUser", skip_serializing)]
    pub created_by_user: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentPropertiesFragment {
    #[serde(rename = "deploymentProperties", skip_serializing_if = "Option::is_none")]
    pub deployment_properties: Option<EnvironmentDeploymentPropertiesFragment>,
    #[serde(rename = "armTemplateDisplayName", skip_serializing_if = "Option::is_none")]
    pub arm_template_display_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EvaluatePoliciesProperties {
    #[serde(rename = "factName", skip_serializing_if = "Option::is_none")]
    pub fact_name: Option<String>,
    #[serde(rename = "factData", skip_serializing_if = "Option::is_none")]
    pub fact_data: Option<String>,
    #[serde(rename = "valueOffset", skip_serializing_if = "Option::is_none")]
    pub value_offset: Option<String>,
    #[serde(rename = "userObjectId", skip_serializing_if = "Option::is_none")]
    pub user_object_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EvaluatePoliciesRequest {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub policies: Vec<EvaluatePoliciesProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EvaluatePoliciesResponse {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<PolicySetResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    #[serde(rename = "eventName", skip_serializing_if = "Option::is_none")]
    pub event_name: Option<event::EventName>,
}
mod event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EventName {
        AutoShutdown,
        Cost,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventFragment {
    #[serde(rename = "eventName", skip_serializing_if = "Option::is_none")]
    pub event_name: Option<event_fragment::EventName>,
}
mod event_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EventName {
        AutoShutdown,
        Cost,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExportResourceUsageParameters {
    #[serde(rename = "blobStorageAbsoluteSasUri", skip_serializing_if = "Option::is_none")]
    pub blob_storage_absolute_sas_uri: Option<String>,
    #[serde(rename = "usageStartDate", skip_serializing_if = "Option::is_none")]
    pub usage_start_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalSubnet {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalSubnetFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Formula {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: FormulaProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<FormulaPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Formula>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "creationDate", skip_serializing)]
    pub creation_date: Option<String>,
    #[serde(rename = "formulaContent", skip_serializing_if = "Option::is_none")]
    pub formula_content: Option<LabVirtualMachineCreationParameter>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vm: Option<FormulaPropertiesFromVm>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "formulaContent", skip_serializing_if = "Option::is_none")]
    pub formula_content: Option<LabVirtualMachineCreationParameterFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vm: Option<FormulaPropertiesFromVmFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaPropertiesFromVm {
    #[serde(rename = "labVmId", skip_serializing_if = "Option::is_none")]
    pub lab_vm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaPropertiesFromVmFragment {
    #[serde(rename = "labVmId", skip_serializing_if = "Option::is_none")]
    pub lab_vm_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GalleryImage {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: GalleryImageProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GalleryImageList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GalleryImage>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GalleryImageProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "imageReference", skip_serializing_if = "Option::is_none")]
    pub image_reference: Option<GalleryImageReference>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "isPlanAuthorized", skip_serializing_if = "Option::is_none")]
    pub is_plan_authorized: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GalleryImageReference {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offer: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GalleryImageReferenceFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offer: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenerateArmTemplateRequest {
    #[serde(rename = "virtualMachineName", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_name: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<ParameterInfo>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "fileUploadOptions", skip_serializing_if = "Option::is_none")]
    pub file_upload_options: Option<generate_arm_template_request::FileUploadOptions>,
}
mod generate_arm_template_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FileUploadOptions {
        UploadFilesAndGenerateSasTokens,
        None,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenerateUploadUriParameter {
    #[serde(rename = "blobName", skip_serializing_if = "Option::is_none")]
    pub blob_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenerateUploadUriResponse {
    #[serde(rename = "uploadUri", skip_serializing_if = "Option::is_none")]
    pub upload_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HourDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub minute: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HourDetailsFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub minute: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityProperties {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "clientSecretUrl", skip_serializing_if = "Option::is_none")]
    pub client_secret_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportLabVirtualMachineRequest {
    #[serde(rename = "sourceVirtualMachineResourceId", skip_serializing_if = "Option::is_none")]
    pub source_virtual_machine_resource_id: Option<String>,
    #[serde(rename = "destinationVirtualMachineName", skip_serializing_if = "Option::is_none")]
    pub destination_virtual_machine_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InboundNatRule {
    #[serde(rename = "transportProtocol", skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<inbound_nat_rule::TransportProtocol>,
    #[serde(rename = "frontendPort", skip_serializing_if = "Option::is_none")]
    pub frontend_port: Option<i32>,
    #[serde(rename = "backendPort", skip_serializing_if = "Option::is_none")]
    pub backend_port: Option<i32>,
}
mod inbound_nat_rule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransportProtocol {
        Tcp,
        Udp,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InboundNatRuleFragment {
    #[serde(rename = "transportProtocol", skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<inbound_nat_rule_fragment::TransportProtocol>,
    #[serde(rename = "frontendPort", skip_serializing_if = "Option::is_none")]
    pub frontend_port: Option<i32>,
    #[serde(rename = "backendPort", skip_serializing_if = "Option::is_none")]
    pub backend_port: Option<i32>,
}
mod inbound_nat_rule_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransportProtocol {
        Tcp,
        Udp,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Lab {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LabProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabAnnouncementProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<lab_announcement_properties::Enabled>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expired: Option<bool>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod lab_announcement_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Enabled {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabAnnouncementPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<lab_announcement_properties_fragment::Enabled>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expired: Option<bool>,
}
mod lab_announcement_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Enabled {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabCost {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: LabCostProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabCostDetailsProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<f64>,
    #[serde(rename = "costType", skip_serializing_if = "Option::is_none")]
    pub cost_type: Option<lab_cost_details_properties::CostType>,
}
mod lab_cost_details_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CostType {
        Unavailable,
        Reported,
        Projected,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabCostProperties {
    #[serde(rename = "targetCost", skip_serializing_if = "Option::is_none")]
    pub target_cost: Option<TargetCostProperties>,
    #[serde(rename = "labCostSummary", skip_serializing_if = "Option::is_none")]
    pub lab_cost_summary: Option<LabCostSummaryProperties>,
    #[serde(rename = "labCostDetails", skip_serializing)]
    pub lab_cost_details: Vec<LabCostDetailsProperties>,
    #[serde(rename = "resourceCosts", skip_serializing)]
    pub resource_costs: Vec<LabResourceCostProperties>,
    #[serde(rename = "currencyCode", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "startDateTime", skip_serializing_if = "Option::is_none")]
    pub start_date_time: Option<String>,
    #[serde(rename = "endDateTime", skip_serializing_if = "Option::is_none")]
    pub end_date_time: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabCostSummaryProperties {
    #[serde(rename = "estimatedLabCost", skip_serializing_if = "Option::is_none")]
    pub estimated_lab_cost: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LabPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Lab>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabProperties {
    #[serde(rename = "defaultStorageAccount", skip_serializing)]
    pub default_storage_account: Option<String>,
    #[serde(rename = "defaultPremiumStorageAccount", skip_serializing)]
    pub default_premium_storage_account: Option<String>,
    #[serde(rename = "artifactsStorageAccount", skip_serializing)]
    pub artifacts_storage_account: Option<String>,
    #[serde(rename = "premiumDataDiskStorageAccount", skip_serializing)]
    pub premium_data_disk_storage_account: Option<String>,
    #[serde(rename = "vaultName", skip_serializing)]
    pub vault_name: Option<String>,
    #[serde(rename = "labStorageType", skip_serializing_if = "Option::is_none")]
    pub lab_storage_type: Option<lab_properties::LabStorageType>,
    #[serde(rename = "mandatoryArtifactsResourceIdsLinux", skip_serializing_if = "Vec::is_empty")]
    pub mandatory_artifacts_resource_ids_linux: Vec<String>,
    #[serde(rename = "mandatoryArtifactsResourceIdsWindows", skip_serializing_if = "Vec::is_empty")]
    pub mandatory_artifacts_resource_ids_windows: Vec<String>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "premiumDataDisks", skip_serializing_if = "Option::is_none")]
    pub premium_data_disks: Option<lab_properties::PremiumDataDisks>,
    #[serde(rename = "environmentPermission", skip_serializing_if = "Option::is_none")]
    pub environment_permission: Option<lab_properties::EnvironmentPermission>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub announcement: Option<LabAnnouncementProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub support: Option<LabSupportProperties>,
    #[serde(rename = "vmCreationResourceGroup", skip_serializing)]
    pub vm_creation_resource_group: Option<String>,
    #[serde(rename = "publicIpId", skip_serializing)]
    pub public_ip_id: Option<String>,
    #[serde(rename = "loadBalancerId", skip_serializing)]
    pub load_balancer_id: Option<String>,
    #[serde(rename = "networkSecurityGroupId", skip_serializing)]
    pub network_security_group_id: Option<String>,
    #[serde(rename = "extendedProperties", skip_serializing_if = "Option::is_none")]
    pub extended_properties: Option<serde_json::Value>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod lab_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LabStorageType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PremiumDataDisks {
        Disabled,
        Enabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EnvironmentPermission {
        Reader,
        Contributor,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabPropertiesFragment {
    #[serde(rename = "labStorageType", skip_serializing_if = "Option::is_none")]
    pub lab_storage_type: Option<lab_properties_fragment::LabStorageType>,
    #[serde(rename = "mandatoryArtifactsResourceIdsLinux", skip_serializing_if = "Vec::is_empty")]
    pub mandatory_artifacts_resource_ids_linux: Vec<String>,
    #[serde(rename = "mandatoryArtifactsResourceIdsWindows", skip_serializing_if = "Vec::is_empty")]
    pub mandatory_artifacts_resource_ids_windows: Vec<String>,
    #[serde(rename = "premiumDataDisks", skip_serializing_if = "Option::is_none")]
    pub premium_data_disks: Option<lab_properties_fragment::PremiumDataDisks>,
    #[serde(rename = "environmentPermission", skip_serializing_if = "Option::is_none")]
    pub environment_permission: Option<lab_properties_fragment::EnvironmentPermission>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub announcement: Option<LabAnnouncementPropertiesFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub support: Option<LabSupportPropertiesFragment>,
    #[serde(rename = "extendedProperties", skip_serializing_if = "Option::is_none")]
    pub extended_properties: Option<serde_json::Value>,
}
mod lab_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LabStorageType {
        Standard,
        Premium,
        #[serde(rename = "StandardSSD")]
        StandardSsd,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PremiumDataDisks {
        Disabled,
        Enabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EnvironmentPermission {
        Reader,
        Contributor,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabResourceCostProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resourcename: Option<String>,
    #[serde(rename = "resourceUId", skip_serializing_if = "Option::is_none")]
    pub resource_u_id: Option<String>,
    #[serde(rename = "resourceCost", skip_serializing_if = "Option::is_none")]
    pub resource_cost: Option<f64>,
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    #[serde(rename = "resourceOwner", skip_serializing_if = "Option::is_none")]
    pub resource_owner: Option<String>,
    #[serde(rename = "resourcePricingTier", skip_serializing_if = "Option::is_none")]
    pub resource_pricing_tier: Option<String>,
    #[serde(rename = "resourceStatus", skip_serializing_if = "Option::is_none")]
    pub resource_status: Option<String>,
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "externalResourceId", skip_serializing_if = "Option::is_none")]
    pub external_resource_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabSupportProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<lab_support_properties::Enabled>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
}
mod lab_support_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Enabled {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabSupportPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enabled: Option<lab_support_properties_fragment::Enabled>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
}
mod lab_support_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Enabled {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVhd {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVhdList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LabVhd>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachine {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: LabVirtualMachineProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineCreationParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LabVirtualMachineCreationParameterProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineCreationParameterFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LabVirtualMachineCreationParameterPropertiesFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineCreationParameterProperties {
    #[serde(rename = "bulkCreationParameters", skip_serializing_if = "Option::is_none")]
    pub bulk_creation_parameters: Option<BulkCreationParameters>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "ownerObjectId", skip_serializing_if = "Option::is_none")]
    pub owner_object_id: Option<String>,
    #[serde(rename = "ownerUserPrincipalName", skip_serializing_if = "Option::is_none")]
    pub owner_user_principal_name: Option<String>,
    #[serde(rename = "createdByUserId", skip_serializing_if = "Option::is_none")]
    pub created_by_user_id: Option<String>,
    #[serde(rename = "createdByUser", skip_serializing_if = "Option::is_none")]
    pub created_by_user: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "computeId", skip_serializing_if = "Option::is_none")]
    pub compute_id: Option<String>,
    #[serde(rename = "customImageId", skip_serializing_if = "Option::is_none")]
    pub custom_image_id: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "sshKey", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<String>,
    #[serde(rename = "isAuthenticationWithSshKey", skip_serializing_if = "Option::is_none")]
    pub is_authentication_with_ssh_key: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "labVirtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub lab_virtual_network_id: Option<String>,
    #[serde(rename = "disallowPublicIpAddress", skip_serializing_if = "Option::is_none")]
    pub disallow_public_ip_address: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactInstallProperties>,
    #[serde(rename = "artifactDeploymentStatus", skip_serializing_if = "Option::is_none")]
    pub artifact_deployment_status: Option<ArtifactDeploymentStatusProperties>,
    #[serde(rename = "galleryImageReference", skip_serializing_if = "Option::is_none")]
    pub gallery_image_reference: Option<GalleryImageReference>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "networkInterface", skip_serializing_if = "Option::is_none")]
    pub network_interface: Option<NetworkInterfaceProperties>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "allowClaim", skip_serializing_if = "Option::is_none")]
    pub allow_claim: Option<bool>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<String>,
    #[serde(rename = "virtualMachineCreationSource", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_creation_source: Option<lab_virtual_machine_creation_parameter_properties::VirtualMachineCreationSource>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
    #[serde(rename = "dataDiskParameters", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_parameters: Vec<DataDiskProperties>,
    #[serde(rename = "scheduleParameters", skip_serializing_if = "Vec::is_empty")]
    pub schedule_parameters: Vec<ScheduleCreationParameter>,
    #[serde(rename = "lastKnownPowerState", skip_serializing_if = "Option::is_none")]
    pub last_known_power_state: Option<String>,
}
mod lab_virtual_machine_creation_parameter_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VirtualMachineCreationSource {
        FromCustomImage,
        FromGalleryImage,
        FromSharedGalleryImage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineCreationParameterPropertiesFragment {
    #[serde(rename = "bulkCreationParameters", skip_serializing_if = "Option::is_none")]
    pub bulk_creation_parameters: Option<BulkCreationParametersFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "ownerObjectId", skip_serializing_if = "Option::is_none")]
    pub owner_object_id: Option<String>,
    #[serde(rename = "ownerUserPrincipalName", skip_serializing_if = "Option::is_none")]
    pub owner_user_principal_name: Option<String>,
    #[serde(rename = "createdByUserId", skip_serializing_if = "Option::is_none")]
    pub created_by_user_id: Option<String>,
    #[serde(rename = "createdByUser", skip_serializing_if = "Option::is_none")]
    pub created_by_user: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "computeId", skip_serializing_if = "Option::is_none")]
    pub compute_id: Option<String>,
    #[serde(rename = "customImageId", skip_serializing_if = "Option::is_none")]
    pub custom_image_id: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "sshKey", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<String>,
    #[serde(rename = "isAuthenticationWithSshKey", skip_serializing_if = "Option::is_none")]
    pub is_authentication_with_ssh_key: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "labVirtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub lab_virtual_network_id: Option<String>,
    #[serde(rename = "disallowPublicIpAddress", skip_serializing_if = "Option::is_none")]
    pub disallow_public_ip_address: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactInstallPropertiesFragment>,
    #[serde(rename = "artifactDeploymentStatus", skip_serializing_if = "Option::is_none")]
    pub artifact_deployment_status: Option<ArtifactDeploymentStatusPropertiesFragment>,
    #[serde(rename = "galleryImageReference", skip_serializing_if = "Option::is_none")]
    pub gallery_image_reference: Option<GalleryImageReferenceFragment>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "networkInterface", skip_serializing_if = "Option::is_none")]
    pub network_interface: Option<NetworkInterfacePropertiesFragment>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "allowClaim", skip_serializing_if = "Option::is_none")]
    pub allow_claim: Option<bool>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<String>,
    #[serde(rename = "virtualMachineCreationSource", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_creation_source: Option<lab_virtual_machine_creation_parameter_properties_fragment::VirtualMachineCreationSource>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
    #[serde(rename = "dataDiskParameters", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_parameters: Vec<DataDiskPropertiesFragment>,
    #[serde(rename = "scheduleParameters", skip_serializing_if = "Vec::is_empty")]
    pub schedule_parameters: Vec<ScheduleCreationParameterFragment>,
    #[serde(rename = "lastKnownPowerState", skip_serializing_if = "Option::is_none")]
    pub last_known_power_state: Option<String>,
}
mod lab_virtual_machine_creation_parameter_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VirtualMachineCreationSource {
        FromCustomImage,
        FromGalleryImage,
        FromSharedGalleryImage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<LabVirtualMachinePropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<LabVirtualMachine>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachineProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "ownerObjectId", skip_serializing_if = "Option::is_none")]
    pub owner_object_id: Option<String>,
    #[serde(rename = "ownerUserPrincipalName", skip_serializing_if = "Option::is_none")]
    pub owner_user_principal_name: Option<String>,
    #[serde(rename = "createdByUserId", skip_serializing_if = "Option::is_none")]
    pub created_by_user_id: Option<String>,
    #[serde(rename = "createdByUser", skip_serializing_if = "Option::is_none")]
    pub created_by_user: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "computeId", skip_serializing_if = "Option::is_none")]
    pub compute_id: Option<String>,
    #[serde(rename = "customImageId", skip_serializing_if = "Option::is_none")]
    pub custom_image_id: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "sshKey", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<String>,
    #[serde(rename = "isAuthenticationWithSshKey", skip_serializing_if = "Option::is_none")]
    pub is_authentication_with_ssh_key: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "labVirtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub lab_virtual_network_id: Option<String>,
    #[serde(rename = "disallowPublicIpAddress", skip_serializing_if = "Option::is_none")]
    pub disallow_public_ip_address: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactInstallProperties>,
    #[serde(rename = "artifactDeploymentStatus", skip_serializing_if = "Option::is_none")]
    pub artifact_deployment_status: Option<ArtifactDeploymentStatusProperties>,
    #[serde(rename = "galleryImageReference", skip_serializing_if = "Option::is_none")]
    pub gallery_image_reference: Option<GalleryImageReference>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "computeVm", skip_serializing_if = "Option::is_none")]
    pub compute_vm: Option<ComputeVmProperties>,
    #[serde(rename = "networkInterface", skip_serializing_if = "Option::is_none")]
    pub network_interface: Option<NetworkInterfaceProperties>,
    #[serde(rename = "applicableSchedule", skip_serializing_if = "Option::is_none")]
    pub applicable_schedule: Option<ApplicableSchedule>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "allowClaim", skip_serializing_if = "Option::is_none")]
    pub allow_claim: Option<bool>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<String>,
    #[serde(rename = "virtualMachineCreationSource", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_creation_source: Option<lab_virtual_machine_properties::VirtualMachineCreationSource>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
    #[serde(rename = "dataDiskParameters", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_parameters: Vec<DataDiskProperties>,
    #[serde(rename = "scheduleParameters", skip_serializing_if = "Vec::is_empty")]
    pub schedule_parameters: Vec<ScheduleCreationParameter>,
    #[serde(rename = "lastKnownPowerState", skip_serializing_if = "Option::is_none")]
    pub last_known_power_state: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod lab_virtual_machine_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VirtualMachineCreationSource {
        FromCustomImage,
        FromGalleryImage,
        FromSharedGalleryImage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabVirtualMachinePropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "ownerObjectId", skip_serializing_if = "Option::is_none")]
    pub owner_object_id: Option<String>,
    #[serde(rename = "ownerUserPrincipalName", skip_serializing_if = "Option::is_none")]
    pub owner_user_principal_name: Option<String>,
    #[serde(rename = "createdByUserId", skip_serializing_if = "Option::is_none")]
    pub created_by_user_id: Option<String>,
    #[serde(rename = "createdByUser", skip_serializing_if = "Option::is_none")]
    pub created_by_user: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "computeId", skip_serializing_if = "Option::is_none")]
    pub compute_id: Option<String>,
    #[serde(rename = "customImageId", skip_serializing_if = "Option::is_none")]
    pub custom_image_id: Option<String>,
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "sshKey", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<String>,
    #[serde(rename = "isAuthenticationWithSshKey", skip_serializing_if = "Option::is_none")]
    pub is_authentication_with_ssh_key: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "labVirtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub lab_virtual_network_id: Option<String>,
    #[serde(rename = "disallowPublicIpAddress", skip_serializing_if = "Option::is_none")]
    pub disallow_public_ip_address: Option<bool>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactInstallPropertiesFragment>,
    #[serde(rename = "artifactDeploymentStatus", skip_serializing_if = "Option::is_none")]
    pub artifact_deployment_status: Option<ArtifactDeploymentStatusPropertiesFragment>,
    #[serde(rename = "galleryImageReference", skip_serializing_if = "Option::is_none")]
    pub gallery_image_reference: Option<GalleryImageReferenceFragment>,
    #[serde(rename = "planId", skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "networkInterface", skip_serializing_if = "Option::is_none")]
    pub network_interface: Option<NetworkInterfacePropertiesFragment>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "allowClaim", skip_serializing_if = "Option::is_none")]
    pub allow_claim: Option<bool>,
    #[serde(rename = "storageType", skip_serializing_if = "Option::is_none")]
    pub storage_type: Option<String>,
    #[serde(rename = "virtualMachineCreationSource", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_creation_source: Option<lab_virtual_machine_properties_fragment::VirtualMachineCreationSource>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
    #[serde(rename = "dataDiskParameters", skip_serializing_if = "Vec::is_empty")]
    pub data_disk_parameters: Vec<DataDiskPropertiesFragment>,
    #[serde(rename = "scheduleParameters", skip_serializing_if = "Vec::is_empty")]
    pub schedule_parameters: Vec<ScheduleCreationParameterFragment>,
    #[serde(rename = "lastKnownPowerState", skip_serializing_if = "Option::is_none")]
    pub last_known_power_state: Option<String>,
}
mod lab_virtual_machine_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VirtualMachineCreationSource {
        FromCustomImage,
        FromGalleryImage,
        FromSharedGalleryImage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinuxOsInfo {
    #[serde(rename = "linuxOsState", skip_serializing_if = "Option::is_none")]
    pub linux_os_state: Option<linux_os_info::LinuxOsState>,
}
mod linux_os_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LinuxOsState {
        NonDeprovisioned,
        DeprovisionRequested,
        DeprovisionApplied,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinuxOsInfoFragment {
    #[serde(rename = "linuxOsState", skip_serializing_if = "Option::is_none")]
    pub linux_os_state: Option<linux_os_info_fragment::LinuxOsState>,
}
mod linux_os_info_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LinuxOsState {
        NonDeprovisioned,
        DeprovisionRequested,
        DeprovisionApplied,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInterfaceProperties {
    #[serde(rename = "virtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub virtual_network_id: Option<String>,
    #[serde(rename = "subnetId", skip_serializing_if = "Option::is_none")]
    pub subnet_id: Option<String>,
    #[serde(rename = "publicIpAddressId", skip_serializing_if = "Option::is_none")]
    pub public_ip_address_id: Option<String>,
    #[serde(rename = "publicIpAddress", skip_serializing_if = "Option::is_none")]
    pub public_ip_address: Option<String>,
    #[serde(rename = "privateIpAddress", skip_serializing_if = "Option::is_none")]
    pub private_ip_address: Option<String>,
    #[serde(rename = "dnsName", skip_serializing_if = "Option::is_none")]
    pub dns_name: Option<String>,
    #[serde(rename = "rdpAuthority", skip_serializing_if = "Option::is_none")]
    pub rdp_authority: Option<String>,
    #[serde(rename = "sshAuthority", skip_serializing_if = "Option::is_none")]
    pub ssh_authority: Option<String>,
    #[serde(rename = "sharedPublicIpAddressConfiguration", skip_serializing_if = "Option::is_none")]
    pub shared_public_ip_address_configuration: Option<SharedPublicIpAddressConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInterfacePropertiesFragment {
    #[serde(rename = "virtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub virtual_network_id: Option<String>,
    #[serde(rename = "subnetId", skip_serializing_if = "Option::is_none")]
    pub subnet_id: Option<String>,
    #[serde(rename = "publicIpAddressId", skip_serializing_if = "Option::is_none")]
    pub public_ip_address_id: Option<String>,
    #[serde(rename = "publicIpAddress", skip_serializing_if = "Option::is_none")]
    pub public_ip_address: Option<String>,
    #[serde(rename = "privateIpAddress", skip_serializing_if = "Option::is_none")]
    pub private_ip_address: Option<String>,
    #[serde(rename = "dnsName", skip_serializing_if = "Option::is_none")]
    pub dns_name: Option<String>,
    #[serde(rename = "rdpAuthority", skip_serializing_if = "Option::is_none")]
    pub rdp_authority: Option<String>,
    #[serde(rename = "sshAuthority", skip_serializing_if = "Option::is_none")]
    pub ssh_authority: Option<String>,
    #[serde(rename = "sharedPublicIpAddressConfiguration", skip_serializing_if = "Option::is_none")]
    pub shared_public_ip_address_configuration: Option<SharedPublicIpAddressConfigurationFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationChannel {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: NotificationChannelProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationChannelFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<NotificationChannelPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationChannelList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<NotificationChannel>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationChannelProperties {
    #[serde(rename = "webHookUrl", skip_serializing_if = "Option::is_none")]
    pub web_hook_url: Option<String>,
    #[serde(rename = "emailRecipient", skip_serializing_if = "Option::is_none")]
    pub email_recipient: Option<String>,
    #[serde(rename = "notificationLocale", skip_serializing_if = "Option::is_none")]
    pub notification_locale: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<Event>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationChannelPropertiesFragment {
    #[serde(rename = "webHookUrl", skip_serializing_if = "Option::is_none")]
    pub web_hook_url: Option<String>,
    #[serde(rename = "emailRecipient", skip_serializing_if = "Option::is_none")]
    pub email_recipient: Option<String>,
    #[serde(rename = "notificationLocale", skip_serializing_if = "Option::is_none")]
    pub notification_locale: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<EventFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationSettings {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<notification_settings::Status>,
    #[serde(rename = "timeInMinutes", skip_serializing_if = "Option::is_none")]
    pub time_in_minutes: Option<i32>,
    #[serde(rename = "webhookUrl", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    #[serde(rename = "emailRecipient", skip_serializing_if = "Option::is_none")]
    pub email_recipient: Option<String>,
    #[serde(rename = "notificationLocale", skip_serializing_if = "Option::is_none")]
    pub notification_locale: Option<String>,
}
mod notification_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationSettingsFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<notification_settings_fragment::Status>,
    #[serde(rename = "timeInMinutes", skip_serializing_if = "Option::is_none")]
    pub time_in_minutes: Option<i32>,
    #[serde(rename = "webhookUrl", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    #[serde(rename = "emailRecipient", skip_serializing_if = "Option::is_none")]
    pub email_recipient: Option<String>,
    #[serde(rename = "notificationLocale", skip_serializing_if = "Option::is_none")]
    pub notification_locale: Option<String>,
}
mod notification_settings_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotifyParameters {
    #[serde(rename = "eventName", skip_serializing_if = "Option::is_none")]
    pub event_name: Option<notify_parameters::EventName>,
    #[serde(rename = "jsonPayload", skip_serializing_if = "Option::is_none")]
    pub json_payload: Option<String>,
}
mod notify_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EventName {
        AutoShutdown,
        Cost,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetadata {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<OperationMetadataDisplay>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetadataDisplay {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResult {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "statusCode", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<operation_result::StatusCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<OperationError>,
}
mod operation_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StatusCode {
        Continue,
        SwitchingProtocols,
        #[serde(rename = "OK")]
        Ok,
        Created,
        Accepted,
        NonAuthoritativeInformation,
        NoContent,
        ResetContent,
        PartialContent,
        MultipleChoices,
        MovedPermanently,
        Redirect,
        SeeOther,
        NotModified,
        UseProxy,
        Unused,
        TemporaryRedirect,
        BadRequest,
        Unauthorized,
        PaymentRequired,
        Forbidden,
        NotFound,
        MethodNotAllowed,
        NotAcceptable,
        ProxyAuthenticationRequired,
        RequestTimeout,
        Conflict,
        Gone,
        LengthRequired,
        PreconditionFailed,
        RequestEntityTooLarge,
        RequestUriTooLong,
        UnsupportedMediaType,
        RequestedRangeNotSatisfiable,
        ExpectationFailed,
        UpgradeRequired,
        InternalServerError,
        NotImplemented,
        BadGateway,
        ServiceUnavailable,
        GatewayTimeout,
        HttpVersionNotSupported,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParameterInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParametersValueFileInfo {
    #[serde(rename = "fileName", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "parametersValueInfo", skip_serializing_if = "Option::is_none")]
    pub parameters_value_info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PercentageCostThresholdProperties {
    #[serde(rename = "thresholdValue", skip_serializing_if = "Option::is_none")]
    pub threshold_value: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Policy {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: PolicyProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PolicyPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Policy>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<policy_properties::Status>,
    #[serde(rename = "factName", skip_serializing_if = "Option::is_none")]
    pub fact_name: Option<policy_properties::FactName>,
    #[serde(rename = "factData", skip_serializing_if = "Option::is_none")]
    pub fact_data: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
    #[serde(rename = "evaluatorType", skip_serializing_if = "Option::is_none")]
    pub evaluator_type: Option<policy_properties::EvaluatorType>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod policy_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FactName {
        UserOwnedLabVmCount,
        UserOwnedLabPremiumVmCount,
        LabVmCount,
        LabPremiumVmCount,
        LabVmSize,
        GalleryImage,
        UserOwnedLabVmCountInSubnet,
        LabTargetCost,
        EnvironmentTemplate,
        ScheduleEditPermission,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EvaluatorType {
        AllowedValuesPolicy,
        MaxValuePolicy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<policy_properties_fragment::Status>,
    #[serde(rename = "factName", skip_serializing_if = "Option::is_none")]
    pub fact_name: Option<policy_properties_fragment::FactName>,
    #[serde(rename = "factData", skip_serializing_if = "Option::is_none")]
    pub fact_data: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
    #[serde(rename = "evaluatorType", skip_serializing_if = "Option::is_none")]
    pub evaluator_type: Option<policy_properties_fragment::EvaluatorType>,
}
mod policy_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FactName {
        UserOwnedLabVmCount,
        UserOwnedLabPremiumVmCount,
        LabVmCount,
        LabPremiumVmCount,
        LabVmSize,
        GalleryImage,
        UserOwnedLabVmCountInSubnet,
        LabTargetCost,
        EnvironmentTemplate,
        ScheduleEditPermission,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EvaluatorType {
        AllowedValuesPolicy,
        MaxValuePolicy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicySetResult {
    #[serde(rename = "hasError", skip_serializing_if = "Option::is_none")]
    pub has_error: Option<bool>,
    #[serde(rename = "policyViolations", skip_serializing_if = "Vec::is_empty")]
    pub policy_violations: Vec<PolicyViolation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyViolation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Port {
    #[serde(rename = "transportProtocol", skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<port::TransportProtocol>,
    #[serde(rename = "backendPort", skip_serializing_if = "Option::is_none")]
    pub backend_port: Option<i32>,
}
mod port {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransportProtocol {
        Tcp,
        Udp,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PortFragment {
    #[serde(rename = "transportProtocol", skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<port_fragment::TransportProtocol>,
    #[serde(rename = "backendPort", skip_serializing_if = "Option::is_none")]
    pub backend_port: Option<i32>,
}
mod port_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransportProtocol {
        Tcp,
        Udp,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProviderOperationResult {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<OperationMetadata>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RdpConnection {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contents: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResizeLabVirtualMachineProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetargetScheduleProperties {
    #[serde(rename = "currentResourceId", skip_serializing_if = "Option::is_none")]
    pub current_resource_id: Option<String>,
    #[serde(rename = "targetResourceId", skip_serializing_if = "Option::is_none")]
    pub target_resource_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Schedule {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ScheduleProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleCreationParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScheduleCreationParameterProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleCreationParameterFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScheduleCreationParameterPropertiesFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleCreationParameterProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<schedule_creation_parameter_properties::Status>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "weeklyRecurrence", skip_serializing_if = "Option::is_none")]
    pub weekly_recurrence: Option<WeekDetails>,
    #[serde(rename = "dailyRecurrence", skip_serializing_if = "Option::is_none")]
    pub daily_recurrence: Option<DayDetails>,
    #[serde(rename = "hourlyRecurrence", skip_serializing_if = "Option::is_none")]
    pub hourly_recurrence: Option<HourDetails>,
    #[serde(rename = "timeZoneId", skip_serializing_if = "Option::is_none")]
    pub time_zone_id: Option<String>,
    #[serde(rename = "notificationSettings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<NotificationSettings>,
    #[serde(rename = "targetResourceId", skip_serializing_if = "Option::is_none")]
    pub target_resource_id: Option<String>,
}
mod schedule_creation_parameter_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleCreationParameterPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<schedule_creation_parameter_properties_fragment::Status>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "weeklyRecurrence", skip_serializing_if = "Option::is_none")]
    pub weekly_recurrence: Option<WeekDetailsFragment>,
    #[serde(rename = "dailyRecurrence", skip_serializing_if = "Option::is_none")]
    pub daily_recurrence: Option<DayDetailsFragment>,
    #[serde(rename = "hourlyRecurrence", skip_serializing_if = "Option::is_none")]
    pub hourly_recurrence: Option<HourDetailsFragment>,
    #[serde(rename = "timeZoneId", skip_serializing_if = "Option::is_none")]
    pub time_zone_id: Option<String>,
    #[serde(rename = "notificationSettings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<NotificationSettingsFragment>,
    #[serde(rename = "targetResourceId", skip_serializing_if = "Option::is_none")]
    pub target_resource_id: Option<String>,
}
mod schedule_creation_parameter_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SchedulePropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Schedule>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<schedule_properties::Status>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "weeklyRecurrence", skip_serializing_if = "Option::is_none")]
    pub weekly_recurrence: Option<WeekDetails>,
    #[serde(rename = "dailyRecurrence", skip_serializing_if = "Option::is_none")]
    pub daily_recurrence: Option<DayDetails>,
    #[serde(rename = "hourlyRecurrence", skip_serializing_if = "Option::is_none")]
    pub hourly_recurrence: Option<HourDetails>,
    #[serde(rename = "timeZoneId", skip_serializing_if = "Option::is_none")]
    pub time_zone_id: Option<String>,
    #[serde(rename = "notificationSettings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<NotificationSettings>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "targetResourceId", skip_serializing_if = "Option::is_none")]
    pub target_resource_id: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
mod schedule_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchedulePropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<schedule_properties_fragment::Status>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "weeklyRecurrence", skip_serializing_if = "Option::is_none")]
    pub weekly_recurrence: Option<WeekDetailsFragment>,
    #[serde(rename = "dailyRecurrence", skip_serializing_if = "Option::is_none")]
    pub daily_recurrence: Option<DayDetailsFragment>,
    #[serde(rename = "hourlyRecurrence", skip_serializing_if = "Option::is_none")]
    pub hourly_recurrence: Option<HourDetailsFragment>,
    #[serde(rename = "timeZoneId", skip_serializing_if = "Option::is_none")]
    pub time_zone_id: Option<String>,
    #[serde(rename = "notificationSettings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<NotificationSettingsFragment>,
    #[serde(rename = "targetResourceId", skip_serializing_if = "Option::is_none")]
    pub target_resource_id: Option<String>,
}
mod schedule_properties_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Secret {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: SecretProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecretFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SecretPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecretList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Secret>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecretProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecretPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceFabric {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: ServiceFabricProperties,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceFabricFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ServiceFabricPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceFabricList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ServiceFabric>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceFabricProperties {
    #[serde(rename = "externalServiceFabricId", skip_serializing_if = "Option::is_none")]
    pub external_service_fabric_id: Option<String>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
    #[serde(rename = "applicableSchedule", skip_serializing_if = "Option::is_none")]
    pub applicable_schedule: Option<ApplicableSchedule>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceFabricPropertiesFragment {
    #[serde(rename = "externalServiceFabricId", skip_serializing_if = "Option::is_none")]
    pub external_service_fabric_id: Option<String>,
    #[serde(rename = "environmentId", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceRunner {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<IdentityProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharedPublicIpAddressConfiguration {
    #[serde(rename = "inboundNatRules", skip_serializing_if = "Vec::is_empty")]
    pub inbound_nat_rules: Vec<InboundNatRule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharedPublicIpAddressConfigurationFragment {
    #[serde(rename = "inboundNatRules", skip_serializing_if = "Vec::is_empty")]
    pub inbound_nat_rules: Vec<InboundNatRuleFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShutdownNotificationContent {
    #[serde(rename = "skipUrl", skip_serializing_if = "Option::is_none")]
    pub skip_url: Option<String>,
    #[serde(rename = "delayUrl60", skip_serializing_if = "Option::is_none")]
    pub delay_url60: Option<String>,
    #[serde(rename = "delayUrl120", skip_serializing_if = "Option::is_none")]
    pub delay_url120: Option<String>,
    #[serde(rename = "vmName", skip_serializing_if = "Option::is_none")]
    pub vm_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guid: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "vmUrl", skip_serializing_if = "Option::is_none")]
    pub vm_url: Option<String>,
    #[serde(rename = "minutesUntilShutdown", skip_serializing_if = "Option::is_none")]
    pub minutes_until_shutdown: Option<String>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    #[serde(rename = "resourceGroupName", skip_serializing_if = "Option::is_none")]
    pub resource_group_name: Option<String>,
    #[serde(rename = "labName", skip_serializing_if = "Option::is_none")]
    pub lab_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subnet {
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "allowPublicIp", skip_serializing_if = "Option::is_none")]
    pub allow_public_ip: Option<subnet::AllowPublicIp>,
}
mod subnet {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AllowPublicIp {
        Default,
        Deny,
        Allow,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubnetFragment {
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "allowPublicIp", skip_serializing_if = "Option::is_none")]
    pub allow_public_ip: Option<subnet_fragment::AllowPublicIp>,
}
mod subnet_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AllowPublicIp {
        Default,
        Deny,
        Allow,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubnetOverride {
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "useInVmCreationPermission", skip_serializing_if = "Option::is_none")]
    pub use_in_vm_creation_permission: Option<subnet_override::UseInVmCreationPermission>,
    #[serde(rename = "usePublicIpAddressPermission", skip_serializing_if = "Option::is_none")]
    pub use_public_ip_address_permission: Option<subnet_override::UsePublicIpAddressPermission>,
    #[serde(rename = "sharedPublicIpAddressConfiguration", skip_serializing_if = "Option::is_none")]
    pub shared_public_ip_address_configuration: Option<SubnetSharedPublicIpAddressConfiguration>,
    #[serde(rename = "virtualNetworkPoolName", skip_serializing_if = "Option::is_none")]
    pub virtual_network_pool_name: Option<String>,
}
mod subnet_override {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UseInVmCreationPermission {
        Default,
        Deny,
        Allow,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UsePublicIpAddressPermission {
        Default,
        Deny,
        Allow,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubnetOverrideFragment {
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "labSubnetName", skip_serializing_if = "Option::is_none")]
    pub lab_subnet_name: Option<String>,
    #[serde(rename = "useInVmCreationPermission", skip_serializing_if = "Option::is_none")]
    pub use_in_vm_creation_permission: Option<subnet_override_fragment::UseInVmCreationPermission>,
    #[serde(rename = "usePublicIpAddressPermission", skip_serializing_if = "Option::is_none")]
    pub use_public_ip_address_permission: Option<subnet_override_fragment::UsePublicIpAddressPermission>,
    #[serde(rename = "sharedPublicIpAddressConfiguration", skip_serializing_if = "Option::is_none")]
    pub shared_public_ip_address_configuration: Option<SubnetSharedPublicIpAddressConfigurationFragment>,
    #[serde(rename = "virtualNetworkPoolName", skip_serializing_if = "Option::is_none")]
    pub virtual_network_pool_name: Option<String>,
}
mod subnet_override_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UseInVmCreationPermission {
        Default,
        Deny,
        Allow,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UsePublicIpAddressPermission {
        Default,
        Deny,
        Allow,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubnetSharedPublicIpAddressConfiguration {
    #[serde(rename = "allowedPorts", skip_serializing_if = "Vec::is_empty")]
    pub allowed_ports: Vec<Port>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubnetSharedPublicIpAddressConfigurationFragment {
    #[serde(rename = "allowedPorts", skip_serializing_if = "Vec::is_empty")]
    pub allowed_ports: Vec<PortFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetCostProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<target_cost_properties::Status>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<i32>,
    #[serde(rename = "costThresholds", skip_serializing_if = "Vec::is_empty")]
    pub cost_thresholds: Vec<CostThresholdProperties>,
    #[serde(rename = "cycleStartDateTime", skip_serializing_if = "Option::is_none")]
    pub cycle_start_date_time: Option<String>,
    #[serde(rename = "cycleEndDateTime", skip_serializing_if = "Option::is_none")]
    pub cycle_end_date_time: Option<String>,
    #[serde(rename = "cycleType", skip_serializing_if = "Option::is_none")]
    pub cycle_type: Option<target_cost_properties::CycleType>,
}
mod target_cost_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Enabled,
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CycleType {
        CalendarMonth,
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UserProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UserPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserIdentity {
    #[serde(rename = "principalName", skip_serializing_if = "Option::is_none")]
    pub principal_name: Option<String>,
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserIdentityFragment {
    #[serde(rename = "principalName", skip_serializing_if = "Option::is_none")]
    pub principal_name: Option<String>,
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<User>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<UserIdentity>,
    #[serde(rename = "secretStore", skip_serializing_if = "Option::is_none")]
    pub secret_store: Option<UserSecretStore>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserPropertiesFragment {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<UserIdentityFragment>,
    #[serde(rename = "secretStore", skip_serializing_if = "Option::is_none")]
    pub secret_store: Option<UserSecretStoreFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSecretStore {
    #[serde(rename = "keyVaultUri", skip_serializing_if = "Option::is_none")]
    pub key_vault_uri: Option<String>,
    #[serde(rename = "keyVaultId", skip_serializing_if = "Option::is_none")]
    pub key_vault_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSecretStoreFragment {
    #[serde(rename = "keyVaultUri", skip_serializing_if = "Option::is_none")]
    pub key_vault_uri: Option<String>,
    #[serde(rename = "keyVaultId", skip_serializing_if = "Option::is_none")]
    pub key_vault_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualNetwork {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VirtualNetworkProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualNetworkFragment {
    #[serde(flatten)]
    pub update_resource: UpdateResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VirtualNetworkPropertiesFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualNetworkList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<VirtualNetwork>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualNetworkProperties {
    #[serde(rename = "allowedSubnets", skip_serializing_if = "Vec::is_empty")]
    pub allowed_subnets: Vec<Subnet>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "externalProviderResourceId", skip_serializing_if = "Option::is_none")]
    pub external_provider_resource_id: Option<String>,
    #[serde(rename = "externalSubnets", skip_serializing)]
    pub external_subnets: Vec<ExternalSubnet>,
    #[serde(rename = "subnetOverrides", skip_serializing_if = "Vec::is_empty")]
    pub subnet_overrides: Vec<SubnetOverride>,
    #[serde(rename = "createdDate", skip_serializing)]
    pub created_date: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "uniqueIdentifier", skip_serializing)]
    pub unique_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualNetworkPropertiesFragment {
    #[serde(rename = "allowedSubnets", skip_serializing_if = "Vec::is_empty")]
    pub allowed_subnets: Vec<SubnetFragment>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "externalProviderResourceId", skip_serializing_if = "Option::is_none")]
    pub external_provider_resource_id: Option<String>,
    #[serde(rename = "subnetOverrides", skip_serializing_if = "Vec::is_empty")]
    pub subnet_overrides: Vec<SubnetOverrideFragment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WeekDetails {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub weekdays: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WeekDetailsFragment {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub weekdays: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WindowsOsInfo {
    #[serde(rename = "windowsOsState", skip_serializing_if = "Option::is_none")]
    pub windows_os_state: Option<windows_os_info::WindowsOsState>,
}
mod windows_os_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum WindowsOsState {
        NonSysprepped,
        SysprepRequested,
        SysprepApplied,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WindowsOsInfoFragment {
    #[serde(rename = "windowsOsState", skip_serializing_if = "Option::is_none")]
    pub windows_os_state: Option<windows_os_info_fragment::WindowsOsState>,
}
mod windows_os_info_fragment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum WindowsOsState {
        NonSysprepped,
        SysprepRequested,
        SysprepApplied,
    }
}
