#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod lab {
    use crate::{models::*, *};
    pub async fn list_by_subscription(
        configuration: &Configuration,
        subscription_id: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationLab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.DevTestLab/labs",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_by_resource_group(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationLab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(configuration: &Configuration, subscription_id: &str, resource_group_name: &str, name: &str) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab: &Lab,
    ) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab: &Lab,
    ) -> Result<Lab> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_environment(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        lab_virtual_machine: &LabVirtualMachine,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/createEnvironment",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn generate_upload_uri(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
        generate_upload_uri_parameter: &GenerateUploadUriParameter,
    ) -> Result<GenerateUploadUriResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/generateUploadUri",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(generate_upload_uri_parameter);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_vhds(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        name: &str,
    ) -> Result<ResponseWithContinuationLabVhd> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/listVhds",
            &configuration.base_path, subscription_id, resource_group_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod artifact_source {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        artifact_source: &ArtifactSource,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(artifact_source);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        artifact_source: &ArtifactSource,
    ) -> Result<ArtifactSource> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(artifact_source);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod artifact {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationArtifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        name: &str,
    ) -> Result<Artifact> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, artifact_source_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn generate_arm_template(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        artifact_source_name: &str,
        name: &str,
        generate_arm_template_request: &GenerateArmTemplateRequest,
    ) -> Result<ArmTemplateInfo> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/artifactsources/{}/artifacts/{}/generateArmTemplate" , & configuration . base_path , subscription_id , resource_group_name , lab_name , artifact_source_name , name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(generate_arm_template_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod cost_insight {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationCostInsight> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costinsights",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CostInsight> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costinsights/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn refresh_data(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costinsights/{}/refreshData",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod cost {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationCost> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costs",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<Cost> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costs/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn refresh_data(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/costs/{}/refreshData",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod custom_image {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationCustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        custom_image: &CustomImage,
    ) -> Result<CustomImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(custom_image);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod formula {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationFormula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<Formula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        formula: &Formula,
    ) -> Result<Formula> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(formula);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/formulas/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod gallery_image {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationGalleryImage> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/galleryimages",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policy_set {
    use crate::{models::*, *};
    pub async fn evaluate_policies(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        evaluate_policies_request: &EvaluatePoliciesRequest,
    ) -> Result<EvaluatePoliciesResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/evaluatePolicies",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(evaluate_policies_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod policy {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationPolicy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
        policy: &Policy,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(policy);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
        policy: &Policy,
    ) -> Result<Policy> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(policy);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        policy_set_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/policysets/{}/policies/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, policy_set_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod schedule {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationSchedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        schedule: &Schedule,
    ) -> Result<Schedule> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(schedule);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn execute(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/schedules/{}/execute",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod virtual_machine {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationLabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        lab_virtual_machine: &LabVirtualMachine,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        lab_virtual_machine: &LabVirtualMachine,
    ) -> Result<LabVirtualMachine> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(lab_virtual_machine);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn apply_artifacts(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        apply_artifacts_request: &ApplyArtifactsRequest,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/applyArtifacts",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(apply_artifacts_request);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn start(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/start",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn stop(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualmachines/{}/stop",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod virtual_network {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        filter: Option<&str>,
        top: Option<i64>,
        order_by: Option<&str>,
    ) -> Result<ResponseWithContinuationVirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks",
            &configuration.base_path, subscription_id, resource_group_name, lab_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(order_by) = order_by {
            req_builder = req_builder.query(&[("$orderBy", order_by)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        virtual_network: &VirtualNetwork,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(virtual_network);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn patch_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
        virtual_network: &VirtualNetwork,
    ) -> Result<VirtualNetwork> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(virtual_network);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete_resource(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
        lab_name: &str,
        name: &str,
    ) -> Result<CloudError> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/virtualnetworks/{}",
            &configuration.base_path, subscription_id, resource_group_name, lab_name, name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
