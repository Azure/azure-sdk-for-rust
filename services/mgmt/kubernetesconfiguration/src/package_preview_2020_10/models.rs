#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SystemData {
    #[serde(rename = "createdBy", skip_serializing)]
    pub created_by: Option<String>,
    #[serde(rename = "createdByType", skip_serializing)]
    pub created_by_type: Option<String>,
    #[serde(rename = "createdAt", skip_serializing)]
    pub created_at: Option<String>,
    #[serde(rename = "lastModifiedBy", skip_serializing)]
    pub last_modified_by: Option<String>,
    #[serde(rename = "lastModifiedByType", skip_serializing)]
    pub last_modified_by_type: Option<String>,
    #[serde(rename = "lastModifiedAt", skip_serializing)]
    pub last_modified_at: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProxyResource {
    #[serde(flatten)]
    pub resource: Resource,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Result {
    #[serde(rename = "sampleProperty", skip_serializing_if = "Option::is_none")]
    pub sample_property: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing)]
    pub error: Option<ErrorDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDefinition {
    pub code: String,
    pub message: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComplianceStatus {
    #[serde(rename = "complianceState", skip_serializing)]
    pub compliance_state: Option<compliance_status::ComplianceState>,
    #[serde(rename = "lastConfigApplied", skip_serializing_if = "Option::is_none")]
    pub last_config_applied: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "messageLevel", skip_serializing_if = "Option::is_none")]
    pub message_level: Option<compliance_status::MessageLevel>,
}
pub mod compliance_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ComplianceState {
        Pending,
        Compliant,
        Noncompliant,
        Installed,
        Failed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MessageLevel {
        Error,
        Warning,
        Information,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChartVersion {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChartValues {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HelmOperatorProperties {
    #[serde(rename = "chartVersion", skip_serializing_if = "Option::is_none")]
    pub chart_version: Option<ChartVersion>,
    #[serde(rename = "chartValues", skip_serializing_if = "Option::is_none")]
    pub chart_values: Option<ChartValues>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationProtectedSettings {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OperatorTypeDefinition {
    Flux,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OperatorScopeDefinition {
    #[serde(rename = "cluster")]
    Cluster,
    #[serde(rename = "namespace")]
    Namespace,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum EnableHelmOperatorDefinition {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceControlConfiguration {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<source_control_configuration::Properties>,
}
pub mod source_control_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Properties {
        #[serde(rename = "repositoryUrl", skip_serializing_if = "Option::is_none")]
        pub repository_url: Option<String>,
        #[serde(rename = "operatorNamespace", skip_serializing_if = "Option::is_none")]
        pub operator_namespace: Option<String>,
        #[serde(rename = "operatorInstanceName", skip_serializing_if = "Option::is_none")]
        pub operator_instance_name: Option<String>,
        #[serde(rename = "operatorType", skip_serializing_if = "Option::is_none")]
        pub operator_type: Option<OperatorTypeDefinition>,
        #[serde(rename = "operatorParams", skip_serializing_if = "Option::is_none")]
        pub operator_params: Option<String>,
        #[serde(rename = "configurationProtectedSettings", skip_serializing_if = "Option::is_none")]
        pub configuration_protected_settings: Option<ConfigurationProtectedSettings>,
        #[serde(rename = "operatorScope", skip_serializing_if = "Option::is_none")]
        pub operator_scope: Option<OperatorScopeDefinition>,
        #[serde(rename = "repositoryPublicKey", skip_serializing)]
        pub repository_public_key: Option<String>,
        #[serde(rename = "sshKnownHostsContents", skip_serializing_if = "Option::is_none")]
        pub ssh_known_hosts_contents: Option<String>,
        #[serde(rename = "enableHelmOperator", skip_serializing_if = "Option::is_none")]
        pub enable_helm_operator: Option<EnableHelmOperatorDefinition>,
        #[serde(rename = "helmOperatorProperties", skip_serializing_if = "Option::is_none")]
        pub helm_operator_properties: Option<HelmOperatorProperties>,
        #[serde(rename = "provisioningState", skip_serializing)]
        pub provisioning_state: Option<properties::ProvisioningState>,
        #[serde(rename = "complianceStatus", skip_serializing)]
        pub compliance_status: Option<ComplianceStatus>,
    }
    pub mod properties {
        use super::*;
        #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
        pub enum ProvisioningState {
            Accepted,
            Deleting,
            Running,
            Succeeded,
            Failed,
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceControlConfigurationList {
    #[serde(skip_serializing)]
    pub value: Vec<SourceControlConfiguration>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceProviderOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<resource_provider_operation::Display>,
    #[serde(rename = "isDataAction", skip_serializing)]
    pub is_data_action: Option<bool>,
}
pub mod resource_provider_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceProviderOperationList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ResourceProviderOperation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
