#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationsListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Support/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod services {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<ServicesListResult> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Support/services", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, service_name: &str) -> Result<Service> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Support/services/{}", &configuration.base_path, service_name);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod problem_classifications {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, service_name: &str) -> Result<ProblemClassificationsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Support/services/{}/problemClassifications",
            &configuration.base_path, service_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        service_name: &str,
        problem_classification_name: &str,
    ) -> Result<ProblemClassification> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Support/services/{}/problemClassifications/{}",
            &configuration.base_path, service_name, problem_classification_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod support_tickets {
    use crate::{models::*, *};
    pub async fn check_name_availability(
        configuration: &Configuration,
        check_name_availability_input: &CheckNameAvailabilityInput,
        subscription_id: &str,
    ) -> Result<CheckNameAvailabilityOutput> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/checkNameAvailability",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(check_name_availability_input);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        top: Option<i64>,
        filter: Option<&str>,
        subscription_id: &str,
    ) -> Result<SupportTicketsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, support_ticket_name: &str, subscription_id: &str) -> Result<SupportTicketDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}",
            &configuration.base_path, subscription_id, support_ticket_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        support_ticket_name: &str,
        create_support_ticket_parameters: &SupportTicketDetails,
        subscription_id: &str,
    ) -> Result<SupportTicketDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}",
            &configuration.base_path, subscription_id, support_ticket_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(create_support_ticket_parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        support_ticket_name: &str,
        update_support_ticket: &UpdateSupportTicket,
        subscription_id: &str,
    ) -> Result<SupportTicketDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}",
            &configuration.base_path, subscription_id, support_ticket_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(update_support_ticket);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod communications {
    use crate::{models::*, *};
    pub async fn check_name_availability(
        configuration: &Configuration,
        support_ticket_name: &str,
        check_name_availability_input: &CheckNameAvailabilityInput,
        subscription_id: &str,
    ) -> Result<CheckNameAvailabilityOutput> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}/checkNameAvailability",
            &configuration.base_path, subscription_id, support_ticket_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(check_name_availability_input);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        support_ticket_name: &str,
        top: Option<i64>,
        filter: Option<&str>,
        subscription_id: &str,
    ) -> Result<CommunicationsListResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}/communications",
            &configuration.base_path, subscription_id, support_ticket_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(top) = top {
            req_builder = req_builder.query(&[("$top", top)]);
        }
        if let Some(filter) = filter {
            req_builder = req_builder.query(&[("$filter", filter)]);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        support_ticket_name: &str,
        communication_name: &str,
        subscription_id: &str,
    ) -> Result<CommunicationDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}/communications/{}",
            &configuration.base_path, subscription_id, support_ticket_name, communication_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        support_ticket_name: &str,
        communication_name: &str,
        create_communication_parameters: &CommunicationDetails,
        subscription_id: &str,
    ) -> Result<CommunicationDetails> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Support/supportTickets/{}/communications/{}",
            &configuration.base_path, subscription_id, support_ticket_name, communication_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(create_communication_parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
