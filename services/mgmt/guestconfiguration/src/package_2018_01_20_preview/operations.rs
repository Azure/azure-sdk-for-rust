#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod guest_configuration_assignments {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        resource_group_name: &str,
        guest_configuration_assignment_name: &str,
        subscription_id: &str,
        vm_name: &str,
    ) -> Result<GuestConfigurationAssignment> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachines/{}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{}" , & configuration . base_path , subscription_id , resource_group_name , vm_name , guest_configuration_assignment_name) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create_or_update(
        configuration: &Configuration,
        guest_configuration_assignment_name: &str,
        parameters: &GuestConfigurationAssignment,
        subscription_id: &str,
        resource_group_name: &str,
        vm_name: &str,
    ) -> Result<GuestConfigurationAssignment> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachines/{}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{}" , & configuration . base_path , subscription_id , resource_group_name , vm_name , guest_configuration_assignment_name) ;
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod guest_configuration_assignment_reports {
    use crate::{models::*, *};
    pub async fn list(
        configuration: &Configuration,
        resource_group_name: &str,
        guest_configuration_assignment_name: &str,
        subscription_id: &str,
        vm_name: &str,
    ) -> Result<GuestConfigurationAssignmentReportList> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachines/{}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{}/reports" , & configuration . base_path , subscription_id , resource_group_name , vm_name , guest_configuration_assignment_name) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(
        configuration: &Configuration,
        resource_group_name: &str,
        guest_configuration_assignment_name: &str,
        report_id: &str,
        subscription_id: &str,
        vm_name: &str,
    ) -> Result<GuestConfigurationAssignmentReport> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachines/{}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{}/reports/{}" , & configuration . base_path , subscription_id , resource_group_name , vm_name , guest_configuration_assignment_name , report_id) ;
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.GuestConfiguration/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
