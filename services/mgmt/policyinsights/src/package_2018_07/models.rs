#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyTrackedResourcesQueryResults {
    #[serde(skip_serializing)]
    pub value: Vec<PolicyTrackedResource>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyTrackedResource {
    #[serde(rename = "trackedResourceId", skip_serializing)]
    pub tracked_resource_id: Option<String>,
    #[serde(rename = "policyDetails", skip_serializing_if = "Option::is_none")]
    pub policy_details: Option<PolicyDetails>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<TrackedResourceModificationDetails>,
    #[serde(rename = "lastModifiedBy", skip_serializing_if = "Option::is_none")]
    pub last_modified_by: Option<TrackedResourceModificationDetails>,
    #[serde(rename = "lastUpdateUtc", skip_serializing)]
    pub last_update_utc: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackedResourceModificationDetails {
    #[serde(rename = "policyDetails", skip_serializing_if = "Option::is_none")]
    pub policy_details: Option<PolicyDetails>,
    #[serde(rename = "deploymentId", skip_serializing)]
    pub deployment_id: Option<String>,
    #[serde(rename = "deploymentTime", skip_serializing)]
    pub deployment_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyDetails {
    #[serde(rename = "policyDefinitionId", skip_serializing)]
    pub policy_definition_id: Option<String>,
    #[serde(rename = "policyAssignmentId", skip_serializing)]
    pub policy_assignment_id: Option<String>,
    #[serde(rename = "policyAssignmentDisplayName", skip_serializing)]
    pub policy_assignment_display_name: Option<String>,
    #[serde(rename = "policyAssignmentScope", skip_serializing)]
    pub policy_assignment_scope: Option<String>,
    #[serde(rename = "policySetDefinitionId", skip_serializing)]
    pub policy_set_definition_id: Option<String>,
    #[serde(rename = "policyDefinitionReferenceId", skip_serializing)]
    pub policy_definition_reference_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryFailure {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<query_failure::Error>,
}
pub mod query_failure {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Error {
        #[serde(skip_serializing)]
        pub code: Option<String>,
        #[serde(skip_serializing)]
        pub message: Option<String>,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Remediation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationDeploymentsListResult {
    #[serde(skip_serializing)]
    pub value: Vec<RemediationDeployment>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationDeployment {
    #[serde(rename = "remediatedResourceId", skip_serializing)]
    pub remediated_resource_id: Option<String>,
    #[serde(rename = "deploymentId", skip_serializing)]
    pub deployment_id: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "resourceLocation", skip_serializing)]
    pub resource_location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDefinition>,
    #[serde(rename = "createdOn", skip_serializing)]
    pub created_on: Option<String>,
    #[serde(rename = "lastUpdatedOn", skip_serializing)]
    pub last_updated_on: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Remediation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RemediationProperties>,
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationProperties {
    #[serde(rename = "policyAssignmentId", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_id: Option<String>,
    #[serde(rename = "policyDefinitionReferenceId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_reference_id: Option<String>,
    #[serde(rename = "provisioningState", skip_serializing)]
    pub provisioning_state: Option<String>,
    #[serde(rename = "createdOn", skip_serializing)]
    pub created_on: Option<String>,
    #[serde(rename = "lastUpdatedOn", skip_serializing)]
    pub last_updated_on: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filters: Option<RemediationFilters>,
    #[serde(rename = "deploymentStatus", skip_serializing_if = "Option::is_none")]
    pub deployment_status: Option<RemediationDeploymentSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationFilters {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub locations: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemediationDeploymentSummary {
    #[serde(rename = "totalDeployments", skip_serializing_if = "Option::is_none")]
    pub total_deployments: Option<i64>,
    #[serde(rename = "successfulDeployments", skip_serializing_if = "Option::is_none")]
    pub successful_deployments: Option<i64>,
    #[serde(rename = "failedDeployments", skip_serializing_if = "Option::is_none")]
    pub failed_deployments: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDefinition {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<ErrorDefinition>,
    #[serde(rename = "additionalInfo", skip_serializing)]
    pub additional_info: Vec<TypedErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypedErrorInfo {
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyEventsQueryResults {
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(rename = "@odata.count", skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[serde(rename = "@odata.nextLink", skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<PolicyEvent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyEvent {
    #[serde(rename = "@odata.id", skip_serializing_if = "Option::is_none")]
    pub odata_id: Option<String>,
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "policyAssignmentId", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_id: Option<String>,
    #[serde(rename = "policyDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_id: Option<String>,
    #[serde(rename = "effectiveParameters", skip_serializing_if = "Option::is_none")]
    pub effective_parameters: Option<String>,
    #[serde(rename = "isCompliant", skip_serializing_if = "Option::is_none")]
    pub is_compliant: Option<bool>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    #[serde(rename = "resourceLocation", skip_serializing_if = "Option::is_none")]
    pub resource_location: Option<String>,
    #[serde(rename = "resourceGroup", skip_serializing_if = "Option::is_none")]
    pub resource_group: Option<String>,
    #[serde(rename = "resourceTags", skip_serializing_if = "Option::is_none")]
    pub resource_tags: Option<String>,
    #[serde(rename = "policyAssignmentName", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_name: Option<String>,
    #[serde(rename = "policyAssignmentOwner", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_owner: Option<String>,
    #[serde(rename = "policyAssignmentParameters", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_parameters: Option<String>,
    #[serde(rename = "policyAssignmentScope", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_scope: Option<String>,
    #[serde(rename = "policyDefinitionName", skip_serializing_if = "Option::is_none")]
    pub policy_definition_name: Option<String>,
    #[serde(rename = "policyDefinitionAction", skip_serializing_if = "Option::is_none")]
    pub policy_definition_action: Option<String>,
    #[serde(rename = "policyDefinitionCategory", skip_serializing_if = "Option::is_none")]
    pub policy_definition_category: Option<String>,
    #[serde(rename = "policySetDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_id: Option<String>,
    #[serde(rename = "policySetDefinitionName", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_name: Option<String>,
    #[serde(rename = "policySetDefinitionOwner", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_owner: Option<String>,
    #[serde(rename = "policySetDefinitionCategory", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_category: Option<String>,
    #[serde(rename = "policySetDefinitionParameters", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_parameters: Option<String>,
    #[serde(rename = "managementGroupIds", skip_serializing_if = "Option::is_none")]
    pub management_group_ids: Option<String>,
    #[serde(rename = "policyDefinitionReferenceId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_reference_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "principalOid", skip_serializing_if = "Option::is_none")]
    pub principal_oid: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataDocument {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyStatesQueryResults {
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(rename = "@odata.count", skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[serde(rename = "@odata.nextLink", skip_serializing_if = "Option::is_none")]
    pub odata_next_link: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<PolicyState>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyState {
    #[serde(rename = "@odata.id", skip_serializing_if = "Option::is_none")]
    pub odata_id: Option<String>,
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "policyAssignmentId", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_id: Option<String>,
    #[serde(rename = "policyDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_id: Option<String>,
    #[serde(rename = "effectiveParameters", skip_serializing_if = "Option::is_none")]
    pub effective_parameters: Option<String>,
    #[serde(rename = "isCompliant", skip_serializing_if = "Option::is_none")]
    pub is_compliant: Option<bool>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<String>,
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    #[serde(rename = "resourceLocation", skip_serializing_if = "Option::is_none")]
    pub resource_location: Option<String>,
    #[serde(rename = "resourceGroup", skip_serializing_if = "Option::is_none")]
    pub resource_group: Option<String>,
    #[serde(rename = "resourceTags", skip_serializing_if = "Option::is_none")]
    pub resource_tags: Option<String>,
    #[serde(rename = "policyAssignmentName", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_name: Option<String>,
    #[serde(rename = "policyAssignmentOwner", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_owner: Option<String>,
    #[serde(rename = "policyAssignmentParameters", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_parameters: Option<String>,
    #[serde(rename = "policyAssignmentScope", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_scope: Option<String>,
    #[serde(rename = "policyDefinitionName", skip_serializing_if = "Option::is_none")]
    pub policy_definition_name: Option<String>,
    #[serde(rename = "policyDefinitionAction", skip_serializing_if = "Option::is_none")]
    pub policy_definition_action: Option<String>,
    #[serde(rename = "policyDefinitionCategory", skip_serializing_if = "Option::is_none")]
    pub policy_definition_category: Option<String>,
    #[serde(rename = "policySetDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_id: Option<String>,
    #[serde(rename = "policySetDefinitionName", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_name: Option<String>,
    #[serde(rename = "policySetDefinitionOwner", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_owner: Option<String>,
    #[serde(rename = "policySetDefinitionCategory", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_category: Option<String>,
    #[serde(rename = "policySetDefinitionParameters", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_parameters: Option<String>,
    #[serde(rename = "managementGroupIds", skip_serializing_if = "Option::is_none")]
    pub management_group_ids: Option<String>,
    #[serde(rename = "policyDefinitionReferenceId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_reference_id: Option<String>,
    #[serde(rename = "complianceState", skip_serializing_if = "Option::is_none")]
    pub compliance_state: Option<String>,
    #[serde(rename = "policyEvaluationDetails", skip_serializing_if = "Option::is_none")]
    pub policy_evaluation_details: Option<PolicyEvaluationDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyEvaluationDetails {
    #[serde(rename = "evaluatedExpressions", skip_serializing_if = "Vec::is_empty")]
    pub evaluated_expressions: Vec<ExpressionEvaluationDetails>,
    #[serde(rename = "ifNotExistsDetails", skip_serializing_if = "Option::is_none")]
    pub if_not_exists_details: Option<IfNotExistsEvaluationDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExpressionEvaluationDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "expressionValue", skip_serializing_if = "Option::is_none")]
    pub expression_value: Option<serde_json::Value>,
    #[serde(rename = "targetValue", skip_serializing_if = "Option::is_none")]
    pub target_value: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IfNotExistsEvaluationDetails {
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    #[serde(rename = "totalResources", skip_serializing_if = "Option::is_none")]
    pub total_resources: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummarizeResults {
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(rename = "@odata.count", skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Summary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Summary {
    #[serde(rename = "@odata.id", skip_serializing_if = "Option::is_none")]
    pub odata_id: Option<String>,
    #[serde(rename = "@odata.context", skip_serializing_if = "Option::is_none")]
    pub odata_context: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub results: Option<SummaryResults>,
    #[serde(rename = "policyAssignments", skip_serializing_if = "Vec::is_empty")]
    pub policy_assignments: Vec<PolicyAssignmentSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummaryResults {
    #[serde(rename = "queryResultsUri", skip_serializing_if = "Option::is_none")]
    pub query_results_uri: Option<String>,
    #[serde(rename = "nonCompliantResources", skip_serializing_if = "Option::is_none")]
    pub non_compliant_resources: Option<i32>,
    #[serde(rename = "nonCompliantPolicies", skip_serializing_if = "Option::is_none")]
    pub non_compliant_policies: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyAssignmentSummary {
    #[serde(rename = "policyAssignmentId", skip_serializing_if = "Option::is_none")]
    pub policy_assignment_id: Option<String>,
    #[serde(rename = "policySetDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_set_definition_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub results: Option<SummaryResults>,
    #[serde(rename = "policyDefinitions", skip_serializing_if = "Vec::is_empty")]
    pub policy_definitions: Vec<PolicyDefinitionSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyDefinitionSummary {
    #[serde(rename = "policyDefinitionId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_id: Option<String>,
    #[serde(rename = "policyDefinitionReferenceId", skip_serializing_if = "Option::is_none")]
    pub policy_definition_reference_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub results: Option<SummaryResults>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationsListResults {
    #[serde(rename = "@odata.count", skip_serializing_if = "Option::is_none")]
    pub odata_count: Option<i32>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Operation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing_if = "Option::is_none")]
        pub provider: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub resource: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub operation: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
    }
}
