#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
pub mod policy_events {
    use crate::models::*;
    pub async fn list_query_results_for_management_group(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        management_groups_namespace: &str,
        management_group_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_management_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/{}/managementGroups/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            management_groups_namespace,
            management_group_name,
            policy_events_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_management_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_management_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_management_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_management_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_management_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_management_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_subscription(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_subscription::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            policy_events_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_subscription::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_subscription::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_subscription::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_subscription::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_subscription::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_subscription {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource_group(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_resource_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            resource_group_name,
            policy_events_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_resource_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_resource_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_resource_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        resource_id: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_resource::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            resource_id,
            policy_events_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_resource::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_resource::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_resource {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_policy_set_definition(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_set_definition_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_policy_set_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policySetDefinitions/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_set_definition_name,
            policy_events_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_policy_set_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_policy_set_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_policy_set_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_policy_set_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_policy_set_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_policy_set_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_policy_definition(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_definition_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_policy_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyDefinitions/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_definition_name,
            policy_events_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_policy_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_policy_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_policy_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_policy_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_policy_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_policy_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_subscription_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_subscription_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_assignment_name,
            policy_events_resource
        );
        let mut url = url::Url::parse(url_str)
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(
                    list_query_results_for_subscription_level_policy_assignment::Error::DefaultResponse {
                        status_code,
                        value: rsp_value,
                    },
                )
            }
        }
    }
    pub mod list_query_results_for_subscription_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource_group_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_events_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyEventsQueryResults, list_query_results_for_resource_group_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = & format ! ("{}/subscriptions/{}/resourcegroups/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyEvents/{}/queryResults" , operation_config . base_path () , subscription_id , resource_group_name , authorization_namespace , policy_assignment_name , policy_events_resource) ;
        let mut url = url::Url::parse(url_str)
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyEventsQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(
                    list_query_results_for_resource_group_level_policy_assignment::Error::DefaultResponse {
                        status_code,
                        value: rsp_value,
                    },
                )
            }
        }
    }
    pub mod list_query_results_for_resource_group_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn get_metadata(
        operation_config: &crate::OperationConfig,
        scope: &str,
    ) -> std::result::Result<MetadataDocument, get_metadata::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/{}/providers/Microsoft.PolicyInsights/policyEvents/$metadata",
            operation_config.base_path(),
            scope
        );
        let mut url = url::Url::parse(url_str).map_err(|source| get_metadata::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| get_metadata::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| get_metadata::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| get_metadata::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: MetadataDocument =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
                Err(get_metadata::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_metadata {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
}
pub mod policy_states {
    use crate::models::*;
    pub async fn list_query_results_for_management_group(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        management_groups_namespace: &str,
        management_group_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_management_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/{}/managementGroups/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            management_groups_namespace,
            management_group_name,
            policy_states_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_management_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_management_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_management_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_management_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_management_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_management_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_management_group(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        management_groups_namespace: &str,
        management_group_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_management_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/providers/{}/managementGroups/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            management_groups_namespace,
            management_group_name,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_management_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_management_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_management_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_management_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_management_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_management_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_management_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_subscription(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_subscription::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            policy_states_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_subscription::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_subscription::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_subscription::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_subscription::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_subscription::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_subscription {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_subscription(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_subscription::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            subscription_id,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_subscription::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_subscription::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_subscription::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_subscription::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_subscription::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_subscription::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_subscription {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource_group(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_resource_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            resource_group_name,
            policy_states_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_resource_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_resource_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_resource_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_resource_group(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_resource_group::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            subscription_id,
            resource_group_name,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_resource_group::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_resource_group::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_resource_group::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_resource_group::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_resource_group::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_resource_group::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_resource_group {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        resource_id: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_resource::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            resource_id,
            policy_states_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| list_query_results_for_resource::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| list_query_results_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(list_query_results_for_resource::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_resource {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_resource(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        resource_id: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_resource::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            resource_id,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_resource::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_resource::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_resource::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_resource::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_resource::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_resource::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_resource {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_policy_set_definition(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_set_definition_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_policy_set_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policySetDefinitions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_set_definition_name,
            policy_states_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_policy_set_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_policy_set_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_policy_set_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_policy_set_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_policy_set_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_policy_set_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_policy_set_definition(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_set_definition_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_policy_set_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policySetDefinitions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_set_definition_name,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_policy_set_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_policy_set_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_policy_set_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_policy_set_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_policy_set_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_policy_set_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_policy_set_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_policy_definition(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_definition_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_policy_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyDefinitions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_definition_name,
            policy_states_resource
        );
        let mut url =
            url::Url::parse(url_str).map_err(|source| list_query_results_for_policy_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_policy_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_policy_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_policy_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(list_query_results_for_policy_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list_query_results_for_policy_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_policy_definition(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_definition_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_policy_definition::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyDefinitions/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_definition_name,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str).map_err(|source| summarize_for_policy_definition::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_policy_definition::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_policy_definition::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_policy_definition::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure =
                    serde_json::from_slice(rsp_body).map_err(|source| summarize_for_policy_definition::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Err(summarize_for_policy_definition::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_policy_definition {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_subscription_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_subscription_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_assignment_name,
            policy_states_resource
        );
        let mut url = url::Url::parse(url_str)
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_subscription_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(
                    list_query_results_for_subscription_level_policy_assignment::Error::DefaultResponse {
                        status_code,
                        value: rsp_value,
                    },
                )
            }
        }
    }
    pub mod list_query_results_for_subscription_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_subscription_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_subscription_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/subscriptions/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize",
            operation_config.base_path(),
            subscription_id,
            authorization_namespace,
            policy_assignment_name,
            policy_states_summary_resource
        );
        let mut url = url::Url::parse(url_str)
            .map_err(|source| summarize_for_subscription_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_subscription_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_subscription_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_subscription_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    summarize_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    summarize_for_subscription_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(summarize_for_subscription_level_policy_assignment::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_subscription_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn list_query_results_for_resource_group_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_states_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        orderby: Option<&str>,
        select: Option<&str>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
        apply: Option<&str>,
    ) -> std::result::Result<PolicyStatesQueryResults, list_query_results_for_resource_group_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = & format ! ("{}/subscriptions/{}/resourcegroups/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyStates/{}/queryResults" , operation_config . base_path () , subscription_id , resource_group_name , authorization_namespace , policy_assignment_name , policy_states_resource) ;
        let mut url = url::Url::parse(url_str)
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(orderby) = orderby {
            url.query_pairs_mut().append_pair("$orderby", orderby);
        }
        if let Some(select) = select {
            url.query_pairs_mut().append_pair("$select", select);
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        if let Some(apply) = apply {
            url.query_pairs_mut().append_pair("$apply", apply);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list_query_results_for_resource_group_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: PolicyStatesQueryResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    list_query_results_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(
                    list_query_results_for_resource_group_level_policy_assignment::Error::DefaultResponse {
                        status_code,
                        value: rsp_value,
                    },
                )
            }
        }
    }
    pub mod list_query_results_for_resource_group_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn summarize_for_resource_group_level_policy_assignment(
        operation_config: &crate::OperationConfig,
        policy_states_summary_resource: &str,
        subscription_id: &str,
        resource_group_name: &str,
        authorization_namespace: &str,
        policy_assignment_name: &str,
        top: Option<i32>,
        from: Option<&str>,
        to: Option<&str>,
        filter: Option<&str>,
    ) -> std::result::Result<SummarizeResults, summarize_for_resource_group_level_policy_assignment::Error> {
        let http_client = operation_config.http_client();
        let url_str = & format ! ("{}/subscriptions/{}/resourcegroups/{}/providers/{}/policyAssignments/{}/providers/Microsoft.PolicyInsights/policyStates/{}/summarize" , operation_config . base_path () , subscription_id , resource_group_name , authorization_namespace , policy_assignment_name , policy_states_summary_resource) ;
        let mut url = url::Url::parse(url_str)
            .map_err(|source| summarize_for_resource_group_level_policy_assignment::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| summarize_for_resource_group_level_policy_assignment::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        if let Some(top) = top {
            url.query_pairs_mut().append_pair("$top", top.to_string().as_str());
        }
        if let Some(from) = from {
            url.query_pairs_mut().append_pair("$from", from);
        }
        if let Some(to) = to {
            url.query_pairs_mut().append_pair("$to", to);
        }
        if let Some(filter) = filter {
            url.query_pairs_mut().append_pair("$filter", filter);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| summarize_for_resource_group_level_policy_assignment::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| summarize_for_resource_group_level_policy_assignment::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SummarizeResults = serde_json::from_slice(rsp_body).map_err(|source| {
                    summarize_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| {
                    summarize_for_resource_group_level_policy_assignment::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    }
                })?;
                Err(summarize_for_resource_group_level_policy_assignment::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod summarize_for_resource_group_level_policy_assignment {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
    pub async fn get_metadata(
        operation_config: &crate::OperationConfig,
        scope: &str,
    ) -> std::result::Result<MetadataDocument, get_metadata::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/{}/providers/Microsoft.PolicyInsights/policyStates/$metadata",
            operation_config.base_path(),
            scope
        );
        let mut url = url::Url::parse(url_str).map_err(|source| get_metadata::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| get_metadata::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| get_metadata::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| get_metadata::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: MetadataDocument =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
                Err(get_metadata::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_metadata {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
}
pub mod operations {
    use crate::models::*;
    pub async fn list(operation_config: &crate::OperationConfig) -> std::result::Result<OperationsListResults, list::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/providers/Microsoft.PolicyInsights/operations", operation_config.base_path(),);
        let mut url = url::Url::parse(url_str).map_err(|source| list::Error::ParseUrlError { source })?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(|source| list::Error::GetTokenError { source })?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder
            .body(req_body)
            .map_err(|source| list::Error::BuildRequestError { source })?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(|source| list::Error::ExecuteRequestError { source })?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: OperationsListResults =
                    serde_json::from_slice(rsp_body).map_err(|source| list::Error::DeserializeError {
                        source,
                        body: rsp_body.clone(),
                    })?;
                Ok(rsp_value)
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: QueryFailure = serde_json::from_slice(rsp_body).map_err(|source| list::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
                Err(list::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod list {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::QueryFailure,
            },
            #[error("Failed to parse request URL: {}", source)]
            ParseUrlError { source: url::ParseError },
            #[error("Failed to build request: {}", source)]
            BuildRequestError { source: http::Error },
            #[error("Failed to execute request: {}", source)]
            ExecuteRequestError { source: azure_core::errors::HttpError },
            #[error("Failed to serialize request body: {}", source)]
            SerializeError { source: serde_json::Error },
            #[error("Failed to deserialize response body: {}", source)]
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            #[error("Failed to get access token: {}", source)]
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
}
