#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountCredentialDetails {
    #[serde(rename = "accountName", skip_serializing)]
    pub account_name: Option<String>,
    #[serde(rename = "dataDestinationType", skip_serializing)]
    pub data_destination_type: Option<account_credential_details::DataDestinationType>,
    #[serde(rename = "accountConnectionString", skip_serializing)]
    pub account_connection_string: Option<String>,
    #[serde(rename = "shareCredentialDetails", skip_serializing)]
    pub share_credential_details: Vec<ShareCredentialDetails>,
}
pub mod account_credential_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataDestinationType {
        StorageAccount,
        ManagedDisk,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressValidationOutput {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AddressValidationProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressValidationProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(rename = "validationStatus", skip_serializing)]
    pub validation_status: Option<address_validation_properties::ValidationStatus>,
    #[serde(rename = "alternateAddresses", skip_serializing)]
    pub alternate_addresses: Vec<ShippingAddress>,
}
pub mod address_validation_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ValidationStatus {
        Valid,
        Invalid,
        Ambiguous,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplianceNetworkConfiguration {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "macAddress", skip_serializing)]
    pub mac_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArmBaseObject {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableSkuRequest {
    #[serde(rename = "transferType")]
    pub transfer_type: available_sku_request::TransferType,
    pub country: String,
    pub location: String,
    #[serde(rename = "skuNames", skip_serializing_if = "Vec::is_empty")]
    pub sku_names: Vec<String>,
}
pub mod available_sku_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransferType {
        ImportToAzure,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableSkusResult {
    #[serde(skip_serializing)]
    pub value: Vec<SkuInformation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CancellationReason {
    pub reason: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContactDetails {
    #[serde(rename = "contactName")]
    pub contact_name: String,
    pub phone: String,
    #[serde(rename = "phoneExtension", skip_serializing_if = "Option::is_none")]
    pub phone_extension: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mobile: Option<String>,
    #[serde(rename = "emailList")]
    pub email_list: Vec<String>,
    #[serde(rename = "notificationPreference", skip_serializing_if = "Vec::is_empty")]
    pub notification_preference: Vec<NotificationPreference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyLogDetails {
    #[serde(rename = "copyLogDetailsType")]
    pub copy_log_details_type: copy_log_details::CopyLogDetailsType,
}
pub mod copy_log_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CopyLogDetailsType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyProgress {
    #[serde(rename = "storageAccountName", skip_serializing)]
    pub storage_account_name: Option<String>,
    #[serde(rename = "dataDestinationType", skip_serializing)]
    pub data_destination_type: Option<copy_progress::DataDestinationType>,
    #[serde(rename = "accountId", skip_serializing)]
    pub account_id: Option<String>,
    #[serde(rename = "bytesSentToCloud", skip_serializing)]
    pub bytes_sent_to_cloud: Option<i64>,
    #[serde(rename = "totalBytesToProcess", skip_serializing)]
    pub total_bytes_to_process: Option<i64>,
    #[serde(rename = "filesProcessed", skip_serializing)]
    pub files_processed: Option<i64>,
    #[serde(rename = "totalFilesToProcess", skip_serializing)]
    pub total_files_to_process: Option<i64>,
    #[serde(rename = "invalidFilesProcessed", skip_serializing)]
    pub invalid_files_processed: Option<i64>,
    #[serde(rename = "invalidFileBytesUploaded", skip_serializing)]
    pub invalid_file_bytes_uploaded: Option<i64>,
    #[serde(rename = "renamedContainerCount", skip_serializing)]
    pub renamed_container_count: Option<i64>,
    #[serde(rename = "filesErroredOut", skip_serializing)]
    pub files_errored_out: Option<i64>,
}
pub mod copy_progress {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataDestinationType {
        StorageAccount,
        ManagedDisk,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateOrderLimitForSubscriptionValidationRequest {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
    #[serde(rename = "deviceType")]
    pub device_type: create_order_limit_for_subscription_validation_request::DeviceType,
}
pub mod create_order_limit_for_subscription_validation_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateOrderLimitForSubscriptionValidationResponseProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(skip_serializing)]
    pub status: Option<create_order_limit_for_subscription_validation_response_properties::Status>,
}
pub mod create_order_limit_for_subscription_validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Valid,
        Invalid,
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxAccountCopyLogDetails {
    #[serde(flatten)]
    pub copy_log_details: CopyLogDetails,
    #[serde(rename = "accountName", skip_serializing)]
    pub account_name: Option<String>,
    #[serde(rename = "copyLogLink", skip_serializing)]
    pub copy_log_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxDiskCopyLogDetails {
    #[serde(flatten)]
    pub copy_log_details: CopyLogDetails,
    #[serde(rename = "diskSerialNumber", skip_serializing)]
    pub disk_serial_number: Option<String>,
    #[serde(rename = "errorLogLink", skip_serializing)]
    pub error_log_link: Option<String>,
    #[serde(rename = "verboseLogLink", skip_serializing)]
    pub verbose_log_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxDiskCopyProgress {
    #[serde(rename = "serialNumber", skip_serializing)]
    pub serial_number: Option<String>,
    #[serde(rename = "bytesCopied", skip_serializing)]
    pub bytes_copied: Option<i64>,
    #[serde(rename = "percentComplete", skip_serializing)]
    pub percent_complete: Option<i32>,
    #[serde(skip_serializing)]
    pub status: Option<data_box_disk_copy_progress::Status>,
}
pub mod data_box_disk_copy_progress {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        NotStarted,
        InProgress,
        Completed,
        CompletedWithErrors,
        Failed,
        NotReturned,
        HardwareError,
        DeviceFormatted,
        DeviceMetadataModified,
        StorageAccountNotAccessible,
        UnsupportedData,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxDiskJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "preferredDisks", skip_serializing_if = "Option::is_none")]
    pub preferred_disks: Option<serde_json::Value>,
    #[serde(rename = "copyProgress", skip_serializing)]
    pub copy_progress: Vec<DataBoxDiskCopyProgress>,
    #[serde(rename = "disksAndSizeDetails", skip_serializing)]
    pub disks_and_size_details: Option<serde_json::Value>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub passkey: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxDiskJobSecrets {
    #[serde(flatten)]
    pub job_secrets: JobSecrets,
    #[serde(rename = "diskSecrets", skip_serializing)]
    pub disk_secrets: Vec<DiskSecret>,
    #[serde(rename = "passKey", skip_serializing)]
    pub pass_key: Option<String>,
    #[serde(rename = "isPasskeyUserDefined", skip_serializing)]
    pub is_passkey_user_defined: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxHeavyAccountCopyLogDetails {
    #[serde(flatten)]
    pub copy_log_details: CopyLogDetails,
    #[serde(rename = "accountName", skip_serializing)]
    pub account_name: Option<String>,
    #[serde(rename = "copyLogLink", skip_serializing)]
    pub copy_log_link: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxHeavyJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "copyProgress", skip_serializing)]
    pub copy_progress: Vec<CopyProgress>,
    #[serde(rename = "devicePassword", skip_serializing_if = "Option::is_none")]
    pub device_password: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxHeavyJobSecrets {
    #[serde(flatten)]
    pub job_secrets: JobSecrets,
    #[serde(rename = "cabinetPodSecrets", skip_serializing)]
    pub cabinet_pod_secrets: Vec<DataBoxHeavySecret>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxHeavySecret {
    #[serde(rename = "deviceSerialNumber", skip_serializing)]
    pub device_serial_number: Option<String>,
    #[serde(rename = "devicePassword", skip_serializing)]
    pub device_password: Option<String>,
    #[serde(rename = "networkConfigurations", skip_serializing)]
    pub network_configurations: Vec<ApplianceNetworkConfiguration>,
    #[serde(rename = "encodedValidationCertPubKey", skip_serializing)]
    pub encoded_validation_cert_pub_key: Option<String>,
    #[serde(rename = "accountCredentialDetails", skip_serializing)]
    pub account_credential_details: Vec<AccountCredentialDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxJobDetails {
    #[serde(flatten)]
    pub job_details: JobDetails,
    #[serde(rename = "copyProgress", skip_serializing)]
    pub copy_progress: Vec<CopyProgress>,
    #[serde(rename = "devicePassword", skip_serializing_if = "Option::is_none")]
    pub device_password: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataboxJobSecrets {
    #[serde(flatten)]
    pub job_secrets: JobSecrets,
    #[serde(rename = "podSecrets", skip_serializing_if = "Vec::is_empty")]
    pub pod_secrets: Vec<DataBoxSecret>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxScheduleAvailabilityRequest {
    #[serde(flatten)]
    pub schedule_availability_request: ScheduleAvailabilityRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataBoxSecret {
    #[serde(rename = "deviceSerialNumber", skip_serializing)]
    pub device_serial_number: Option<String>,
    #[serde(rename = "devicePassword", skip_serializing)]
    pub device_password: Option<String>,
    #[serde(rename = "networkConfigurations", skip_serializing)]
    pub network_configurations: Vec<ApplianceNetworkConfiguration>,
    #[serde(rename = "encodedValidationCertPubKey", skip_serializing)]
    pub encoded_validation_cert_pub_key: Option<String>,
    #[serde(rename = "accountCredentialDetails", skip_serializing)]
    pub account_credential_details: Vec<AccountCredentialDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDestinationDetailsValidationRequest {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
    #[serde(rename = "destinationAccountDetails")]
    pub destination_account_details: Vec<DestinationAccountDetails>,
    pub location: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataDestinationDetailsValidationResponseProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(skip_serializing)]
    pub status: Option<data_destination_details_validation_response_properties::Status>,
}
pub mod data_destination_details_validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Valid,
        Invalid,
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DcAccessSecurityCode {
    #[serde(rename = "forwardDcAccessCode", skip_serializing_if = "Option::is_none")]
    pub forward_dc_access_code: Option<String>,
    #[serde(rename = "reverseDcAccessCode", skip_serializing_if = "Option::is_none")]
    pub reverse_dc_access_code: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationAccountDetails {
    #[serde(rename = "dataDestinationType")]
    pub data_destination_type: destination_account_details::DataDestinationType,
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "sharePassword", skip_serializing_if = "Option::is_none")]
    pub share_password: Option<String>,
}
pub mod destination_account_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataDestinationType {
        StorageAccount,
        ManagedDisk,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationManagedDiskDetails {
    #[serde(flatten)]
    pub destination_account_details: DestinationAccountDetails,
    #[serde(rename = "resourceGroupId")]
    pub resource_group_id: String,
    #[serde(rename = "stagingStorageAccountId")]
    pub staging_storage_account_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationStorageAccountDetails {
    #[serde(flatten)]
    pub destination_account_details: DestinationAccountDetails,
    #[serde(rename = "storageAccountId")]
    pub storage_account_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationToServiceLocationMap {
    #[serde(rename = "destinationLocation", skip_serializing)]
    pub destination_location: Option<String>,
    #[serde(rename = "serviceLocation", skip_serializing)]
    pub service_location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskScheduleAvailabilityRequest {
    #[serde(flatten)]
    pub schedule_availability_request: ScheduleAvailabilityRequest,
    #[serde(rename = "expectedDataSizeInTerabytes")]
    pub expected_data_size_in_terabytes: i32,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiskSecret {
    #[serde(rename = "diskSerialNumber", skip_serializing)]
    pub disk_serial_number: Option<String>,
    #[serde(rename = "bitLockerKey", skip_serializing)]
    pub bit_locker_key: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Error {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HeavyScheduleAvailabilityRequest {
    #[serde(flatten)]
    pub schedule_availability_request: ScheduleAvailabilityRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobDeliveryInfo {
    #[serde(rename = "scheduledDateTime", skip_serializing_if = "Option::is_none")]
    pub scheduled_date_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobDetails {
    #[serde(rename = "expectedDataSizeInTerabytes", skip_serializing_if = "Option::is_none")]
    pub expected_data_size_in_terabytes: Option<i32>,
    #[serde(rename = "jobStages", skip_serializing)]
    pub job_stages: Vec<JobStages>,
    #[serde(rename = "contactDetails")]
    pub contact_details: ContactDetails,
    #[serde(rename = "shippingAddress")]
    pub shipping_address: ShippingAddress,
    #[serde(rename = "deliveryPackage", skip_serializing_if = "Option::is_none")]
    pub delivery_package: Option<PackageShippingDetails>,
    #[serde(rename = "returnPackage", skip_serializing_if = "Option::is_none")]
    pub return_package: Option<PackageShippingDetails>,
    #[serde(rename = "destinationAccountDetails")]
    pub destination_account_details: Vec<DestinationAccountDetails>,
    #[serde(rename = "errorDetails", skip_serializing)]
    pub error_details: Vec<JobErrorDetails>,
    #[serde(rename = "jobDetailsType")]
    pub job_details_type: job_details::JobDetailsType,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferences: Option<Preferences>,
    #[serde(rename = "copyLogDetails", skip_serializing)]
    pub copy_log_details: Vec<CopyLogDetails>,
    #[serde(rename = "reverseShipmentLabelSasKey", skip_serializing)]
    pub reverse_shipment_label_sas_key: Option<String>,
    #[serde(rename = "chainOfCustodySasKey", skip_serializing)]
    pub chain_of_custody_sas_key: Option<String>,
}
pub mod job_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobDetailsType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobErrorDetails {
    #[serde(rename = "errorMessage", skip_serializing)]
    pub error_message: Option<String>,
    #[serde(rename = "errorCode", skip_serializing)]
    pub error_code: Option<i32>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(rename = "exceptionMessage", skip_serializing)]
    pub exception_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[serde(rename = "isCancellable", skip_serializing)]
    pub is_cancellable: Option<bool>,
    #[serde(rename = "isDeletable", skip_serializing)]
    pub is_deletable: Option<bool>,
    #[serde(rename = "isShippingAddressEditable", skip_serializing)]
    pub is_shipping_address_editable: Option<bool>,
    #[serde(skip_serializing)]
    pub status: Option<job_properties::Status>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<JobDetails>,
    #[serde(rename = "cancellationReason", skip_serializing)]
    pub cancellation_reason: Option<String>,
    #[serde(rename = "deliveryType", skip_serializing_if = "Option::is_none")]
    pub delivery_type: Option<job_properties::DeliveryType>,
    #[serde(rename = "deliveryInfo", skip_serializing_if = "Option::is_none")]
    pub delivery_info: Option<JobDeliveryInfo>,
    #[serde(rename = "isCancellableWithoutFee", skip_serializing)]
    pub is_cancellable_without_fee: Option<bool>,
}
pub mod job_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        DeviceOrdered,
        DevicePrepared,
        Dispatched,
        Delivered,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
        Completed,
        CompletedWithErrors,
        Cancelled,
        #[serde(rename = "Failed_IssueReportedAtCustomer")]
        FailedIssueReportedAtCustomer,
        #[serde(rename = "Failed_IssueDetectedAtAzureDC")]
        FailedIssueDetectedAtAzureDc,
        Aborted,
        CompletedWithWarnings,
        #[serde(rename = "ReadyToDispatchFromAzureDC")]
        ReadyToDispatchFromAzureDc,
        #[serde(rename = "ReadyToReceiveAtAzureDC")]
        ReadyToReceiveAtAzureDc,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeliveryType {
        NonScheduled,
        Scheduled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobResource {
    #[serde(flatten)]
    pub resource: Resource,
    pub properties: JobProperties,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobResourceList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<JobResource>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobResourceUpdateParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<UpdateJobProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobSecrets {
    #[serde(rename = "jobSecretsType")]
    pub job_secrets_type: job_secrets::JobSecretsType,
    #[serde(rename = "dcAccessSecurityCode", skip_serializing_if = "Option::is_none")]
    pub dc_access_security_code: Option<DcAccessSecurityCode>,
}
pub mod job_secrets {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobSecretsType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobStages {
    #[serde(rename = "stageName", skip_serializing)]
    pub stage_name: Option<job_stages::StageName>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "stageStatus", skip_serializing)]
    pub stage_status: Option<job_stages::StageStatus>,
    #[serde(rename = "stageTime", skip_serializing)]
    pub stage_time: Option<String>,
    #[serde(rename = "jobStageDetails", skip_serializing)]
    pub job_stage_details: Option<serde_json::Value>,
    #[serde(rename = "errorDetails", skip_serializing)]
    pub error_details: Vec<JobErrorDetails>,
}
pub mod job_stages {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageName {
        DeviceOrdered,
        DevicePrepared,
        Dispatched,
        Delivered,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
        Completed,
        CompletedWithErrors,
        Cancelled,
        #[serde(rename = "Failed_IssueReportedAtCustomer")]
        FailedIssueReportedAtCustomer,
        #[serde(rename = "Failed_IssueDetectedAtAzureDC")]
        FailedIssueDetectedAtAzureDc,
        Aborted,
        CompletedWithWarnings,
        #[serde(rename = "ReadyToDispatchFromAzureDC")]
        ReadyToDispatchFromAzureDc,
        #[serde(rename = "ReadyToReceiveAtAzureDC")]
        ReadyToReceiveAtAzureDc,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageStatus {
        None,
        InProgress,
        Succeeded,
        Failed,
        Cancelled,
        Cancelling,
        SucceededWithErrors,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationPreference {
    #[serde(rename = "stageName")]
    pub stage_name: notification_preference::StageName,
    #[serde(rename = "sendNotification")]
    pub send_notification: bool,
}
pub mod notification_preference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageName {
        DevicePrepared,
        Dispatched,
        Delivered,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<OperationDisplay>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OperationProperties>,
    #[serde(skip_serializing)]
    pub origin: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationDisplay {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationList {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationProperties {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageShippingDetails {
    #[serde(rename = "carrierName", skip_serializing)]
    pub carrier_name: Option<String>,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(rename = "trackingUrl", skip_serializing)]
    pub tracking_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Preferences {
    #[serde(rename = "preferredDataCenterRegion", skip_serializing_if = "Vec::is_empty")]
    pub preferred_data_center_region: Vec<String>,
    #[serde(rename = "transportPreferences", skip_serializing_if = "Option::is_none")]
    pub transport_preferences: Option<TransportPreferences>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PreferencesValidationRequest {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preference: Option<Preferences>,
    #[serde(rename = "deviceType")]
    pub device_type: preferences_validation_request::DeviceType,
}
pub mod preferences_validation_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PreferencesValidationResponseProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(skip_serializing)]
    pub status: Option<preferences_validation_response_properties::Status>,
}
pub mod preferences_validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Valid,
        Invalid,
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegionConfigurationRequest {
    #[serde(rename = "scheduleAvailabilityRequest", skip_serializing_if = "Option::is_none")]
    pub schedule_availability_request: Option<ScheduleAvailabilityRequest>,
    #[serde(rename = "transportAvailabilityRequest", skip_serializing_if = "Option::is_none")]
    pub transport_availability_request: Option<TransportAvailabilityRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegionConfigurationResponse {
    #[serde(rename = "scheduleAvailabilityResponse", skip_serializing_if = "Option::is_none")]
    pub schedule_availability_response: Option<ScheduleAvailabilityResponse>,
    #[serde(rename = "transportAvailabilityResponse", skip_serializing_if = "Option::is_none")]
    pub transport_availability_response: Option<TransportAvailabilityResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    pub location: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    pub sku: Sku,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleAvailabilityRequest {
    #[serde(rename = "storageLocation")]
    pub storage_location: String,
    #[serde(rename = "skuName")]
    pub sku_name: schedule_availability_request::SkuName,
}
pub mod schedule_availability_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SkuName {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleAvailabilityResponse {
    #[serde(rename = "availableDates", skip_serializing)]
    pub available_dates: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareCredentialDetails {
    #[serde(rename = "shareName", skip_serializing)]
    pub share_name: Option<String>,
    #[serde(rename = "shareType", skip_serializing)]
    pub share_type: Option<share_credential_details::ShareType>,
    #[serde(rename = "userName", skip_serializing)]
    pub user_name: Option<String>,
    #[serde(skip_serializing)]
    pub password: Option<String>,
    #[serde(rename = "supportedAccessProtocols", skip_serializing)]
    pub supported_access_protocols: Vec<String>,
}
pub mod share_credential_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShareType {
        UnknownType,
        #[serde(rename = "HCS")]
        Hcs,
        BlockBlob,
        PageBlob,
        AzureFile,
        ManagedDisk,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShipmentPickUpRequest {
    #[serde(rename = "startTime")]
    pub start_time: String,
    #[serde(rename = "endTime")]
    pub end_time: String,
    #[serde(rename = "shipmentLocation")]
    pub shipment_location: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShipmentPickUpResponse {
    #[serde(rename = "confirmationNumber", skip_serializing)]
    pub confirmation_number: Option<String>,
    #[serde(rename = "readyByTime", skip_serializing)]
    pub ready_by_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingAddress {
    #[serde(rename = "streetAddress1")]
    pub street_address1: String,
    #[serde(rename = "streetAddress2", skip_serializing_if = "Option::is_none")]
    pub street_address2: Option<String>,
    #[serde(rename = "streetAddress3", skip_serializing_if = "Option::is_none")]
    pub street_address3: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "stateOrProvince", skip_serializing_if = "Option::is_none")]
    pub state_or_province: Option<String>,
    pub country: String,
    #[serde(rename = "postalCode")]
    pub postal_code: String,
    #[serde(rename = "zipExtendedCode", skip_serializing_if = "Option::is_none")]
    pub zip_extended_code: Option<String>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "addressType", skip_serializing_if = "Option::is_none")]
    pub address_type: Option<shipping_address::AddressType>,
}
pub mod shipping_address {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AddressType {
        None,
        Residential,
        Commercial,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sku {
    pub name: sku::Name,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,
}
pub mod sku {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Name {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuAvailabilityValidationRequest {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
    #[serde(rename = "deviceType")]
    pub device_type: sku_availability_validation_request::DeviceType,
    #[serde(rename = "transferType")]
    pub transfer_type: sku_availability_validation_request::TransferType,
    pub country: String,
    pub location: String,
}
pub mod sku_availability_validation_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TransferType {
        ImportToAzure,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuAvailabilityValidationResponseProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(skip_serializing)]
    pub status: Option<sku_availability_validation_response_properties::Status>,
}
pub mod sku_availability_validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Valid,
        Invalid,
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuCapacity {
    #[serde(skip_serializing)]
    pub usable: Option<String>,
    #[serde(skip_serializing)]
    pub maximum: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuCost {
    #[serde(rename = "meterId", skip_serializing)]
    pub meter_id: Option<String>,
    #[serde(rename = "meterType", skip_serializing)]
    pub meter_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuInformation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,
    #[serde(skip_serializing)]
    pub enabled: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SkuProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SkuProperties {
    #[serde(rename = "destinationToServiceLocationMap", skip_serializing)]
    pub destination_to_service_location_map: Vec<DestinationToServiceLocationMap>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<SkuCapacity>,
    #[serde(skip_serializing)]
    pub costs: Vec<SkuCost>,
    #[serde(rename = "apiVersions", skip_serializing)]
    pub api_versions: Vec<String>,
    #[serde(rename = "disabledReason", skip_serializing)]
    pub disabled_reason: Option<sku_properties::DisabledReason>,
    #[serde(rename = "disabledReasonMessage", skip_serializing)]
    pub disabled_reason_message: Option<String>,
    #[serde(rename = "requiredFeature", skip_serializing)]
    pub required_feature: Option<String>,
}
pub mod sku_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DisabledReason {
        None,
        Country,
        Region,
        Feature,
        OfferType,
        NoSubscriptionInfo,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionIsAllowedToCreateJobValidationRequest {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionIsAllowedToCreateJobValidationResponseProperties {
    #[serde(flatten)]
    pub validation_input_response: ValidationInputResponse,
    #[serde(skip_serializing)]
    pub status: Option<subscription_is_allowed_to_create_job_validation_response_properties::Status>,
}
pub mod subscription_is_allowed_to_create_job_validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        Valid,
        Invalid,
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportAvailabilityRequest {
    #[serde(rename = "skuName", skip_serializing_if = "Option::is_none")]
    pub sku_name: Option<transport_availability_request::SkuName>,
}
pub mod transport_availability_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SkuName {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportAvailabilityResponse {
    #[serde(rename = "transportAvailabilityDetails", skip_serializing)]
    pub transport_availability_details: Vec<TransportAvailabilityDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportAvailabilityDetails {
    #[serde(rename = "shipmentType", skip_serializing)]
    pub shipment_type: Option<transport_availability_details::ShipmentType>,
}
pub mod transport_availability_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ShipmentType {
        CustomerManaged,
        MicrosoftManaged,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportPreferences {
    #[serde(rename = "preferredShipmentType")]
    pub preferred_shipment_type: transport_preferences::PreferredShipmentType,
}
pub mod transport_preferences {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PreferredShipmentType {
        CustomerManaged,
        MicrosoftManaged,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnencryptedCredentials {
    #[serde(rename = "jobName", skip_serializing)]
    pub job_name: Option<String>,
    #[serde(rename = "jobSecrets", skip_serializing_if = "Option::is_none")]
    pub job_secrets: Option<JobSecrets>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UnencryptedCredentialsList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<UnencryptedCredentials>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateJobDetails {
    #[serde(rename = "contactDetails", skip_serializing_if = "Option::is_none")]
    pub contact_details: Option<ContactDetails>,
    #[serde(rename = "shippingAddress", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<ShippingAddress>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateJobProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<UpdateJobDetails>,
    #[serde(rename = "destinationAccountDetails", skip_serializing_if = "Vec::is_empty")]
    pub destination_account_details: Vec<DestinationAccountDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateAddress {
    #[serde(flatten)]
    pub validation_input_request: ValidationInputRequest,
    #[serde(rename = "shippingAddress")]
    pub shipping_address: ShippingAddress,
    #[serde(rename = "deviceType")]
    pub device_type: validate_address::DeviceType,
    #[serde(rename = "transportPreferences", skip_serializing_if = "Option::is_none")]
    pub transport_preferences: Option<TransportPreferences>,
}
pub mod validate_address {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceType {
        DataBox,
        DataBoxDisk,
        DataBoxHeavy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationInputRequest {
    #[serde(rename = "validationType")]
    pub validation_type: validation_input_request::ValidationType,
}
pub mod validation_input_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ValidationType {
        ValidateAddress,
        ValidateDataDestinationDetails,
        ValidateSubscriptionIsAllowedToCreateJob,
        ValidatePreferences,
        ValidateCreateOrderLimit,
        ValidateSkuAvailability,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationInputResponse {
    #[serde(rename = "validationType")]
    pub validation_type: validation_input_response::ValidationType,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
}
pub mod validation_input_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ValidationType {
        ValidateAddress,
        ValidateDataDestinationDetails,
        ValidateSubscriptionIsAllowedToCreateJob,
        ValidatePreferences,
        ValidateCreateOrderLimit,
        ValidateSkuAvailability,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationRequest {
    #[serde(rename = "individualRequestDetails")]
    pub individual_request_details: Vec<ValidationInputRequest>,
    #[serde(rename = "validationCategory")]
    pub validation_category: validation_request::ValidationCategory,
}
pub mod validation_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ValidationCategory {
        JobCreationValidation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateJobValidations {
    #[serde(flatten)]
    pub validation_request: ValidationRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ValidationResponseProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationResponseProperties {
    #[serde(skip_serializing)]
    pub status: Option<validation_response_properties::Status>,
    #[serde(rename = "individualResponseDetails", skip_serializing)]
    pub individual_response_details: Vec<ValidationInputResponse>,
}
pub mod validation_response_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        AllValidToProceed,
        InputsRevisitRequired,
        CertainInputValidationsSkipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudError {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<CloudError>,
}
