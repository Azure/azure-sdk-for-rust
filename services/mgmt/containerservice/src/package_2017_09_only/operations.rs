#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
use reqwest::StatusCode;
use snafu::{ResultExt, Snafu};
pub mod container_services {
    use crate::models::*;
    use reqwest::StatusCode;
    use snafu::{ResultExt, Snafu};
    pub async fn list_orchestrators(
        operation_config: &crate::OperationConfig,
        subscription_id: &str,
        location: &str,
        resource_type: Option<&str>,
    ) -> std::result::Result<OrchestratorVersionProfileListResult, list_orchestrators::Error> {
        let client = &operation_config.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.ContainerService/locations/{}/orchestrators",
            &operation_config.base_path, subscription_id, location
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token_credential) = &operation_config.token_credential {
            let token_response = token_credential
                .get_token(&operation_config.token_credential_resource)
                .await
                .context(list_orchestrators::GetTokenError)?;
            req_builder = req_builder.bearer_auth(token_response.token.secret());
        }
        req_builder = req_builder.query(&[("api-version", &operation_config.api_version)]);
        if let Some(resource_type) = resource_type {
            req_builder = req_builder.query(&[("resource-type", resource_type)]);
        }
        let req = req_builder.build().context(list_orchestrators::BuildRequestError)?;
        let rsp = client.execute(req).await.context(list_orchestrators::ExecuteRequestError)?;
        match rsp.status() {
            StatusCode::OK => {
                let body: bytes::Bytes = rsp.bytes().await.context(list_orchestrators::ResponseBytesError)?;
                let rsp_value: OrchestratorVersionProfileListResult =
                    serde_json::from_slice(&body).context(list_orchestrators::DeserializeError { body })?;
                Ok(rsp_value)
            }
            status_code => {
                let body: bytes::Bytes = rsp.bytes().await.context(list_orchestrators::ResponseBytesError)?;
                list_orchestrators::UnexpectedResponse { status_code, body: body }.fail()
            }
        }
    }
    pub mod list_orchestrators {
        use crate::{models, models::*};
        use reqwest::StatusCode;
        use snafu::Snafu;
        #[derive(Debug, Snafu)]
        #[snafu(visibility(pub(crate)))]
        pub enum Error {
            UnexpectedResponse { status_code: StatusCode, body: bytes::Bytes },
            BuildRequestError { source: reqwest::Error },
            ExecuteRequestError { source: reqwest::Error },
            ResponseBytesError { source: reqwest::Error },
            DeserializeError { source: serde_json::Error, body: bytes::Bytes },
            GetTokenError { source: azure_core::errors::AzureError },
        }
    }
}
