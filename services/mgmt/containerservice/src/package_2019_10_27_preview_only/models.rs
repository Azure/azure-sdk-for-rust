#![doc = "generated by AutoRust"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[doc = "An error response from the Container service."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CloudError {
    #[doc = "An error response from the Container service."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<CloudErrorBody>,
}
impl CloudError {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "An error response from the Container service."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct CloudErrorBody {
    #[doc = "An identifier for the error. Codes are invariant and are intended to be consumed programmatically."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[doc = "A message describing the error, intended to be suitable for display in a user interface."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[doc = "The target of the particular error. For example, the name of the property in error."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[doc = "A list of additional details about the error."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<CloudErrorBody>,
}
impl CloudErrorBody {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Represents the OpenShift networking configuration"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct NetworkProfile {
    #[doc = "CIDR for the OpenShift Vnet."]
    #[serde(rename = "vnetCidr", default, skip_serializing_if = "Option::is_none")]
    pub vnet_cidr: Option<String>,
    #[doc = "CIDR of subnet used to create PLS needed for management of the cluster"]
    #[serde(rename = "managementSubnetCidr", default, skip_serializing_if = "Option::is_none")]
    pub management_subnet_cidr: Option<String>,
    #[doc = "ID of the Vnet created for OSA cluster."]
    #[serde(rename = "vnetId", default, skip_serializing_if = "Option::is_none")]
    pub vnet_id: Option<String>,
}
impl NetworkProfile {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OsType {
    Linux,
    Windows,
}
impl Default for OsType {
    fn default() -> Self {
        Self::Linux
    }
}
#[doc = "Defines further properties on the API."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftApiProperties {
    #[doc = "Specifies if API server is public or private."]
    #[serde(rename = "privateApiServer", default, skip_serializing_if = "Option::is_none")]
    pub private_api_server: Option<bool>,
}
impl OpenShiftApiProperties {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "OpenShiftAgentPoolProfileRole represents the role of the AgentPoolProfile."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OpenShiftAgentPoolProfileRole {
    #[serde(rename = "compute")]
    Compute,
    #[serde(rename = "infra")]
    Infra,
}
#[doc = "Size of OpenShift VMs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum OpenShiftContainerServiceVmSize {
    #[serde(rename = "Standard_D2s_v3")]
    StandardD2sV3,
    #[serde(rename = "Standard_D4s_v3")]
    StandardD4sV3,
    #[serde(rename = "Standard_D8s_v3")]
    StandardD8sV3,
    #[serde(rename = "Standard_D16s_v3")]
    StandardD16sV3,
    #[serde(rename = "Standard_D32s_v3")]
    StandardD32sV3,
    #[serde(rename = "Standard_D64s_v3")]
    StandardD64sV3,
    #[serde(rename = "Standard_DS4_v2")]
    StandardDs4V2,
    #[serde(rename = "Standard_DS5_v2")]
    StandardDs5V2,
    #[serde(rename = "Standard_F8s_v2")]
    StandardF8sV2,
    #[serde(rename = "Standard_F16s_v2")]
    StandardF16sV2,
    #[serde(rename = "Standard_F32s_v2")]
    StandardF32sV2,
    #[serde(rename = "Standard_F64s_v2")]
    StandardF64sV2,
    #[serde(rename = "Standard_F72s_v2")]
    StandardF72sV2,
    #[serde(rename = "Standard_F8s")]
    StandardF8s,
    #[serde(rename = "Standard_F16s")]
    StandardF16s,
    #[serde(rename = "Standard_E4s_v3")]
    StandardE4sV3,
    #[serde(rename = "Standard_E8s_v3")]
    StandardE8sV3,
    #[serde(rename = "Standard_E16s_v3")]
    StandardE16sV3,
    #[serde(rename = "Standard_E20s_v3")]
    StandardE20sV3,
    #[serde(rename = "Standard_E32s_v3")]
    StandardE32sV3,
    #[serde(rename = "Standard_E64s_v3")]
    StandardE64sV3,
    #[serde(rename = "Standard_GS2")]
    StandardGs2,
    #[serde(rename = "Standard_GS3")]
    StandardGs3,
    #[serde(rename = "Standard_GS4")]
    StandardGs4,
    #[serde(rename = "Standard_GS5")]
    StandardGs5,
    #[serde(rename = "Standard_DS12_v2")]
    StandardDs12V2,
    #[serde(rename = "Standard_DS13_v2")]
    StandardDs13V2,
    #[serde(rename = "Standard_DS14_v2")]
    StandardDs14V2,
    #[serde(rename = "Standard_DS15_v2")]
    StandardDs15V2,
    #[serde(rename = "Standard_L4s")]
    StandardL4s,
    #[serde(rename = "Standard_L8s")]
    StandardL8s,
    #[serde(rename = "Standard_L16s")]
    StandardL16s,
    #[serde(rename = "Standard_L32s")]
    StandardL32s,
}
#[doc = "OpenShift Managed cluster."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedCluster {
    #[serde(flatten)]
    pub resource: Resource,
    #[doc = "Used for establishing the purchase context of any 3rd Party artifact through MarketPlace."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<PurchasePlan>,
    #[doc = "Properties of the OpenShift managed cluster."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OpenShiftManagedClusterProperties>,
}
impl OpenShiftManagedCluster {
    pub fn new(resource: Resource) -> Self {
        Self {
            resource,
            plan: None,
            properties: None,
        }
    }
}
#[doc = "Defines the Identity provider for MS AAD."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedClusterAadIdentityProvider {
    #[serde(flatten)]
    pub open_shift_managed_cluster_base_identity_provider: OpenShiftManagedClusterBaseIdentityProvider,
    #[doc = "The clientId password associated with the provider."]
    #[serde(rename = "clientId", default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[doc = "The secret password associated with the provider."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[doc = "The tenantId associated with the provider."]
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[doc = "The groupId to be granted cluster admin role."]
    #[serde(rename = "customerAdminGroupId", default, skip_serializing_if = "Option::is_none")]
    pub customer_admin_group_id: Option<String>,
}
impl OpenShiftManagedClusterAadIdentityProvider {
    pub fn new(open_shift_managed_cluster_base_identity_provider: OpenShiftManagedClusterBaseIdentityProvider) -> Self {
        Self {
            open_shift_managed_cluster_base_identity_provider,
            client_id: None,
            secret: None,
            tenant_id: None,
            customer_admin_group_id: None,
        }
    }
}
#[doc = "Defines the configuration of the OpenShift cluster VMs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedClusterAgentPoolProfile {
    #[doc = "Unique name of the pool profile in the context of the subscription and resource group."]
    pub name: String,
    #[doc = "Number of agents (VMs) to host docker containers."]
    pub count: i32,
    #[doc = "Size of OpenShift VMs."]
    #[serde(rename = "vmSize")]
    pub vm_size: OpenShiftContainerServiceVmSize,
    #[doc = "Subnet CIDR for the peering."]
    #[serde(rename = "subnetCidr", default, skip_serializing_if = "Option::is_none")]
    pub subnet_cidr: Option<String>,
    #[doc = "OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux."]
    #[serde(rename = "osType", default, skip_serializing_if = "Option::is_none")]
    pub os_type: Option<OsType>,
    #[doc = "OpenShiftAgentPoolProfileRole represents the role of the AgentPoolProfile."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<OpenShiftAgentPoolProfileRole>,
}
impl OpenShiftManagedClusterAgentPoolProfile {
    pub fn new(name: String, count: i32, vm_size: OpenShiftContainerServiceVmSize) -> Self {
        Self {
            name,
            count,
            vm_size,
            subnet_cidr: None,
            os_type: None,
            role: None,
        }
    }
}
#[doc = "Defines all possible authentication profiles for the OpenShift cluster."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftManagedClusterAuthProfile {
    #[doc = "Type of authentication profile to use."]
    #[serde(rename = "identityProviders", default, skip_serializing_if = "Vec::is_empty")]
    pub identity_providers: Vec<OpenShiftManagedClusterIdentityProvider>,
}
impl OpenShiftManagedClusterAuthProfile {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Structure for any Identity provider."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedClusterBaseIdentityProvider {
    #[doc = "The kind of the provider."]
    pub kind: String,
}
impl OpenShiftManagedClusterBaseIdentityProvider {
    pub fn new(kind: String) -> Self {
        Self { kind }
    }
}
#[doc = "Defines the configuration of the identity providers to be used in the OpenShift cluster."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftManagedClusterIdentityProvider {
    #[doc = "Name of the provider."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "Structure for any Identity provider."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<OpenShiftManagedClusterBaseIdentityProvider>,
}
impl OpenShiftManagedClusterIdentityProvider {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The response from the List OpenShift Managed Clusters operation."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftManagedClusterListResult {
    #[doc = "The list of OpenShift managed clusters."]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<OpenShiftManagedCluster>,
    #[doc = "The URL to get the next set of OpenShift managed cluster results."]
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
impl OpenShiftManagedClusterListResult {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "OpenShiftManagedClusterMaterPoolProfile contains configuration for OpenShift master VMs."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedClusterMasterPoolProfile {
    #[doc = "Number of masters (VMs) to host docker containers. The default value is 3."]
    pub count: i32,
    #[doc = "Size of OpenShift VMs."]
    #[serde(rename = "vmSize")]
    pub vm_size: OpenShiftContainerServiceVmSize,
    #[doc = "Subnet CIDR for the peering."]
    #[serde(rename = "subnetCidr", default, skip_serializing_if = "Option::is_none")]
    pub subnet_cidr: Option<String>,
    #[doc = "Defines further properties on the API."]
    #[serde(rename = "apiProperties", default, skip_serializing_if = "Option::is_none")]
    pub api_properties: Option<OpenShiftApiProperties>,
}
impl OpenShiftManagedClusterMasterPoolProfile {
    pub fn new(count: i32, vm_size: OpenShiftContainerServiceVmSize) -> Self {
        Self {
            count,
            vm_size,
            subnet_cidr: None,
            api_properties: None,
        }
    }
}
#[doc = "Defines the configuration for Log Analytics integration."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftManagedClusterMonitorProfile {
    #[doc = "Azure Resource Manager Resource ID for the Log Analytics workspace to integrate with."]
    #[serde(rename = "workspaceResourceID", default, skip_serializing_if = "Option::is_none")]
    pub workspace_resource_id: Option<String>,
    #[doc = "If the Log analytics integration should be turned on or off"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}
impl OpenShiftManagedClusterMonitorProfile {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Properties of the OpenShift managed cluster."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenShiftManagedClusterProperties {
    #[doc = "The current deployment or provisioning state, which only appears in the response."]
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[doc = "Version of OpenShift specified when creating the cluster."]
    #[serde(rename = "openShiftVersion")]
    pub open_shift_version: String,
    #[doc = "Version of OpenShift specified when creating the cluster."]
    #[serde(rename = "clusterVersion", default, skip_serializing_if = "Option::is_none")]
    pub cluster_version: Option<String>,
    #[doc = "Service generated FQDN or private IP for OpenShift API server."]
    #[serde(rename = "publicHostname", default, skip_serializing_if = "Option::is_none")]
    pub public_hostname: Option<String>,
    #[doc = "Service generated FQDN for OpenShift API server loadbalancer internal hostname."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[doc = "Represents the OpenShift networking configuration"]
    #[serde(rename = "networkProfile", default, skip_serializing_if = "Option::is_none")]
    pub network_profile: Option<NetworkProfile>,
    #[doc = "Configuration for OpenShift router(s)."]
    #[serde(rename = "routerProfiles", default, skip_serializing_if = "Vec::is_empty")]
    pub router_profiles: Vec<OpenShiftRouterProfile>,
    #[doc = "OpenShiftManagedClusterMaterPoolProfile contains configuration for OpenShift master VMs."]
    #[serde(rename = "masterPoolProfile", default, skip_serializing_if = "Option::is_none")]
    pub master_pool_profile: Option<OpenShiftManagedClusterMasterPoolProfile>,
    #[doc = "Configuration of OpenShift cluster VMs."]
    #[serde(rename = "agentPoolProfiles", default, skip_serializing_if = "Vec::is_empty")]
    pub agent_pool_profiles: Vec<OpenShiftManagedClusterAgentPoolProfile>,
    #[doc = "Defines all possible authentication profiles for the OpenShift cluster."]
    #[serde(rename = "authProfile", default, skip_serializing_if = "Option::is_none")]
    pub auth_profile: Option<OpenShiftManagedClusterAuthProfile>,
    #[doc = "Defines the configuration for Log Analytics integration."]
    #[serde(rename = "monitorProfile", default, skip_serializing_if = "Option::is_none")]
    pub monitor_profile: Option<OpenShiftManagedClusterMonitorProfile>,
    #[doc = "Allows node rotation"]
    #[serde(rename = "refreshCluster", default, skip_serializing_if = "Option::is_none")]
    pub refresh_cluster: Option<bool>,
}
impl OpenShiftManagedClusterProperties {
    pub fn new(open_shift_version: String) -> Self {
        Self {
            provisioning_state: None,
            open_shift_version,
            cluster_version: None,
            public_hostname: None,
            fqdn: None,
            network_profile: None,
            router_profiles: Vec::new(),
            master_pool_profile: None,
            agent_pool_profiles: Vec::new(),
            auth_profile: None,
            monitor_profile: None,
            refresh_cluster: None,
        }
    }
}
#[doc = "Represents an OpenShift router"]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct OpenShiftRouterProfile {
    #[doc = "Name of the router profile."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "DNS subdomain for OpenShift router."]
    #[serde(rename = "publicSubdomain", default, skip_serializing_if = "Option::is_none")]
    pub public_subdomain: Option<String>,
    #[doc = "Auto-allocated FQDN for the OpenShift router."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
}
impl OpenShiftRouterProfile {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "Used for establishing the purchase context of any 3rd Party artifact through MarketPlace."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct PurchasePlan {
    #[doc = "The plan ID."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub product: Option<String>,
    #[doc = "The promotion code."]
    #[serde(rename = "promotionCode", default, skip_serializing_if = "Option::is_none")]
    pub promotion_code: Option<String>,
    #[doc = "The plan ID."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
}
impl PurchasePlan {
    pub fn new() -> Self {
        Self::default()
    }
}
#[doc = "The Resource model definition."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[doc = "Resource Id"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = "Resource name"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "Resource type"]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = "Resource location"]
    pub location: String,
    #[doc = "Resource tags"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
impl Resource {
    pub fn new(location: String) -> Self {
        Self {
            id: None,
            name: None,
            type_: None,
            location,
            tags: None,
        }
    }
}
#[doc = "Tags object for patch operations."]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct TagsObject {
    #[doc = "Resource tags."]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
impl TagsObject {
    pub fn new() -> Self {
        Self::default()
    }
}
