#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub async fn get_catalog(configuration: &Configuration, subscription_id: &str) -> Result<Vec<Catalog>> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Capacity/catalogs",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn get_applied_reservation_list(configuration: &Configuration, subscription_id: &str) -> Result<AppliedReservations> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.Capacity/appliedReservations",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub mod reservation_order {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<ReservationOrderList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Capacity/reservationOrders", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, reservation_order_id: &str) -> Result<ReservationOrderResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}",
            &configuration.base_path, reservation_order_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod reservation {
    use crate::{models::*, *};
    pub async fn split(configuration: &Configuration, reservation_order_id: &str, body: &SplitRequest) -> Result<Vec<ReservationResponse>> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/split",
            &configuration.base_path, reservation_order_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn merge(configuration: &Configuration, reservation_order_id: &str, body: &MergeRequest) -> Result<Vec<ReservationResponse>> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/merge",
            &configuration.base_path, reservation_order_id
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(body);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(configuration: &Configuration, reservation_order_id: &str) -> Result<ReservationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/reservations",
            &configuration.base_path, reservation_order_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn get(configuration: &Configuration, reservation_id: &str, reservation_order_id: &str) -> Result<ReservationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/reservations/{}",
            &configuration.base_path, reservation_order_id, reservation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        reservation_order_id: &str,
        reservation_id: &str,
        parameters: &Patch,
    ) -> Result<ReservationResponse> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/reservations/{}",
            &configuration.base_path, reservation_order_id, reservation_id
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        req_builder = req_builder.json(parameters);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_revisions(
        configuration: &Configuration,
        reservation_id: &str,
        reservation_order_id: &str,
    ) -> Result<ReservationList> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/providers/Microsoft.Capacity/reservationOrders/{}/reservations/{}/revisions",
            &configuration.base_path, reservation_order_id, reservation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operation {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<OperationList> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Capacity/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
