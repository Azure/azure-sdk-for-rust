#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Object {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVCluster {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<HyperVClusterProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVClusterProperties {
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "functionalLevel", skip_serializing)]
    pub functional_level: Option<i32>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(rename = "hostFqdnList", skip_serializing_if = "Vec::is_empty")]
    pub host_fqdn_list: Vec<String>,
    #[serde(skip_serializing)]
    pub errors: Vec<HealthErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthErrorDetails {
    #[serde(skip_serializing)]
    pub id: Option<i64>,
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing)]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(skip_serializing)]
    pub severity: Option<String>,
    #[serde(rename = "summaryMessage", skip_serializing)]
    pub summary_message: Option<String>,
    #[serde(skip_serializing)]
    pub source: Option<String>,
    #[serde(rename = "messageParameters", skip_serializing)]
    pub message_parameters: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVClusterCollection {
    #[serde(skip_serializing)]
    pub value: Vec<HyperVCluster>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVHost {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<HyperVHostProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVHostProperties {
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(skip_serializing)]
    pub errors: Vec<HealthErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVHostCollection {
    #[serde(skip_serializing)]
    pub value: Vec<HyperVHost>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVJob {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobProperties {
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "clientRequestId", skip_serializing)]
    pub client_request_id: Option<String>,
    #[serde(rename = "activityId", skip_serializing)]
    pub activity_id: Option<String>,
    #[serde(skip_serializing)]
    pub errors: Vec<ErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetails {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(rename = "possibleCauses", skip_serializing)]
    pub possible_causes: Option<String>,
    #[serde(rename = "recommendedAction", skip_serializing)]
    pub recommended_action: Option<String>,
    #[serde(skip_serializing)]
    pub severity: Option<String>,
    #[serde(rename = "isAgentReportedError", skip_serializing)]
    pub is_agent_reported_error: Option<bool>,
    #[serde(rename = "agentErrorCode", skip_serializing)]
    pub agent_error_code: Option<String>,
    #[serde(rename = "agentErrorMessage", skip_serializing)]
    pub agent_error_message: Option<String>,
    #[serde(rename = "agentErrorPossibleCauses", skip_serializing)]
    pub agent_error_possible_causes: Option<String>,
    #[serde(rename = "agentErrorRecommendedAction", skip_serializing)]
    pub agent_error_recommended_action: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVJobCollection {
    #[serde(skip_serializing)]
    pub value: Vec<HyperVJob>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVMachine {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<HyperVMachineProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVMachineProperties {
    #[serde(rename = "hostFqdn", skip_serializing)]
    pub host_fqdn: Option<String>,
    #[serde(rename = "hostId", skip_serializing)]
    pub host_id: Option<String>,
    #[serde(rename = "clusterFqdn", skip_serializing)]
    pub cluster_fqdn: Option<String>,
    #[serde(rename = "clusterId", skip_serializing)]
    pub cluster_id: Option<String>,
    #[serde(rename = "managementServerType", skip_serializing)]
    pub management_server_type: Option<String>,
    #[serde(skip_serializing)]
    pub generation: Option<i32>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "highAvailability", skip_serializing)]
    pub high_availability: Option<hyper_v_machine_properties::HighAvailability>,
    #[serde(rename = "maxMemoryMB", skip_serializing)]
    pub max_memory_mb: Option<i32>,
    #[serde(skip_serializing)]
    pub firmware: Option<String>,
    #[serde(rename = "isDynamicMemoryEnabled", skip_serializing)]
    pub is_dynamic_memory_enabled: Option<bool>,
    #[serde(skip_serializing)]
    pub disks: Vec<HyperVDisk>,
    #[serde(rename = "appsAndRoles", skip_serializing_if = "Option::is_none")]
    pub apps_and_roles: Option<AppsAndRoles>,
    #[serde(rename = "networkAdapters", skip_serializing)]
    pub network_adapters: Vec<HyperVNetworkAdapter>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "numberOfProcessorCore", skip_serializing)]
    pub number_of_processor_core: Option<i32>,
    #[serde(rename = "allocatedMemoryInMB", skip_serializing)]
    pub allocated_memory_in_mb: Option<f64>,
    #[serde(rename = "vmConfigurationFileLocation", skip_serializing)]
    pub vm_configuration_file_location: Option<String>,
    #[serde(rename = "operatingSystemDetails", skip_serializing_if = "Option::is_none")]
    pub operating_system_details: Option<OperatingSystem>,
    #[serde(rename = "guestOSDetails", skip_serializing_if = "Option::is_none")]
    pub guest_os_details: Option<GuestOsDetails>,
    #[serde(rename = "numberOfApplications", skip_serializing)]
    pub number_of_applications: Option<i32>,
    #[serde(rename = "guestDetailsDiscoveryTimestamp", skip_serializing)]
    pub guest_details_discovery_timestamp: Option<String>,
    #[serde(rename = "isGuestDetailsDiscoveryInProgress", skip_serializing)]
    pub is_guest_details_discovery_in_progress: Option<bool>,
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
    #[serde(rename = "instanceUuid", skip_serializing)]
    pub instance_uuid: Option<String>,
    #[serde(rename = "powerStatus", skip_serializing)]
    pub power_status: Option<String>,
    #[serde(rename = "biosSerialNumber", skip_serializing)]
    pub bios_serial_number: Option<String>,
    #[serde(rename = "biosGuid", skip_serializing)]
    pub bios_guid: Option<String>,
    #[serde(rename = "vmFqdn", skip_serializing)]
    pub vm_fqdn: Option<String>,
    #[serde(rename = "isDeleted", skip_serializing)]
    pub is_deleted: Option<bool>,
    #[serde(skip_serializing)]
    pub errors: Vec<HealthErrorDetails>,
}
pub mod hyper_v_machine_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HighAvailability {
        Unknown,
        No,
        Yes,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVDisk {
    #[serde(rename = "instanceId", skip_serializing)]
    pub instance_id: Option<String>,
    #[serde(rename = "vhdId", skip_serializing)]
    pub vhd_id: Option<String>,
    #[serde(rename = "maxSizeInBytes", skip_serializing)]
    pub max_size_in_bytes: Option<i64>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "diskType", skip_serializing)]
    pub disk_type: Option<String>,
    #[serde(skip_serializing)]
    pub lun: Option<i32>,
    #[serde(skip_serializing)]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppsAndRoles {
    #[serde(skip_serializing)]
    pub applications: Vec<Application>,
    #[serde(rename = "webApplications", skip_serializing)]
    pub web_applications: Vec<WebApplication>,
    #[serde(skip_serializing)]
    pub features: Vec<Feature>,
    #[serde(rename = "sqlServers", skip_serializing)]
    pub sql_servers: Vec<SqlServer>,
    #[serde(rename = "sharePointServers", skip_serializing)]
    pub share_point_servers: Vec<SharePointServer>,
    #[serde(rename = "systemCenters", skip_serializing)]
    pub system_centers: Vec<SystemCenter>,
    #[serde(rename = "bizTalkServers", skip_serializing)]
    pub biz_talk_servers: Vec<BizTalkServer>,
    #[serde(rename = "exchangeServers", skip_serializing)]
    pub exchange_servers: Vec<ExchangeServer>,
    #[serde(rename = "otherDatabases", skip_serializing)]
    pub other_databases: Vec<OtherDatabase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVNetworkAdapter {
    #[serde(rename = "networkId", skip_serializing)]
    pub network_id: Option<String>,
    #[serde(rename = "subnetName", skip_serializing)]
    pub subnet_name: Option<String>,
    #[serde(rename = "staticIpAddress", skip_serializing)]
    pub static_ip_address: Option<String>,
    #[serde(rename = "nicType", skip_serializing)]
    pub nic_type: Option<String>,
    #[serde(rename = "nicId", skip_serializing)]
    pub nic_id: Option<String>,
    #[serde(rename = "macAddress", skip_serializing)]
    pub mac_address: Option<String>,
    #[serde(rename = "ipAddressList", skip_serializing)]
    pub ip_address_list: Vec<String>,
    #[serde(rename = "networkName", skip_serializing)]
    pub network_name: Option<String>,
    #[serde(rename = "ipAddressType", skip_serializing)]
    pub ip_address_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperatingSystem {
    #[serde(rename = "osType", skip_serializing)]
    pub os_type: Option<String>,
    #[serde(rename = "osName", skip_serializing)]
    pub os_name: Option<String>,
    #[serde(rename = "osVersion", skip_serializing)]
    pub os_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GuestOsDetails {
    #[serde(rename = "osType", skip_serializing_if = "Option::is_none")]
    pub os_type: Option<String>,
    #[serde(rename = "osName", skip_serializing)]
    pub os_name: Option<String>,
    #[serde(rename = "osVersion", skip_serializing)]
    pub os_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Application {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(skip_serializing)]
    pub provider: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApplication {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(skip_serializing)]
    pub platform: Option<String>,
    #[serde(rename = "groupName", skip_serializing)]
    pub group_name: Option<String>,
    #[serde(rename = "webServer", skip_serializing)]
    pub web_server: Option<String>,
    #[serde(rename = "applicationPool", skip_serializing)]
    pub application_pool: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Feature {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "featureType", skip_serializing)]
    pub feature_type: Option<String>,
    #[serde(skip_serializing)]
    pub parent: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlServer {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub edition: Option<String>,
    #[serde(rename = "servicePack", skip_serializing)]
    pub service_pack: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(skip_serializing)]
    pub clustered: Option<String>,
    #[serde(rename = "clusterName", skip_serializing)]
    pub cluster_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharePointServer {
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(rename = "isEnterprise", skip_serializing)]
    pub is_enterprise: Option<bool>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SystemCenter {
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BizTalkServer {
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExchangeServer {
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(skip_serializing)]
    pub edition: Option<String>,
    #[serde(skip_serializing)]
    pub roles: Option<String>,
    #[serde(rename = "servicePack", skip_serializing)]
    pub service_pack: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OtherDatabase {
    #[serde(rename = "databaseType", skip_serializing)]
    pub database_type: Option<String>,
    #[serde(skip_serializing)]
    pub instance: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVMachineCollection {
    #[serde(skip_serializing)]
    pub value: Vec<HyperVMachine>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationStatus {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing)]
    pub end_time: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<OperationStatusError>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OperationStatusProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationStatusError {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationStatusProperties {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVRunAsAccount {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RunAsAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunAsAccountProperties {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "credentialType", skip_serializing)]
    pub credential_type: Option<run_as_account_properties::CredentialType>,
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
}
pub mod run_as_account_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CredentialType {
        VMwareFabric,
        HyperVFabric,
        LinuxGuest,
        WindowsGuest,
        LinuxServer,
        WindowsServer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVRunAsAccountCollection {
    #[serde(skip_serializing)]
    pub value: Vec<HyperVRunAsAccount>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVSite {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "eTag", skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SiteProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteProperties {
    #[serde(rename = "servicePrincipalIdentityDetails", skip_serializing_if = "Option::is_none")]
    pub service_principal_identity_details: Option<SiteSpnProperties>,
    #[serde(rename = "agentDetails", skip_serializing_if = "Option::is_none")]
    pub agent_details: Option<SiteAgentProperties>,
    #[serde(rename = "serviceEndpoint", skip_serializing)]
    pub service_endpoint: Option<String>,
    #[serde(rename = "discoverySolutionId", skip_serializing_if = "Option::is_none")]
    pub discovery_solution_id: Option<String>,
    #[serde(rename = "applianceName", skip_serializing_if = "Option::is_none")]
    pub appliance_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteSpnProperties {
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "applicationId", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<String>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(rename = "aadAuthority", skip_serializing_if = "Option::is_none")]
    pub aad_authority: Option<String>,
    #[serde(rename = "rawCertData", skip_serializing_if = "Option::is_none")]
    pub raw_cert_data: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteAgentProperties {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "lastHeartBeatUtc", skip_serializing)]
    pub last_heart_beat_utc: Option<String>,
    #[serde(rename = "keyVaultUri", skip_serializing_if = "Option::is_none")]
    pub key_vault_uri: Option<String>,
    #[serde(rename = "keyVaultId", skip_serializing_if = "Option::is_none")]
    pub key_vault_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HyperVSiteUsage {
    #[serde(rename = "machineCount", skip_serializing_if = "Option::is_none")]
    pub machine_count: Option<i32>,
    #[serde(rename = "runAsAccountCount", skip_serializing_if = "Option::is_none")]
    pub run_as_account_count: Option<i32>,
    #[serde(rename = "hostCount", skip_serializing_if = "Option::is_none")]
    pub host_count: Option<i32>,
    #[serde(rename = "clusterCount", skip_serializing_if = "Option::is_none")]
    pub cluster_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteHealthSummaryCollection {
    #[serde(skip_serializing)]
    pub value: Vec<SiteHealthSummary>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteHealthSummary {
    #[serde(rename = "applianceName", skip_serializing)]
    pub appliance_name: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing)]
    pub error_message: Option<String>,
    #[serde(rename = "summaryMessage", skip_serializing)]
    pub summary_message: Option<String>,
    #[serde(rename = "errorId", skip_serializing)]
    pub error_id: Option<i64>,
    #[serde(rename = "errorCode", skip_serializing)]
    pub error_code: Option<String>,
    #[serde(rename = "affectedObjectsCount", skip_serializing_if = "Option::is_none")]
    pub affected_objects_count: Option<i64>,
    #[serde(rename = "hitCount", skip_serializing_if = "Option::is_none")]
    pub hit_count: Option<i64>,
    #[serde(skip_serializing)]
    pub severity: Option<String>,
    #[serde(rename = "remediationGuidance", skip_serializing)]
    pub remediation_guidance: Option<String>,
    #[serde(rename = "affectedResourceType", skip_serializing)]
    pub affected_resource_type: Option<String>,
    #[serde(rename = "affectedResources", skip_serializing_if = "Vec::is_empty")]
    pub affected_resources: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareJob {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<JobProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareJobCollection {
    #[serde(skip_serializing)]
    pub value: Vec<VMwareJob>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareMachine {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VMwareMachineProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareMachineProperties {
    #[serde(rename = "dataCenterScope", skip_serializing)]
    pub data_center_scope: Option<String>,
    #[serde(skip_serializing)]
    pub firmware: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(rename = "vCenterFQDN", skip_serializing)]
    pub v_center_fqdn: Option<String>,
    #[serde(rename = "vCenterId", skip_serializing)]
    pub v_center_id: Option<String>,
    #[serde(rename = "vMwareToolsStatus", skip_serializing)]
    pub v_mware_tools_status: Option<String>,
    #[serde(rename = "changeTrackingSupported", skip_serializing)]
    pub change_tracking_supported: Option<bool>,
    #[serde(rename = "changeTrackingEnabled", skip_serializing)]
    pub change_tracking_enabled: Option<bool>,
    #[serde(rename = "maxSnapshots", skip_serializing)]
    pub max_snapshots: Option<i32>,
    #[serde(skip_serializing)]
    pub disks: Vec<VMwareDisk>,
    #[serde(rename = "appsAndRoles", skip_serializing_if = "Option::is_none")]
    pub apps_and_roles: Option<AppsAndRoles>,
    #[serde(rename = "hostInMaintenanceMode", skip_serializing)]
    pub host_in_maintenance_mode: Option<bool>,
    #[serde(rename = "hostName", skip_serializing)]
    pub host_name: Option<String>,
    #[serde(rename = "hostPowerState", skip_serializing)]
    pub host_power_state: Option<String>,
    #[serde(rename = "hostVersion", skip_serializing)]
    pub host_version: Option<String>,
    #[serde(rename = "networkAdapters", skip_serializing)]
    pub network_adapters: Vec<VMwareNetworkAdapter>,
    #[serde(rename = "dependencyMapping", skip_serializing)]
    pub dependency_mapping: Option<String>,
    #[serde(rename = "dependencyMappingStartTime", skip_serializing)]
    pub dependency_mapping_start_time: Option<String>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "numberOfProcessorCore", skip_serializing)]
    pub number_of_processor_core: Option<i32>,
    #[serde(rename = "allocatedMemoryInMB", skip_serializing)]
    pub allocated_memory_in_mb: Option<f64>,
    #[serde(rename = "vmConfigurationFileLocation", skip_serializing)]
    pub vm_configuration_file_location: Option<String>,
    #[serde(rename = "operatingSystemDetails", skip_serializing_if = "Option::is_none")]
    pub operating_system_details: Option<OperatingSystem>,
    #[serde(rename = "guestOSDetails", skip_serializing_if = "Option::is_none")]
    pub guest_os_details: Option<GuestOsDetails>,
    #[serde(rename = "numberOfApplications", skip_serializing)]
    pub number_of_applications: Option<i32>,
    #[serde(rename = "guestDetailsDiscoveryTimestamp", skip_serializing)]
    pub guest_details_discovery_timestamp: Option<String>,
    #[serde(rename = "isGuestDetailsDiscoveryInProgress", skip_serializing)]
    pub is_guest_details_discovery_in_progress: Option<bool>,
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
    #[serde(rename = "instanceUuid", skip_serializing)]
    pub instance_uuid: Option<String>,
    #[serde(rename = "powerStatus", skip_serializing)]
    pub power_status: Option<String>,
    #[serde(rename = "biosSerialNumber", skip_serializing)]
    pub bios_serial_number: Option<String>,
    #[serde(rename = "biosGuid", skip_serializing)]
    pub bios_guid: Option<String>,
    #[serde(rename = "vmFqdn", skip_serializing)]
    pub vm_fqdn: Option<String>,
    #[serde(rename = "isDeleted", skip_serializing)]
    pub is_deleted: Option<bool>,
    #[serde(skip_serializing)]
    pub errors: Vec<HealthErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareDisk {
    #[serde(skip_serializing)]
    pub uuid: Option<String>,
    #[serde(skip_serializing)]
    pub label: Option<String>,
    #[serde(rename = "diskProvisioningPolicy", skip_serializing)]
    pub disk_provisioning_policy: Option<String>,
    #[serde(rename = "diskScrubbingPolicy", skip_serializing)]
    pub disk_scrubbing_policy: Option<String>,
    #[serde(rename = "diskMode", skip_serializing)]
    pub disk_mode: Option<v_mware_disk::DiskMode>,
    #[serde(rename = "maxSizeInBytes", skip_serializing)]
    pub max_size_in_bytes: Option<i64>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "diskType", skip_serializing)]
    pub disk_type: Option<String>,
    #[serde(skip_serializing)]
    pub lun: Option<i32>,
    #[serde(skip_serializing)]
    pub path: Option<String>,
}
pub mod v_mware_disk {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DiskMode {
        #[serde(rename = "persistent")]
        Persistent,
        #[serde(rename = "independent_persistent")]
        IndependentPersistent,
        #[serde(rename = "independent_nonpersistent")]
        IndependentNonpersistent,
        #[serde(rename = "nonpersistent")]
        Nonpersistent,
        #[serde(rename = "undoable")]
        Undoable,
        #[serde(rename = "append")]
        Append,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareNetworkAdapter {
    #[serde(skip_serializing)]
    pub label: Option<String>,
    #[serde(rename = "nicId", skip_serializing)]
    pub nic_id: Option<String>,
    #[serde(rename = "macAddress", skip_serializing)]
    pub mac_address: Option<String>,
    #[serde(rename = "ipAddressList", skip_serializing)]
    pub ip_address_list: Vec<String>,
    #[serde(rename = "networkName", skip_serializing)]
    pub network_name: Option<String>,
    #[serde(rename = "ipAddressType", skip_serializing)]
    pub ip_address_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareMachineCollection {
    #[serde(skip_serializing)]
    pub value: Vec<VMwareMachine>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareRunAsAccount {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<RunAsAccountProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareRunAsAccountCollection {
    #[serde(skip_serializing)]
    pub value: Vec<VMwareRunAsAccount>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareSite {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "eTag", skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<SiteProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VMwareSiteUsage {
    #[serde(rename = "machineCount", skip_serializing_if = "Option::is_none")]
    pub machine_count: Option<i32>,
    #[serde(rename = "runAsAccountCount", skip_serializing_if = "Option::is_none")]
    pub run_as_account_count: Option<i32>,
    #[serde(rename = "vCenterCount", skip_serializing_if = "Option::is_none")]
    pub v_center_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenter {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VCenterProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenterProperties {
    #[serde(rename = "createdTimestamp", skip_serializing)]
    pub created_timestamp: Option<String>,
    #[serde(rename = "updatedTimestamp", skip_serializing)]
    pub updated_timestamp: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(rename = "runAsAccountId", skip_serializing_if = "Option::is_none")]
    pub run_as_account_id: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "perfStatisticsLevel", skip_serializing)]
    pub perf_statistics_level: Option<String>,
    #[serde(rename = "instanceUuid", skip_serializing)]
    pub instance_uuid: Option<String>,
    #[serde(skip_serializing)]
    pub errors: Vec<HealthErrorDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VCenterCollection {
    #[serde(skip_serializing)]
    pub value: Vec<VCenter>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Machine {
    #[serde(rename = "properties.timestamp", skip_serializing_if = "Option::is_none")]
    pub properties_timestamp: Option<String>,
    #[serde(rename = "properties.monitoringState", skip_serializing_if = "Option::is_none")]
    pub properties_monitoring_state: Option<machine::Properties_monitoringState>,
    #[serde(rename = "properties.virtualizationState", skip_serializing_if = "Option::is_none")]
    pub properties_virtualization_state: Option<machine::Properties_virtualizationState>,
    #[serde(rename = "properties.displayName", skip_serializing_if = "Option::is_none")]
    pub properties_display_name: Option<String>,
    #[serde(rename = "properties.computerName", skip_serializing_if = "Option::is_none")]
    pub properties_computer_name: Option<String>,
    #[serde(rename = "properties.fullyQualifiedDomainName", skip_serializing_if = "Option::is_none")]
    pub properties_fully_qualified_domain_name: Option<String>,
    #[serde(rename = "properties.bootTime", skip_serializing_if = "Option::is_none")]
    pub properties_boot_time: Option<String>,
    #[serde(rename = "properties.timezone", skip_serializing_if = "Option::is_none")]
    pub properties_timezone: Option<Timezone>,
    #[serde(rename = "properties.agent", skip_serializing_if = "Option::is_none")]
    pub properties_agent: Option<AgentConfiguration>,
    #[serde(rename = "properties.resources", skip_serializing_if = "Option::is_none")]
    pub properties_resources: Option<MachineResourcesConfiguration>,
    #[serde(rename = "properties.networking", skip_serializing_if = "Option::is_none")]
    pub properties_networking: Option<NetworkConfiguration>,
    #[serde(rename = "properties.operatingSystem", skip_serializing_if = "Option::is_none")]
    pub properties_operating_system: Option<OperatingSystemConfiguration>,
    #[serde(rename = "properties.virtualMachine", skip_serializing_if = "Option::is_none")]
    pub properties_virtual_machine: Option<VirtualMachineConfiguration>,
    #[serde(rename = "properties.hypervisor", skip_serializing_if = "Option::is_none")]
    pub properties_hypervisor: Option<HypervisorConfiguration>,
    #[serde(rename = "properties.hosting", skip_serializing_if = "Option::is_none")]
    pub properties_hosting: Option<HostingConfiguration>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
pub mod machine {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Properties_monitoringState {
        #[serde(rename = "monitored")]
        Monitored,
        #[serde(rename = "discovered")]
        Discovered,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Properties_virtualizationState {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "physical")]
        Physical,
        #[serde(rename = "virtual")]
        Virtual,
        #[serde(rename = "hypervisor")]
        Hypervisor,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Timezone {
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentConfiguration {
    #[serde(rename = "agentId", skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<String>,
    #[serde(rename = "dependencyAgentId", skip_serializing_if = "Option::is_none")]
    pub dependency_agent_id: Option<String>,
    #[serde(rename = "dependencyAgentVersion", skip_serializing_if = "Option::is_none")]
    pub dependency_agent_version: Option<String>,
    #[serde(rename = "dependencyAgentRevision", skip_serializing_if = "Option::is_none")]
    pub dependency_agent_revision: Option<String>,
    #[serde(rename = "rebootStatus", skip_serializing_if = "Option::is_none")]
    pub reboot_status: Option<agent_configuration::RebootStatus>,
    #[serde(rename = "clockGranularity", skip_serializing_if = "Option::is_none")]
    pub clock_granularity: Option<i32>,
}
pub mod agent_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RebootStatus {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "rebooted")]
        Rebooted,
        #[serde(rename = "notRebooted")]
        NotRebooted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineResourcesConfiguration {
    #[serde(rename = "physicalMemory", skip_serializing_if = "Option::is_none")]
    pub physical_memory: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cpus: Option<i32>,
    #[serde(rename = "cpuSpeed", skip_serializing_if = "Option::is_none")]
    pub cpu_speed: Option<i32>,
    #[serde(rename = "cpuSpeedAccuracy", skip_serializing_if = "Option::is_none")]
    pub cpu_speed_accuracy: Option<machine_resources_configuration::CpuSpeedAccuracy>,
}
pub mod machine_resources_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CpuSpeedAccuracy {
        #[serde(rename = "actual")]
        Actual,
        #[serde(rename = "estimated")]
        Estimated,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkConfiguration {
    #[serde(rename = "ipv4Interfaces", skip_serializing_if = "Vec::is_empty")]
    pub ipv4_interfaces: Vec<Ipv4NetworkInterface>,
    #[serde(rename = "ipv6Interfaces", skip_serializing_if = "Vec::is_empty")]
    pub ipv6_interfaces: Vec<Ipv6NetworkInterface>,
    #[serde(rename = "defaultIpv4Gateways", skip_serializing_if = "Vec::is_empty")]
    pub default_ipv4_gateways: Vec<String>,
    #[serde(rename = "macAddresses", skip_serializing_if = "Vec::is_empty")]
    pub mac_addresses: Vec<String>,
    #[serde(rename = "dnsNames", skip_serializing_if = "Vec::is_empty")]
    pub dns_names: Vec<String>,
    #[serde(rename = "dnsQuestions", skip_serializing_if = "Vec::is_empty")]
    pub dns_questions: Vec<String>,
    #[serde(rename = "dnsCanonicalNames", skip_serializing_if = "Vec::is_empty")]
    pub dns_canonical_names: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperatingSystemConfiguration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<operating_system_configuration::Family>,
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bitness: Option<operating_system_configuration::Bitness>,
}
pub mod operating_system_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Family {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "windows")]
        Windows,
        #[serde(rename = "linux")]
        Linux,
        #[serde(rename = "solaris")]
        Solaris,
        #[serde(rename = "aix")]
        Aix,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Bitness {
        #[serde(rename = "32bit")]
        _32bit,
        #[serde(rename = "64bit")]
        _64bit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineConfiguration {
    #[serde(rename = "virtualMachineType", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_type: Option<virtual_machine_configuration::VirtualMachineType>,
    #[serde(rename = "nativeMachineId", skip_serializing_if = "Option::is_none")]
    pub native_machine_id: Option<String>,
    #[serde(rename = "virtualMachineName", skip_serializing_if = "Option::is_none")]
    pub virtual_machine_name: Option<String>,
    #[serde(rename = "nativeHostMachineId", skip_serializing_if = "Option::is_none")]
    pub native_host_machine_id: Option<String>,
}
pub mod virtual_machine_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VirtualMachineType {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "hyperv")]
        Hyperv,
        #[serde(rename = "ldom")]
        Ldom,
        #[serde(rename = "lpar")]
        Lpar,
        #[serde(rename = "vmware")]
        Vmware,
        #[serde(rename = "virtualPc")]
        VirtualPc,
        #[serde(rename = "xen")]
        Xen,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HypervisorConfiguration {
    #[serde(rename = "hypervisorType", skip_serializing_if = "Option::is_none")]
    pub hypervisor_type: Option<hypervisor_configuration::HypervisorType>,
    #[serde(rename = "nativeHostMachineId", skip_serializing_if = "Option::is_none")]
    pub native_host_machine_id: Option<String>,
}
pub mod hypervisor_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HypervisorType {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "hyperv")]
        Hyperv,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HostingConfiguration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Ipv4NetworkInterface {
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "subnetMask", skip_serializing_if = "Option::is_none")]
    pub subnet_mask: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Ipv6NetworkInterface {
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationDisplay {
    #[serde(skip_serializing)]
    pub provider: Option<String>,
    #[serde(skip_serializing)]
    pub resource: Option<String>,
    #[serde(skip_serializing)]
    pub operation: Option<String>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub display: Option<OperationDisplay>,
    #[serde(skip_serializing)]
    pub origin: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResultList {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
