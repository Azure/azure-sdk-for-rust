#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::{models::*, *};
pub mod blockchain_members {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        blockchain_member_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<BlockchainMember> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        blockchain_member_name: &str,
        blockchain_member: Option<&BlockchainMember>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<BlockchainMember> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(blockchain_member) = blockchain_member {
            req_builder = req_builder.json(blockchain_member);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        blockchain_member_name: &str,
        blockchain_member: Option<&BlockchainMemberUpdate>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<BlockchainMember> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(blockchain_member) = blockchain_member {
            req_builder = req_builder.json(blockchain_member);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        blockchain_member_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<BlockchainMemberCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers",
            &configuration.base_path, subscription_id, resource_group_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_all(configuration: &Configuration, subscription_id: &str) -> Result<BlockchainMemberCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Blockchain/blockchainMembers",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_consortium_members(
        configuration: &Configuration,
        blockchain_member_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<ConsortiumMemberCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/consortiumMembers",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_api_keys(
        configuration: &Configuration,
        blockchain_member_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<ApiKeyCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/listApiKeys",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_regenerate_api_keys(
        configuration: &Configuration,
        blockchain_member_name: &str,
        api_key: Option<&ApiKey>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<ApiKeyCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/regenerateApiKeys",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(api_key) = api_key {
            req_builder = req_builder.json(api_key);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod blockchain_member_operation_results {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        location_name: &str,
        operation_id: &str,
        subscription_id: &str,
    ) -> Result<OperationResult> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Blockchain/locations/{}/blockchainMemberOperationResults/{}",
            &configuration.base_path, subscription_id, location_name, operation_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod locations {
    use crate::{models::*, *};
    pub async fn check_name_availability(
        configuration: &Configuration,
        location_name: &str,
        name_availability_request: Option<&NameAvailabilityRequest>,
        subscription_id: &str,
    ) -> Result<NameAvailability> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Blockchain/locations/{}/checkNameAvailability",
            &configuration.base_path, subscription_id, location_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(name_availability_request) = name_availability_request {
            req_builder = req_builder.json(name_availability_request);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_consortiums(
        configuration: &Configuration,
        location_name: &str,
        subscription_id: &str,
    ) -> Result<ConsortiumCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Blockchain/locations/{}/listConsortiums",
            &configuration.base_path, subscription_id, location_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod operations {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration) -> Result<ResourceProviderOperationCollection> {
        let client = &configuration.client;
        let uri_str = &format!("{}/providers/Microsoft.Blockchain/operations", &configuration.base_path,);
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod skus {
    use crate::{models::*, *};
    pub async fn list(configuration: &Configuration, subscription_id: &str) -> Result<ResourceTypeSkuCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/providers/Microsoft.Blockchain/skus",
            &configuration.base_path, subscription_id
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
pub mod transaction_nodes {
    use crate::{models::*, *};
    pub async fn get(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<TransactionNode> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name, transaction_node_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn create(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        transaction_node: Option<&TransactionNode>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<TransactionNode> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name, transaction_node_name
        );
        let mut req_builder = client.put(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(transaction_node) = transaction_node {
            req_builder = req_builder.json(transaction_node);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn update(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        transaction_node: Option<&TransactionNodeUpdate>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<TransactionNode> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name, transaction_node_name
        );
        let mut req_builder = client.patch(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(transaction_node) = transaction_node {
            req_builder = req_builder.json(transaction_node);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn delete(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<()> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name, transaction_node_name
        );
        let mut req_builder = client.delete(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list(
        configuration: &Configuration,
        blockchain_member_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<TransactionNodeCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name
        );
        let mut req_builder = client.get(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_api_keys(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<ApiKeyCollection> {
        let client = &configuration.client;
        let uri_str = &format!(
            "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}/listApiKeys",
            &configuration.base_path, subscription_id, resource_group_name, blockchain_member_name, transaction_node_name
        );
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
    pub async fn list_regenerate_api_keys(
        configuration: &Configuration,
        blockchain_member_name: &str,
        transaction_node_name: &str,
        api_key: Option<&ApiKey>,
        subscription_id: &str,
        resource_group_name: &str,
    ) -> Result<ApiKeyCollection> {
        let client = &configuration.client;
        let uri_str = & format ! ("{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Blockchain/blockchainMembers/{}/transactionNodes/{}/regenerateApiKeys" , & configuration . base_path , subscription_id , resource_group_name , blockchain_member_name , transaction_node_name) ;
        let mut req_builder = client.post(uri_str);
        if let Some(token) = &configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token);
        }
        req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
        if let Some(api_key) = api_key {
            req_builder = req_builder.json(api_key);
        }
        let req = req_builder.build()?;
        let res = client.execute(req).await?;
        Ok(res.json().await?)
    }
}
