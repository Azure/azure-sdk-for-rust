#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotDefenderSettingsList {
    #[serde(skip_serializing)]
    pub value: Vec<IotDefenderSettingsModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotDefenderSettingsModel {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotDefenderSettingsProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotDefenderSettingsProperties {
    #[serde(rename = "deviceQuota")]
    pub device_quota: i32,
    #[serde(rename = "sentinelWorkspaceResourceIds")]
    pub sentinel_workspace_resource_ids: Vec<String>,
    #[serde(rename = "onboardingKind")]
    pub onboarding_kind: iot_defender_settings_properties::OnboardingKind,
}
pub mod iot_defender_settings_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OnboardingKind {
        Default,
        MigratedToAzure,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DownloadLink {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageDownloadInfo {
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(skip_serializing)]
    pub link: Option<DownloadLink>,
    #[serde(rename = "versionKind", skip_serializing)]
    pub version_kind: Option<package_download_info::VersionKind>,
}
pub mod package_download_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionKind {
        Latest,
        Previous,
        Preview,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpgradePackageDownloadInfo {
    #[serde(flatten)]
    pub package_download_info: PackageDownloadInfo,
    #[serde(rename = "fromVersion", skip_serializing)]
    pub from_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageDownloads {
    #[serde(skip_serializing)]
    pub sensor: Option<package_downloads::Sensor>,
    #[serde(rename = "centralManager", skip_serializing)]
    pub central_manager: Option<package_downloads::CentralManager>,
    #[serde(rename = "threatIntelligence", skip_serializing)]
    pub threat_intelligence: Vec<PackageDownloadInfo>,
    #[serde(skip_serializing)]
    pub snmp: Vec<PackageDownloadInfo>,
    #[serde(rename = "wmiTool", skip_serializing)]
    pub wmi_tool: Vec<PackageDownloadInfo>,
    #[serde(rename = "authorizedDevicesImportTemplate", skip_serializing)]
    pub authorized_devices_import_template: Vec<PackageDownloadInfo>,
    #[serde(rename = "deviceInformationUpdateImportTemplate", skip_serializing)]
    pub device_information_update_import_template: Vec<PackageDownloadInfo>,
}
pub mod package_downloads {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Sensor {
        #[serde(skip_serializing)]
        pub full: Option<sensor::Full>,
        #[serde(skip_serializing_if = "Vec::is_empty")]
        pub upgrade: Vec<UpgradePackageDownloadInfo>,
    }
    pub mod sensor {
        use super::*;
        #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
        pub struct Full {
            #[serde(skip_serializing)]
            pub iso: Vec<PackageDownloadInfo>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ovf: Option<full::Ovf>,
        }
        pub mod full {
            use super::*;
            #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
            pub struct Ovf {
                #[serde(skip_serializing)]
                pub enterprise: Vec<PackageDownloadInfo>,
                #[serde(skip_serializing)]
                pub medium: Vec<PackageDownloadInfo>,
                #[serde(skip_serializing)]
                pub line: Vec<PackageDownloadInfo>,
            }
        }
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct CentralManager {
        #[serde(skip_serializing)]
        pub full: Option<central_manager::Full>,
        #[serde(skip_serializing)]
        pub upgrade: Vec<UpgradePackageDownloadInfo>,
    }
    pub mod central_manager {
        use super::*;
        #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
        pub struct Full {
            #[serde(skip_serializing)]
            pub iso: Vec<PackageDownloadInfo>,
            #[serde(skip_serializing)]
            pub ovf: Option<full::Ovf>,
        }
        pub mod full {
            use super::*;
            #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
            pub struct Ovf {
                #[serde(skip_serializing)]
                pub enterprise: Vec<PackageDownloadInfo>,
                #[serde(rename = "enterpriseHighAvailability", skip_serializing)]
                pub enterprise_high_availability: Vec<PackageDownloadInfo>,
                #[serde(skip_serializing)]
                pub medium: Vec<PackageDownloadInfo>,
                #[serde(rename = "mediumHighAvailability", skip_serializing)]
                pub medium_high_availability: Vec<PackageDownloadInfo>,
            }
        }
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSensorsList {
    #[serde(skip_serializing)]
    pub value: Vec<IotSensorsModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSensorsModel {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotSensorProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSensorProperties {
    #[serde(rename = "connectivityTime", skip_serializing)]
    pub connectivity_time: Option<String>,
    #[serde(rename = "creationTime", skip_serializing)]
    pub creation_time: Option<String>,
    #[serde(rename = "dynamicLearning", skip_serializing)]
    pub dynamic_learning: Option<bool>,
    #[serde(rename = "learningMode", skip_serializing)]
    pub learning_mode: Option<bool>,
    #[serde(rename = "sensorStatus", skip_serializing)]
    pub sensor_status: Option<iot_sensor_properties::SensorStatus>,
    #[serde(rename = "sensorVersion", skip_serializing)]
    pub sensor_version: Option<String>,
    #[serde(rename = "tiAutomaticUpdates", skip_serializing_if = "Option::is_none")]
    pub ti_automatic_updates: Option<bool>,
    #[serde(rename = "tiStatus", skip_serializing)]
    pub ti_status: Option<iot_sensor_properties::TiStatus>,
    #[serde(rename = "tiVersion", skip_serializing)]
    pub ti_version: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
    #[serde(rename = "sensorType", skip_serializing_if = "Option::is_none")]
    pub sensor_type: Option<iot_sensor_properties::SensorType>,
}
pub mod iot_sensor_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SensorStatus {
        Ok,
        Disconnected,
        Unavailable,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TiStatus {
        Ok,
        Failed,
        InProgress,
        UpdateAvailable,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SensorType {
        Ot,
        Enterprise,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResetPasswordInput {
    #[serde(rename = "applianceId", skip_serializing_if = "Option::is_none")]
    pub appliance_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceList {
    pub value: Vec<Device>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DeviceProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceProperties {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "deviceType", skip_serializing_if = "Option::is_none")]
    pub device_type: Option<String>,
    #[serde(rename = "sourceName", skip_serializing)]
    pub source_name: Option<String>,
    #[serde(rename = "networkInterfaces", skip_serializing)]
    pub network_interfaces: Vec<NetworkInterface>,
    #[serde(skip_serializing)]
    pub vendor: Option<String>,
    #[serde(rename = "osName", skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    #[serde(skip_serializing)]
    pub protocols: Vec<Protocol>,
    #[serde(rename = "lastActiveTime", skip_serializing)]
    pub last_active_time: Option<String>,
    #[serde(rename = "lastUpdateTime", skip_serializing)]
    pub last_update_time: Option<String>,
    #[serde(rename = "managementState", skip_serializing)]
    pub management_state: Option<device_properties::ManagementState>,
    #[serde(rename = "authorizationState", skip_serializing_if = "Option::is_none")]
    pub authorization_state: Option<device_properties::AuthorizationState>,
    #[serde(rename = "deviceCriticality", skip_serializing_if = "Option::is_none")]
    pub device_criticality: Option<device_properties::DeviceCriticality>,
    #[serde(rename = "purdueLevel", skip_serializing_if = "Option::is_none")]
    pub purdue_level: Option<device_properties::PurdueLevel>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(skip_serializing)]
    pub firmwares: Vec<Firmware>,
    #[serde(rename = "discoveryTime", skip_serializing)]
    pub discovery_time: Option<String>,
    #[serde(rename = "programmingState", skip_serializing)]
    pub programming_state: Option<device_properties::ProgrammingState>,
    #[serde(rename = "lastProgrammingTime", skip_serializing)]
    pub last_programming_time: Option<String>,
    #[serde(rename = "scanningFunctionality", skip_serializing)]
    pub scanning_functionality: Option<device_properties::ScanningFunctionality>,
    #[serde(rename = "lastScanTime", skip_serializing)]
    pub last_scan_time: Option<String>,
    #[serde(rename = "riskScore", skip_serializing)]
    pub risk_score: Option<i32>,
    #[serde(skip_serializing)]
    pub sensors: Vec<Sensor>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
    #[serde(rename = "deviceStatus", skip_serializing)]
    pub device_status: Option<device_properties::DeviceStatus>,
}
pub mod device_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ManagementState {
        Managed,
        Unmanaged,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AuthorizationState {
        Authorized,
        Unauthorized,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceCriticality {
        Important,
        Standard,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PurdueLevel {
        ProcessControl,
        Supervisory,
        Enterprise,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProgrammingState {
        ProgrammingDevice,
        NotProgrammingDevice,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ScanningFunctionality {
        ScannerDevice,
        NotScannerDevice,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeviceStatus {
        Active,
        Removed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInterface {
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<IpAddress>,
    #[serde(rename = "macAddress", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<MacAddress>,
    #[serde(skip_serializing)]
    pub vlans: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpAddress {
    #[serde(rename = "v4Address", skip_serializing)]
    pub v4_address: Option<String>,
    #[serde(rename = "detectionTime", skip_serializing)]
    pub detection_time: Option<String>,
    #[serde(rename = "subnetCidr", skip_serializing)]
    pub subnet_cidr: Option<String>,
    #[serde(skip_serializing)]
    pub fqdn: Option<String>,
    #[serde(rename = "fqdnLastLookupTime", skip_serializing)]
    pub fqdn_last_lookup_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MacAddress {
    #[serde(skip_serializing)]
    pub address: Option<String>,
    #[serde(rename = "detectionTime", skip_serializing)]
    pub detection_time: Option<String>,
    #[serde(skip_serializing)]
    pub significance: Option<mac_address::Significance>,
    #[serde(rename = "relationToIpStatus", skip_serializing)]
    pub relation_to_ip_status: Option<mac_address::RelationToIpStatus>,
}
pub mod mac_address {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Significance {
        Primary,
        Secondary,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RelationToIpStatus {
        Guess,
        Certain,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Firmware {
    #[serde(rename = "moduleAddress", skip_serializing)]
    pub module_address: Option<String>,
    #[serde(skip_serializing)]
    pub rack: Option<String>,
    #[serde(skip_serializing)]
    pub slot: Option<String>,
    #[serde(skip_serializing)]
    pub serial: Option<String>,
    #[serde(skip_serializing)]
    pub model: Option<String>,
    #[serde(skip_serializing)]
    pub version: Option<String>,
    #[serde(rename = "additionalData", skip_serializing)]
    pub additional_data: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Protocol {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifiers: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sensor {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Site {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OnPremiseIotSensorsList {
    #[serde(skip_serializing)]
    pub value: Vec<OnPremiseIotSensor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OnPremiseIotSensor {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OnPremiseIotSensorProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OnPremiseIotSensorProperties {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSitesList {
    #[serde(skip_serializing)]
    pub value: Vec<IotSitesModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSitesModel {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotSiteProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotSiteProperties {
    #[serde(rename = "displayName")]
    pub display_name: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertListModel {
    #[serde(skip_serializing)]
    pub value: Vec<IotAlertModel>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertModel {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotAlertPropertiesModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertPropertiesModel {
    #[serde(rename = "systemAlertId", skip_serializing)]
    pub system_alert_id: Option<String>,
    #[serde(rename = "compromisedEntity", skip_serializing)]
    pub compromised_entity: Option<String>,
    #[serde(rename = "alertType", skip_serializing)]
    pub alert_type: Option<String>,
    #[serde(rename = "startTimeUtc", skip_serializing)]
    pub start_time_utc: Option<String>,
    #[serde(rename = "endTimeUtc", skip_serializing)]
    pub end_time_utc: Option<String>,
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub entities: Vec<serde_json::Value>,
    #[serde(rename = "extendedProperties", skip_serializing_if = "Option::is_none")]
    pub extended_properties: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertTypeList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IotAlertType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertType {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotAlertTypeProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotAlertTypeProperties {
    #[serde(rename = "alertDisplayName", skip_serializing)]
    pub alert_display_name: Option<String>,
    #[serde(skip_serializing)]
    pub severity: Option<iot_alert_type_properties::Severity>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(rename = "providerName", skip_serializing)]
    pub provider_name: Option<String>,
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(rename = "productComponentName", skip_serializing)]
    pub product_component_name: Option<String>,
    #[serde(rename = "vendorName", skip_serializing)]
    pub vendor_name: Option<String>,
    #[serde(skip_serializing)]
    pub intent: Option<iot_alert_type_properties::Intent>,
    #[serde(rename = "remediationSteps", skip_serializing)]
    pub remediation_steps: Vec<String>,
}
pub mod iot_alert_type_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Severity {
        Informational,
        Low,
        Medium,
        High,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Intent {
        Unknown,
        PreAttack,
        InitialAccess,
        Persistence,
        PrivilegeEscalation,
        DefenseEvasion,
        CredentialAccess,
        Discovery,
        LateralMovement,
        Execution,
        Collection,
        Exfiltration,
        CommandAndControl,
        Impact,
        Probing,
        Exploitation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationListModel {
    #[serde(skip_serializing)]
    pub value: Vec<IotRecommendationModel>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationModel {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotRecommendationPropertiesModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationPropertiesModel {
    #[serde(rename = "deviceId", skip_serializing)]
    pub device_id: Option<String>,
    #[serde(rename = "recommendationType", skip_serializing)]
    pub recommendation_type: Option<String>,
    #[serde(rename = "discoveredTimeUtc", skip_serializing)]
    pub discovered_time_utc: Option<String>,
    #[serde(rename = "recommendationAdditionalData", skip_serializing_if = "Option::is_none")]
    pub recommendation_additional_data: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationTypeList {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IotRecommendationType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationType {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IotRecommendationTypeProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IotRecommendationTypeProperties {
    #[serde(rename = "recommendationDisplayName", skip_serializing)]
    pub recommendation_display_name: Option<String>,
    #[serde(skip_serializing)]
    pub severity: Option<iot_recommendation_type_properties::Severity>,
    #[serde(skip_serializing)]
    pub description: Option<String>,
    #[serde(rename = "productName", skip_serializing)]
    pub product_name: Option<String>,
    #[serde(rename = "productComponentName", skip_serializing)]
    pub product_component_name: Option<String>,
    #[serde(rename = "vendorName", skip_serializing)]
    pub vendor_name: Option<String>,
    #[serde(skip_serializing)]
    pub control: Option<String>,
    #[serde(rename = "remediationSteps", skip_serializing)]
    pub remediation_steps: Vec<String>,
    #[serde(rename = "dataSource", skip_serializing)]
    pub data_source: Option<String>,
}
pub mod iot_recommendation_type_properties {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Severity {
        Unknown,
        NotApplicable,
        Healthy,
        OffByPolicy,
        Low,
        Medium,
        High,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudError {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<CloudErrorBody>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudErrorBody {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<CloudErrorBody>,
    #[serde(rename = "additionalInfo", skip_serializing)]
    pub additional_info: Vec<ErrorAdditionalInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorAdditionalInfo {
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
