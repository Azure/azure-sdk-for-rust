#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdditionalErrorInfo {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdditionalInventoryDetails {
    #[serde(rename = "additionalData", skip_serializing)]
    pub additional_data: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdditionalOrderItemDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<StageDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription: Option<SubscriptionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingDetails {
    #[serde(rename = "billingType", skip_serializing)]
    pub billing_type: Option<String>,
    #[serde(skip_serializing)]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<CloudError>,
    #[serde(rename = "additionalInfo", skip_serializing)]
    pub additional_info: Vec<AdditionalErrorInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationData {
    #[serde(rename = "familyIdentifier", skip_serializing)]
    pub family_identifier: Option<String>,
    #[serde(rename = "productLineIdentifier", skip_serializing)]
    pub product_line_identifier: Option<String>,
    #[serde(rename = "productIdentifier", skip_serializing)]
    pub product_identifier: Option<String>,
    #[serde(rename = "configurationIdentifier", skip_serializing)]
    pub configuration_identifier: Option<String>,
    #[serde(rename = "configurationIdentifierOnDevice", skip_serializing)]
    pub configuration_identifier_on_device: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationDetails {
    #[serde(skip_serializing)]
    pub specifications: Vec<SpecificationDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationOnDevice {
    #[serde(rename = "configurationIdentifier")]
    pub configuration_identifier: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InventoryAdditionalDetails {
    #[serde(rename = "orderItem", default, skip_serializing_if = "Option::is_none")]
    pub order_item: Option<AdditionalOrderItemDetails>,
    #[serde(rename = "inventoryMetadata", skip_serializing)]
    pub inventory_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ConfigurationDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory: Option<AdditionalInventoryDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub billing: Option<BillingDetails>,
    #[serde(rename = "inventorySecrets", skip_serializing)]
    pub inventory_secrets: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InventoryData {
    #[serde(skip_serializing)]
    pub status: Option<String>,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(rename = "registrationAllowed", skip_serializing)]
    pub registration_allowed: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InventoryProperties {
    #[serde(rename = "serialNumber", skip_serializing)]
    pub serial_number: Option<String>,
    #[serde(rename = "orderItem", default, skip_serializing_if = "Option::is_none")]
    pub order_item: Option<OrderItemData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ConfigurationData>,
    #[serde(rename = "managementResource", default, skip_serializing_if = "Option::is_none")]
    pub management_resource: Option<ManagementResourceData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory: Option<InventoryData>,
    #[serde(skip_serializing)]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<InventoryAdditionalDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManageInventoryMetadataRequest {
    #[serde(rename = "inventoryMetadata")]
    pub inventory_metadata: String,
    #[serde(rename = "configurationOnDevice", default, skip_serializing_if = "Option::is_none")]
    pub configuration_on_device: Option<ConfigurationOnDevice>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManageLinkRequest {
    #[serde(rename = "managementResourceArmId")]
    pub management_resource_arm_id: String,
    pub operation: manage_link_request::Operation,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
}
pub mod manage_link_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Operation {
        Link,
        Unlink,
        Relink,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagementResourceData {
    #[serde(rename = "armId", skip_serializing)]
    pub arm_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing)]
    pub tenant_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemData {
    #[serde(rename = "armId", skip_serializing)]
    pub arm_id: Option<String>,
    #[serde(rename = "orderItemType", skip_serializing)]
    pub order_item_type: Option<order_item_data::OrderItemType>,
}
pub mod order_item_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OrderItemType {
        Purchase,
        Rental,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StageDetails {
    #[serde(rename = "stageStatus", skip_serializing)]
    pub stage_status: Option<stage_details::StageStatus>,
    #[serde(rename = "stageName", skip_serializing)]
    pub stage_name: Option<stage_details::StageName>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
}
pub mod stage_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageStatus {
        None,
        InProgress,
        Succeeded,
        Failed,
        Cancelled,
        Cancelling,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageName {
        DeviceOrdered,
        DevicePrepared,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
        Completed,
        CompletedWithErrors,
        Cancelled,
        Aborted,
        CompletedWithWarnings,
        #[serde(rename = "ReadyToDispatchFromAzureDC")]
        ReadyToDispatchFromAzureDc,
        #[serde(rename = "ReadyToReceiveAtAzureDC")]
        ReadyToReceiveAtAzureDc,
        Placed,
        InReview,
        Confirmed,
        ReadyForDispatch,
        Shipped,
        Delivered,
        InUse,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartnerInventory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<InventoryProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartnerInventoryList {
    #[serde(skip_serializing)]
    pub value: Vec<PartnerInventory>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchInventoriesRequest {
    #[serde(rename = "serialNumber")]
    pub serial_number: String,
    #[serde(rename = "familyIdentifier")]
    pub family_identifier: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpecificationDetails {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionDetails {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub state: Option<String>,
    #[serde(rename = "quotaId", skip_serializing)]
    pub quota_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "isDataAction", skip_serializing)]
    pub is_data_action: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
    #[serde(skip_serializing)]
    pub origin: Option<operation::Origin>,
    #[serde(rename = "actionType", skip_serializing)]
    pub action_type: Option<operation::ActionType>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing)]
        pub provider: Option<String>,
        #[serde(skip_serializing)]
        pub resource: Option<String>,
        #[serde(skip_serializing)]
        pub operation: Option<String>,
        #[serde(skip_serializing)]
        pub description: Option<String>,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Origin {
        #[serde(rename = "user")]
        User,
        #[serde(rename = "system")]
        System,
        #[serde(rename = "user,system")]
        UserSystem,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ActionType {
        Internal,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDetail>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetail {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<ErrorDetail>,
    #[serde(rename = "additionalInfo", skip_serializing)]
    pub additional_info: Vec<ErrorAdditionalInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorAdditionalInfo {
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub info: Option<serde_json::Value>,
}
