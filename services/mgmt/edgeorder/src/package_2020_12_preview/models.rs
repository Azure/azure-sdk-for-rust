#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdditionalErrorInfo {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressDetails {
    #[serde(rename = "forwardAddress")]
    pub forward_address: AddressProperties,
    #[serde(rename = "returnAddress", skip_serializing_if = "Option::is_none")]
    pub return_address: Option<AddressProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressProperties {
    #[serde(rename = "shippingAddress", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<ShippingAddress>,
    #[serde(rename = "contactDetails")]
    pub contact_details: ContactDetails,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressResource {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    pub properties: AddressProperties,
    #[serde(rename = "systemData", skip_serializing)]
    pub system_data: Option<SystemData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressResourceList {
    #[serde(skip_serializing)]
    pub value: Vec<AddressResource>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressUpdateParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AddressUpdateProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressUpdateProperties {
    #[serde(rename = "shippingAddress", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<ShippingAddress>,
    #[serde(rename = "contactDetails", skip_serializing_if = "Option::is_none")]
    pub contact_details: Option<ContactDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailabilityInformation {
    #[serde(rename = "availabilityStage", skip_serializing)]
    pub availability_stage: Option<availability_information::AvailabilityStage>,
    #[serde(rename = "disabledReason", skip_serializing)]
    pub disabled_reason: Option<availability_information::DisabledReason>,
    #[serde(rename = "disabledReasonMessage", skip_serializing)]
    pub disabled_reason_message: Option<String>,
}
pub mod availability_information {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AvailabilityStage {
        Available,
        ComingSoon,
        Preview,
        Deprecated,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DisabledReason {
        None,
        Country,
        Region,
        Feature,
        OfferType,
        NoSubscriptionInfo,
        NotAvailable,
        OutOfStock,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BasicInformation {
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Description>,
    #[serde(rename = "imageInformation", skip_serializing)]
    pub image_information: Vec<ImageInformation>,
    #[serde(rename = "costInformation", skip_serializing_if = "Option::is_none")]
    pub cost_information: Option<CostInformation>,
    #[serde(rename = "availabilityInformation", skip_serializing_if = "Option::is_none")]
    pub availability_information: Option<AvailabilityInformation>,
    #[serde(rename = "hierarchyInformation", skip_serializing_if = "Option::is_none")]
    pub hierarchy_information: Option<HierarchyInformation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingModel {
    #[serde(skip_serializing)]
    pub model: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CancellationReason {
    pub reason: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommonProperties {
    #[serde(flatten)]
    pub basic_information: BasicInformation,
    #[serde(rename = "filterableProperties", skip_serializing)]
    pub filterable_properties: Vec<FilterableProperty>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Configuration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ConfigurationProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationFilters {
    #[serde(rename = "hierarchyInformation")]
    pub hierarchy_information: HierarchyInformation,
    #[serde(rename = "filterableProperty", skip_serializing_if = "Vec::is_empty")]
    pub filterable_property: Vec<FilterableProperty>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationProperties {
    #[serde(flatten)]
    pub common_properties: CommonProperties,
    #[serde(skip_serializing)]
    pub specifications: Vec<Specification>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Configurations {
    #[serde(skip_serializing)]
    pub value: Vec<Configuration>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationsRequest {
    #[serde(rename = "configurationFilters")]
    pub configuration_filters: Vec<ConfigurationFilters>,
    #[serde(rename = "customerSubscriptionDetails", skip_serializing_if = "Option::is_none")]
    pub customer_subscription_details: Option<CustomerSubscriptionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContactDetails {
    #[serde(rename = "contactName")]
    pub contact_name: String,
    pub phone: String,
    #[serde(rename = "phoneExtension", skip_serializing_if = "Option::is_none")]
    pub phone_extension: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mobile: Option<String>,
    #[serde(rename = "emailList")]
    pub email_list: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CostInformation {
    #[serde(rename = "billingMeterDetails", skip_serializing)]
    pub billing_meter_details: Vec<BillingMeterDetails>,
    #[serde(rename = "billingInfoUrl", skip_serializing)]
    pub billing_info_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingMeterDetails {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "meterDetails", skip_serializing_if = "Option::is_none")]
    pub meter_details: Option<MeterDetails>,
    #[serde(rename = "meteringType", skip_serializing)]
    pub metering_type: Option<billing_meter_details::MeteringType>,
    #[serde(skip_serializing)]
    pub frequency: Option<String>,
}
pub mod billing_meter_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MeteringType {
        OneTime,
        Recurring,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Description {
    #[serde(rename = "descriptionType", skip_serializing)]
    pub description_type: Option<description::DescriptionType>,
    #[serde(rename = "shortDescription", skip_serializing)]
    pub short_description: Option<String>,
    #[serde(rename = "longDescription", skip_serializing)]
    pub long_description: Option<String>,
    #[serde(skip_serializing)]
    pub keywords: Vec<String>,
    #[serde(skip_serializing)]
    pub attributes: Vec<String>,
    #[serde(skip_serializing)]
    pub links: Vec<Link>,
}
pub mod description {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DescriptionType {
        Base,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceDetails {
    #[serde(rename = "serialNumber", skip_serializing)]
    pub serial_number: Option<String>,
    #[serde(rename = "deviceHistory", skip_serializing)]
    pub device_history: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EncryptionPreferences {
    #[serde(rename = "doubleEncryptionStatus", skip_serializing_if = "Option::is_none")]
    pub double_encryption_status: Option<encryption_preferences::DoubleEncryptionStatus>,
}
pub mod encryption_preferences {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DoubleEncryptionStatus {
        Disabled,
        Enabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterableProperty {
    #[serde(rename = "type")]
    pub type_: filterable_property::Type,
    #[serde(rename = "supportedValues")]
    pub supported_values: Vec<String>,
}
pub mod filterable_property {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        ShipToCountries,
        DoubleEncryptionStatus,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HierarchyInformation {
    #[serde(rename = "productFamilyName", skip_serializing_if = "Option::is_none")]
    pub product_family_name: Option<String>,
    #[serde(rename = "productLineName", skip_serializing_if = "Option::is_none")]
    pub product_line_name: Option<String>,
    #[serde(rename = "productName", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<String>,
    #[serde(rename = "configurationName", skip_serializing_if = "Option::is_none")]
    pub configuration_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageInformation {
    #[serde(rename = "imageType", skip_serializing)]
    pub image_type: Option<image_information::ImageType>,
    #[serde(rename = "imageUrl", skip_serializing)]
    pub image_url: Option<String>,
}
pub mod image_information {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ImageType {
        MainImage,
        BulletImage,
        GenericImage,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    #[serde(rename = "linkType", skip_serializing)]
    pub link_type: Option<link::LinkType>,
    #[serde(rename = "linkUrl", skip_serializing)]
    pub link_url: Option<String>,
}
pub mod link {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LinkType {
        Generic,
        TermsAndConditions,
        Specification,
        Documentation,
        KnowMore,
        SignUp,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManagementResourceDetails {
    #[serde(rename = "managementResourceArmId")]
    pub management_resource_arm_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeterDetails {
    #[serde(rename = "billingType", skip_serializing)]
    pub billing_type: Option<meter_details::BillingType>,
    #[serde(skip_serializing)]
    pub multiplier: Option<f64>,
    #[serde(rename = "chargingType", skip_serializing)]
    pub charging_type: Option<meter_details::ChargingType>,
}
pub mod meter_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BillingType {
        Pav2,
        Purchase,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChargingType {
        PerOrder,
        PerDevice,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationPreference {
    #[serde(rename = "stageName")]
    pub stage_name: notification_preference::StageName,
    #[serde(rename = "sendNotification")]
    pub send_notification: bool,
}
pub mod notification_preference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageName {
        DevicePrepared,
        Shipped,
        Delivered,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderProperties {
    #[serde(rename = "orderItemIds", skip_serializing)]
    pub order_item_ids: Vec<String>,
    #[serde(rename = "currentStage", skip_serializing_if = "Option::is_none")]
    pub current_stage: Option<StageDetails>,
    #[serde(rename = "orderStageHistory", skip_serializing)]
    pub order_stage_history: Vec<StageDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderResource {
    #[serde(flatten)]
    pub proxy_resource: ProxyResource,
    pub properties: OrderProperties,
    #[serde(rename = "systemData", skip_serializing)]
    pub system_data: Option<SystemData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemResourceList {
    #[serde(skip_serializing)]
    pub value: Vec<OrderItemResource>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemDetails {
    #[serde(rename = "productDetails")]
    pub product_details: ProductDetails,
    #[serde(rename = "orderItemType")]
    pub order_item_type: order_item_details::OrderItemType,
    #[serde(rename = "currentStage", skip_serializing_if = "Option::is_none")]
    pub current_stage: Option<StageDetails>,
    #[serde(rename = "orderItemStageHistory", skip_serializing)]
    pub order_item_stage_history: Vec<StageDetails>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferences: Option<Preferences>,
    #[serde(rename = "forwardShippingDetails", skip_serializing_if = "Option::is_none")]
    pub forward_shipping_details: Option<ShippingDetails>,
    #[serde(rename = "reverseShippingDetails", skip_serializing_if = "Option::is_none")]
    pub reverse_shipping_details: Option<ShippingDetails>,
    #[serde(rename = "notificationEmailList", skip_serializing_if = "Vec::is_empty")]
    pub notification_email_list: Vec<String>,
    #[serde(rename = "cancellationReason", skip_serializing)]
    pub cancellation_reason: Option<String>,
    #[serde(rename = "cancellationStatus", skip_serializing)]
    pub cancellation_status: Option<order_item_details::CancellationStatus>,
    #[serde(rename = "deletionStatus", skip_serializing)]
    pub deletion_status: Option<order_item_details::DeletionStatus>,
    #[serde(rename = "returnReason", skip_serializing)]
    pub return_reason: Option<String>,
    #[serde(rename = "returnStatus", skip_serializing)]
    pub return_status: Option<order_item_details::ReturnStatus>,
    #[serde(rename = "managementRpDetails", skip_serializing_if = "Option::is_none")]
    pub management_rp_details: Option<ResourceProviderDetails>,
    #[serde(rename = "managementResourceDetails", skip_serializing_if = "Option::is_none")]
    pub management_resource_details: Option<ManagementResourceDetails>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDetail>,
}
pub mod order_item_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OrderItemType {
        Purchase,
        Rental,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CancellationStatus {
        Cancellable,
        CancellableWithFee,
        NotCancellable,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeletionStatus {
        Allowed,
        NotAllowed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ReturnStatus {
        Returnable,
        ReturnableWithFee,
        NotReturnable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemProperties {
    #[serde(rename = "orderItemDetails")]
    pub order_item_details: OrderItemDetails,
    #[serde(rename = "addressDetails")]
    pub address_details: AddressDetails,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
    #[serde(rename = "orderId")]
    pub order_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemResource {
    #[serde(flatten)]
    pub tracked_resource: TrackedResource,
    pub properties: OrderItemProperties,
    #[serde(rename = "systemData", skip_serializing)]
    pub system_data: Option<SystemData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderResourceList {
    #[serde(skip_serializing)]
    pub value: Vec<OrderResource>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StageDetails {
    #[serde(rename = "stageStatus", skip_serializing)]
    pub stage_status: Option<stage_details::StageStatus>,
    #[serde(rename = "stageName", skip_serializing)]
    pub stage_name: Option<stage_details::StageName>,
    #[serde(rename = "displayName", skip_serializing)]
    pub display_name: Option<String>,
    #[serde(rename = "startTime", skip_serializing)]
    pub start_time: Option<String>,
}
pub mod stage_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageStatus {
        None,
        InProgress,
        Succeeded,
        Failed,
        Cancelled,
        Cancelling,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StageName {
        DeviceOrdered,
        DevicePrepared,
        PickedUp,
        #[serde(rename = "AtAzureDC")]
        AtAzureDc,
        DataCopy,
        Completed,
        CompletedWithErrors,
        Cancelled,
        Aborted,
        CompletedWithWarnings,
        #[serde(rename = "ReadyToDispatchFromAzureDC")]
        ReadyToDispatchFromAzureDc,
        #[serde(rename = "ReadyToReceiveAtAzureDC")]
        ReadyToReceiveAtAzureDc,
        Placed,
        InReview,
        Confirmed,
        ReadyForDispatch,
        Shipped,
        Delivered,
        InUse,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemUpdateParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<OrderItemUpdateProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderItemUpdateProperties {
    #[serde(rename = "forwardAddress", skip_serializing_if = "Option::is_none")]
    pub forward_address: Option<AddressProperties>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferences: Option<Preferences>,
    #[serde(rename = "notificationEmailList", skip_serializing_if = "Vec::is_empty")]
    pub notification_email_list: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pav2MeterDetails {
    #[serde(flatten)]
    pub meter_details: MeterDetails,
    #[serde(rename = "meterGuid", skip_serializing)]
    pub meter_guid: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Preferences {
    #[serde(rename = "notificationPreferences", skip_serializing_if = "Vec::is_empty")]
    pub notification_preferences: Vec<NotificationPreference>,
    #[serde(rename = "transportPreferences", skip_serializing_if = "Option::is_none")]
    pub transport_preferences: Option<TransportPreferences>,
    #[serde(rename = "encryptionPreferences", skip_serializing_if = "Option::is_none")]
    pub encryption_preferences: Option<EncryptionPreferences>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Product {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductDetails {
    #[serde(rename = "hierarchyInformation")]
    pub hierarchy_information: HierarchyInformation,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "deviceDetails", skip_serializing)]
    pub device_details: Vec<DeviceDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamilies {
    #[serde(skip_serializing)]
    pub value: Vec<ProductFamily>,
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamiliesMetadata {
    #[serde(skip_serializing)]
    pub value: Vec<ProductFamiliesMetadataDetails>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamiliesMetadataDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductFamilyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamiliesRequest {
    #[serde(rename = "filterableProperties")]
    pub filterable_properties: serde_json::Value,
    #[serde(rename = "customerSubscriptionDetails", skip_serializing_if = "Option::is_none")]
    pub customer_subscription_details: Option<CustomerSubscriptionDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamily {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductFamilyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductFamilyProperties {
    #[serde(flatten)]
    pub common_properties: CommonProperties,
    #[serde(rename = "productLines", skip_serializing)]
    pub product_lines: Vec<ProductLine>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductLine {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ProductLineProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductLineProperties {
    #[serde(flatten)]
    pub common_properties: CommonProperties,
    #[serde(skip_serializing)]
    pub products: Vec<Product>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductProperties {
    #[serde(flatten)]
    pub common_properties: CommonProperties,
    #[serde(skip_serializing)]
    pub configurations: Vec<Configuration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PurchaseMeterDetails {
    #[serde(flatten)]
    pub meter_details: MeterDetails,
    #[serde(rename = "productId", skip_serializing)]
    pub product_id: Option<String>,
    #[serde(rename = "skuId", skip_serializing)]
    pub sku_id: Option<String>,
    #[serde(rename = "termId", skip_serializing)]
    pub term_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceIdentity {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(rename = "principalId", skip_serializing)]
    pub principal_id: Option<String>,
    #[serde(rename = "tenantId", skip_serializing)]
    pub tenant_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceProviderDetails {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReturnOrderItemDetails {
    #[serde(rename = "returnAddress", skip_serializing_if = "Option::is_none")]
    pub return_address: Option<AddressProperties>,
    #[serde(rename = "returnReason")]
    pub return_reason: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingAddress {
    #[serde(rename = "streetAddress1")]
    pub street_address1: String,
    #[serde(rename = "streetAddress2", skip_serializing_if = "Option::is_none")]
    pub street_address2: Option<String>,
    #[serde(rename = "streetAddress3", skip_serializing_if = "Option::is_none")]
    pub street_address3: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "stateOrProvince", skip_serializing_if = "Option::is_none")]
    pub state_or_province: Option<String>,
    pub country: String,
    #[serde(rename = "postalCode", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<String>,
    #[serde(rename = "zipExtendedCode", skip_serializing_if = "Option::is_none")]
    pub zip_extended_code: Option<String>,
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    #[serde(rename = "addressType", skip_serializing_if = "Option::is_none")]
    pub address_type: Option<shipping_address::AddressType>,
}
pub mod shipping_address {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AddressType {
        None,
        Residential,
        Commercial,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingDetails {
    #[serde(rename = "carrierName", skip_serializing)]
    pub carrier_name: Option<String>,
    #[serde(rename = "carrierDisplayName", skip_serializing)]
    pub carrier_display_name: Option<String>,
    #[serde(rename = "trackingId", skip_serializing)]
    pub tracking_id: Option<String>,
    #[serde(rename = "trackingUrl", skip_serializing)]
    pub tracking_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Specification {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(skip_serializing)]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerSubscriptionDetails {
    #[serde(rename = "registeredFeatures", skip_serializing_if = "Vec::is_empty")]
    pub registered_features: Vec<CustomerSubscriptionRegisteredFeatures>,
    #[serde(rename = "locationPlacementId", skip_serializing_if = "Option::is_none")]
    pub location_placement_id: Option<String>,
    #[serde(rename = "quotaId")]
    pub quota_id: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerSubscriptionRegisteredFeatures {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportPreferences {
    #[serde(rename = "preferredShipmentType")]
    pub preferred_shipment_type: transport_preferences::PreferredShipmentType,
}
pub mod transport_preferences {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PreferredShipmentType {
        CustomerManaged,
        MicrosoftManaged,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationListResult {
    #[serde(skip_serializing)]
    pub value: Vec<Operation>,
    #[serde(rename = "nextLink", skip_serializing)]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "isDataAction", skip_serializing)]
    pub is_data_action: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<operation::Display>,
    #[serde(skip_serializing)]
    pub origin: Option<operation::Origin>,
    #[serde(rename = "actionType", skip_serializing)]
    pub action_type: Option<operation::ActionType>,
}
pub mod operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Display {
        #[serde(skip_serializing)]
        pub provider: Option<String>,
        #[serde(skip_serializing)]
        pub resource: Option<String>,
        #[serde(skip_serializing)]
        pub operation: Option<String>,
        #[serde(skip_serializing)]
        pub description: Option<String>,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Origin {
        #[serde(rename = "user")]
        User,
        #[serde(rename = "system")]
        System,
        #[serde(rename = "user,system")]
        UserSystem,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ActionType {
        Internal,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorDetail>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetail {
    #[serde(skip_serializing)]
    pub code: Option<String>,
    #[serde(skip_serializing)]
    pub message: Option<String>,
    #[serde(skip_serializing)]
    pub target: Option<String>,
    #[serde(skip_serializing)]
    pub details: Vec<ErrorDetail>,
    #[serde(rename = "additionalInfo", skip_serializing)]
    pub additional_info: Vec<ErrorAdditionalInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorAdditionalInfo {
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
    #[serde(skip_serializing)]
    pub info: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SystemData {
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "createdByType", skip_serializing_if = "Option::is_none")]
    pub created_by_type: Option<system_data::CreatedByType>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "lastModifiedBy", skip_serializing_if = "Option::is_none")]
    pub last_modified_by: Option<String>,
    #[serde(rename = "lastModifiedByType", skip_serializing_if = "Option::is_none")]
    pub last_modified_by_type: Option<system_data::LastModifiedByType>,
    #[serde(rename = "lastModifiedAt", skip_serializing_if = "Option::is_none")]
    pub last_modified_at: Option<String>,
}
pub mod system_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CreatedByType {
        User,
        Application,
        ManagedIdentity,
        Key,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LastModifiedByType {
        User,
        Application,
        ManagedIdentity,
        Key,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackedResource {
    #[serde(flatten)]
    pub resource: Resource,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<serde_json::Value>,
    pub location: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Resource {
    #[serde(skip_serializing)]
    pub id: Option<String>,
    #[serde(skip_serializing)]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing)]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProxyResource {
    #[serde(flatten)]
    pub resource: Resource,
}
