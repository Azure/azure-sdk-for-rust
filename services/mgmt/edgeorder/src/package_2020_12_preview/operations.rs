#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
pub async fn list_operations(
    operation_config: &crate::OperationConfig,
) -> std::result::Result<OperationListResult, list_operations::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/providers/Microsoft.EdgeOrder/operations", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).map_err(|source| list_operations::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_operations::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_operations::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_operations::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OperationListResult =
                serde_json::from_slice(rsp_body).map_err(|source| list_operations::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| list_operations::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(list_operations::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_operations {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_addresses_at_subscription_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    filter: Option<&str>,
    skip_token: Option<&str>,
) -> std::result::Result<AddressResourceList, list_addresses_at_subscription_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/addresses",
        operation_config.base_path(),
        subscription_id
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_addresses_at_subscription_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_addresses_at_subscription_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_addresses_at_subscription_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_addresses_at_subscription_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AddressResourceList =
                serde_json::from_slice(rsp_body).map_err(|source| list_addresses_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_addresses_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_addresses_at_subscription_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_addresses_at_subscription_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_product_families(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    expand: Option<&str>,
    skip_token: Option<&str>,
    product_families_request: &ProductFamiliesRequest,
) -> std::result::Result<ProductFamilies, list_product_families::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/listProductFamilies",
        operation_config.base_path(),
        subscription_id
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_product_families::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_product_families::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(expand) = expand {
        url.query_pairs_mut().append_pair("$expand", expand);
    }
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body =
        azure_core::to_json(product_families_request).map_err(|source| list_product_families::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_product_families::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_product_families::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: ProductFamilies =
                serde_json::from_slice(rsp_body).map_err(|source| list_product_families::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_product_families::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_product_families::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_product_families {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_configurations(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    skip_token: Option<&str>,
    configurations_request: &ConfigurationsRequest,
) -> std::result::Result<Configurations, list_configurations::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/listConfigurations",
        operation_config.base_path(),
        subscription_id
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_configurations::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_configurations::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = azure_core::to_json(configurations_request).map_err(|source| list_configurations::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_configurations::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_configurations::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Configurations =
                serde_json::from_slice(rsp_body).map_err(|source| list_configurations::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_configurations::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_configurations::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_configurations {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_product_families_metadata(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    skip_token: Option<&str>,
) -> std::result::Result<ProductFamiliesMetadata, list_product_families_metadata::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/productFamiliesMetadata",
        operation_config.base_path(),
        subscription_id
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_product_families_metadata::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_product_families_metadata::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_product_families_metadata::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_product_families_metadata::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: ProductFamiliesMetadata =
                serde_json::from_slice(rsp_body).map_err(|source| list_product_families_metadata::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_product_families_metadata::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_product_families_metadata::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_product_families_metadata {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_order_collections_at_subscription_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    skip_token: Option<&str>,
) -> std::result::Result<OrderCollectionResourceList, list_order_collections_at_subscription_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/orderCollections",
        operation_config.base_path(),
        subscription_id
    );
    let mut url =
        url::Url::parse(url_str).map_err(|source| list_order_collections_at_subscription_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_order_collections_at_subscription_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_order_collections_at_subscription_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_order_collections_at_subscription_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderCollectionResourceList = serde_json::from_slice(rsp_body).map_err(|source| {
                list_order_collections_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                }
            })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| {
                list_order_collections_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                }
            })?;
            Err(list_order_collections_at_subscription_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_order_collections_at_subscription_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_orders_at_subscription_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    filter: Option<&str>,
    skip_token: Option<&str>,
) -> std::result::Result<OrderResourceList, list_orders_at_subscription_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.EdgeOrder/orders",
        operation_config.base_path(),
        subscription_id
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_orders_at_subscription_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_orders_at_subscription_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_orders_at_subscription_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_orders_at_subscription_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderResourceList =
                serde_json::from_slice(rsp_body).map_err(|source| list_orders_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_orders_at_subscription_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_orders_at_subscription_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_orders_at_subscription_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_addresses_at_resource_group_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    resource_group_name: &str,
    filter: Option<&str>,
    skip_token: Option<&str>,
) -> std::result::Result<AddressResourceList, list_addresses_at_resource_group_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/addresses",
        operation_config.base_path(),
        subscription_id,
        resource_group_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_addresses_at_resource_group_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_addresses_at_resource_group_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_addresses_at_resource_group_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_addresses_at_resource_group_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AddressResourceList =
                serde_json::from_slice(rsp_body).map_err(|source| list_addresses_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_addresses_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_addresses_at_resource_group_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_addresses_at_resource_group_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn get_address_by_name(
    operation_config: &crate::OperationConfig,
    address_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<AddressResource, get_address_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/addresses/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        address_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| get_address_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| get_address_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| get_address_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| get_address_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AddressResource =
                serde_json::from_slice(rsp_body).map_err(|source| get_address_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| get_address_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(get_address_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_address_by_name {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn create_address(
    operation_config: &crate::OperationConfig,
    address_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    address_resource: &AddressResource,
) -> std::result::Result<create_address::Response, create_address::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/addresses/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        address_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| create_address::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PUT);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| create_address::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = azure_core::to_json(address_resource).map_err(|source| create_address::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| create_address::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| create_address::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AddressResource =
                serde_json::from_slice(rsp_body).map_err(|source| create_address::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(create_address::Response::Ok200(rsp_value))
        }
        http::StatusCode::ACCEPTED => Ok(create_address::Response::Accepted202),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| create_address::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(create_address::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod create_address {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200(AddressResource),
        Accepted202,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn update_address(
    operation_config: &crate::OperationConfig,
    address_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    if_match: Option<&str>,
    address_update_parameter: &AddressUpdateParameter,
) -> std::result::Result<update_address::Response, update_address::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/addresses/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        address_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| update_address::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| update_address::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(if_match) = if_match {
        req_builder = req_builder.header("If-Match", if_match);
    }
    let req_body = azure_core::to_json(address_update_parameter).map_err(|source| update_address::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| update_address::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| update_address::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::ACCEPTED => Ok(update_address::Response::Accepted202),
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AddressResource =
                serde_json::from_slice(rsp_body).map_err(|source| update_address::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(update_address::Response::Ok200(rsp_value))
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| update_address::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(update_address::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_address {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Accepted202,
        Ok200(AddressResource),
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn delete_address_by_name(
    operation_config: &crate::OperationConfig,
    address_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<delete_address_by_name::Response, delete_address_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/addresses/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        address_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| delete_address_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::DELETE);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| delete_address_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| delete_address_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| delete_address_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => Ok(delete_address_by_name::Response::Ok200),
        http::StatusCode::ACCEPTED => Ok(delete_address_by_name::Response::Accepted202),
        http::StatusCode::NO_CONTENT => Ok(delete_address_by_name::Response::NoContent204),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| delete_address_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(delete_address_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod delete_address_by_name {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200,
        Accepted202,
        NoContent204,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_order_collections_at_resource_group_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    resource_group_name: &str,
    skip_token: Option<&str>,
) -> std::result::Result<OrderCollectionResourceList, list_order_collections_at_resource_group_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orderCollections",
        operation_config.base_path(),
        subscription_id,
        resource_group_name
    );
    let mut url =
        url::Url::parse(url_str).map_err(|source| list_order_collections_at_resource_group_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_order_collections_at_resource_group_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_order_collections_at_resource_group_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_order_collections_at_resource_group_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderCollectionResourceList = serde_json::from_slice(rsp_body).map_err(|source| {
                list_order_collections_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                }
            })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| {
                list_order_collections_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                }
            })?;
            Err(list_order_collections_at_resource_group_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_order_collections_at_resource_group_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn get_order_collection_by_name(
    operation_config: &crate::OperationConfig,
    order_collection_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<OrderCollectionResource, get_order_collection_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orderCollections/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_collection_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| get_order_collection_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| get_order_collection_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| get_order_collection_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| get_order_collection_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderCollectionResource =
                serde_json::from_slice(rsp_body).map_err(|source| get_order_collection_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| get_order_collection_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(get_order_collection_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_order_collection_by_name {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn create_order_collection(
    operation_config: &crate::OperationConfig,
    order_collection_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    order_collection_resource: &OrderCollectionResource,
) -> std::result::Result<create_order_collection::Response, create_order_collection::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orderCollections/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_collection_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| create_order_collection::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PUT);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| create_order_collection::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body =
        azure_core::to_json(order_collection_resource).map_err(|source| create_order_collection::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| create_order_collection::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| create_order_collection::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderCollectionResource =
                serde_json::from_slice(rsp_body).map_err(|source| create_order_collection::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(create_order_collection::Response::Ok200(rsp_value))
        }
        http::StatusCode::ACCEPTED => Ok(create_order_collection::Response::Accepted202),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| create_order_collection::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(create_order_collection::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod create_order_collection {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200(OrderCollectionResource),
        Accepted202,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn update_order_collection(
    operation_config: &crate::OperationConfig,
    order_collection_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    if_match: Option<&str>,
    order_collection_update_parameter: &OrderCollectionUpdateParameter,
) -> std::result::Result<update_order_collection::Response, update_order_collection::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orderCollections/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_collection_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| update_order_collection::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| update_order_collection::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(if_match) = if_match {
        req_builder = req_builder.header("If-Match", if_match);
    }
    let req_body = azure_core::to_json(order_collection_update_parameter)
        .map_err(|source| update_order_collection::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| update_order_collection::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| update_order_collection::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::ACCEPTED => Ok(update_order_collection::Response::Accepted202),
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderCollectionResource =
                serde_json::from_slice(rsp_body).map_err(|source| update_order_collection::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(update_order_collection::Response::Ok200(rsp_value))
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| update_order_collection::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(update_order_collection::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_order_collection {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Accepted202,
        Ok200(OrderCollectionResource),
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn delete_order_collection_by_name(
    operation_config: &crate::OperationConfig,
    order_collection_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<delete_order_collection_by_name::Response, delete_order_collection_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orderCollections/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_collection_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| delete_order_collection_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::DELETE);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| delete_order_collection_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| delete_order_collection_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| delete_order_collection_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => Ok(delete_order_collection_by_name::Response::Ok200),
        http::StatusCode::ACCEPTED => Ok(delete_order_collection_by_name::Response::Accepted202),
        http::StatusCode::NO_CONTENT => Ok(delete_order_collection_by_name::Response::NoContent204),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| delete_order_collection_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(delete_order_collection_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod delete_order_collection_by_name {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200,
        Accepted202,
        NoContent204,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn list_orders_at_resource_group_level(
    operation_config: &crate::OperationConfig,
    subscription_id: &str,
    resource_group_name: &str,
    filter: Option<&str>,
    skip_token: Option<&str>,
) -> std::result::Result<OrderResourceList, list_orders_at_resource_group_level::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders",
        operation_config.base_path(),
        subscription_id,
        resource_group_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| list_orders_at_resource_group_level::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| list_orders_at_resource_group_level::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(filter) = filter {
        url.query_pairs_mut().append_pair("$filter", filter);
    }
    if let Some(skip_token) = skip_token {
        url.query_pairs_mut().append_pair("$skipToken", skip_token);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| list_orders_at_resource_group_level::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| list_orders_at_resource_group_level::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderResourceList =
                serde_json::from_slice(rsp_body).map_err(|source| list_orders_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| list_orders_at_resource_group_level::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(list_orders_at_resource_group_level::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod list_orders_at_resource_group_level {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn get_order_by_name(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<OrderResource, get_order_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| get_order_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| get_order_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| get_order_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| get_order_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderResource =
                serde_json::from_slice(rsp_body).map_err(|source| get_order_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| get_order_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(get_order_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_order_by_name {
    use crate::{models, models::*};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn create_order(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    order_resource: &OrderResource,
) -> std::result::Result<create_order::Response, create_order::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| create_order::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PUT);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| create_order::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = azure_core::to_json(order_resource).map_err(|source| create_order::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| create_order::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| create_order::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderResource = serde_json::from_slice(rsp_body).map_err(|source| create_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Ok(create_order::Response::Ok200(rsp_value))
        }
        http::StatusCode::ACCEPTED => Ok(create_order::Response::Accepted202),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| create_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(create_order::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod create_order {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200(OrderResource),
        Accepted202,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn update_order(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    if_match: Option<&str>,
    order_update_parameter: &OrderUpdateParameter,
) -> std::result::Result<update_order::Response, update_order::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| update_order::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| update_order::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    if let Some(if_match) = if_match {
        req_builder = req_builder.header("If-Match", if_match);
    }
    let req_body = azure_core::to_json(order_update_parameter).map_err(|source| update_order::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| update_order::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| update_order::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::ACCEPTED => Ok(update_order::Response::Accepted202),
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: OrderResource = serde_json::from_slice(rsp_body).map_err(|source| update_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Ok(update_order::Response::Ok200(rsp_value))
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| update_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(update_order::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_order {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Accepted202,
        Ok200(OrderResource),
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn delete_order_by_name(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
) -> std::result::Result<delete_order_by_name::Response, delete_order_by_name::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| delete_order_by_name::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::DELETE);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| delete_order_by_name::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| delete_order_by_name::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| delete_order_by_name::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => Ok(delete_order_by_name::Response::Ok200),
        http::StatusCode::ACCEPTED => Ok(delete_order_by_name::Response::Accepted202),
        http::StatusCode::NO_CONTENT => Ok(delete_order_by_name::Response::NoContent204),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse =
                serde_json::from_slice(rsp_body).map_err(|source| delete_order_by_name::Error::DeserializeError {
                    source,
                    body: rsp_body.clone(),
                })?;
            Err(delete_order_by_name::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod delete_order_by_name {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200,
        Accepted202,
        NoContent204,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn cancel_order(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    cancellation_reason: &CancellationReason,
) -> std::result::Result<cancel_order::Response, cancel_order::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}/cancel",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| cancel_order::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| cancel_order::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = azure_core::to_json(cancellation_reason).map_err(|source| cancel_order::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| cancel_order::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| cancel_order::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => Ok(cancel_order::Response::Ok200),
        http::StatusCode::NO_CONTENT => Ok(cancel_order::Response::NoContent204),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| cancel_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(cancel_order::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod cancel_order {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200,
        NoContent204,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
pub async fn return_order(
    operation_config: &crate::OperationConfig,
    order_name: &str,
    subscription_id: &str,
    resource_group_name: &str,
    return_order_details: &ReturnOrderDetails,
) -> std::result::Result<return_order::Response, return_order::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EdgeOrder/orders/{}/return",
        operation_config.base_path(),
        subscription_id,
        resource_group_name,
        order_name
    );
    let mut url = url::Url::parse(url_str).map_err(|source| return_order::Error::ParseUrlError { source })?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::POST);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(|source| return_order::Error::GetTokenError { source })?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
    let req_body = azure_core::to_json(return_order_details).map_err(|source| return_order::Error::SerializeError { source })?;
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(|source| return_order::Error::BuildRequestError { source })?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(|source| return_order::Error::ExecuteRequestError { source })?;
    match rsp.status() {
        http::StatusCode::OK => Ok(return_order::Response::Ok200),
        http::StatusCode::ACCEPTED => Ok(return_order::Response::Accepted202),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body).map_err(|source| return_order::Error::DeserializeError {
                source,
                body: rsp_body.clone(),
            })?;
            Err(return_order::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod return_order {
    use crate::{models, models::*};
    #[derive(Debug)]
    pub enum Response {
        Ok200,
        Accepted202,
    }
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::ErrorResponse,
        },
        #[error("Failed to parse request URL: {}", source)]
        ParseUrlError { source: url::ParseError },
        #[error("Failed to build request: {}", source)]
        BuildRequestError { source: http::Error },
        #[error("Failed to execute request: {}", source)]
        ExecuteRequestError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to serialize request body: {}", source)]
        SerializeError { source: Box<dyn std::error::Error + Sync + Send> },
        #[error("Failed to deserialize response body: {}", source)]
        DeserializeError { source: serde_json::Error, body: bytes::Bytes },
        #[error("Failed to get access token: {}", source)]
        GetTokenError { source: azure_core::errors::AzureError },
    }
}
