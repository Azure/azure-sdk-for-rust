#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
use crate::*;
pub async fn operations_list(configuration: &Configuration) -> Result<OperationList> {
    let client = &configuration.client;
    let uri_str = &format!("{}/providers/Microsoft.AVS/operations", &configuration.base_path,);
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn locations_check_trial_availability(configuration: &Configuration, subscription_id: &str, location: &str) -> Result<Trial> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.AVS/locations/{}/checkTrialAvailability",
        &configuration.base_path, subscription_id, location
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn locations_check_quota_availability(configuration: &Configuration, subscription_id: &str, location: &str) -> Result<Quota> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.AVS/locations/{}/checkQuotaAvailability",
        &configuration.base_path, subscription_id, location
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_list(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
) -> Result<PrivateCloudList> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds",
        &configuration.base_path, subscription_id, resource_group_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_list_in_subscription(configuration: &Configuration, subscription_id: &str) -> Result<PrivateCloudList> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/providers/Microsoft.AVS/privateClouds",
        &configuration.base_path, subscription_id
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_get(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<PrivateCloud> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_create_or_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    private_cloud: &PrivateCloud,
) -> Result<PrivateCloud> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(private_cloud);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    private_cloud_update: &PrivateCloudUpdate,
) -> Result<PrivateCloud> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(private_cloud_update);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_delete(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn clusters_list(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<ClusterList> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/clusters",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn clusters_get(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    cluster_name: &str,
) -> Result<Cluster> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/clusters/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, cluster_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn clusters_create_or_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    cluster_name: &str,
    cluster: &Cluster,
) -> Result<Cluster> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/clusters/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, cluster_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(cluster);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn clusters_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    cluster_name: &str,
    cluster_update: &ClusterUpdate,
) -> Result<Cluster> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/clusters/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, cluster_name
    );
    let mut req_builder = client.patch(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(cluster_update);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn clusters_delete(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    cluster_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/clusters/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, cluster_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn private_clouds_list_admin_credentials(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<AdminCredentials> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/listAdminCredentials",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.post(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn hcx_enterprise_sites_list(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<HcxEnterpriseSiteList> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/hcxEnterpriseSites",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn hcx_enterprise_sites_get(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    hcx_enterprise_site_name: &str,
) -> Result<HcxEnterpriseSite> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/hcxEnterpriseSites/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, hcx_enterprise_site_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn hcx_enterprise_sites_create_or_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    hcx_enterprise_site_name: &str,
    hcx_enterprise_site: &serde_json::Value,
) -> Result<HcxEnterpriseSite> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/hcxEnterpriseSites/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, hcx_enterprise_site_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(hcx_enterprise_site);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn hcx_enterprise_sites_delete(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    hcx_enterprise_site_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/hcxEnterpriseSites/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, hcx_enterprise_site_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn authorizations_list(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
) -> Result<ExpressRouteAuthorizationList> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/authorizations",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn authorizations_get(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    authorization_name: &str,
) -> Result<ExpressRouteAuthorization> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/authorizations/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, authorization_name
    );
    let mut req_builder = client.get(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn authorizations_create_or_update(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    authorization_name: &str,
    authorization: &serde_json::Value,
) -> Result<ExpressRouteAuthorization> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/authorizations/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, authorization_name
    );
    let mut req_builder = client.put(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    req_builder = req_builder.json(authorization);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
pub async fn authorizations_delete(
    configuration: &Configuration,
    subscription_id: &str,
    resource_group_name: &str,
    private_cloud_name: &str,
    authorization_name: &str,
) -> Result<CloudError> {
    let client = &configuration.client;
    let uri_str = &format!(
        "{}/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}/authorizations/{}",
        &configuration.base_path, subscription_id, resource_group_name, private_cloud_name, authorization_name
    );
    let mut req_builder = client.delete(uri_str);
    if let Some(token) = &configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token);
    }
    req_builder = req_builder.query(&[("api-version", &configuration.api_version)]);
    let req = req_builder.build()?;
    let res = client.execute(req).await?;
    Ok(res.json().await?)
}
