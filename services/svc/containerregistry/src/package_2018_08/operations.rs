#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use super::{models, models::*, API_VERSION};
pub async fn get_docker_registry_v2_support(
    operation_config: &crate::OperationConfig,
) -> std::result::Result<(), get_docker_registry_v2_support::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/v2/", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).map_err(get_docker_registry_v2_support::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_docker_registry_v2_support::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(get_docker_registry_v2_support::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_docker_registry_v2_support::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => Ok(()),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| get_docker_registry_v2_support::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_docker_registry_v2_support::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_docker_registry_v2_support {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_tag_list(
    operation_config: &crate::OperationConfig,
    name: &str,
) -> std::result::Result<RepositoryTags, get_tag_list::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/v2/{}/tags/list", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(get_tag_list::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_tag_list::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_tag_list::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_tag_list::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: RepositoryTags =
                serde_json::from_slice(rsp_body).map_err(|source| get_tag_list::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_tag_list::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| get_tag_list::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_tag_list::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_tag_list {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_manifest(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
) -> std::result::Result<Manifest, get_manifest::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/v2/{}/manifests/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(get_manifest::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_manifest::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_manifest::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_manifest::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Manifest =
                serde_json::from_slice(rsp_body).map_err(|source| get_manifest::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_manifest::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| get_manifest::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_manifest::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_manifest {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_repositories(
    operation_config: &crate::OperationConfig,
    last: Option<&str>,
    n: Option<&str>,
) -> std::result::Result<Repositories, get_repositories::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/v2/_catalog", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).map_err(get_repositories::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_repositories::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    if let Some(last) = last {
        url.query_pairs_mut().append_pair("last", last);
    }
    if let Some(n) = n {
        url.query_pairs_mut().append_pair("n", n);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_repositories::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_repositories::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Repositories =
                serde_json::from_slice(rsp_body).map_err(|source| get_repositories::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| get_repositories::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_repositories::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_repositories {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_repositories(
    operation_config: &crate::OperationConfig,
    last: Option<&str>,
    n: Option<&str>,
) -> std::result::Result<Repositories, get_acr_repositories::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/_catalog", operation_config.base_path(),);
    let mut url = url::Url::parse(url_str).map_err(get_acr_repositories::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_repositories::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    if let Some(last) = last {
        url.query_pairs_mut().append_pair("last", last);
    }
    if let Some(n) = n {
        url.query_pairs_mut().append_pair("n", n);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_acr_repositories::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_repositories::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: Repositories = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_repositories::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_repositories::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_repositories::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_repositories {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_repository_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
) -> std::result::Result<RepositoryAttributes, get_acr_repository_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(get_acr_repository_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_repository_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(get_acr_repository_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_repository_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: RepositoryAttributes = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_repository_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_acr_repository_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_repository_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_repository_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_repository_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn update_acr_repository_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
    value: Option<&ChangeableAttributes>,
) -> std::result::Result<(), update_acr_repository_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(update_acr_repository_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(update_acr_repository_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = if let Some(value) = value {
        req_builder = req_builder.header("content-type", "application/json");
        azure_core::to_json(value).map_err(update_acr_repository_attributes::Error::SerializeError)?
    } else {
        bytes::Bytes::from_static(azure_core::EMPTY_BODY)
    };
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(update_acr_repository_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(update_acr_repository_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::NO_CONTENT => Ok(()),
        http::StatusCode::NOT_FOUND => Err(update_acr_repository_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| update_acr_repository_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(update_acr_repository_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_acr_repository_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn delete_acr_repository(
    operation_config: &crate::OperationConfig,
    name: &str,
) -> std::result::Result<DeletedRepository, delete_acr_repository::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(delete_acr_repository::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::DELETE);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(delete_acr_repository::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(delete_acr_repository::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(delete_acr_repository::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::ACCEPTED => {
            let rsp_body = rsp.body();
            let rsp_value: DeletedRepository = serde_json::from_slice(rsp_body)
                .map_err(|source| delete_acr_repository::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(delete_acr_repository::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| delete_acr_repository::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(delete_acr_repository::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod delete_acr_repository {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_tags(
    operation_config: &crate::OperationConfig,
    name: &str,
    last: Option<&str>,
    n: Option<&str>,
    orderby: Option<&str>,
    digest: Option<&str>,
) -> std::result::Result<AcrRepositoryTags, get_acr_tags::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_tags", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(get_acr_tags::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_tags::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    if let Some(last) = last {
        url.query_pairs_mut().append_pair("last", last);
    }
    if let Some(n) = n {
        url.query_pairs_mut().append_pair("n", n);
    }
    if let Some(orderby) = orderby {
        url.query_pairs_mut().append_pair("orderby", orderby);
    }
    if let Some(digest) = digest {
        url.query_pairs_mut().append_pair("digest", digest);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_acr_tags::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_tags::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AcrRepositoryTags =
                serde_json::from_slice(rsp_body).map_err(|source| get_acr_tags::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_acr_tags::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| get_acr_tags::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_tags::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_tags {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_tag_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
) -> std::result::Result<AcrTagAttributes, get_acr_tag_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_tags/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(get_acr_tag_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_tag_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(get_acr_tag_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_tag_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AcrTagAttributes = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_tag_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_acr_tag_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_tag_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_tag_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_tag_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn update_acr_tag_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
    value: Option<&ChangeableAttributes>,
) -> std::result::Result<(), update_acr_tag_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_tags/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(update_acr_tag_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(update_acr_tag_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = if let Some(value) = value {
        req_builder = req_builder.header("content-type", "application/json");
        azure_core::to_json(value).map_err(update_acr_tag_attributes::Error::SerializeError)?
    } else {
        bytes::Bytes::from_static(azure_core::EMPTY_BODY)
    };
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(update_acr_tag_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(update_acr_tag_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::NO_CONTENT => Ok(()),
        http::StatusCode::NOT_FOUND => Err(update_acr_tag_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| update_acr_tag_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(update_acr_tag_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_acr_tag_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn delete_acr_tag(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
) -> std::result::Result<(), delete_acr_tag::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_tags/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(delete_acr_tag::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::DELETE);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(delete_acr_tag::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(delete_acr_tag::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(delete_acr_tag::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::NO_CONTENT => Ok(()),
        http::StatusCode::NOT_FOUND => Err(delete_acr_tag::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| delete_acr_tag::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(delete_acr_tag::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod delete_acr_tag {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_manifests(
    operation_config: &crate::OperationConfig,
    name: &str,
    last: Option<&str>,
    n: Option<&str>,
    orderby: Option<&str>,
) -> std::result::Result<AcrManifests, get_acr_manifests::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_manifests", operation_config.base_path(), name);
    let mut url = url::Url::parse(url_str).map_err(get_acr_manifests::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_manifests::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    if let Some(last) = last {
        url.query_pairs_mut().append_pair("last", last);
    }
    if let Some(n) = n {
        url.query_pairs_mut().append_pair("n", n);
    }
    if let Some(orderby) = orderby {
        url.query_pairs_mut().append_pair("orderby", orderby);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_acr_manifests::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_manifests::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AcrManifests =
                serde_json::from_slice(rsp_body).map_err(|source| get_acr_manifests::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_acr_manifests::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors =
                serde_json::from_slice(rsp_body).map_err(|source| get_acr_manifests::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_manifests::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_manifests {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn get_acr_manifest_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
) -> std::result::Result<AcrManifestAttributes, get_acr_manifest_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_manifests/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(get_acr_manifest_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_acr_manifest_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(get_acr_manifest_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_acr_manifest_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: AcrManifestAttributes = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_manifest_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::NOT_FOUND => Err(get_acr_manifest_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| get_acr_manifest_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(get_acr_manifest_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod get_acr_manifest_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
pub async fn update_acr_manifest_attributes(
    operation_config: &crate::OperationConfig,
    name: &str,
    reference: &str,
    value: Option<&ChangeableAttributes>,
) -> std::result::Result<(), update_acr_manifest_attributes::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/acr/v1/{}/_manifests/{}", operation_config.base_path(), name, reference);
    let mut url = url::Url::parse(url_str).map_err(update_acr_manifest_attributes::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::PATCH);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(update_acr_manifest_attributes::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    let req_body = if let Some(value) = value {
        req_builder = req_builder.header("content-type", "application/json");
        azure_core::to_json(value).map_err(update_acr_manifest_attributes::Error::SerializeError)?
    } else {
        bytes::Bytes::from_static(azure_core::EMPTY_BODY)
    };
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder
        .body(req_body)
        .map_err(update_acr_manifest_attributes::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(update_acr_manifest_attributes::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::NO_CONTENT => Ok(()),
        http::StatusCode::NOT_FOUND => Err(update_acr_manifest_attributes::Error::NotFound404 {}),
        status_code => {
            let rsp_body = rsp.body();
            let rsp_value: AcrErrors = serde_json::from_slice(rsp_body)
                .map_err(|source| update_acr_manifest_attributes::Error::DeserializeError(source, rsp_body.clone()))?;
            Err(update_acr_manifest_attributes::Error::DefaultResponse {
                status_code,
                value: rsp_value,
            })
        }
    }
}
pub mod update_acr_manifest_attributes {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        NotFound404 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse {
            status_code: http::StatusCode,
            value: models::AcrErrors,
        },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
