#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetastoreRegistrationResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<RequestStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetastoreUpdationResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<RequestStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetastoreRequestSuccessResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ResourceStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum ResourceStatus {
    Creating,
    Created,
    Failed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum RequestStatus {
    Running,
    Completed,
    Failed,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetastoreRegisterObject {
    #[serde(rename = "inputFolder")]
    pub input_folder: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetastoreUpdateObject {
    #[serde(rename = "inputFolder")]
    pub input_folder: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorContract {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<ErrorResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ErrorResponse>,
    #[serde(rename = "additionalInfo", default, skip_serializing_if = "Vec::is_empty")]
    pub additional_info: Vec<ErrorAdditionalInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorAdditionalInfo {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<serde_json::Value>,
}
