#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SparkJobListViewResponse {
    #[serde(rename = "nJobs", default, skip_serializing_if = "Option::is_none")]
    pub n_jobs: Option<i32>,
    #[serde(rename = "sparkJobs", default, skip_serializing_if = "Vec::is_empty")]
    pub spark_jobs: Vec<SparkJob>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SparkJob {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub submitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compute: Option<String>,
    #[serde(rename = "sparkApplicationId", default, skip_serializing_if = "Option::is_none")]
    pub spark_application_id: Option<String>,
    #[serde(rename = "livyId", default, skip_serializing_if = "Option::is_none")]
    pub livy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub timing: Vec<String>,
    #[serde(rename = "sparkJobDefinition", default, skip_serializing_if = "Option::is_none")]
    pub spark_job_definition: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub pipeline: Vec<SparkJob>,
    #[serde(rename = "jobType", default, skip_serializing_if = "Option::is_none")]
    pub job_type: Option<String>,
    #[serde(rename = "submitTime", default, skip_serializing_if = "Option::is_none")]
    pub submit_time: Option<String>,
    #[serde(rename = "endTime", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "queuedDuration", default, skip_serializing_if = "Option::is_none")]
    pub queued_duration: Option<String>,
    #[serde(rename = "runningDuration", default, skip_serializing_if = "Option::is_none")]
    pub running_duration: Option<String>,
    #[serde(rename = "totalDuration", default, skip_serializing_if = "Option::is_none")]
    pub total_duration: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlQueryStringDataModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
}
