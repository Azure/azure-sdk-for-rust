#![doc = "generated by AutoRust"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
#![allow(clippy::redundant_clone)]
use super::models;
#[derive(Clone)]
pub struct Client {
    endpoint: String,
    credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
    scopes: Vec<String>,
    pipeline: azure_core::Pipeline,
}
#[derive(Clone)]
pub struct ClientBuilder {
    credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
    endpoint: Option<String>,
    scopes: Option<Vec<String>>,
}
pub const DEFAULT_ENDPOINT: &str = azure_core::resource_manager_endpoint::AZURE_PUBLIC_CLOUD;
impl ClientBuilder {
    pub fn new(credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>) -> Self {
        Self {
            credential,
            endpoint: None,
            scopes: None,
        }
    }
    pub fn endpoint(mut self, endpoint: impl Into<String>) -> Self {
        self.endpoint = Some(endpoint.into());
        self
    }
    pub fn scopes(mut self, scopes: &[&str]) -> Self {
        self.scopes = Some(scopes.iter().map(|scope| (*scope).to_owned()).collect());
        self
    }
    pub fn build(self) -> Client {
        let endpoint = self.endpoint.unwrap_or_else(|| DEFAULT_ENDPOINT.to_owned());
        let scopes = self.scopes.unwrap_or_else(|| vec![format!("{}/", endpoint)]);
        Client::new(endpoint, self.credential, scopes)
    }
}
impl Client {
    pub(crate) fn endpoint(&self) -> &str {
        self.endpoint.as_str()
    }
    pub(crate) fn token_credential(&self) -> &dyn azure_core::auth::TokenCredential {
        self.credential.as_ref()
    }
    pub(crate) fn scopes(&self) -> Vec<&str> {
        self.scopes.iter().map(String::as_str).collect()
    }
    pub(crate) async fn send(&self, request: &mut azure_core::Request) -> azure_core::Result<azure_core::Response> {
        let mut context = azure_core::Context::default();
        self.pipeline.send(&mut context, request).await
    }
    pub fn new(
        endpoint: impl Into<String>,
        credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
        scopes: Vec<String>,
    ) -> Self {
        let endpoint = endpoint.into();
        let pipeline = azure_core::Pipeline::new(
            option_env!("CARGO_PKG_NAME"),
            option_env!("CARGO_PKG_VERSION"),
            azure_core::ClientOptions::default(),
            Vec::new(),
            Vec::new(),
        );
        Self {
            endpoint,
            credential,
            scopes,
            pipeline,
        }
    }
    pub fn health_api(&self) -> health_api::Client {
        health_api::Client(self.clone())
    }
    pub fn web_pub_sub(&self) -> web_pub_sub::Client {
        web_pub_sub::Client(self.clone())
    }
}
pub mod health_api {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get service health status."]
        pub fn get_service_status(&self) -> get_service_status::Builder {
            get_service_status::Builder { client: self.0.clone() }
        }
    }
    pub mod get_service_status {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!("{}/api/health", this.client.endpoint(),))?;
                        let mut req = azure_core::Request::new(url, http::Method::HEAD);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
}
pub mod web_pub_sub {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Broadcast content inside request body to all the connected client connections."]
        pub fn send_to_all(&self, hub: impl Into<String>, message: impl Into<String>) -> send_to_all::Builder {
            send_to_all::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                message: message.into(),
                excluded: Vec::new(),
            }
        }
        #[doc = "Close the client connection."]
        pub fn close_connection(&self, hub: impl Into<String>, connection_id: impl Into<String>) -> close_connection::Builder {
            close_connection::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                connection_id: connection_id.into(),
                reason: None,
            }
        }
        #[doc = "Check if the connection with the given connectionId exists."]
        pub fn connection_exists(&self, hub: impl Into<String>, connection_id: impl Into<String>) -> connection_exists::Builder {
            connection_exists::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                connection_id: connection_id.into(),
            }
        }
        #[doc = "Send content inside request body to the specific connection."]
        pub fn send_to_connection(
            &self,
            hub: impl Into<String>,
            connection_id: impl Into<String>,
            message: impl Into<String>,
        ) -> send_to_connection::Builder {
            send_to_connection::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                connection_id: connection_id.into(),
                message: message.into(),
            }
        }
        #[doc = "Check if there are any client connections inside the given group"]
        pub fn group_exists(&self, hub: impl Into<String>, group: impl Into<String>) -> group_exists::Builder {
            group_exists::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
            }
        }
        #[doc = "Send content inside request body to a group of connections."]
        pub fn send_to_group(
            &self,
            hub: impl Into<String>,
            group: impl Into<String>,
            message: impl Into<String>,
        ) -> send_to_group::Builder {
            send_to_group::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
                message: message.into(),
                excluded: Vec::new(),
            }
        }
        #[doc = "Add a connection to the target group."]
        pub fn add_connection_to_group(
            &self,
            hub: impl Into<String>,
            group: impl Into<String>,
            connection_id: impl Into<String>,
        ) -> add_connection_to_group::Builder {
            add_connection_to_group::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
                connection_id: connection_id.into(),
            }
        }
        #[doc = "Remove a connection from the target group."]
        pub fn remove_connection_from_group(
            &self,
            hub: impl Into<String>,
            group: impl Into<String>,
            connection_id: impl Into<String>,
        ) -> remove_connection_from_group::Builder {
            remove_connection_from_group::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
                connection_id: connection_id.into(),
            }
        }
        #[doc = "Check if there are any client connections connected for the given user."]
        pub fn user_exists(&self, hub: impl Into<String>, user_id: impl Into<String>) -> user_exists::Builder {
            user_exists::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                user_id: user_id.into(),
            }
        }
        #[doc = "Send content inside request body to the specific user."]
        pub fn send_to_user(
            &self,
            hub: impl Into<String>,
            user_id: impl Into<String>,
            message: impl Into<String>,
        ) -> send_to_user::Builder {
            send_to_user::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                user_id: user_id.into(),
                message: message.into(),
            }
        }
        #[doc = "Add a user to the target group."]
        pub fn add_user_to_group(
            &self,
            hub: impl Into<String>,
            group: impl Into<String>,
            user_id: impl Into<String>,
        ) -> add_user_to_group::Builder {
            add_user_to_group::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
                user_id: user_id.into(),
            }
        }
        #[doc = "Remove a user from the target group."]
        pub fn remove_user_from_group(
            &self,
            hub: impl Into<String>,
            group: impl Into<String>,
            user_id: impl Into<String>,
        ) -> remove_user_from_group::Builder {
            remove_user_from_group::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                group: group.into(),
                user_id: user_id.into(),
            }
        }
        #[doc = "Remove a user from all groups."]
        pub fn remove_user_from_all_groups(
            &self,
            hub: impl Into<String>,
            user_id: impl Into<String>,
        ) -> remove_user_from_all_groups::Builder {
            remove_user_from_all_groups::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                user_id: user_id.into(),
            }
        }
        #[doc = "Grant permission to the connection."]
        pub fn grant_permission(
            &self,
            hub: impl Into<String>,
            permission: impl Into<String>,
            connection_id: impl Into<String>,
        ) -> grant_permission::Builder {
            grant_permission::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                permission: permission.into(),
                connection_id: connection_id.into(),
                target_name: None,
            }
        }
        #[doc = "Revoke permission for the connection."]
        pub fn revoke_permission(
            &self,
            hub: impl Into<String>,
            permission: impl Into<String>,
            connection_id: impl Into<String>,
        ) -> revoke_permission::Builder {
            revoke_permission::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                permission: permission.into(),
                connection_id: connection_id.into(),
                target_name: None,
            }
        }
        #[doc = "Check if a connection has permission to the specified action."]
        pub fn check_permission(
            &self,
            hub: impl Into<String>,
            permission: impl Into<String>,
            connection_id: impl Into<String>,
        ) -> check_permission::Builder {
            check_permission::Builder {
                client: self.0.clone(),
                hub: hub.into(),
                permission: permission.into(),
                connection_id: connection_id.into(),
                target_name: None,
            }
        }
    }
    pub mod send_to_all {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) message: String,
            pub(crate) excluded: Vec<String>,
        }
        impl Builder {
            pub fn excluded(mut self, excluded: Vec<String>) -> Self {
                self.excluded = excluded;
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!("{}/api/hubs/{}/:send", this.client.endpoint(), &this.hub))?;
                        let mut req = azure_core::Request::new(url, http::Method::POST);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let excluded = &this.excluded;
                        for value in &this.excluded {
                            req.url_mut().query_pairs_mut().append_pair("excluded", value);
                        }
                        req.insert_header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.message)?;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::ACCEPTED => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod close_connection {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) connection_id: String,
            pub(crate) reason: Option<String>,
        }
        impl Builder {
            pub fn reason(mut self, reason: impl Into<String>) -> Self {
                self.reason = Some(reason.into());
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::DELETE);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        if let Some(reason) = &this.reason {
                            req.url_mut().query_pairs_mut().append_pair("reason", reason);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod connection_exists {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) connection_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::HEAD);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod send_to_connection {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) connection_id: String,
            pub(crate) message: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/connections/{}/:send",
                            this.client.endpoint(),
                            &this.hub,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::POST);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        req.insert_header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.message)?;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::ACCEPTED => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod group_exists {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url =
                            azure_core::Url::parse(&format!("{}/api/hubs/{}/groups/{}", this.client.endpoint(), &this.hub, &this.group))?;
                        let mut req = azure_core::Request::new(url, http::Method::HEAD);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod send_to_group {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
            pub(crate) message: String,
            pub(crate) excluded: Vec<String>,
        }
        impl Builder {
            pub fn excluded(mut self, excluded: Vec<String>) -> Self {
                self.excluded = excluded;
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/groups/{}/:send",
                            this.client.endpoint(),
                            &this.hub,
                            &this.group
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::POST);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let excluded = &this.excluded;
                        for value in &this.excluded {
                            req.url_mut().query_pairs_mut().append_pair("excluded", value);
                        }
                        req.insert_header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.message)?;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::ACCEPTED => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod add_connection_to_group {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
            pub(crate) connection_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/groups/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.group,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::PUT);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod remove_connection_from_group {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
            pub(crate) connection_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/groups/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.group,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::DELETE);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod user_exists {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) user_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/users/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.user_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::HEAD);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod send_to_user {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) user_id: String,
            pub(crate) message: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/users/{}/:send",
                            this.client.endpoint(),
                            &this.hub,
                            &this.user_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::POST);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        req.insert_header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.message)?;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::ACCEPTED => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod add_user_to_group {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
            pub(crate) user_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/users/{}/groups/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.user_id,
                            &this.group
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::PUT);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod remove_user_from_group {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) group: String,
            pub(crate) user_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/users/{}/groups/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.user_id,
                            &this.group
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::DELETE);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod remove_user_from_all_groups {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) user_id: String,
        }
        impl Builder {
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/users/{}/groups",
                            this.client.endpoint(),
                            &this.hub,
                            &this.user_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::DELETE);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod grant_permission {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) permission: String,
            pub(crate) connection_id: String,
            pub(crate) target_name: Option<String>,
        }
        impl Builder {
            pub fn target_name(mut self, target_name: impl Into<String>) -> Self {
                self.target_name = Some(target_name.into());
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/permissions/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.permission,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::PUT);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        if let Some(target_name) = &this.target_name {
                            req.url_mut().query_pairs_mut().append_pair("targetName", target_name);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod revoke_permission {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) permission: String,
            pub(crate) connection_id: String,
            pub(crate) target_name: Option<String>,
        }
        impl Builder {
            pub fn target_name(mut self, target_name: impl Into<String>) -> Self {
                self.target_name = Some(target_name.into());
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/permissions/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.permission,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::DELETE);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        if let Some(target_name) = &this.target_name {
                            req.url_mut().query_pairs_mut().append_pair("targetName", target_name);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
    pub mod check_permission {
        use super::models;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) hub: String,
            pub(crate) permission: String,
            pub(crate) connection_id: String,
            pub(crate) target_name: Option<String>,
        }
        impl Builder {
            pub fn target_name(mut self, target_name: impl Into<String>) -> Self {
                self.target_name = Some(target_name.into());
                self
            }
            pub fn into_future(self) -> futures::future::BoxFuture<'static, azure_core::Result<Response>> {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url = azure_core::Url::parse(&format!(
                            "{}/api/hubs/{}/permissions/{}/connections/{}",
                            this.client.endpoint(),
                            &this.hub,
                            &this.permission,
                            &this.connection_id
                        ))?;
                        let mut req = azure_core::Request::new(url, http::Method::HEAD);
                        let credential = this.client.token_credential();
                        let token_response = credential.get_token(&this.client.scopes().join(" ")).await?;
                        req.insert_header(
                            azure_core::headers::AUTHORIZATION,
                            format!("Bearer {}", token_response.token.secret()),
                        );
                        req.url_mut()
                            .query_pairs_mut()
                            .append_pair(azure_core::query_param::API_VERSION, "2021-05-01-preview");
                        if let Some(target_name) = &this.target_name {
                            req.url_mut().query_pairs_mut().append_pair("targetName", target_name);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req.set_body(req_body);
                        let rsp = this.client.send(&mut req).await?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(azure_core::error::ErrorKind::HttpResponse {
                                status: status_code.as_u16(),
                                error_code: None,
                            })),
                        }
                    }
                })
            }
        }
    }
}
