#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use super::{models, models::*, API_VERSION};
pub mod instances {
    use super::{models, models::*, API_VERSION};
    pub async fn get_metadata(
        operation_config: &crate::OperationConfig,
        metadata: &str,
    ) -> std::result::Result<Instance, get_metadata::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/instance", operation_config.base_path(),);
        let mut url = url::Url::parse(url_str).map_err(get_metadata::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_metadata::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("Metadata", metadata);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_metadata::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_metadata::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: Instance =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::FORBIDDEN => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::Forbidden403 { value: rsp_value })
            }
            http::StatusCode::NOT_FOUND => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::NotFound404 { value: rsp_value })
            }
            http::StatusCode::METHOD_NOT_ALLOWED => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::MethodNotAllowed405 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::TooManyRequests429 { value: rsp_value })
            }
            http::StatusCode::SERVICE_UNAVAILABLE => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::ServiceUnavailable503 { value: rsp_value })
            }
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_metadata::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_metadata::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_metadata {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            Forbidden403 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            NotFound404 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            MethodNotAllowed405 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            ServiceUnavailable503 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::ErrorResponse,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
}
pub mod attested {
    use super::{models, models::*, API_VERSION};
    pub async fn get_document(
        operation_config: &crate::OperationConfig,
        nonce: Option<&str>,
        metadata: &str,
    ) -> std::result::Result<AttestedData, get_document::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/attested/document", operation_config.base_path(),);
        let mut url = url::Url::parse(url_str).map_err(get_document::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_document::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        if let Some(nonce) = nonce {
            url.query_pairs_mut().append_pair("nonce", nonce);
        }
        req_builder = req_builder.header("Metadata", metadata);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_document::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_document::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: AttestedData =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::FORBIDDEN => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::Forbidden403 { value: rsp_value })
            }
            http::StatusCode::NOT_FOUND => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::NotFound404 { value: rsp_value })
            }
            http::StatusCode::METHOD_NOT_ALLOWED => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::MethodNotAllowed405 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::TooManyRequests429 { value: rsp_value })
            }
            http::StatusCode::SERVICE_UNAVAILABLE => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::ServiceUnavailable503 { value: rsp_value })
            }
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_document::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_document::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_document {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            Forbidden403 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            NotFound404 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            MethodNotAllowed405 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            ServiceUnavailable503 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::ErrorResponse,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
}
pub mod identity {
    use super::{models, models::*, API_VERSION};
    pub async fn get_token(
        operation_config: &crate::OperationConfig,
        metadata: &str,
        resource: &str,
        client_id: Option<&str>,
        object_id: Option<&str>,
        msi_res_id: Option<&str>,
        authority: Option<&str>,
        bypass_cache: Option<&str>,
    ) -> std::result::Result<IdentityTokenResponse, get_token::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/identity/oauth2/token", operation_config.base_path(),);
        let mut url = url::Url::parse(url_str).map_err(get_token::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_token::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("Metadata", metadata);
        url.query_pairs_mut().append_pair("resource", resource);
        if let Some(client_id) = client_id {
            url.query_pairs_mut().append_pair("client_id", client_id);
        }
        if let Some(object_id) = object_id {
            url.query_pairs_mut().append_pair("object_id", object_id);
        }
        if let Some(msi_res_id) = msi_res_id {
            url.query_pairs_mut().append_pair("msi_res_id", msi_res_id);
        }
        if let Some(authority) = authority {
            url.query_pairs_mut().append_pair("authority", authority);
        }
        if let Some(bypass_cache) = bypass_cache {
            url.query_pairs_mut().append_pair("bypass_cache", bypass_cache);
        }
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_token::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_token::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityTokenResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::NOT_FOUND => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::NotFound404 { value: rsp_value })
            }
            http::StatusCode::METHOD_NOT_ALLOWED => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::MethodNotAllowed405 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::TooManyRequests429 { value: rsp_value })
            }
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_token::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_token {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            NotFound404 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            MethodNotAllowed405 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::IdentityErrorResponse },
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::IdentityErrorResponse,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn get_info(
        operation_config: &crate::OperationConfig,
        metadata: &str,
    ) -> std::result::Result<IdentityInfoResponse, get_info::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/identity/info", operation_config.base_path(),);
        let mut url = url::Url::parse(url_str).map_err(get_info::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_info::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("Metadata", metadata);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_info::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_info::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityInfoResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::NOT_FOUND => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::NotFound404 { value: rsp_value })
            }
            http::StatusCode::METHOD_NOT_ALLOWED => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::MethodNotAllowed405 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::TooManyRequests429 { value: rsp_value })
            }
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: IdentityErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_info::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_info::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod get_info {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            NotFound404 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            MethodNotAllowed405 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 { value: models::IdentityErrorResponse },
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::IdentityErrorResponse },
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::IdentityErrorResponse,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
}
