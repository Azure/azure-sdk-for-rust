#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttributeMatcher {
    #[serde(rename = "attributeName", default, skip_serializing_if = "Option::is_none")]
    pub attribute_name: Option<String>,
    #[serde(rename = "attributeValueIncludes", default, skip_serializing_if = "Option::is_none")]
    pub attribute_value_includes: Option<String>,
    #[serde(rename = "attributeValueIncludedIn", default, skip_serializing_if = "Vec::is_empty")]
    pub attribute_value_included_in: Vec<String>,
    #[serde(rename = "attributeValueExcludes", default, skip_serializing_if = "Option::is_none")]
    pub attribute_value_excludes: Option<String>,
    #[serde(rename = "attributeValueExcludedIn", default, skip_serializing_if = "Vec::is_empty")]
    pub attribute_value_excluded_in: Vec<String>,
}
pub type DnfCondition = Vec<Vec<AttributeMatcher>>;
pub type CnfCondition = Vec<Vec<AttributeMatcher>>;
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DecisionRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<decision_rule::Kind>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<decision_rule::Effect>,
    #[serde(rename = "dnfCondition", default, skip_serializing_if = "Option::is_none")]
    pub dnf_condition: Option<DnfCondition>,
}
pub mod decision_rule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "decisionrule")]
        Decisionrule,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Effect {
        Deny,
        Permit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttributeRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<attribute_rule::Kind>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "dnfCondition", default, skip_serializing_if = "Option::is_none")]
    pub dnf_condition: Option<DnfCondition>,
}
pub mod attribute_rule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Kind {
        #[serde(rename = "attributerule")]
        Attributerule,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CollectionReference {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(rename = "referenceName", default, skip_serializing_if = "Option::is_none")]
    pub reference_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataPolicyProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "decisionRules", default, skip_serializing_if = "Vec::is_empty")]
    pub decision_rules: Vec<DecisionRule>,
    #[serde(rename = "attributeRules", default, skip_serializing_if = "Vec::is_empty")]
    pub attribute_rules: Vec<AttributeRule>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<CollectionReference>,
    #[serde(rename = "parentCollectionName", default, skip_serializing_if = "Option::is_none")]
    pub parent_collection_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<MetadataPolicyProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorModel {
    pub code: String,
    pub message: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<ErrorModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponseModel {
    pub error: ErrorModel,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataPolicyList {
    pub values: Vec<MetadataPolicy>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataRoleProperties {
    #[serde(rename = "provisioningState", default, skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<String>,
    #[serde(rename = "roleType", default, skip_serializing_if = "Option::is_none")]
    pub role_type: Option<String>,
    #[serde(rename = "friendlyName", default, skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "cnfCondition", default, skip_serializing_if = "Option::is_none")]
    pub cnf_condition: Option<CnfCondition>,
    #[serde(rename = "dnfCondition", default, skip_serializing_if = "Option::is_none")]
    pub dnf_condition: Option<DnfCondition>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataRole {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<MetadataRoleProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataRoleList {
    pub values: Vec<MetadataRole>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
}
