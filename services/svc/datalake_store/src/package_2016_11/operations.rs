#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use crate::models::*;
pub mod file_system {
    use crate::models::*;
    pub async fn concurrent_append(
        operation_config: &crate::OperationConfig,
        path: &str,
        stream_contents: &serde_json::Value,
        append_mode: Option<&str>,
        op: &str,
        transfer_encoding: &str,
        sync_flag: Option<&str>,
    ) -> std::result::Result<(), concurrent_append::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/WebHdfsExt/{}", operation_config.base_path(), path);
        let mut url = url::Url::parse(url_str).map_err(concurrent_append::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(concurrent_append::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        req_builder = req_builder.header("content-type", "application/json");
        let req_body = azure_core::to_json(stream_contents).map_err(concurrent_append::Error::SerializeError)?;
        if let Some(append_mode) = append_mode {
            url.query_pairs_mut().append_pair("appendMode", append_mode);
        }
        url.query_pairs_mut().append_pair("op", op);
        req_builder = req_builder.header("Transfer-Encoding", transfer_encoding);
        if let Some(sync_flag) = sync_flag {
            url.query_pairs_mut().append_pair("syncFlag", sync_flag);
        }
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(concurrent_append::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(concurrent_append::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(()),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: AdlsError = serde_json::from_slice(rsp_body)
                    .map_err(|source| concurrent_append::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(concurrent_append::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod concurrent_append {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::AdlsError,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn set_file_expiry(
        operation_config: &crate::OperationConfig,
        path: &str,
        expiry_option: &str,
        expire_time: Option<i64>,
        op: &str,
    ) -> std::result::Result<(), set_file_expiry::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/WebHdfsExt/{}", operation_config.base_path(), path);
        let mut url = url::Url::parse(url_str).map_err(set_file_expiry::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(set_file_expiry::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        url.query_pairs_mut().append_pair("expiryOption", expiry_option);
        if let Some(expire_time) = expire_time {
            url.query_pairs_mut().append_pair("expireTime", expire_time.to_string().as_str());
        }
        url.query_pairs_mut().append_pair("op", op);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(set_file_expiry::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(set_file_expiry::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(()),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: AdlsError = serde_json::from_slice(rsp_body)
                    .map_err(|source| set_file_expiry::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(set_file_expiry::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod set_file_expiry {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::AdlsError,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn check_access(
        operation_config: &crate::OperationConfig,
        path: &str,
        fsaction: &str,
        op: &str,
    ) -> std::result::Result<(), check_access::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/webhdfs/v1/{}", operation_config.base_path(), path);
        let mut url = url::Url::parse(url_str).map_err(check_access::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(check_access::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", operation_config.api_version());
        url.query_pairs_mut().append_pair("fsaction", fsaction);
        url.query_pairs_mut().append_pair("op", op);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(check_access::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(check_access::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => Ok(()),
            status_code => {
                let rsp_body = rsp.body();
                let rsp_value: AdlsError =
                    serde_json::from_slice(rsp_body).map_err(|source| check_access::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(check_access::Error::DefaultResponse {
                    status_code,
                    value: rsp_value,
                })
            }
        }
    }
    pub mod check_access {
        use crate::{models, models::*};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("HTTP status code {}", status_code)]
            DefaultResponse {
                status_code: http::StatusCode,
                value: models::AdlsError,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
}
