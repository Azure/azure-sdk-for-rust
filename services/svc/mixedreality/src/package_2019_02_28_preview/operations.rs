#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use super::{models, models::*, API_VERSION};
pub async fn get_token(
    operation_config: &crate::OperationConfig,
    account_id: &str,
    x_mrc_cv: Option<&str>,
) -> std::result::Result<StsTokenResponseMessage, get_token::Error> {
    let http_client = operation_config.http_client();
    let url_str = &format!("{}/Accounts/{}/token", operation_config.base_path(), account_id);
    let mut url = url::Url::parse(url_str).map_err(get_token::Error::ParseUrlError)?;
    let mut req_builder = http::request::Builder::new();
    req_builder = req_builder.method(http::Method::GET);
    if let Some(token_credential) = operation_config.token_credential() {
        let token_response = token_credential
            .get_token(operation_config.token_credential_resource())
            .await
            .map_err(get_token::Error::GetTokenError)?;
        req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
    }
    url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
    if let Some(x_mrc_cv) = x_mrc_cv {
        req_builder = req_builder.header("X-MRC-CV", x_mrc_cv);
    }
    let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
    req_builder = req_builder.uri(url.as_str());
    let req = req_builder.body(req_body).map_err(get_token::Error::BuildRequestError)?;
    let rsp = http_client
        .execute_request(req)
        .await
        .map_err(get_token::Error::ExecuteRequestError)?;
    match rsp.status() {
        http::StatusCode::OK => {
            let rsp_body = rsp.body();
            let rsp_value: StsTokenResponseMessage =
                serde_json::from_slice(rsp_body).map_err(|source| get_token::Error::DeserializeError(source, rsp_body.clone()))?;
            Ok(rsp_value)
        }
        http::StatusCode::BAD_REQUEST => Err(get_token::Error::BadRequest400 {}),
        http::StatusCode::UNAUTHORIZED => Err(get_token::Error::Unauthorized401 {}),
        http::StatusCode::TOO_MANY_REQUESTS => Err(get_token::Error::TooManyRequests429 {}),
        status_code => Err(get_token::Error::DefaultResponse { status_code }),
    }
}
pub mod get_token {
    use super::{models, models::*, API_VERSION};
    #[derive(Debug, thiserror :: Error)]
    pub enum Error {
        #[error("Error response #response_type")]
        BadRequest400 {},
        #[error("Error response #response_type")]
        Unauthorized401 {},
        #[error("Error response #response_type")]
        TooManyRequests429 {},
        #[error("HTTP status code {}", status_code)]
        DefaultResponse { status_code: http::StatusCode },
        #[error("Failed to parse request URL: {0}")]
        ParseUrlError(url::ParseError),
        #[error("Failed to build request: {0}")]
        BuildRequestError(http::Error),
        #[error("Failed to execute request: {0}")]
        ExecuteRequestError(azure_core::HttpError),
        #[error("Failed to serialize request body: {0}")]
        SerializeError(serde_json::Error),
        #[error("Failed to deserialize response: {0}, body: {1:?}")]
        DeserializeError(serde_json::Error, bytes::Bytes),
        #[error("Failed to get access token: {0}")]
        GetTokenError(azure_core::Error),
    }
}
