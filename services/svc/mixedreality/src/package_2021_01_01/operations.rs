#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use super::{models, models::*, API_VERSION};
pub mod remote_rendering {
    use super::{models, models::*, API_VERSION};
    pub async fn get_conversion(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        conversion_id: &str,
    ) -> std::result::Result<Conversion, get_conversion::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/accounts/{}/conversions/{}",
            operation_config.base_path(),
            account_id,
            conversion_id
        );
        let mut url = url::Url::parse(url_str).map_err(get_conversion::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_conversion::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_conversion::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_conversion::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: Conversion =
                    serde_json::from_slice(rsp_body).map_err(|source| get_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::UNAUTHORIZED => Err(get_conversion::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(get_conversion::Error::Forbidden403 {}),
            http::StatusCode::NOT_FOUND => Err(get_conversion::Error::NotFound404 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(get_conversion::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_conversion::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(get_conversion::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod get_conversion {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            NotFound404 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn create_conversion(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        conversion_id: &str,
        body: &CreateConversionSettings,
    ) -> std::result::Result<create_conversion::Response, create_conversion::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/accounts/{}/conversions/{}",
            operation_config.base_path(),
            account_id,
            conversion_id
        );
        let mut url = url::Url::parse(url_str).map_err(create_conversion::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(create_conversion::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("content-type", "application/json");
        let req_body = azure_core::to_json(body).map_err(create_conversion::Error::SerializeError)?;
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(create_conversion::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(create_conversion::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: Conversion = serde_json::from_slice(rsp_body)
                    .map_err(|source| create_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(create_conversion::Response::Ok200(rsp_value))
            }
            http::StatusCode::CREATED => {
                let rsp_body = rsp.body();
                let rsp_value: Conversion = serde_json::from_slice(rsp_body)
                    .map_err(|source| create_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(create_conversion::Response::Created201(rsp_value))
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body)
                    .map_err(|source| create_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_conversion::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::UNAUTHORIZED => Err(create_conversion::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(create_conversion::Error::Forbidden403 {}),
            http::StatusCode::CONFLICT => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body)
                    .map_err(|source| create_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_conversion::Error::Conflict409 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => Err(create_conversion::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body)
                    .map_err(|source| create_conversion::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_conversion::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(create_conversion::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod create_conversion {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug)]
        pub enum Response {
            Ok200(Conversion),
            Created201(Conversion),
        }
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            Conflict409 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn list_conversions(
        operation_config: &crate::OperationConfig,
        account_id: &str,
    ) -> std::result::Result<ConversionList, list_conversions::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/accounts/{}/conversions", operation_config.base_path(), account_id);
        let mut url = url::Url::parse(url_str).map_err(list_conversions::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(list_conversions::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(list_conversions::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(list_conversions::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: ConversionList = serde_json::from_slice(rsp_body)
                    .map_err(|source| list_conversions::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::UNAUTHORIZED => Err(list_conversions::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(list_conversions::Error::Forbidden403 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(list_conversions::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse = serde_json::from_slice(rsp_body)
                    .map_err(|source| list_conversions::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(list_conversions::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(list_conversions::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod list_conversions {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn get_session(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        session_id: &str,
    ) -> std::result::Result<SessionProperties, get_session::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/accounts/{}/sessions/{}", operation_config.base_path(), account_id, session_id);
        let mut url = url::Url::parse(url_str).map_err(get_session::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(get_session::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(get_session::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(get_session::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SessionProperties =
                    serde_json::from_slice(rsp_body).map_err(|source| get_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::UNAUTHORIZED => Err(get_session::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(get_session::Error::Forbidden403 {}),
            http::StatusCode::NOT_FOUND => Err(get_session::Error::NotFound404 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(get_session::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| get_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(get_session::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(get_session::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod get_session {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            NotFound404 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn create_session(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        session_id: &str,
        body: &CreateSessionSettings,
    ) -> std::result::Result<create_session::Response, create_session::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/accounts/{}/sessions/{}", operation_config.base_path(), account_id, session_id);
        let mut url = url::Url::parse(url_str).map_err(create_session::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PUT);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(create_session::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("content-type", "application/json");
        let req_body = azure_core::to_json(body).map_err(create_session::Error::SerializeError)?;
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(create_session::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(create_session::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SessionProperties =
                    serde_json::from_slice(rsp_body).map_err(|source| create_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(create_session::Response::Ok200(rsp_value))
            }
            http::StatusCode::CREATED => {
                let rsp_body = rsp.body();
                let rsp_value: SessionProperties =
                    serde_json::from_slice(rsp_body).map_err(|source| create_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(create_session::Response::Created201(rsp_value))
            }
            http::StatusCode::BAD_REQUEST => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| create_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_session::Error::BadRequest400 { value: rsp_value })
            }
            http::StatusCode::UNAUTHORIZED => Err(create_session::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(create_session::Error::Forbidden403 {}),
            http::StatusCode::CONFLICT => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| create_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_session::Error::Conflict409 { value: rsp_value })
            }
            http::StatusCode::TOO_MANY_REQUESTS => Err(create_session::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| create_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(create_session::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(create_session::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod create_session {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug)]
        pub enum Response {
            Ok200(SessionProperties),
            Created201(SessionProperties),
        }
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            BadRequest400 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            Conflict409 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn update_session(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        session_id: &str,
        body: &UpdateSessionSettings,
    ) -> std::result::Result<SessionProperties, update_session::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/accounts/{}/sessions/{}", operation_config.base_path(), account_id, session_id);
        let mut url = url::Url::parse(url_str).map_err(update_session::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::PATCH);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(update_session::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        req_builder = req_builder.header("content-type", "application/json");
        let req_body = azure_core::to_json(body).map_err(update_session::Error::SerializeError)?;
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(update_session::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(update_session::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SessionProperties =
                    serde_json::from_slice(rsp_body).map_err(|source| update_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::UNAUTHORIZED => Err(update_session::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(update_session::Error::Forbidden403 {}),
            http::StatusCode::NOT_FOUND => Err(update_session::Error::NotFound404 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(update_session::Error::TooManyRequests429 {}),
            http::StatusCode::UNPROCESSABLE_ENTITY => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| update_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(update_session::Error::UnprocessableEntity422 { value: rsp_value })
            }
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| update_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(update_session::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(update_session::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod update_session {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            NotFound404 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            UnprocessableEntity422 { value: models::ErrorResponse },
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn stop_session(
        operation_config: &crate::OperationConfig,
        account_id: &str,
        session_id: &str,
    ) -> std::result::Result<(), stop_session::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!(
            "{}/accounts/{}/sessions/{}/:stop",
            operation_config.base_path(),
            account_id,
            session_id
        );
        let mut url = url::Url::parse(url_str).map_err(stop_session::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::POST);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(stop_session::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(stop_session::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(stop_session::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::NO_CONTENT => Ok(()),
            http::StatusCode::UNAUTHORIZED => Err(stop_session::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(stop_session::Error::Forbidden403 {}),
            http::StatusCode::NOT_FOUND => Err(stop_session::Error::NotFound404 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(stop_session::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| stop_session::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(stop_session::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(stop_session::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod stop_session {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            NotFound404 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
    pub async fn list_sessions(
        operation_config: &crate::OperationConfig,
        account_id: &str,
    ) -> std::result::Result<SessionsList, list_sessions::Error> {
        let http_client = operation_config.http_client();
        let url_str = &format!("{}/accounts/{}/sessions", operation_config.base_path(), account_id);
        let mut url = url::Url::parse(url_str).map_err(list_sessions::Error::ParseUrlError)?;
        let mut req_builder = http::request::Builder::new();
        req_builder = req_builder.method(http::Method::GET);
        if let Some(token_credential) = operation_config.token_credential() {
            let token_response = token_credential
                .get_token(operation_config.token_credential_resource())
                .await
                .map_err(list_sessions::Error::GetTokenError)?;
            req_builder = req_builder.header(http::header::AUTHORIZATION, format!("Bearer {}", token_response.token.secret()));
        }
        url.query_pairs_mut().append_pair("api-version", super::API_VERSION);
        let req_body = bytes::Bytes::from_static(azure_core::EMPTY_BODY);
        req_builder = req_builder.uri(url.as_str());
        let req = req_builder.body(req_body).map_err(list_sessions::Error::BuildRequestError)?;
        let rsp = http_client
            .execute_request(req)
            .await
            .map_err(list_sessions::Error::ExecuteRequestError)?;
        match rsp.status() {
            http::StatusCode::OK => {
                let rsp_body = rsp.body();
                let rsp_value: SessionsList =
                    serde_json::from_slice(rsp_body).map_err(|source| list_sessions::Error::DeserializeError(source, rsp_body.clone()))?;
                Ok(rsp_value)
            }
            http::StatusCode::UNAUTHORIZED => Err(list_sessions::Error::Unauthorized401 {}),
            http::StatusCode::FORBIDDEN => Err(list_sessions::Error::Forbidden403 {}),
            http::StatusCode::TOO_MANY_REQUESTS => Err(list_sessions::Error::TooManyRequests429 {}),
            http::StatusCode::INTERNAL_SERVER_ERROR => {
                let rsp_body = rsp.body();
                let rsp_value: ErrorResponse =
                    serde_json::from_slice(rsp_body).map_err(|source| list_sessions::Error::DeserializeError(source, rsp_body.clone()))?;
                Err(list_sessions::Error::InternalServerError500 { value: rsp_value })
            }
            status_code => {
                let rsp_body = rsp.body();
                Err(list_sessions::Error::UnexpectedResponse {
                    status_code,
                    body: rsp_body.clone(),
                })
            }
        }
    }
    pub mod list_sessions {
        use super::{models, models::*, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Error response #response_type")]
            Unauthorized401 {},
            #[error("Error response #response_type")]
            Forbidden403 {},
            #[error("Error response #response_type")]
            TooManyRequests429 {},
            #[error("Error response #response_type")]
            InternalServerError500 { value: models::ErrorResponse },
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse { status_code: http::StatusCode, body: bytes::Bytes },
            #[error("Failed to parse request URL: {0}")]
            ParseUrlError(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequestError(http::Error),
            #[error("Failed to execute request: {0}")]
            ExecuteRequestError(azure_core::HttpError),
            #[error("Failed to serialize request body: {0}")]
            SerializeError(serde_json::Error),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            DeserializeError(serde_json::Error, bytes::Bytes),
            #[error("Failed to get access token: {0}")]
            GetTokenError(azure_core::Error),
        }
    }
}
