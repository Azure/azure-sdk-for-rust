use crate::config_parser::Tag;
use std::{
    fs::File,
    io::{prelude::*, LineWriter},
    path::Path,
};

pub type Result<T, E = Error> = std::result::Result<T, E>;
#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("IoError")]
    IoError { source: std::io::Error },
}

pub fn create(crate_name: &str, tags: &[&Tag], default_tag: Option<&str>, path: &Path) -> Result<()> {
    let file = File::create(path).map_err(|source| Error::IoError { source })?;
    let mut file = LineWriter::new(file);
    let default = get_default_feature(tags, default_tag);

    // https://docs.rs/about/metadata
    let docs_rs_features = docs_rs_features(tags, default_tag);
    let docs_rs_features: Vec<_> = docs_rs_features.iter().map(|s| format!("\"{}\"", s)).collect();
    let docs_rs_features = docs_rs_features.join(", ");

    file.write_all(
        format!(
            r#"# generated by AutoRust
[package]
name = "{}"
version = "0.2.0"
edition = "2018"
license = "MIT"
description = "generated REST API bindings"

[dependencies]
azure_core = {{ path = "../../../sdk/core", version = "0.1", default-features = false }}
serde = {{ version = "1.0", features = ["derive"] }}
serde_json = "1.0"
bytes = "1.0"
thiserror = "1.0"
http = "0.2"
url = "2.2"
futures = "0.3"

[dev-dependencies]
azure_identity = {{ path = "../../../sdk/identity", version = "0.1" }}
tokio = {{ version = "1.0", features = ["macros"] }}

[package.metadata.docs.rs]
features = [{}]

[features]
default = ["{}", "enable_reqwest"]
enable_reqwest = ["azure_core/enable_reqwest"]
enable_reqwest_rustls = ["azure_core/enable_reqwest_rustls"]
no-default-version = []
"#,
            crate_name, docs_rs_features, default
        )
        .as_bytes(),
    )
    .map_err(|source| Error::IoError { source })?;

    for tag in tags {
        file.write_all(format!("\"{}\" = []\n", tag.rust_feature_name()).as_bytes())
            .map_err(|source| Error::IoError { source })?;
    }
    Ok(())
}

fn get_default_feature(tags: &[&Tag], default_tag: Option<&str>) -> String {
    if let Some(default_tag) = default_tag {
        if let Some(tag) = tags.iter().find(|tag| tag.name() == default_tag) {
            return tag.rust_feature_name();
        }
    }
    let feature = tags
        .iter()
        .map(|tag| tag.rust_feature_name())
        .find(|feature| !feature.contains("preview"));
    match feature {
        Some(feature) => feature,
        None => tags[0].rust_feature_name(),
    }
}

const MAX_DOCS_RS_FEATURES: usize = 5;

pub fn docs_rs_features(tags: &[&Tag], default_tag: Option<&str>) -> Vec<String> {
    let mut default_feature = None;
    let mut features = Vec::new();
    for tag in tags {
        if Some(tag.name()) == default_tag {
            default_feature = Some(tag.rust_feature_name());
        } else {
            features.push(tag.rust_feature_name());
        }
    }
    if let Some(default_feature) = default_feature {
        features.insert(0, default_feature);
    }
    features.truncate(MAX_DOCS_RS_FEATURES);
    features
}
